
balancing_std.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000167b4  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000650  08016968  08016968  00026968  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08016fb8  08016fb8  00030218  2**0
                  CONTENTS
  4 .ARM          00000008  08016fb8  08016fb8  00026fb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08016fc0  08016fc0  00030218  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08016fc0  08016fc0  00026fc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08016fc4  08016fc4  00026fc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000218  20000000  08016fc8  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00007a6c  20000218  080171e0  00030218  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20007c84  080171e0  00037c84  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030218  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00030248  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002fc1c  00000000  00000000  0003028b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00008638  00000000  00000000  0005fea7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002498  00000000  00000000  000684e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001bcb  00000000  00000000  0006a978  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00031420  00000000  00000000  0006c543  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00039f4d  00000000  00000000  0009d963  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ef018  00000000  00000000  000d78b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00009aa4  00000000  00000000  001c68c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  001d036c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000218 	.word	0x20000218
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0801694c 	.word	0x0801694c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000021c 	.word	0x2000021c
 80001ec:	0801694c 	.word	0x0801694c

080001f0 <__aeabi_drsub>:
 80001f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001f4:	e002      	b.n	80001fc <__adddf3>
 80001f6:	bf00      	nop

080001f8 <__aeabi_dsub>:
 80001f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001fc <__adddf3>:
 80001fc:	b530      	push	{r4, r5, lr}
 80001fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000202:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000206:	ea94 0f05 	teq	r4, r5
 800020a:	bf08      	it	eq
 800020c:	ea90 0f02 	teqeq	r0, r2
 8000210:	bf1f      	itttt	ne
 8000212:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000216:	ea55 0c02 	orrsne.w	ip, r5, r2
 800021a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800021e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000222:	f000 80e2 	beq.w	80003ea <__adddf3+0x1ee>
 8000226:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800022a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800022e:	bfb8      	it	lt
 8000230:	426d      	neglt	r5, r5
 8000232:	dd0c      	ble.n	800024e <__adddf3+0x52>
 8000234:	442c      	add	r4, r5
 8000236:	ea80 0202 	eor.w	r2, r0, r2
 800023a:	ea81 0303 	eor.w	r3, r1, r3
 800023e:	ea82 0000 	eor.w	r0, r2, r0
 8000242:	ea83 0101 	eor.w	r1, r3, r1
 8000246:	ea80 0202 	eor.w	r2, r0, r2
 800024a:	ea81 0303 	eor.w	r3, r1, r3
 800024e:	2d36      	cmp	r5, #54	; 0x36
 8000250:	bf88      	it	hi
 8000252:	bd30      	pophi	{r4, r5, pc}
 8000254:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000258:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800025c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000260:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000264:	d002      	beq.n	800026c <__adddf3+0x70>
 8000266:	4240      	negs	r0, r0
 8000268:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800026c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000270:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000274:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000278:	d002      	beq.n	8000280 <__adddf3+0x84>
 800027a:	4252      	negs	r2, r2
 800027c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000280:	ea94 0f05 	teq	r4, r5
 8000284:	f000 80a7 	beq.w	80003d6 <__adddf3+0x1da>
 8000288:	f1a4 0401 	sub.w	r4, r4, #1
 800028c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000290:	db0d      	blt.n	80002ae <__adddf3+0xb2>
 8000292:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000296:	fa22 f205 	lsr.w	r2, r2, r5
 800029a:	1880      	adds	r0, r0, r2
 800029c:	f141 0100 	adc.w	r1, r1, #0
 80002a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002a4:	1880      	adds	r0, r0, r2
 80002a6:	fa43 f305 	asr.w	r3, r3, r5
 80002aa:	4159      	adcs	r1, r3
 80002ac:	e00e      	b.n	80002cc <__adddf3+0xd0>
 80002ae:	f1a5 0520 	sub.w	r5, r5, #32
 80002b2:	f10e 0e20 	add.w	lr, lr, #32
 80002b6:	2a01      	cmp	r2, #1
 80002b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002bc:	bf28      	it	cs
 80002be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002c2:	fa43 f305 	asr.w	r3, r3, r5
 80002c6:	18c0      	adds	r0, r0, r3
 80002c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002d0:	d507      	bpl.n	80002e2 <__adddf3+0xe6>
 80002d2:	f04f 0e00 	mov.w	lr, #0
 80002d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002de:	eb6e 0101 	sbc.w	r1, lr, r1
 80002e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002e6:	d31b      	bcc.n	8000320 <__adddf3+0x124>
 80002e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002ec:	d30c      	bcc.n	8000308 <__adddf3+0x10c>
 80002ee:	0849      	lsrs	r1, r1, #1
 80002f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002f8:	f104 0401 	add.w	r4, r4, #1
 80002fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000300:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000304:	f080 809a 	bcs.w	800043c <__adddf3+0x240>
 8000308:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800030c:	bf08      	it	eq
 800030e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000312:	f150 0000 	adcs.w	r0, r0, #0
 8000316:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800031a:	ea41 0105 	orr.w	r1, r1, r5
 800031e:	bd30      	pop	{r4, r5, pc}
 8000320:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000324:	4140      	adcs	r0, r0
 8000326:	eb41 0101 	adc.w	r1, r1, r1
 800032a:	3c01      	subs	r4, #1
 800032c:	bf28      	it	cs
 800032e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000332:	d2e9      	bcs.n	8000308 <__adddf3+0x10c>
 8000334:	f091 0f00 	teq	r1, #0
 8000338:	bf04      	itt	eq
 800033a:	4601      	moveq	r1, r0
 800033c:	2000      	moveq	r0, #0
 800033e:	fab1 f381 	clz	r3, r1
 8000342:	bf08      	it	eq
 8000344:	3320      	addeq	r3, #32
 8000346:	f1a3 030b 	sub.w	r3, r3, #11
 800034a:	f1b3 0220 	subs.w	r2, r3, #32
 800034e:	da0c      	bge.n	800036a <__adddf3+0x16e>
 8000350:	320c      	adds	r2, #12
 8000352:	dd08      	ble.n	8000366 <__adddf3+0x16a>
 8000354:	f102 0c14 	add.w	ip, r2, #20
 8000358:	f1c2 020c 	rsb	r2, r2, #12
 800035c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000360:	fa21 f102 	lsr.w	r1, r1, r2
 8000364:	e00c      	b.n	8000380 <__adddf3+0x184>
 8000366:	f102 0214 	add.w	r2, r2, #20
 800036a:	bfd8      	it	le
 800036c:	f1c2 0c20 	rsble	ip, r2, #32
 8000370:	fa01 f102 	lsl.w	r1, r1, r2
 8000374:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000378:	bfdc      	itt	le
 800037a:	ea41 010c 	orrle.w	r1, r1, ip
 800037e:	4090      	lslle	r0, r2
 8000380:	1ae4      	subs	r4, r4, r3
 8000382:	bfa2      	ittt	ge
 8000384:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000388:	4329      	orrge	r1, r5
 800038a:	bd30      	popge	{r4, r5, pc}
 800038c:	ea6f 0404 	mvn.w	r4, r4
 8000390:	3c1f      	subs	r4, #31
 8000392:	da1c      	bge.n	80003ce <__adddf3+0x1d2>
 8000394:	340c      	adds	r4, #12
 8000396:	dc0e      	bgt.n	80003b6 <__adddf3+0x1ba>
 8000398:	f104 0414 	add.w	r4, r4, #20
 800039c:	f1c4 0220 	rsb	r2, r4, #32
 80003a0:	fa20 f004 	lsr.w	r0, r0, r4
 80003a4:	fa01 f302 	lsl.w	r3, r1, r2
 80003a8:	ea40 0003 	orr.w	r0, r0, r3
 80003ac:	fa21 f304 	lsr.w	r3, r1, r4
 80003b0:	ea45 0103 	orr.w	r1, r5, r3
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f1c4 040c 	rsb	r4, r4, #12
 80003ba:	f1c4 0220 	rsb	r2, r4, #32
 80003be:	fa20 f002 	lsr.w	r0, r0, r2
 80003c2:	fa01 f304 	lsl.w	r3, r1, r4
 80003c6:	ea40 0003 	orr.w	r0, r0, r3
 80003ca:	4629      	mov	r1, r5
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	fa21 f004 	lsr.w	r0, r1, r4
 80003d2:	4629      	mov	r1, r5
 80003d4:	bd30      	pop	{r4, r5, pc}
 80003d6:	f094 0f00 	teq	r4, #0
 80003da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003de:	bf06      	itte	eq
 80003e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003e4:	3401      	addeq	r4, #1
 80003e6:	3d01      	subne	r5, #1
 80003e8:	e74e      	b.n	8000288 <__adddf3+0x8c>
 80003ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ee:	bf18      	it	ne
 80003f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003f4:	d029      	beq.n	800044a <__adddf3+0x24e>
 80003f6:	ea94 0f05 	teq	r4, r5
 80003fa:	bf08      	it	eq
 80003fc:	ea90 0f02 	teqeq	r0, r2
 8000400:	d005      	beq.n	800040e <__adddf3+0x212>
 8000402:	ea54 0c00 	orrs.w	ip, r4, r0
 8000406:	bf04      	itt	eq
 8000408:	4619      	moveq	r1, r3
 800040a:	4610      	moveq	r0, r2
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	ea91 0f03 	teq	r1, r3
 8000412:	bf1e      	ittt	ne
 8000414:	2100      	movne	r1, #0
 8000416:	2000      	movne	r0, #0
 8000418:	bd30      	popne	{r4, r5, pc}
 800041a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800041e:	d105      	bne.n	800042c <__adddf3+0x230>
 8000420:	0040      	lsls	r0, r0, #1
 8000422:	4149      	adcs	r1, r1
 8000424:	bf28      	it	cs
 8000426:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800042a:	bd30      	pop	{r4, r5, pc}
 800042c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000430:	bf3c      	itt	cc
 8000432:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000436:	bd30      	popcc	{r4, r5, pc}
 8000438:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800043c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000440:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000444:	f04f 0000 	mov.w	r0, #0
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800044e:	bf1a      	itte	ne
 8000450:	4619      	movne	r1, r3
 8000452:	4610      	movne	r0, r2
 8000454:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000458:	bf1c      	itt	ne
 800045a:	460b      	movne	r3, r1
 800045c:	4602      	movne	r2, r0
 800045e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000462:	bf06      	itte	eq
 8000464:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000468:	ea91 0f03 	teqeq	r1, r3
 800046c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	bf00      	nop

08000474 <__aeabi_ui2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000488:	f04f 0500 	mov.w	r5, #0
 800048c:	f04f 0100 	mov.w	r1, #0
 8000490:	e750      	b.n	8000334 <__adddf3+0x138>
 8000492:	bf00      	nop

08000494 <__aeabi_i2d>:
 8000494:	f090 0f00 	teq	r0, #0
 8000498:	bf04      	itt	eq
 800049a:	2100      	moveq	r1, #0
 800049c:	4770      	bxeq	lr
 800049e:	b530      	push	{r4, r5, lr}
 80004a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004ac:	bf48      	it	mi
 80004ae:	4240      	negmi	r0, r0
 80004b0:	f04f 0100 	mov.w	r1, #0
 80004b4:	e73e      	b.n	8000334 <__adddf3+0x138>
 80004b6:	bf00      	nop

080004b8 <__aeabi_f2d>:
 80004b8:	0042      	lsls	r2, r0, #1
 80004ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004be:	ea4f 0131 	mov.w	r1, r1, rrx
 80004c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004c6:	bf1f      	itttt	ne
 80004c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004d4:	4770      	bxne	lr
 80004d6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004da:	bf08      	it	eq
 80004dc:	4770      	bxeq	lr
 80004de:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004e2:	bf04      	itt	eq
 80004e4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004e8:	4770      	bxeq	lr
 80004ea:	b530      	push	{r4, r5, lr}
 80004ec:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004f8:	e71c      	b.n	8000334 <__adddf3+0x138>
 80004fa:	bf00      	nop

080004fc <__aeabi_ul2d>:
 80004fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000500:	bf08      	it	eq
 8000502:	4770      	bxeq	lr
 8000504:	b530      	push	{r4, r5, lr}
 8000506:	f04f 0500 	mov.w	r5, #0
 800050a:	e00a      	b.n	8000522 <__aeabi_l2d+0x16>

0800050c <__aeabi_l2d>:
 800050c:	ea50 0201 	orrs.w	r2, r0, r1
 8000510:	bf08      	it	eq
 8000512:	4770      	bxeq	lr
 8000514:	b530      	push	{r4, r5, lr}
 8000516:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800051a:	d502      	bpl.n	8000522 <__aeabi_l2d+0x16>
 800051c:	4240      	negs	r0, r0
 800051e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000522:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000526:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800052a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800052e:	f43f aed8 	beq.w	80002e2 <__adddf3+0xe6>
 8000532:	f04f 0203 	mov.w	r2, #3
 8000536:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800053a:	bf18      	it	ne
 800053c:	3203      	addne	r2, #3
 800053e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000542:	bf18      	it	ne
 8000544:	3203      	addne	r2, #3
 8000546:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800054a:	f1c2 0320 	rsb	r3, r2, #32
 800054e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000552:	fa20 f002 	lsr.w	r0, r0, r2
 8000556:	fa01 fe03 	lsl.w	lr, r1, r3
 800055a:	ea40 000e 	orr.w	r0, r0, lr
 800055e:	fa21 f102 	lsr.w	r1, r1, r2
 8000562:	4414      	add	r4, r2
 8000564:	e6bd      	b.n	80002e2 <__adddf3+0xe6>
 8000566:	bf00      	nop

08000568 <__aeabi_dmul>:
 8000568:	b570      	push	{r4, r5, r6, lr}
 800056a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800056e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000572:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000576:	bf1d      	ittte	ne
 8000578:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800057c:	ea94 0f0c 	teqne	r4, ip
 8000580:	ea95 0f0c 	teqne	r5, ip
 8000584:	f000 f8de 	bleq	8000744 <__aeabi_dmul+0x1dc>
 8000588:	442c      	add	r4, r5
 800058a:	ea81 0603 	eor.w	r6, r1, r3
 800058e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000592:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000596:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800059a:	bf18      	it	ne
 800059c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005a8:	d038      	beq.n	800061c <__aeabi_dmul+0xb4>
 80005aa:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ae:	f04f 0500 	mov.w	r5, #0
 80005b2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005b6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005ba:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005be:	f04f 0600 	mov.w	r6, #0
 80005c2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005c6:	f09c 0f00 	teq	ip, #0
 80005ca:	bf18      	it	ne
 80005cc:	f04e 0e01 	orrne.w	lr, lr, #1
 80005d0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005d4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005d8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005dc:	d204      	bcs.n	80005e8 <__aeabi_dmul+0x80>
 80005de:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005e2:	416d      	adcs	r5, r5
 80005e4:	eb46 0606 	adc.w	r6, r6, r6
 80005e8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005ec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005f0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005f4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005f8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005fc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000600:	bf88      	it	hi
 8000602:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000606:	d81e      	bhi.n	8000646 <__aeabi_dmul+0xde>
 8000608:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800060c:	bf08      	it	eq
 800060e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000612:	f150 0000 	adcs.w	r0, r0, #0
 8000616:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800061a:	bd70      	pop	{r4, r5, r6, pc}
 800061c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000620:	ea46 0101 	orr.w	r1, r6, r1
 8000624:	ea40 0002 	orr.w	r0, r0, r2
 8000628:	ea81 0103 	eor.w	r1, r1, r3
 800062c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000630:	bfc2      	ittt	gt
 8000632:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000636:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800063a:	bd70      	popgt	{r4, r5, r6, pc}
 800063c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000640:	f04f 0e00 	mov.w	lr, #0
 8000644:	3c01      	subs	r4, #1
 8000646:	f300 80ab 	bgt.w	80007a0 <__aeabi_dmul+0x238>
 800064a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800064e:	bfde      	ittt	le
 8000650:	2000      	movle	r0, #0
 8000652:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000656:	bd70      	pople	{r4, r5, r6, pc}
 8000658:	f1c4 0400 	rsb	r4, r4, #0
 800065c:	3c20      	subs	r4, #32
 800065e:	da35      	bge.n	80006cc <__aeabi_dmul+0x164>
 8000660:	340c      	adds	r4, #12
 8000662:	dc1b      	bgt.n	800069c <__aeabi_dmul+0x134>
 8000664:	f104 0414 	add.w	r4, r4, #20
 8000668:	f1c4 0520 	rsb	r5, r4, #32
 800066c:	fa00 f305 	lsl.w	r3, r0, r5
 8000670:	fa20 f004 	lsr.w	r0, r0, r4
 8000674:	fa01 f205 	lsl.w	r2, r1, r5
 8000678:	ea40 0002 	orr.w	r0, r0, r2
 800067c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000680:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000684:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000688:	fa21 f604 	lsr.w	r6, r1, r4
 800068c:	eb42 0106 	adc.w	r1, r2, r6
 8000690:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000694:	bf08      	it	eq
 8000696:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f1c4 040c 	rsb	r4, r4, #12
 80006a0:	f1c4 0520 	rsb	r5, r4, #32
 80006a4:	fa00 f304 	lsl.w	r3, r0, r4
 80006a8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ac:	fa01 f204 	lsl.w	r2, r1, r4
 80006b0:	ea40 0002 	orr.w	r0, r0, r2
 80006b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006bc:	f141 0100 	adc.w	r1, r1, #0
 80006c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006c4:	bf08      	it	eq
 80006c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f1c4 0520 	rsb	r5, r4, #32
 80006d0:	fa00 f205 	lsl.w	r2, r0, r5
 80006d4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006d8:	fa20 f304 	lsr.w	r3, r0, r4
 80006dc:	fa01 f205 	lsl.w	r2, r1, r5
 80006e0:	ea43 0302 	orr.w	r3, r3, r2
 80006e4:	fa21 f004 	lsr.w	r0, r1, r4
 80006e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006ec:	fa21 f204 	lsr.w	r2, r1, r4
 80006f0:	ea20 0002 	bic.w	r0, r0, r2
 80006f4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006fc:	bf08      	it	eq
 80006fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000702:	bd70      	pop	{r4, r5, r6, pc}
 8000704:	f094 0f00 	teq	r4, #0
 8000708:	d10f      	bne.n	800072a <__aeabi_dmul+0x1c2>
 800070a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800070e:	0040      	lsls	r0, r0, #1
 8000710:	eb41 0101 	adc.w	r1, r1, r1
 8000714:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000718:	bf08      	it	eq
 800071a:	3c01      	subeq	r4, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1a6>
 800071e:	ea41 0106 	orr.w	r1, r1, r6
 8000722:	f095 0f00 	teq	r5, #0
 8000726:	bf18      	it	ne
 8000728:	4770      	bxne	lr
 800072a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800072e:	0052      	lsls	r2, r2, #1
 8000730:	eb43 0303 	adc.w	r3, r3, r3
 8000734:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000738:	bf08      	it	eq
 800073a:	3d01      	subeq	r5, #1
 800073c:	d0f7      	beq.n	800072e <__aeabi_dmul+0x1c6>
 800073e:	ea43 0306 	orr.w	r3, r3, r6
 8000742:	4770      	bx	lr
 8000744:	ea94 0f0c 	teq	r4, ip
 8000748:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800074c:	bf18      	it	ne
 800074e:	ea95 0f0c 	teqne	r5, ip
 8000752:	d00c      	beq.n	800076e <__aeabi_dmul+0x206>
 8000754:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000758:	bf18      	it	ne
 800075a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075e:	d1d1      	bne.n	8000704 <__aeabi_dmul+0x19c>
 8000760:	ea81 0103 	eor.w	r1, r1, r3
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	f04f 0000 	mov.w	r0, #0
 800076c:	bd70      	pop	{r4, r5, r6, pc}
 800076e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000772:	bf06      	itte	eq
 8000774:	4610      	moveq	r0, r2
 8000776:	4619      	moveq	r1, r3
 8000778:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800077c:	d019      	beq.n	80007b2 <__aeabi_dmul+0x24a>
 800077e:	ea94 0f0c 	teq	r4, ip
 8000782:	d102      	bne.n	800078a <__aeabi_dmul+0x222>
 8000784:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000788:	d113      	bne.n	80007b2 <__aeabi_dmul+0x24a>
 800078a:	ea95 0f0c 	teq	r5, ip
 800078e:	d105      	bne.n	800079c <__aeabi_dmul+0x234>
 8000790:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000794:	bf1c      	itt	ne
 8000796:	4610      	movne	r0, r2
 8000798:	4619      	movne	r1, r3
 800079a:	d10a      	bne.n	80007b2 <__aeabi_dmul+0x24a>
 800079c:	ea81 0103 	eor.w	r1, r1, r3
 80007a0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007a8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007ac:	f04f 0000 	mov.w	r0, #0
 80007b0:	bd70      	pop	{r4, r5, r6, pc}
 80007b2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007b6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007ba:	bd70      	pop	{r4, r5, r6, pc}

080007bc <__aeabi_ddiv>:
 80007bc:	b570      	push	{r4, r5, r6, lr}
 80007be:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007c2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ca:	bf1d      	ittte	ne
 80007cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007d0:	ea94 0f0c 	teqne	r4, ip
 80007d4:	ea95 0f0c 	teqne	r5, ip
 80007d8:	f000 f8a7 	bleq	800092a <__aeabi_ddiv+0x16e>
 80007dc:	eba4 0405 	sub.w	r4, r4, r5
 80007e0:	ea81 0e03 	eor.w	lr, r1, r3
 80007e4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007ec:	f000 8088 	beq.w	8000900 <__aeabi_ddiv+0x144>
 80007f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007f4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007f8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007fc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000800:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000804:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000808:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800080c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000810:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000814:	429d      	cmp	r5, r3
 8000816:	bf08      	it	eq
 8000818:	4296      	cmpeq	r6, r2
 800081a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800081e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000822:	d202      	bcs.n	800082a <__aeabi_ddiv+0x6e>
 8000824:	085b      	lsrs	r3, r3, #1
 8000826:	ea4f 0232 	mov.w	r2, r2, rrx
 800082a:	1ab6      	subs	r6, r6, r2
 800082c:	eb65 0503 	sbc.w	r5, r5, r3
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800083a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000898:	ea55 0e06 	orrs.w	lr, r5, r6
 800089c:	d018      	beq.n	80008d0 <__aeabi_ddiv+0x114>
 800089e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008a2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008a6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008b2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008b6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008ba:	d1c0      	bne.n	800083e <__aeabi_ddiv+0x82>
 80008bc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008c0:	d10b      	bne.n	80008da <__aeabi_ddiv+0x11e>
 80008c2:	ea41 0100 	orr.w	r1, r1, r0
 80008c6:	f04f 0000 	mov.w	r0, #0
 80008ca:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ce:	e7b6      	b.n	800083e <__aeabi_ddiv+0x82>
 80008d0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d4:	bf04      	itt	eq
 80008d6:	4301      	orreq	r1, r0
 80008d8:	2000      	moveq	r0, #0
 80008da:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008de:	bf88      	it	hi
 80008e0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008e4:	f63f aeaf 	bhi.w	8000646 <__aeabi_dmul+0xde>
 80008e8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008ec:	bf04      	itt	eq
 80008ee:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008f6:	f150 0000 	adcs.w	r0, r0, #0
 80008fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	pop	{r4, r5, r6, pc}
 8000900:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000904:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000908:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800090c:	bfc2      	ittt	gt
 800090e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000912:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000916:	bd70      	popgt	{r4, r5, r6, pc}
 8000918:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800091c:	f04f 0e00 	mov.w	lr, #0
 8000920:	3c01      	subs	r4, #1
 8000922:	e690      	b.n	8000646 <__aeabi_dmul+0xde>
 8000924:	ea45 0e06 	orr.w	lr, r5, r6
 8000928:	e68d      	b.n	8000646 <__aeabi_dmul+0xde>
 800092a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800092e:	ea94 0f0c 	teq	r4, ip
 8000932:	bf08      	it	eq
 8000934:	ea95 0f0c 	teqeq	r5, ip
 8000938:	f43f af3b 	beq.w	80007b2 <__aeabi_dmul+0x24a>
 800093c:	ea94 0f0c 	teq	r4, ip
 8000940:	d10a      	bne.n	8000958 <__aeabi_ddiv+0x19c>
 8000942:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000946:	f47f af34 	bne.w	80007b2 <__aeabi_dmul+0x24a>
 800094a:	ea95 0f0c 	teq	r5, ip
 800094e:	f47f af25 	bne.w	800079c <__aeabi_dmul+0x234>
 8000952:	4610      	mov	r0, r2
 8000954:	4619      	mov	r1, r3
 8000956:	e72c      	b.n	80007b2 <__aeabi_dmul+0x24a>
 8000958:	ea95 0f0c 	teq	r5, ip
 800095c:	d106      	bne.n	800096c <__aeabi_ddiv+0x1b0>
 800095e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000962:	f43f aefd 	beq.w	8000760 <__aeabi_dmul+0x1f8>
 8000966:	4610      	mov	r0, r2
 8000968:	4619      	mov	r1, r3
 800096a:	e722      	b.n	80007b2 <__aeabi_dmul+0x24a>
 800096c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000970:	bf18      	it	ne
 8000972:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000976:	f47f aec5 	bne.w	8000704 <__aeabi_dmul+0x19c>
 800097a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800097e:	f47f af0d 	bne.w	800079c <__aeabi_dmul+0x234>
 8000982:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000986:	f47f aeeb 	bne.w	8000760 <__aeabi_dmul+0x1f8>
 800098a:	e712      	b.n	80007b2 <__aeabi_dmul+0x24a>

0800098c <__gedf2>:
 800098c:	f04f 3cff 	mov.w	ip, #4294967295
 8000990:	e006      	b.n	80009a0 <__cmpdf2+0x4>
 8000992:	bf00      	nop

08000994 <__ledf2>:
 8000994:	f04f 0c01 	mov.w	ip, #1
 8000998:	e002      	b.n	80009a0 <__cmpdf2+0x4>
 800099a:	bf00      	nop

0800099c <__cmpdf2>:
 800099c:	f04f 0c01 	mov.w	ip, #1
 80009a0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009a4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009a8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009b6:	d01b      	beq.n	80009f0 <__cmpdf2+0x54>
 80009b8:	b001      	add	sp, #4
 80009ba:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009be:	bf0c      	ite	eq
 80009c0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009c4:	ea91 0f03 	teqne	r1, r3
 80009c8:	bf02      	ittt	eq
 80009ca:	ea90 0f02 	teqeq	r0, r2
 80009ce:	2000      	moveq	r0, #0
 80009d0:	4770      	bxeq	lr
 80009d2:	f110 0f00 	cmn.w	r0, #0
 80009d6:	ea91 0f03 	teq	r1, r3
 80009da:	bf58      	it	pl
 80009dc:	4299      	cmppl	r1, r3
 80009de:	bf08      	it	eq
 80009e0:	4290      	cmpeq	r0, r2
 80009e2:	bf2c      	ite	cs
 80009e4:	17d8      	asrcs	r0, r3, #31
 80009e6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009ea:	f040 0001 	orr.w	r0, r0, #1
 80009ee:	4770      	bx	lr
 80009f0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f8:	d102      	bne.n	8000a00 <__cmpdf2+0x64>
 80009fa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009fe:	d107      	bne.n	8000a10 <__cmpdf2+0x74>
 8000a00:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a08:	d1d6      	bne.n	80009b8 <__cmpdf2+0x1c>
 8000a0a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a0e:	d0d3      	beq.n	80009b8 <__cmpdf2+0x1c>
 8000a10:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a14:	4770      	bx	lr
 8000a16:	bf00      	nop

08000a18 <__aeabi_cdrcmple>:
 8000a18:	4684      	mov	ip, r0
 8000a1a:	4610      	mov	r0, r2
 8000a1c:	4662      	mov	r2, ip
 8000a1e:	468c      	mov	ip, r1
 8000a20:	4619      	mov	r1, r3
 8000a22:	4663      	mov	r3, ip
 8000a24:	e000      	b.n	8000a28 <__aeabi_cdcmpeq>
 8000a26:	bf00      	nop

08000a28 <__aeabi_cdcmpeq>:
 8000a28:	b501      	push	{r0, lr}
 8000a2a:	f7ff ffb7 	bl	800099c <__cmpdf2>
 8000a2e:	2800      	cmp	r0, #0
 8000a30:	bf48      	it	mi
 8000a32:	f110 0f00 	cmnmi.w	r0, #0
 8000a36:	bd01      	pop	{r0, pc}

08000a38 <__aeabi_dcmpeq>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff fff4 	bl	8000a28 <__aeabi_cdcmpeq>
 8000a40:	bf0c      	ite	eq
 8000a42:	2001      	moveq	r0, #1
 8000a44:	2000      	movne	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmplt>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffea 	bl	8000a28 <__aeabi_cdcmpeq>
 8000a54:	bf34      	ite	cc
 8000a56:	2001      	movcc	r0, #1
 8000a58:	2000      	movcs	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmple>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffe0 	bl	8000a28 <__aeabi_cdcmpeq>
 8000a68:	bf94      	ite	ls
 8000a6a:	2001      	movls	r0, #1
 8000a6c:	2000      	movhi	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmpge>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffce 	bl	8000a18 <__aeabi_cdrcmple>
 8000a7c:	bf94      	ite	ls
 8000a7e:	2001      	movls	r0, #1
 8000a80:	2000      	movhi	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmpgt>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffc4 	bl	8000a18 <__aeabi_cdrcmple>
 8000a90:	bf34      	ite	cc
 8000a92:	2001      	movcc	r0, #1
 8000a94:	2000      	movcs	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmpun>:
 8000a9c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa4:	d102      	bne.n	8000aac <__aeabi_dcmpun+0x10>
 8000aa6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aaa:	d10a      	bne.n	8000ac2 <__aeabi_dcmpun+0x26>
 8000aac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab4:	d102      	bne.n	8000abc <__aeabi_dcmpun+0x20>
 8000ab6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_dcmpun+0x26>
 8000abc:	f04f 0000 	mov.w	r0, #0
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0001 	mov.w	r0, #1
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2iz>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ad0:	d215      	bcs.n	8000afe <__aeabi_d2iz+0x36>
 8000ad2:	d511      	bpl.n	8000af8 <__aeabi_d2iz+0x30>
 8000ad4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ad8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000adc:	d912      	bls.n	8000b04 <__aeabi_d2iz+0x3c>
 8000ade:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ae2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ae6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aea:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000aee:	fa23 f002 	lsr.w	r0, r3, r2
 8000af2:	bf18      	it	ne
 8000af4:	4240      	negne	r0, r0
 8000af6:	4770      	bx	lr
 8000af8:	f04f 0000 	mov.w	r0, #0
 8000afc:	4770      	bx	lr
 8000afe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b02:	d105      	bne.n	8000b10 <__aeabi_d2iz+0x48>
 8000b04:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	bf08      	it	eq
 8000b0a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b0e:	4770      	bx	lr
 8000b10:	f04f 0000 	mov.w	r0, #0
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop

08000b18 <__aeabi_d2uiz>:
 8000b18:	004a      	lsls	r2, r1, #1
 8000b1a:	d211      	bcs.n	8000b40 <__aeabi_d2uiz+0x28>
 8000b1c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b20:	d211      	bcs.n	8000b46 <__aeabi_d2uiz+0x2e>
 8000b22:	d50d      	bpl.n	8000b40 <__aeabi_d2uiz+0x28>
 8000b24:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b28:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b2c:	d40e      	bmi.n	8000b4c <__aeabi_d2uiz+0x34>
 8000b2e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b32:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b36:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b3a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b3e:	4770      	bx	lr
 8000b40:	f04f 0000 	mov.w	r0, #0
 8000b44:	4770      	bx	lr
 8000b46:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_d2uiz+0x3a>
 8000b4c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0000 	mov.w	r0, #0
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2f>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b60:	bf24      	itt	cs
 8000b62:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b66:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b6a:	d90d      	bls.n	8000b88 <__aeabi_d2f+0x30>
 8000b6c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b70:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b74:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b78:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b7c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b80:	bf08      	it	eq
 8000b82:	f020 0001 	biceq.w	r0, r0, #1
 8000b86:	4770      	bx	lr
 8000b88:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b8c:	d121      	bne.n	8000bd2 <__aeabi_d2f+0x7a>
 8000b8e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b92:	bfbc      	itt	lt
 8000b94:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	4770      	bxlt	lr
 8000b9a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b9e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ba2:	f1c2 0218 	rsb	r2, r2, #24
 8000ba6:	f1c2 0c20 	rsb	ip, r2, #32
 8000baa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bae:	fa20 f002 	lsr.w	r0, r0, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	f040 0001 	orrne.w	r0, r0, #1
 8000bb8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bbc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bc0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bc4:	ea40 000c 	orr.w	r0, r0, ip
 8000bc8:	fa23 f302 	lsr.w	r3, r3, r2
 8000bcc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bd0:	e7cc      	b.n	8000b6c <__aeabi_d2f+0x14>
 8000bd2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bd6:	d107      	bne.n	8000be8 <__aeabi_d2f+0x90>
 8000bd8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bdc:	bf1e      	ittt	ne
 8000bde:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000be2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000be6:	4770      	bxne	lr
 8000be8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bec:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bf0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_uldivmod>:
 8000bf8:	b953      	cbnz	r3, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfa:	b94a      	cbnz	r2, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfc:	2900      	cmp	r1, #0
 8000bfe:	bf08      	it	eq
 8000c00:	2800      	cmpeq	r0, #0
 8000c02:	bf1c      	itt	ne
 8000c04:	f04f 31ff 	movne.w	r1, #4294967295
 8000c08:	f04f 30ff 	movne.w	r0, #4294967295
 8000c0c:	f000 b970 	b.w	8000ef0 <__aeabi_idiv0>
 8000c10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c18:	f000 f806 	bl	8000c28 <__udivmoddi4>
 8000c1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c24:	b004      	add	sp, #16
 8000c26:	4770      	bx	lr

08000c28 <__udivmoddi4>:
 8000c28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c2c:	9e08      	ldr	r6, [sp, #32]
 8000c2e:	460d      	mov	r5, r1
 8000c30:	4604      	mov	r4, r0
 8000c32:	460f      	mov	r7, r1
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d14a      	bne.n	8000cce <__udivmoddi4+0xa6>
 8000c38:	428a      	cmp	r2, r1
 8000c3a:	4694      	mov	ip, r2
 8000c3c:	d965      	bls.n	8000d0a <__udivmoddi4+0xe2>
 8000c3e:	fab2 f382 	clz	r3, r2
 8000c42:	b143      	cbz	r3, 8000c56 <__udivmoddi4+0x2e>
 8000c44:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c48:	f1c3 0220 	rsb	r2, r3, #32
 8000c4c:	409f      	lsls	r7, r3
 8000c4e:	fa20 f202 	lsr.w	r2, r0, r2
 8000c52:	4317      	orrs	r7, r2
 8000c54:	409c      	lsls	r4, r3
 8000c56:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c5a:	fa1f f58c 	uxth.w	r5, ip
 8000c5e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c62:	0c22      	lsrs	r2, r4, #16
 8000c64:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c68:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c6c:	fb01 f005 	mul.w	r0, r1, r5
 8000c70:	4290      	cmp	r0, r2
 8000c72:	d90a      	bls.n	8000c8a <__udivmoddi4+0x62>
 8000c74:	eb1c 0202 	adds.w	r2, ip, r2
 8000c78:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c7c:	f080 811c 	bcs.w	8000eb8 <__udivmoddi4+0x290>
 8000c80:	4290      	cmp	r0, r2
 8000c82:	f240 8119 	bls.w	8000eb8 <__udivmoddi4+0x290>
 8000c86:	3902      	subs	r1, #2
 8000c88:	4462      	add	r2, ip
 8000c8a:	1a12      	subs	r2, r2, r0
 8000c8c:	b2a4      	uxth	r4, r4
 8000c8e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c92:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c96:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c9a:	fb00 f505 	mul.w	r5, r0, r5
 8000c9e:	42a5      	cmp	r5, r4
 8000ca0:	d90a      	bls.n	8000cb8 <__udivmoddi4+0x90>
 8000ca2:	eb1c 0404 	adds.w	r4, ip, r4
 8000ca6:	f100 32ff 	add.w	r2, r0, #4294967295
 8000caa:	f080 8107 	bcs.w	8000ebc <__udivmoddi4+0x294>
 8000cae:	42a5      	cmp	r5, r4
 8000cb0:	f240 8104 	bls.w	8000ebc <__udivmoddi4+0x294>
 8000cb4:	4464      	add	r4, ip
 8000cb6:	3802      	subs	r0, #2
 8000cb8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000cbc:	1b64      	subs	r4, r4, r5
 8000cbe:	2100      	movs	r1, #0
 8000cc0:	b11e      	cbz	r6, 8000cca <__udivmoddi4+0xa2>
 8000cc2:	40dc      	lsrs	r4, r3
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	e9c6 4300 	strd	r4, r3, [r6]
 8000cca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cce:	428b      	cmp	r3, r1
 8000cd0:	d908      	bls.n	8000ce4 <__udivmoddi4+0xbc>
 8000cd2:	2e00      	cmp	r6, #0
 8000cd4:	f000 80ed 	beq.w	8000eb2 <__udivmoddi4+0x28a>
 8000cd8:	2100      	movs	r1, #0
 8000cda:	e9c6 0500 	strd	r0, r5, [r6]
 8000cde:	4608      	mov	r0, r1
 8000ce0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ce4:	fab3 f183 	clz	r1, r3
 8000ce8:	2900      	cmp	r1, #0
 8000cea:	d149      	bne.n	8000d80 <__udivmoddi4+0x158>
 8000cec:	42ab      	cmp	r3, r5
 8000cee:	d302      	bcc.n	8000cf6 <__udivmoddi4+0xce>
 8000cf0:	4282      	cmp	r2, r0
 8000cf2:	f200 80f8 	bhi.w	8000ee6 <__udivmoddi4+0x2be>
 8000cf6:	1a84      	subs	r4, r0, r2
 8000cf8:	eb65 0203 	sbc.w	r2, r5, r3
 8000cfc:	2001      	movs	r0, #1
 8000cfe:	4617      	mov	r7, r2
 8000d00:	2e00      	cmp	r6, #0
 8000d02:	d0e2      	beq.n	8000cca <__udivmoddi4+0xa2>
 8000d04:	e9c6 4700 	strd	r4, r7, [r6]
 8000d08:	e7df      	b.n	8000cca <__udivmoddi4+0xa2>
 8000d0a:	b902      	cbnz	r2, 8000d0e <__udivmoddi4+0xe6>
 8000d0c:	deff      	udf	#255	; 0xff
 8000d0e:	fab2 f382 	clz	r3, r2
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	f040 8090 	bne.w	8000e38 <__udivmoddi4+0x210>
 8000d18:	1a8a      	subs	r2, r1, r2
 8000d1a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d1e:	fa1f fe8c 	uxth.w	lr, ip
 8000d22:	2101      	movs	r1, #1
 8000d24:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d28:	fb07 2015 	mls	r0, r7, r5, r2
 8000d2c:	0c22      	lsrs	r2, r4, #16
 8000d2e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d32:	fb0e f005 	mul.w	r0, lr, r5
 8000d36:	4290      	cmp	r0, r2
 8000d38:	d908      	bls.n	8000d4c <__udivmoddi4+0x124>
 8000d3a:	eb1c 0202 	adds.w	r2, ip, r2
 8000d3e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d42:	d202      	bcs.n	8000d4a <__udivmoddi4+0x122>
 8000d44:	4290      	cmp	r0, r2
 8000d46:	f200 80cb 	bhi.w	8000ee0 <__udivmoddi4+0x2b8>
 8000d4a:	4645      	mov	r5, r8
 8000d4c:	1a12      	subs	r2, r2, r0
 8000d4e:	b2a4      	uxth	r4, r4
 8000d50:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d54:	fb07 2210 	mls	r2, r7, r0, r2
 8000d58:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d5c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d60:	45a6      	cmp	lr, r4
 8000d62:	d908      	bls.n	8000d76 <__udivmoddi4+0x14e>
 8000d64:	eb1c 0404 	adds.w	r4, ip, r4
 8000d68:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d6c:	d202      	bcs.n	8000d74 <__udivmoddi4+0x14c>
 8000d6e:	45a6      	cmp	lr, r4
 8000d70:	f200 80bb 	bhi.w	8000eea <__udivmoddi4+0x2c2>
 8000d74:	4610      	mov	r0, r2
 8000d76:	eba4 040e 	sub.w	r4, r4, lr
 8000d7a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d7e:	e79f      	b.n	8000cc0 <__udivmoddi4+0x98>
 8000d80:	f1c1 0720 	rsb	r7, r1, #32
 8000d84:	408b      	lsls	r3, r1
 8000d86:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d8a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d8e:	fa05 f401 	lsl.w	r4, r5, r1
 8000d92:	fa20 f307 	lsr.w	r3, r0, r7
 8000d96:	40fd      	lsrs	r5, r7
 8000d98:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d9c:	4323      	orrs	r3, r4
 8000d9e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000da2:	fa1f fe8c 	uxth.w	lr, ip
 8000da6:	fb09 5518 	mls	r5, r9, r8, r5
 8000daa:	0c1c      	lsrs	r4, r3, #16
 8000dac:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000db0:	fb08 f50e 	mul.w	r5, r8, lr
 8000db4:	42a5      	cmp	r5, r4
 8000db6:	fa02 f201 	lsl.w	r2, r2, r1
 8000dba:	fa00 f001 	lsl.w	r0, r0, r1
 8000dbe:	d90b      	bls.n	8000dd8 <__udivmoddi4+0x1b0>
 8000dc0:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc4:	f108 3aff 	add.w	sl, r8, #4294967295
 8000dc8:	f080 8088 	bcs.w	8000edc <__udivmoddi4+0x2b4>
 8000dcc:	42a5      	cmp	r5, r4
 8000dce:	f240 8085 	bls.w	8000edc <__udivmoddi4+0x2b4>
 8000dd2:	f1a8 0802 	sub.w	r8, r8, #2
 8000dd6:	4464      	add	r4, ip
 8000dd8:	1b64      	subs	r4, r4, r5
 8000dda:	b29d      	uxth	r5, r3
 8000ddc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000de0:	fb09 4413 	mls	r4, r9, r3, r4
 8000de4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000de8:	fb03 fe0e 	mul.w	lr, r3, lr
 8000dec:	45a6      	cmp	lr, r4
 8000dee:	d908      	bls.n	8000e02 <__udivmoddi4+0x1da>
 8000df0:	eb1c 0404 	adds.w	r4, ip, r4
 8000df4:	f103 35ff 	add.w	r5, r3, #4294967295
 8000df8:	d26c      	bcs.n	8000ed4 <__udivmoddi4+0x2ac>
 8000dfa:	45a6      	cmp	lr, r4
 8000dfc:	d96a      	bls.n	8000ed4 <__udivmoddi4+0x2ac>
 8000dfe:	3b02      	subs	r3, #2
 8000e00:	4464      	add	r4, ip
 8000e02:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e06:	fba3 9502 	umull	r9, r5, r3, r2
 8000e0a:	eba4 040e 	sub.w	r4, r4, lr
 8000e0e:	42ac      	cmp	r4, r5
 8000e10:	46c8      	mov	r8, r9
 8000e12:	46ae      	mov	lr, r5
 8000e14:	d356      	bcc.n	8000ec4 <__udivmoddi4+0x29c>
 8000e16:	d053      	beq.n	8000ec0 <__udivmoddi4+0x298>
 8000e18:	b156      	cbz	r6, 8000e30 <__udivmoddi4+0x208>
 8000e1a:	ebb0 0208 	subs.w	r2, r0, r8
 8000e1e:	eb64 040e 	sbc.w	r4, r4, lr
 8000e22:	fa04 f707 	lsl.w	r7, r4, r7
 8000e26:	40ca      	lsrs	r2, r1
 8000e28:	40cc      	lsrs	r4, r1
 8000e2a:	4317      	orrs	r7, r2
 8000e2c:	e9c6 7400 	strd	r7, r4, [r6]
 8000e30:	4618      	mov	r0, r3
 8000e32:	2100      	movs	r1, #0
 8000e34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e38:	f1c3 0120 	rsb	r1, r3, #32
 8000e3c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e40:	fa20 f201 	lsr.w	r2, r0, r1
 8000e44:	fa25 f101 	lsr.w	r1, r5, r1
 8000e48:	409d      	lsls	r5, r3
 8000e4a:	432a      	orrs	r2, r5
 8000e4c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e50:	fa1f fe8c 	uxth.w	lr, ip
 8000e54:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e58:	fb07 1510 	mls	r5, r7, r0, r1
 8000e5c:	0c11      	lsrs	r1, r2, #16
 8000e5e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e62:	fb00 f50e 	mul.w	r5, r0, lr
 8000e66:	428d      	cmp	r5, r1
 8000e68:	fa04 f403 	lsl.w	r4, r4, r3
 8000e6c:	d908      	bls.n	8000e80 <__udivmoddi4+0x258>
 8000e6e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e72:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e76:	d22f      	bcs.n	8000ed8 <__udivmoddi4+0x2b0>
 8000e78:	428d      	cmp	r5, r1
 8000e7a:	d92d      	bls.n	8000ed8 <__udivmoddi4+0x2b0>
 8000e7c:	3802      	subs	r0, #2
 8000e7e:	4461      	add	r1, ip
 8000e80:	1b49      	subs	r1, r1, r5
 8000e82:	b292      	uxth	r2, r2
 8000e84:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e88:	fb07 1115 	mls	r1, r7, r5, r1
 8000e8c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e90:	fb05 f10e 	mul.w	r1, r5, lr
 8000e94:	4291      	cmp	r1, r2
 8000e96:	d908      	bls.n	8000eaa <__udivmoddi4+0x282>
 8000e98:	eb1c 0202 	adds.w	r2, ip, r2
 8000e9c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000ea0:	d216      	bcs.n	8000ed0 <__udivmoddi4+0x2a8>
 8000ea2:	4291      	cmp	r1, r2
 8000ea4:	d914      	bls.n	8000ed0 <__udivmoddi4+0x2a8>
 8000ea6:	3d02      	subs	r5, #2
 8000ea8:	4462      	add	r2, ip
 8000eaa:	1a52      	subs	r2, r2, r1
 8000eac:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000eb0:	e738      	b.n	8000d24 <__udivmoddi4+0xfc>
 8000eb2:	4631      	mov	r1, r6
 8000eb4:	4630      	mov	r0, r6
 8000eb6:	e708      	b.n	8000cca <__udivmoddi4+0xa2>
 8000eb8:	4639      	mov	r1, r7
 8000eba:	e6e6      	b.n	8000c8a <__udivmoddi4+0x62>
 8000ebc:	4610      	mov	r0, r2
 8000ebe:	e6fb      	b.n	8000cb8 <__udivmoddi4+0x90>
 8000ec0:	4548      	cmp	r0, r9
 8000ec2:	d2a9      	bcs.n	8000e18 <__udivmoddi4+0x1f0>
 8000ec4:	ebb9 0802 	subs.w	r8, r9, r2
 8000ec8:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000ecc:	3b01      	subs	r3, #1
 8000ece:	e7a3      	b.n	8000e18 <__udivmoddi4+0x1f0>
 8000ed0:	4645      	mov	r5, r8
 8000ed2:	e7ea      	b.n	8000eaa <__udivmoddi4+0x282>
 8000ed4:	462b      	mov	r3, r5
 8000ed6:	e794      	b.n	8000e02 <__udivmoddi4+0x1da>
 8000ed8:	4640      	mov	r0, r8
 8000eda:	e7d1      	b.n	8000e80 <__udivmoddi4+0x258>
 8000edc:	46d0      	mov	r8, sl
 8000ede:	e77b      	b.n	8000dd8 <__udivmoddi4+0x1b0>
 8000ee0:	3d02      	subs	r5, #2
 8000ee2:	4462      	add	r2, ip
 8000ee4:	e732      	b.n	8000d4c <__udivmoddi4+0x124>
 8000ee6:	4608      	mov	r0, r1
 8000ee8:	e70a      	b.n	8000d00 <__udivmoddi4+0xd8>
 8000eea:	4464      	add	r4, ip
 8000eec:	3802      	subs	r0, #2
 8000eee:	e742      	b.n	8000d76 <__udivmoddi4+0x14e>

08000ef0 <__aeabi_idiv0>:
 8000ef0:	4770      	bx	lr
 8000ef2:	bf00      	nop

08000ef4 <append_buffer>:

/*
 * Adds a byte to the end of the buffer
 * Add one byte at a time!
 */
void append_buffer(buffer_t* buffer, uint8_t data){
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b082      	sub	sp, #8
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
 8000efc:	460b      	mov	r3, r1
 8000efe:	70fb      	strb	r3, [r7, #3]
	buffer->last_time = HAL_GetTick();
 8000f00:	f006 fdae 	bl	8007a60 <HAL_GetTick>
 8000f04:	4602      	mov	r2, r0
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	61da      	str	r2, [r3, #28]
	buffer->buffer[buffer->curr_byte] = data;
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	7e1b      	ldrb	r3, [r3, #24]
 8000f0e:	4619      	mov	r1, r3
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	78fa      	ldrb	r2, [r7, #3]
 8000f14:	545a      	strb	r2, [r3, r1]
	buffer->stored_bytes++;
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	7e5b      	ldrb	r3, [r3, #25]
 8000f1a:	3301      	adds	r3, #1
 8000f1c:	b2da      	uxtb	r2, r3
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	765a      	strb	r2, [r3, #25]
	buffer->curr_byte = (buffer->curr_byte >= BUFFER_SIZE-1) ? 0 : buffer->curr_byte + 1;
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	7e1b      	ldrb	r3, [r3, #24]
 8000f26:	2b16      	cmp	r3, #22
 8000f28:	d804      	bhi.n	8000f34 <append_buffer+0x40>
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	7e1b      	ldrb	r3, [r3, #24]
 8000f2e:	3301      	adds	r3, #1
 8000f30:	b2da      	uxtb	r2, r3
 8000f32:	e000      	b.n	8000f36 <append_buffer+0x42>
 8000f34:	2200      	movs	r2, #0
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	761a      	strb	r2, [r3, #24]
	if (buffer->stored_bytes >= BUFFER_SIZE) {
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	7e5b      	ldrb	r3, [r3, #25]
 8000f3e:	2b17      	cmp	r3, #23
 8000f40:	d902      	bls.n	8000f48 <append_buffer+0x54>
		buffer->stored_bytes = BUFFER_SIZE;
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	2218      	movs	r2, #24
 8000f46:	765a      	strb	r2, [r3, #25]
	}
}
 8000f48:	bf00      	nop
 8000f4a:	3708      	adds	r7, #8
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	bd80      	pop	{r7, pc}

08000f50 <buffer_init>:

void buffer_init(buffer_t *buffer)
{
 8000f50:	b480      	push	{r7}
 8000f52:	b083      	sub	sp, #12
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
	buffer->curr_byte = 0;
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	761a      	strb	r2, [r3, #24]
	buffer->last_proc = 0;
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	2200      	movs	r2, #0
 8000f62:	f883 2020 	strb.w	r2, [r3, #32]
	buffer->stored_bytes = 0;
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	2200      	movs	r2, #0
 8000f6a:	765a      	strb	r2, [r3, #25]
	buffer->last_time = 0;
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	2200      	movs	r2, #0
 8000f70:	61da      	str	r2, [r3, #28]
}
 8000f72:	bf00      	nop
 8000f74:	370c      	adds	r7, #12
 8000f76:	46bd      	mov	sp, r7
 8000f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7c:	4770      	bx	lr
	...

08000f80 <buzzer>:

#include "board_lib.h"
#include "bsp_buzzer.h"

void buzzer(uint16_t freq)
{
 8000f80:	b480      	push	{r7}
 8000f82:	b083      	sub	sp, #12
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	4603      	mov	r3, r0
 8000f88:	80fb      	strh	r3, [r7, #6]
	if (freq == 0)
 8000f8a:	88fb      	ldrh	r3, [r7, #6]
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d104      	bne.n	8000f9a <buzzer+0x1a>
	{
		htim12.Instance->CCR1 = 0;
 8000f90:	4b0b      	ldr	r3, [pc, #44]	; (8000fc0 <buzzer+0x40>)
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	2200      	movs	r2, #0
 8000f96:	635a      	str	r2, [r3, #52]	; 0x34
	else
	{
		__HAL_TIM_SET_PRESCALER(&htim12, (84 * 500/freq));
		htim12.Instance->CCR1 = 500;
	}
}
 8000f98:	e00c      	b.n	8000fb4 <buzzer+0x34>
		__HAL_TIM_SET_PRESCALER(&htim12, (84 * 500/freq));
 8000f9a:	88fb      	ldrh	r3, [r7, #6]
 8000f9c:	f24a 4210 	movw	r2, #42000	; 0xa410
 8000fa0:	fb92 f2f3 	sdiv	r2, r2, r3
 8000fa4:	4b06      	ldr	r3, [pc, #24]	; (8000fc0 <buzzer+0x40>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	629a      	str	r2, [r3, #40]	; 0x28
		htim12.Instance->CCR1 = 500;
 8000faa:	4b05      	ldr	r3, [pc, #20]	; (8000fc0 <buzzer+0x40>)
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000fb2:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000fb4:	bf00      	nop
 8000fb6:	370c      	adds	r7, #12
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbe:	4770      	bx	lr
 8000fc0:	20000cfc 	.word	0x20000cfc

08000fc4 <buzzer_init>:


void buzzer_init()
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	af00      	add	r7, sp, #0
	  HAL_TIM_PWM_Start(&htim12,TIM_CHANNEL_1);
 8000fc8:	2100      	movs	r1, #0
 8000fca:	4804      	ldr	r0, [pc, #16]	; (8000fdc <buzzer_init+0x18>)
 8000fcc:	f00b f80c 	bl	800bfe8 <HAL_TIM_PWM_Start>
	  htim12.Instance->CCR1 = 0;
 8000fd0:	4b02      	ldr	r3, [pc, #8]	; (8000fdc <buzzer_init+0x18>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000fd8:	bf00      	nop
 8000fda:	bd80      	pop	{r7, pc}
 8000fdc:	20000cfc 	.word	0x20000cfc

08000fe0 <HAL_CAN_RxFifo0MsgPendingCallback>:

/**
 * HAL internal callback function that calls abstracted ISR for ease of use.
 * Define can_ISR() elsewhere in code to define behaviour of CAN receive ISR.
 */
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b082      	sub	sp, #8
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
	can_ISR(hcan);
 8000fe8:	6878      	ldr	r0, [r7, #4]
 8000fea:	f002 fbf9 	bl	80037e0 <can_ISR>
}
 8000fee:	bf00      	nop
 8000ff0:	3708      	adds	r7, #8
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bd80      	pop	{r7, pc}

08000ff6 <HAL_CAN_RxFifo1MsgPendingCallback>:
void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8000ff6:	b580      	push	{r7, lr}
 8000ff8:	b082      	sub	sp, #8
 8000ffa:	af00      	add	r7, sp, #0
 8000ffc:	6078      	str	r0, [r7, #4]
	can_ISR(hcan);
 8000ffe:	6878      	ldr	r0, [r7, #4]
 8001000:	f002 fbee 	bl	80037e0 <can_ISR>
}
 8001004:	bf00      	nop
 8001006:	3708      	adds	r7, #8
 8001008:	46bd      	mov	sp, r7
 800100a:	bd80      	pop	{r7, pc}

0800100c <can1_get_msg>:

HAL_StatusTypeDef can1_get_msg(CAN_HandleTypeDef *hcan, CAN_RxHeaderTypeDef *rx_msg_header, uint8_t *rx_buffer)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b084      	sub	sp, #16
 8001010:	af00      	add	r7, sp, #0
 8001012:	60f8      	str	r0, [r7, #12]
 8001014:	60b9      	str	r1, [r7, #8]
 8001016:	607a      	str	r2, [r7, #4]
	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, rx_msg_header, rx_buffer);
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	68ba      	ldr	r2, [r7, #8]
 800101c:	2100      	movs	r1, #0
 800101e:	68f8      	ldr	r0, [r7, #12]
 8001020:	f007 f849 	bl	80080b6 <HAL_CAN_GetRxMessage>
	return HAL_OK;
 8001024:	2300      	movs	r3, #0
}
 8001026:	4618      	mov	r0, r3
 8001028:	3710      	adds	r7, #16
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}

0800102e <can2_get_msg>:

HAL_StatusTypeDef can2_get_msg(CAN_HandleTypeDef *hcan, CAN_RxHeaderTypeDef *rx_msg_header, uint8_t *rx_buffer)
{
 800102e:	b580      	push	{r7, lr}
 8001030:	b084      	sub	sp, #16
 8001032:	af00      	add	r7, sp, #0
 8001034:	60f8      	str	r0, [r7, #12]
 8001036:	60b9      	str	r1, [r7, #8]
 8001038:	607a      	str	r2, [r7, #4]
	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO1, rx_msg_header, rx_buffer);
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	68ba      	ldr	r2, [r7, #8]
 800103e:	2101      	movs	r1, #1
 8001040:	68f8      	ldr	r0, [r7, #12]
 8001042:	f007 f838 	bl	80080b6 <HAL_CAN_GetRxMessage>
	return HAL_OK;
 8001046:	2300      	movs	r3, #0
}
 8001048:	4618      	mov	r0, r3
 800104a:	3710      	adds	r7, #16
 800104c:	46bd      	mov	sp, r7
 800104e:	bd80      	pop	{r7, pc}

08001050 <can_start>:
 * @param *hcan pointer to the CANbus being initialised
 * @param CAN_filterID 32bit CAN ID filter
 * @param CAN_filtermask 32bit CAN ID mask
 * @usage Call during initialisation to setup filters, start CAN and start ISRs
 */
void can_start(CAN_HandleTypeDef *hcan, uint32_t CAN_filterID, uint32_t CAN_filterMask) {
 8001050:	b580      	push	{r7, lr}
 8001052:	b08e      	sub	sp, #56	; 0x38
 8001054:	af00      	add	r7, sp, #0
 8001056:	60f8      	str	r0, [r7, #12]
 8001058:	60b9      	str	r1, [r7, #8]
 800105a:	607a      	str	r2, [r7, #4]
    CAN_FilterTypeDef can_filter_st = {0};
 800105c:	f107 0310 	add.w	r3, r7, #16
 8001060:	2228      	movs	r2, #40	; 0x28
 8001062:	2100      	movs	r1, #0
 8001064:	4618      	mov	r0, r3
 8001066:	f013 fd7d 	bl	8014b64 <memset>
    can_filter_st.FilterActivation = ENABLE;
 800106a:	2301      	movs	r3, #1
 800106c:	633b      	str	r3, [r7, #48]	; 0x30
	can_filter_st.FilterMode = CAN_FILTERMODE_IDMASK;
 800106e:	2300      	movs	r3, #0
 8001070:	62bb      	str	r3, [r7, #40]	; 0x28
	can_filter_st.FilterScale = CAN_FILTERSCALE_32BIT;
 8001072:	2301      	movs	r3, #1
 8001074:	62fb      	str	r3, [r7, #44]	; 0x2c
	can_filter_st.FilterIdHigh = (CAN_filterID >> 16);
 8001076:	68bb      	ldr	r3, [r7, #8]
 8001078:	0c1b      	lsrs	r3, r3, #16
 800107a:	613b      	str	r3, [r7, #16]
	can_filter_st.FilterIdLow = (CAN_filterID & 0xFFFF);
 800107c:	68bb      	ldr	r3, [r7, #8]
 800107e:	b29b      	uxth	r3, r3
 8001080:	617b      	str	r3, [r7, #20]
	can_filter_st.FilterMaskIdHigh = (CAN_filterMask >> 16);
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	0c1b      	lsrs	r3, r3, #16
 8001086:	61bb      	str	r3, [r7, #24]
	can_filter_st.FilterMaskIdLow = (CAN_filterMask & 0xFFFF);
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	b29b      	uxth	r3, r3
 800108c:	61fb      	str	r3, [r7, #28]

	if (hcan->Instance == CAN1) {
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	4a18      	ldr	r2, [pc, #96]	; (80010f4 <can_start+0xa4>)
 8001094:	4293      	cmp	r3, r2
 8001096:	d111      	bne.n	80010bc <can_start+0x6c>
	    can_filter_st.FilterBank = 0;
 8001098:	2300      	movs	r3, #0
 800109a:	627b      	str	r3, [r7, #36]	; 0x24
	    can_filter_st.FilterFIFOAssignment = CAN_RX_FIFO0;
 800109c:	2300      	movs	r3, #0
 800109e:	623b      	str	r3, [r7, #32]
	    HAL_CAN_ConfigFilter(hcan, &can_filter_st);
 80010a0:	f107 0310 	add.w	r3, r7, #16
 80010a4:	4619      	mov	r1, r3
 80010a6:	68f8      	ldr	r0, [r7, #12]
 80010a8:	f006 fe06 	bl	8007cb8 <HAL_CAN_ConfigFilter>
	    HAL_CAN_Start(hcan);
 80010ac:	68f8      	ldr	r0, [r7, #12]
 80010ae:	f006 fee3 	bl	8007e78 <HAL_CAN_Start>
	    HAL_CAN_ActivateNotification(hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 80010b2:	2102      	movs	r1, #2
 80010b4:	68f8      	ldr	r0, [r7, #12]
 80010b6:	f007 f910 	bl	80082da <HAL_CAN_ActivateNotification>
	    HAL_CAN_ConfigFilter(hcan, &can_filter_st);
	    HAL_CAN_Start(hcan);
	    HAL_CAN_ActivateNotification(hcan, CAN_IT_RX_FIFO1_MSG_PENDING); // Uncomment line if using RX1 queue as well.
	}

}
 80010ba:	e017      	b.n	80010ec <can_start+0x9c>
	} else if (hcan->Instance == CAN2) {
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	4a0d      	ldr	r2, [pc, #52]	; (80010f8 <can_start+0xa8>)
 80010c2:	4293      	cmp	r3, r2
 80010c4:	d112      	bne.n	80010ec <can_start+0x9c>
	    can_filter_st.FilterFIFOAssignment = CAN_RX_FIFO1; // Uncomment line if using RX1 queue as well.
 80010c6:	2301      	movs	r3, #1
 80010c8:	623b      	str	r3, [r7, #32]
		can_filter_st.SlaveStartFilterBank = 14;
 80010ca:	230e      	movs	r3, #14
 80010cc:	637b      	str	r3, [r7, #52]	; 0x34
		can_filter_st.FilterBank = 14;
 80010ce:	230e      	movs	r3, #14
 80010d0:	627b      	str	r3, [r7, #36]	; 0x24
	    HAL_CAN_ConfigFilter(hcan, &can_filter_st);
 80010d2:	f107 0310 	add.w	r3, r7, #16
 80010d6:	4619      	mov	r1, r3
 80010d8:	68f8      	ldr	r0, [r7, #12]
 80010da:	f006 fded 	bl	8007cb8 <HAL_CAN_ConfigFilter>
	    HAL_CAN_Start(hcan);
 80010de:	68f8      	ldr	r0, [r7, #12]
 80010e0:	f006 feca 	bl	8007e78 <HAL_CAN_Start>
	    HAL_CAN_ActivateNotification(hcan, CAN_IT_RX_FIFO1_MSG_PENDING); // Uncomment line if using RX1 queue as well.
 80010e4:	2110      	movs	r1, #16
 80010e6:	68f8      	ldr	r0, [r7, #12]
 80010e8:	f007 f8f7 	bl	80082da <HAL_CAN_ActivateNotification>
}
 80010ec:	bf00      	nop
 80010ee:	3738      	adds	r7, #56	; 0x38
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bd80      	pop	{r7, pc}
 80010f4:	40006400 	.word	0x40006400
 80010f8:	40006800 	.word	0x40006800

080010fc <dbus_remote_start>:
/**
 * This function starts the circular DMA for receiving on a UART port. It is specifically
 * written for the UART1 port for DBUS interface from the controller.
 */
HAL_StatusTypeDef dbus_remote_start(uint8_t *pData)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b086      	sub	sp, #24
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
	UART_HandleTypeDef *huart = &DBUS_UART;
 8001104:	4b33      	ldr	r3, [pc, #204]	; (80011d4 <dbus_remote_start+0xd8>)
 8001106:	617b      	str	r3, [r7, #20]
	uint32_t *tmp;

	/* Check that a Rx process is not already ongoing */
	if (huart->RxState == HAL_UART_STATE_READY) {
 8001108:	697b      	ldr	r3, [r7, #20]
 800110a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800110e:	b2db      	uxtb	r3, r3
 8001110:	2b20      	cmp	r3, #32
 8001112:	d15a      	bne.n	80011ca <dbus_remote_start+0xce>
		if ((pData == NULL) || (REMOTE_DATA_SIZE == 0U)) {
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	2b00      	cmp	r3, #0
 8001118:	d101      	bne.n	800111e <dbus_remote_start+0x22>
			return HAL_ERROR;
 800111a:	2301      	movs	r3, #1
 800111c:	e056      	b.n	80011cc <dbus_remote_start+0xd0>
		}

		/* Process Locked */
		__HAL_LOCK(huart);
 800111e:	697b      	ldr	r3, [r7, #20]
 8001120:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001124:	2b01      	cmp	r3, #1
 8001126:	d101      	bne.n	800112c <dbus_remote_start+0x30>
 8001128:	2302      	movs	r3, #2
 800112a:	e04f      	b.n	80011cc <dbus_remote_start+0xd0>
 800112c:	697b      	ldr	r3, [r7, #20]
 800112e:	2201      	movs	r2, #1
 8001130:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

		huart->pRxBuffPtr = pData;
 8001134:	687a      	ldr	r2, [r7, #4]
 8001136:	697b      	ldr	r3, [r7, #20]
 8001138:	629a      	str	r2, [r3, #40]	; 0x28
		huart->RxXferSize = REMOTE_DATA_SIZE;
 800113a:	697b      	ldr	r3, [r7, #20]
 800113c:	2212      	movs	r2, #18
 800113e:	859a      	strh	r2, [r3, #44]	; 0x2c

		huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001140:	697b      	ldr	r3, [r7, #20]
 8001142:	2200      	movs	r2, #0
 8001144:	641a      	str	r2, [r3, #64]	; 0x40
		huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001146:	697b      	ldr	r3, [r7, #20]
 8001148:	2222      	movs	r2, #34	; 0x22
 800114a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

		/* Set the UART DMA transfer complete callback */
		huart->hdmarx->XferCpltCallback = dbus_remote_ISR;
 800114e:	697b      	ldr	r3, [r7, #20]
 8001150:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001152:	4a21      	ldr	r2, [pc, #132]	; (80011d8 <dbus_remote_start+0xdc>)
 8001154:	63da      	str	r2, [r3, #60]	; 0x3c

		/* Set the DMA abort callback */
		huart->hdmarx->XferAbortCallback = NULL;
 8001156:	697b      	ldr	r3, [r7, #20]
 8001158:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800115a:	2200      	movs	r2, #0
 800115c:	651a      	str	r2, [r3, #80]	; 0x50

		/* Enable the DMA stream */
		tmp = (uint32_t *)&pData;
 800115e:	1d3b      	adds	r3, r7, #4
 8001160:	613b      	str	r3, [r7, #16]
		HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, REMOTE_DATA_SIZE);
 8001162:	697b      	ldr	r3, [r7, #20]
 8001164:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001166:	697b      	ldr	r3, [r7, #20]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	3304      	adds	r3, #4
 800116c:	4619      	mov	r1, r3
 800116e:	693b      	ldr	r3, [r7, #16]
 8001170:	681a      	ldr	r2, [r3, #0]
 8001172:	2312      	movs	r3, #18
 8001174:	f007 fcb4 	bl	8008ae0 <HAL_DMA_Start_IT>

		/* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
		__HAL_UART_CLEAR_OREFLAG(huart);
 8001178:	2300      	movs	r3, #0
 800117a:	60fb      	str	r3, [r7, #12]
 800117c:	697b      	ldr	r3, [r7, #20]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	60fb      	str	r3, [r7, #12]
 8001184:	697b      	ldr	r3, [r7, #20]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	685b      	ldr	r3, [r3, #4]
 800118a:	60fb      	str	r3, [r7, #12]
 800118c:	68fb      	ldr	r3, [r7, #12]

		/* Process Unlocked */
		__HAL_UNLOCK(huart);
 800118e:	697b      	ldr	r3, [r7, #20]
 8001190:	2200      	movs	r2, #0
 8001192:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

		/* Enable the UART Parity Error Interrupt */
		SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8001196:	697b      	ldr	r3, [r7, #20]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	68da      	ldr	r2, [r3, #12]
 800119c:	697b      	ldr	r3, [r7, #20]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80011a4:	60da      	str	r2, [r3, #12]

		/* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
		SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80011a6:	697b      	ldr	r3, [r7, #20]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	695a      	ldr	r2, [r3, #20]
 80011ac:	697b      	ldr	r3, [r7, #20]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	f042 0201 	orr.w	r2, r2, #1
 80011b4:	615a      	str	r2, [r3, #20]

		/* Enable the DMA transfer for the receiver request by setting the DMAR bit
	    in the UART CR3 register */
		SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80011b6:	697b      	ldr	r3, [r7, #20]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	695a      	ldr	r2, [r3, #20]
 80011bc:	697b      	ldr	r3, [r7, #20]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80011c4:	615a      	str	r2, [r3, #20]

		return HAL_OK;
 80011c6:	2300      	movs	r3, #0
 80011c8:	e000      	b.n	80011cc <dbus_remote_start+0xd0>
	} else {
		return HAL_BUSY;
 80011ca:	2302      	movs	r3, #2
	}
}
 80011cc:	4618      	mov	r0, r3
 80011ce:	3718      	adds	r7, #24
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bd80      	pop	{r7, pc}
 80011d4:	20000d88 	.word	0x20000d88
 80011d8:	080040f9 	.word	0x080040f9

080011dc <laser_on>:
#include "board_lib.h"
#include "bsp_gpio.h"


void laser_on()
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_13, GPIO_PIN_SET);
 80011e0:	2201      	movs	r2, #1
 80011e2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80011e6:	4802      	ldr	r0, [pc, #8]	; (80011f0 <laser_on+0x14>)
 80011e8:	f008 f97a 	bl	80094e0 <HAL_GPIO_WritePin>
}
 80011ec:	bf00      	nop
 80011ee:	bd80      	pop	{r7, pc}
 80011f0:	40021800 	.word	0x40021800

080011f4 <laser_off>:

void laser_off()
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_13, GPIO_PIN_RESET);
 80011f8:	2200      	movs	r2, #0
 80011fa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80011fe:	4802      	ldr	r0, [pc, #8]	; (8001208 <laser_off+0x14>)
 8001200:	f008 f96e 	bl	80094e0 <HAL_GPIO_WritePin>
}
 8001204:	bf00      	nop
 8001206:	bd80      	pop	{r7, pc}
 8001208:	40021800 	.word	0x40021800

0800120c <inv_sqrt>:
  * @param  x: the number need to be calculated
  * @retval 1/Sqrt(x)
  * @usage  call in imu_ahrs_update() function
  */
float inv_sqrt(float x)
{
 800120c:	b480      	push	{r7}
 800120e:	b087      	sub	sp, #28
 8001210:	af00      	add	r7, sp, #0
 8001212:	ed87 0a01 	vstr	s0, [r7, #4]
	float halfx = 0.5f * x;
 8001216:	edd7 7a01 	vldr	s15, [r7, #4]
 800121a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800121e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001222:	edc7 7a05 	vstr	s15, [r7, #20]
	float y     = x;
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	613b      	str	r3, [r7, #16]
	long  i     = *(long*)&y;
 800122a:	f107 0310 	add.w	r3, r7, #16
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	60fb      	str	r3, [r7, #12]

	i = 0x5f3759df - (i >> 1);
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	105a      	asrs	r2, r3, #1
 8001236:	4b12      	ldr	r3, [pc, #72]	; (8001280 <inv_sqrt+0x74>)
 8001238:	1a9b      	subs	r3, r3, r2
 800123a:	60fb      	str	r3, [r7, #12]
	y = *(float*)&i;
 800123c:	f107 030c 	add.w	r3, r7, #12
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	613b      	str	r3, [r7, #16]
	y = y * (1.5f - (halfx * y * y));
 8001244:	ed97 7a04 	vldr	s14, [r7, #16]
 8001248:	edd7 7a05 	vldr	s15, [r7, #20]
 800124c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001250:	edd7 7a04 	vldr	s15, [r7, #16]
 8001254:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001258:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 800125c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001260:	edd7 7a04 	vldr	s15, [r7, #16]
 8001264:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001268:	edc7 7a04 	vstr	s15, [r7, #16]

	return y;
 800126c:	693b      	ldr	r3, [r7, #16]
 800126e:	ee07 3a90 	vmov	s15, r3
}
 8001272:	eeb0 0a67 	vmov.f32	s0, s15
 8001276:	371c      	adds	r7, #28
 8001278:	46bd      	mov	sp, r7
 800127a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127e:	4770      	bx	lr
 8001280:	5f3759df 	.word	0x5f3759df

08001284 <mpu_write_byte>:
  *                 mpu_set_gyro_fsr(),
  *                 mpu_set_accel_fsr(),
  *                 mpu_device_init() function
  */
uint8_t mpu_write_byte(uint8_t const reg, uint8_t const data)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b086      	sub	sp, #24
 8001288:	af02      	add	r7, sp, #8
 800128a:	4603      	mov	r3, r0
 800128c:	460a      	mov	r2, r1
 800128e:	71fb      	strb	r3, [r7, #7]
 8001290:	4613      	mov	r3, r2
 8001292:	71bb      	strb	r3, [r7, #6]
    MPU_NSS_LOW;
 8001294:	2200      	movs	r2, #0
 8001296:	2140      	movs	r1, #64	; 0x40
 8001298:	4813      	ldr	r0, [pc, #76]	; (80012e8 <mpu_write_byte+0x64>)
 800129a:	f008 f921 	bl	80094e0 <HAL_GPIO_WritePin>
	uint8_t tx, rx;
    tx = reg & 0x7F;
 800129e:	79fb      	ldrb	r3, [r7, #7]
 80012a0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80012a4:	b2db      	uxtb	r3, r3
 80012a6:	73fb      	strb	r3, [r7, #15]
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 100);
 80012a8:	f107 020e 	add.w	r2, r7, #14
 80012ac:	f107 010f 	add.w	r1, r7, #15
 80012b0:	2364      	movs	r3, #100	; 0x64
 80012b2:	9300      	str	r3, [sp, #0]
 80012b4:	2301      	movs	r3, #1
 80012b6:	480d      	ldr	r0, [pc, #52]	; (80012ec <mpu_write_byte+0x68>)
 80012b8:	f00a f8ec 	bl	800b494 <HAL_SPI_TransmitReceive>
    tx = data;
 80012bc:	79bb      	ldrb	r3, [r7, #6]
 80012be:	73fb      	strb	r3, [r7, #15]
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1, 100);
 80012c0:	f107 020e 	add.w	r2, r7, #14
 80012c4:	f107 010f 	add.w	r1, r7, #15
 80012c8:	2364      	movs	r3, #100	; 0x64
 80012ca:	9300      	str	r3, [sp, #0]
 80012cc:	2301      	movs	r3, #1
 80012ce:	4807      	ldr	r0, [pc, #28]	; (80012ec <mpu_write_byte+0x68>)
 80012d0:	f00a f8e0 	bl	800b494 <HAL_SPI_TransmitReceive>
    MPU_NSS_HIGH;
 80012d4:	2201      	movs	r2, #1
 80012d6:	2140      	movs	r1, #64	; 0x40
 80012d8:	4803      	ldr	r0, [pc, #12]	; (80012e8 <mpu_write_byte+0x64>)
 80012da:	f008 f901 	bl	80094e0 <HAL_GPIO_WritePin>
    return 0;
 80012de:	2300      	movs	r3, #0
}
 80012e0:	4618      	mov	r0, r3
 80012e2:	3710      	adds	r7, #16
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bd80      	pop	{r7, pc}
 80012e8:	40021400 	.word	0x40021400
 80012ec:	20000a7c 	.word	0x20000a7c

080012f0 <mpu_read_byte>:
  * @retval
  * @usage  call in ist_reg_read_by_mpu(),
  *                 mpu_device_init() function
  */
uint8_t mpu_read_byte(uint8_t const reg)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b086      	sub	sp, #24
 80012f4:	af02      	add	r7, sp, #8
 80012f6:	4603      	mov	r3, r0
 80012f8:	71fb      	strb	r3, [r7, #7]
    MPU_NSS_LOW;
 80012fa:	2200      	movs	r2, #0
 80012fc:	2140      	movs	r1, #64	; 0x40
 80012fe:	4813      	ldr	r0, [pc, #76]	; (800134c <mpu_read_byte+0x5c>)
 8001300:	f008 f8ee 	bl	80094e0 <HAL_GPIO_WritePin>
	uint8_t rx, tx;
    tx = reg | 0x80;
 8001304:	79fb      	ldrb	r3, [r7, #7]
 8001306:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800130a:	b2db      	uxtb	r3, r3
 800130c:	73bb      	strb	r3, [r7, #14]
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1,100);
 800130e:	f107 020f 	add.w	r2, r7, #15
 8001312:	f107 010e 	add.w	r1, r7, #14
 8001316:	2364      	movs	r3, #100	; 0x64
 8001318:	9300      	str	r3, [sp, #0]
 800131a:	2301      	movs	r3, #1
 800131c:	480c      	ldr	r0, [pc, #48]	; (8001350 <mpu_read_byte+0x60>)
 800131e:	f00a f8b9 	bl	800b494 <HAL_SPI_TransmitReceive>
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1 , 100);
 8001322:	f107 020f 	add.w	r2, r7, #15
 8001326:	f107 010e 	add.w	r1, r7, #14
 800132a:	2364      	movs	r3, #100	; 0x64
 800132c:	9300      	str	r3, [sp, #0]
 800132e:	2301      	movs	r3, #1
 8001330:	4807      	ldr	r0, [pc, #28]	; (8001350 <mpu_read_byte+0x60>)
 8001332:	f00a f8af 	bl	800b494 <HAL_SPI_TransmitReceive>
    MPU_NSS_HIGH;
 8001336:	2201      	movs	r2, #1
 8001338:	2140      	movs	r1, #64	; 0x40
 800133a:	4804      	ldr	r0, [pc, #16]	; (800134c <mpu_read_byte+0x5c>)
 800133c:	f008 f8d0 	bl	80094e0 <HAL_GPIO_WritePin>
    return rx;
 8001340:	7bfb      	ldrb	r3, [r7, #15]
}
 8001342:	4618      	mov	r0, r3
 8001344:	3710      	adds	r7, #16
 8001346:	46bd      	mov	sp, r7
 8001348:	bd80      	pop	{r7, pc}
 800134a:	bf00      	nop
 800134c:	40021400 	.word	0x40021400
 8001350:	20000a7c 	.word	0x20000a7c

08001354 <mpu_read_bytes>:
  * @usage  call in ist8310_get_data(),
  *                 mpu_get_data(),
  *                 mpu_offset_call() function
  */
uint8_t mpu_read_bytes(uint8_t const regAddr, uint8_t* pData, uint8_t len)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b086      	sub	sp, #24
 8001358:	af02      	add	r7, sp, #8
 800135a:	4603      	mov	r3, r0
 800135c:	6039      	str	r1, [r7, #0]
 800135e:	71fb      	strb	r3, [r7, #7]
 8001360:	4613      	mov	r3, r2
 8001362:	71bb      	strb	r3, [r7, #6]
	uint8_t tx, rx;
    MPU_NSS_LOW;
 8001364:	2200      	movs	r2, #0
 8001366:	2140      	movs	r1, #64	; 0x40
 8001368:	4811      	ldr	r0, [pc, #68]	; (80013b0 <mpu_read_bytes+0x5c>)
 800136a:	f008 f8b9 	bl	80094e0 <HAL_GPIO_WritePin>
    tx         = regAddr | 0x80;
 800136e:	79fb      	ldrb	r3, [r7, #7]
 8001370:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001374:	b2db      	uxtb	r3, r3
 8001376:	73fb      	strb	r3, [r7, #15]
    HAL_SPI_TransmitReceive(&MPU_HSPI, &tx, &rx, 1,100);
 8001378:	f107 020e 	add.w	r2, r7, #14
 800137c:	f107 010f 	add.w	r1, r7, #15
 8001380:	2364      	movs	r3, #100	; 0x64
 8001382:	9300      	str	r3, [sp, #0]
 8001384:	2301      	movs	r3, #1
 8001386:	480b      	ldr	r0, [pc, #44]	; (80013b4 <mpu_read_bytes+0x60>)
 8001388:	f00a f884 	bl	800b494 <HAL_SPI_TransmitReceive>
    HAL_SPI_Receive(&MPU_HSPI, pData, len,100);
 800138c:	79bb      	ldrb	r3, [r7, #6]
 800138e:	b29a      	uxth	r2, r3
 8001390:	2364      	movs	r3, #100	; 0x64
 8001392:	6839      	ldr	r1, [r7, #0]
 8001394:	4807      	ldr	r0, [pc, #28]	; (80013b4 <mpu_read_bytes+0x60>)
 8001396:	f009 ff6c 	bl	800b272 <HAL_SPI_Receive>
    MPU_NSS_HIGH;
 800139a:	2201      	movs	r2, #1
 800139c:	2140      	movs	r1, #64	; 0x40
 800139e:	4804      	ldr	r0, [pc, #16]	; (80013b0 <mpu_read_bytes+0x5c>)
 80013a0:	f008 f89e 	bl	80094e0 <HAL_GPIO_WritePin>
    return 0;
 80013a4:	2300      	movs	r3, #0
}
 80013a6:	4618      	mov	r0, r3
 80013a8:	3710      	adds	r7, #16
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bd80      	pop	{r7, pc}
 80013ae:	bf00      	nop
 80013b0:	40021400 	.word	0x40021400
 80013b4:	20000a7c 	.word	0x20000a7c

080013b8 <ist_reg_write_by_mpu>:
  *         data: data to be written
  * @retval
  * @usage  call in ist8310_init() function
  */
static void ist_reg_write_by_mpu(uint8_t addr, uint8_t data)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b082      	sub	sp, #8
 80013bc:	af00      	add	r7, sp, #0
 80013be:	4603      	mov	r3, r0
 80013c0:	460a      	mov	r2, r1
 80013c2:	71fb      	strb	r3, [r7, #7]
 80013c4:	4613      	mov	r3, r2
 80013c6:	71bb      	strb	r3, [r7, #6]
    /* turn off slave 1 at first */
    mpu_write_byte(MPU6500_I2C_SLV1_CTRL, 0x00);
 80013c8:	2100      	movs	r1, #0
 80013ca:	202a      	movs	r0, #42	; 0x2a
 80013cc:	f7ff ff5a 	bl	8001284 <mpu_write_byte>
    MPU_DELAY(2);
 80013d0:	2002      	movs	r0, #2
 80013d2:	f006 fb51 	bl	8007a78 <HAL_Delay>
    mpu_write_byte(MPU6500_I2C_SLV1_REG, addr);
 80013d6:	79fb      	ldrb	r3, [r7, #7]
 80013d8:	4619      	mov	r1, r3
 80013da:	2029      	movs	r0, #41	; 0x29
 80013dc:	f7ff ff52 	bl	8001284 <mpu_write_byte>
    MPU_DELAY(2);
 80013e0:	2002      	movs	r0, #2
 80013e2:	f006 fb49 	bl	8007a78 <HAL_Delay>
    mpu_write_byte(MPU6500_I2C_SLV1_DO, data);
 80013e6:	79bb      	ldrb	r3, [r7, #6]
 80013e8:	4619      	mov	r1, r3
 80013ea:	2064      	movs	r0, #100	; 0x64
 80013ec:	f7ff ff4a 	bl	8001284 <mpu_write_byte>
    MPU_DELAY(2);
 80013f0:	2002      	movs	r0, #2
 80013f2:	f006 fb41 	bl	8007a78 <HAL_Delay>
    /* turn on slave 1 with one byte transmitting */
    mpu_write_byte(MPU6500_I2C_SLV1_CTRL, 0x80 | 0x01);
 80013f6:	2181      	movs	r1, #129	; 0x81
 80013f8:	202a      	movs	r0, #42	; 0x2a
 80013fa:	f7ff ff43 	bl	8001284 <mpu_write_byte>
    /* wait longer to ensure the data is transmitted from slave 1 */
    MPU_DELAY(10);
 80013fe:	200a      	movs	r0, #10
 8001400:	f006 fb3a 	bl	8007a78 <HAL_Delay>
}
 8001404:	bf00      	nop
 8001406:	3708      	adds	r7, #8
 8001408:	46bd      	mov	sp, r7
 800140a:	bd80      	pop	{r7, pc}

0800140c <ist_reg_read_by_mpu>:
	* @param  addr: the address to be read of IST8310's register
	* @retval
  * @usage  call in ist8310_init() function
	*/
static uint8_t ist_reg_read_by_mpu(uint8_t addr)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b084      	sub	sp, #16
 8001410:	af00      	add	r7, sp, #0
 8001412:	4603      	mov	r3, r0
 8001414:	71fb      	strb	r3, [r7, #7]
    uint8_t retval;
    mpu_write_byte(MPU6500_I2C_SLV4_REG, addr);
 8001416:	79fb      	ldrb	r3, [r7, #7]
 8001418:	4619      	mov	r1, r3
 800141a:	2032      	movs	r0, #50	; 0x32
 800141c:	f7ff ff32 	bl	8001284 <mpu_write_byte>
    MPU_DELAY(10);
 8001420:	200a      	movs	r0, #10
 8001422:	f006 fb29 	bl	8007a78 <HAL_Delay>
    mpu_write_byte(MPU6500_I2C_SLV4_CTRL, 0x80);
 8001426:	2180      	movs	r1, #128	; 0x80
 8001428:	2034      	movs	r0, #52	; 0x34
 800142a:	f7ff ff2b 	bl	8001284 <mpu_write_byte>
    MPU_DELAY(10);
 800142e:	200a      	movs	r0, #10
 8001430:	f006 fb22 	bl	8007a78 <HAL_Delay>
    retval = mpu_read_byte(MPU6500_I2C_SLV4_DI);
 8001434:	2035      	movs	r0, #53	; 0x35
 8001436:	f7ff ff5b 	bl	80012f0 <mpu_read_byte>
 800143a:	4603      	mov	r3, r0
 800143c:	73fb      	strb	r3, [r7, #15]
    /* turn off slave4 after read */
    mpu_write_byte(MPU6500_I2C_SLV4_CTRL, 0x00);
 800143e:	2100      	movs	r1, #0
 8001440:	2034      	movs	r0, #52	; 0x34
 8001442:	f7ff ff1f 	bl	8001284 <mpu_write_byte>
    MPU_DELAY(10);
 8001446:	200a      	movs	r0, #10
 8001448:	f006 fb16 	bl	8007a78 <HAL_Delay>
    return retval;
 800144c:	7bfb      	ldrb	r3, [r7, #15]
}
 800144e:	4618      	mov	r0, r3
 8001450:	3710      	adds	r7, #16
 8001452:	46bd      	mov	sp, r7
 8001454:	bd80      	pop	{r7, pc}

08001456 <mpu_master_i2c_auto_read_config>:
* @param    device_address: slave device address, Address[6:0]
	* @retval   void
	* @note
	*/
static void mpu_master_i2c_auto_read_config(uint8_t device_address, uint8_t reg_base_addr, uint8_t data_num)
{
 8001456:	b580      	push	{r7, lr}
 8001458:	b082      	sub	sp, #8
 800145a:	af00      	add	r7, sp, #0
 800145c:	4603      	mov	r3, r0
 800145e:	71fb      	strb	r3, [r7, #7]
 8001460:	460b      	mov	r3, r1
 8001462:	71bb      	strb	r3, [r7, #6]
 8001464:	4613      	mov	r3, r2
 8001466:	717b      	strb	r3, [r7, #5]
    /*
	   * configure the device address of the IST8310
     * use slave1, auto transmit single measure mode
	   */
    mpu_write_byte(MPU6500_I2C_SLV1_ADDR, device_address);
 8001468:	79fb      	ldrb	r3, [r7, #7]
 800146a:	4619      	mov	r1, r3
 800146c:	2028      	movs	r0, #40	; 0x28
 800146e:	f7ff ff09 	bl	8001284 <mpu_write_byte>
    MPU_DELAY(2);
 8001472:	2002      	movs	r0, #2
 8001474:	f006 fb00 	bl	8007a78 <HAL_Delay>
    mpu_write_byte(MPU6500_I2C_SLV1_REG, IST8310_R_CONFA);
 8001478:	210a      	movs	r1, #10
 800147a:	2029      	movs	r0, #41	; 0x29
 800147c:	f7ff ff02 	bl	8001284 <mpu_write_byte>
    MPU_DELAY(2);
 8001480:	2002      	movs	r0, #2
 8001482:	f006 faf9 	bl	8007a78 <HAL_Delay>
    mpu_write_byte(MPU6500_I2C_SLV1_DO, IST8310_ODR_MODE);
 8001486:	2101      	movs	r1, #1
 8001488:	2064      	movs	r0, #100	; 0x64
 800148a:	f7ff fefb 	bl	8001284 <mpu_write_byte>
    MPU_DELAY(2);
 800148e:	2002      	movs	r0, #2
 8001490:	f006 faf2 	bl	8007a78 <HAL_Delay>

    /* use slave0,auto read data */
    mpu_write_byte(MPU6500_I2C_SLV0_ADDR, 0x80 | device_address);
 8001494:	79fb      	ldrb	r3, [r7, #7]
 8001496:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800149a:	b2db      	uxtb	r3, r3
 800149c:	4619      	mov	r1, r3
 800149e:	2025      	movs	r0, #37	; 0x25
 80014a0:	f7ff fef0 	bl	8001284 <mpu_write_byte>
    MPU_DELAY(2);
 80014a4:	2002      	movs	r0, #2
 80014a6:	f006 fae7 	bl	8007a78 <HAL_Delay>
    mpu_write_byte(MPU6500_I2C_SLV0_REG, reg_base_addr);
 80014aa:	79bb      	ldrb	r3, [r7, #6]
 80014ac:	4619      	mov	r1, r3
 80014ae:	2026      	movs	r0, #38	; 0x26
 80014b0:	f7ff fee8 	bl	8001284 <mpu_write_byte>
    MPU_DELAY(2);
 80014b4:	2002      	movs	r0, #2
 80014b6:	f006 fadf 	bl	8007a78 <HAL_Delay>

    /* every eight mpu6500 internal samples one i2c master read */
    mpu_write_byte(MPU6500_I2C_SLV4_CTRL, 0x03);
 80014ba:	2103      	movs	r1, #3
 80014bc:	2034      	movs	r0, #52	; 0x34
 80014be:	f7ff fee1 	bl	8001284 <mpu_write_byte>
    MPU_DELAY(2);
 80014c2:	2002      	movs	r0, #2
 80014c4:	f006 fad8 	bl	8007a78 <HAL_Delay>
    /* enable slave 0 and 1 access delay */
    mpu_write_byte(MPU6500_I2C_MST_DELAY_CTRL, 0x01 | 0x02);
 80014c8:	2103      	movs	r1, #3
 80014ca:	2067      	movs	r0, #103	; 0x67
 80014cc:	f7ff feda 	bl	8001284 <mpu_write_byte>
    MPU_DELAY(2);
 80014d0:	2002      	movs	r0, #2
 80014d2:	f006 fad1 	bl	8007a78 <HAL_Delay>
    /* enable slave 1 auto transmit */
    mpu_write_byte(MPU6500_I2C_SLV1_CTRL, 0x80 | 0x01);
 80014d6:	2181      	movs	r1, #129	; 0x81
 80014d8:	202a      	movs	r0, #42	; 0x2a
 80014da:	f7ff fed3 	bl	8001284 <mpu_write_byte>
		/* Wait 6ms (minimum waiting time for 16 times internal average setup) */
    MPU_DELAY(6);
 80014de:	2006      	movs	r0, #6
 80014e0:	f006 faca 	bl	8007a78 <HAL_Delay>
    /* enable slave 0 with data_num bytes reading */
    mpu_write_byte(MPU6500_I2C_SLV0_CTRL, 0x80 | data_num);
 80014e4:	797b      	ldrb	r3, [r7, #5]
 80014e6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80014ea:	b2db      	uxtb	r3, r3
 80014ec:	4619      	mov	r1, r3
 80014ee:	2027      	movs	r0, #39	; 0x27
 80014f0:	f7ff fec8 	bl	8001284 <mpu_write_byte>
    MPU_DELAY(2);
 80014f4:	2002      	movs	r0, #2
 80014f6:	f006 fabf 	bl	8007a78 <HAL_Delay>
}
 80014fa:	bf00      	nop
 80014fc:	3708      	adds	r7, #8
 80014fe:	46bd      	mov	sp, r7
 8001500:	bd80      	pop	{r7, pc}

08001502 <ist8310_init>:
	* @param
	* @retval
  * @usage  call in mpu_device_init() function
	*/
uint8_t ist8310_init()
{
 8001502:	b580      	push	{r7, lr}
 8001504:	af00      	add	r7, sp, #0
	  /* enable iic master mode */
    mpu_write_byte(MPU6500_USER_CTRL, 0x30);
 8001506:	2130      	movs	r1, #48	; 0x30
 8001508:	206a      	movs	r0, #106	; 0x6a
 800150a:	f7ff febb 	bl	8001284 <mpu_write_byte>
    MPU_DELAY(10);
 800150e:	200a      	movs	r0, #10
 8001510:	f006 fab2 	bl	8007a78 <HAL_Delay>
	  /* enable iic 400khz */
    mpu_write_byte(MPU6500_I2C_MST_CTRL, 0x0d);
 8001514:	210d      	movs	r1, #13
 8001516:	2024      	movs	r0, #36	; 0x24
 8001518:	f7ff feb4 	bl	8001284 <mpu_write_byte>
    MPU_DELAY(10);
 800151c:	200a      	movs	r0, #10
 800151e:	f006 faab 	bl	8007a78 <HAL_Delay>

    /* turn on slave 1 for ist write and slave 4 to ist read */
    mpu_write_byte(MPU6500_I2C_SLV1_ADDR, IST8310_ADDRESS);
 8001522:	210e      	movs	r1, #14
 8001524:	2028      	movs	r0, #40	; 0x28
 8001526:	f7ff fead 	bl	8001284 <mpu_write_byte>
    MPU_DELAY(10);
 800152a:	200a      	movs	r0, #10
 800152c:	f006 faa4 	bl	8007a78 <HAL_Delay>
    mpu_write_byte(MPU6500_I2C_SLV4_ADDR, 0x80 | IST8310_ADDRESS);
 8001530:	218e      	movs	r1, #142	; 0x8e
 8001532:	2031      	movs	r0, #49	; 0x31
 8001534:	f7ff fea6 	bl	8001284 <mpu_write_byte>
    MPU_DELAY(10);
 8001538:	200a      	movs	r0, #10
 800153a:	f006 fa9d 	bl	8007a78 <HAL_Delay>

    /* IST8310_R_CONFB 0x01 = device rst */
    ist_reg_write_by_mpu(IST8310_R_CONFB, 0x01);
 800153e:	2101      	movs	r1, #1
 8001540:	200b      	movs	r0, #11
 8001542:	f7ff ff39 	bl	80013b8 <ist_reg_write_by_mpu>
    MPU_DELAY(10);
 8001546:	200a      	movs	r0, #10
 8001548:	f006 fa96 	bl	8007a78 <HAL_Delay>
    if (IST8310_DEVICE_ID_A != ist_reg_read_by_mpu(IST8310_WHO_AM_I))
 800154c:	2000      	movs	r0, #0
 800154e:	f7ff ff5d 	bl	800140c <ist_reg_read_by_mpu>
 8001552:	4603      	mov	r3, r0
 8001554:	2b10      	cmp	r3, #16
 8001556:	d001      	beq.n	800155c <ist8310_init+0x5a>
        return 1;
 8001558:	2301      	movs	r3, #1
 800155a:	e059      	b.n	8001610 <ist8310_init+0x10e>

		/* soft reset */
    ist_reg_write_by_mpu(IST8310_R_CONFB, 0x01);
 800155c:	2101      	movs	r1, #1
 800155e:	200b      	movs	r0, #11
 8001560:	f7ff ff2a 	bl	80013b8 <ist_reg_write_by_mpu>
    MPU_DELAY(10);
 8001564:	200a      	movs	r0, #10
 8001566:	f006 fa87 	bl	8007a78 <HAL_Delay>

		/* config as ready mode to access register */
    ist_reg_write_by_mpu(IST8310_R_CONFA, 0x00);
 800156a:	2100      	movs	r1, #0
 800156c:	200a      	movs	r0, #10
 800156e:	f7ff ff23 	bl	80013b8 <ist_reg_write_by_mpu>
    if (ist_reg_read_by_mpu(IST8310_R_CONFA) != 0x00)
 8001572:	200a      	movs	r0, #10
 8001574:	f7ff ff4a 	bl	800140c <ist_reg_read_by_mpu>
 8001578:	4603      	mov	r3, r0
 800157a:	2b00      	cmp	r3, #0
 800157c:	d001      	beq.n	8001582 <ist8310_init+0x80>
        return 2;
 800157e:	2302      	movs	r3, #2
 8001580:	e046      	b.n	8001610 <ist8310_init+0x10e>
    MPU_DELAY(10);
 8001582:	200a      	movs	r0, #10
 8001584:	f006 fa78 	bl	8007a78 <HAL_Delay>

		//interrupts enabled
    ist_reg_write_by_mpu(IST8310_R_CONFB, 0x0C);		//1100
 8001588:	210c      	movs	r1, #12
 800158a:	200b      	movs	r0, #11
 800158c:	f7ff ff14 	bl	80013b8 <ist_reg_write_by_mpu>
    if (ist_reg_read_by_mpu(IST8310_R_CONFB) != 0x0C)	//enables both DRDY and active HIGH interrupt
 8001590:	200b      	movs	r0, #11
 8001592:	f7ff ff3b 	bl	800140c <ist_reg_read_by_mpu>
 8001596:	4603      	mov	r3, r0
 8001598:	2b0c      	cmp	r3, #12
 800159a:	d001      	beq.n	80015a0 <ist8310_init+0x9e>
        return 3;
 800159c:	2303      	movs	r3, #3
 800159e:	e037      	b.n	8001610 <ist8310_init+0x10e>
    MPU_DELAY(10);
 80015a0:	200a      	movs	r0, #10
 80015a2:	f006 fa69 	bl	8007a78 <HAL_Delay>

    /* config low noise mode, x,y,z axis 16 time 1 avg */
    ist_reg_write_by_mpu(IST8310_AVGCNTL, 0x24); //100100
 80015a6:	2124      	movs	r1, #36	; 0x24
 80015a8:	2041      	movs	r0, #65	; 0x41
 80015aa:	f7ff ff05 	bl	80013b8 <ist_reg_write_by_mpu>
    if (ist_reg_read_by_mpu(IST8310_AVGCNTL) != 0x24)
 80015ae:	2041      	movs	r0, #65	; 0x41
 80015b0:	f7ff ff2c 	bl	800140c <ist_reg_read_by_mpu>
 80015b4:	4603      	mov	r3, r0
 80015b6:	2b24      	cmp	r3, #36	; 0x24
 80015b8:	d001      	beq.n	80015be <ist8310_init+0xbc>
        return 4;
 80015ba:	2304      	movs	r3, #4
 80015bc:	e028      	b.n	8001610 <ist8310_init+0x10e>
    MPU_DELAY(10);
 80015be:	200a      	movs	r0, #10
 80015c0:	f006 fa5a 	bl	8007a78 <HAL_Delay>

    /* Set/Reset pulse duration setup,normal mode */
    ist_reg_write_by_mpu(IST8310_PDCNTL, 0xc0);
 80015c4:	21c0      	movs	r1, #192	; 0xc0
 80015c6:	2042      	movs	r0, #66	; 0x42
 80015c8:	f7ff fef6 	bl	80013b8 <ist_reg_write_by_mpu>
    if (ist_reg_read_by_mpu(IST8310_PDCNTL) != 0xc0)
 80015cc:	2042      	movs	r0, #66	; 0x42
 80015ce:	f7ff ff1d 	bl	800140c <ist_reg_read_by_mpu>
 80015d2:	4603      	mov	r3, r0
 80015d4:	2bc0      	cmp	r3, #192	; 0xc0
 80015d6:	d001      	beq.n	80015dc <ist8310_init+0xda>
        return 5;
 80015d8:	2305      	movs	r3, #5
 80015da:	e019      	b.n	8001610 <ist8310_init+0x10e>
    MPU_DELAY(10);
 80015dc:	200a      	movs	r0, #10
 80015de:	f006 fa4b 	bl	8007a78 <HAL_Delay>

    /* turn off slave1 & slave 4 */
    mpu_write_byte(MPU6500_I2C_SLV1_CTRL, 0x00);
 80015e2:	2100      	movs	r1, #0
 80015e4:	202a      	movs	r0, #42	; 0x2a
 80015e6:	f7ff fe4d 	bl	8001284 <mpu_write_byte>
    MPU_DELAY(10);
 80015ea:	200a      	movs	r0, #10
 80015ec:	f006 fa44 	bl	8007a78 <HAL_Delay>
    mpu_write_byte(MPU6500_I2C_SLV4_CTRL, 0x00);
 80015f0:	2100      	movs	r1, #0
 80015f2:	2034      	movs	r0, #52	; 0x34
 80015f4:	f7ff fe46 	bl	8001284 <mpu_write_byte>
    MPU_DELAY(10);
 80015f8:	200a      	movs	r0, #10
 80015fa:	f006 fa3d 	bl	8007a78 <HAL_Delay>



    /* configure and turn on slave 0 */
    mpu_master_i2c_auto_read_config(IST8310_ADDRESS, IST8310_R_XL, 0x06);
 80015fe:	2206      	movs	r2, #6
 8001600:	2103      	movs	r1, #3
 8001602:	200e      	movs	r0, #14
 8001604:	f7ff ff27 	bl	8001456 <mpu_master_i2c_auto_read_config>
    MPU_DELAY(100);
 8001608:	2064      	movs	r0, #100	; 0x64
 800160a:	f006 fa35 	bl	8007a78 <HAL_Delay>
    return 0;
 800160e:	2300      	movs	r3, #0
}
 8001610:	4618      	mov	r0, r3
 8001612:	bd80      	pop	{r7, pc}

08001614 <mpu_get_data>:
  * @param
	* @retval
  * @usage  call in main() function
	*/
void mpu_get_data()
{
 8001614:	b580      	push	{r7, lr}
 8001616:	af00      	add	r7, sp, #0
    mpu_read_bytes(MPU6500_ACCEL_XOUT_H, mpu_buff, 14);
 8001618:	220e      	movs	r2, #14
 800161a:	4903      	ldr	r1, [pc, #12]	; (8001628 <mpu_get_data+0x14>)
 800161c:	203b      	movs	r0, #59	; 0x3b
 800161e:	f7ff fe99 	bl	8001354 <mpu_read_bytes>
}
 8001622:	bf00      	nop
 8001624:	bd80      	pop	{r7, pc}
 8001626:	bf00      	nop
 8001628:	20000284 	.word	0x20000284

0800162c <mpu_set_gyro_fsr>:
  * @param  fsr: range(0,±250dps;1,±500dps;2,±1000dps;3,±2000dps)
  * @retval
  * @usage  call in mpu_device_init() function
  */
uint8_t mpu_set_gyro_fsr(uint8_t fsr)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b082      	sub	sp, #8
 8001630:	af00      	add	r7, sp, #0
 8001632:	4603      	mov	r3, r0
 8001634:	71fb      	strb	r3, [r7, #7]
  return mpu_write_byte(MPU6500_GYRO_CONFIG, fsr << 3);
 8001636:	79fb      	ldrb	r3, [r7, #7]
 8001638:	00db      	lsls	r3, r3, #3
 800163a:	b2db      	uxtb	r3, r3
 800163c:	4619      	mov	r1, r3
 800163e:	201b      	movs	r0, #27
 8001640:	f7ff fe20 	bl	8001284 <mpu_write_byte>
 8001644:	4603      	mov	r3, r0
}
 8001646:	4618      	mov	r0, r3
 8001648:	3708      	adds	r7, #8
 800164a:	46bd      	mov	sp, r7
 800164c:	bd80      	pop	{r7, pc}

0800164e <mpu_set_accel_fsr>:
  * @param  fsr: range(0,±2g;1,±4g;2,±8g;3,±16g)
  * @retval
  * @usage  call in mpu_device_init() function
  */
uint8_t mpu_set_accel_fsr(uint8_t fsr)
{
 800164e:	b580      	push	{r7, lr}
 8001650:	b082      	sub	sp, #8
 8001652:	af00      	add	r7, sp, #0
 8001654:	4603      	mov	r3, r0
 8001656:	71fb      	strb	r3, [r7, #7]
  return mpu_write_byte(MPU6500_ACCEL_CONFIG, fsr << 3);
 8001658:	79fb      	ldrb	r3, [r7, #7]
 800165a:	00db      	lsls	r3, r3, #3
 800165c:	b2db      	uxtb	r3, r3
 800165e:	4619      	mov	r1, r3
 8001660:	201c      	movs	r0, #28
 8001662:	f7ff fe0f 	bl	8001284 <mpu_write_byte>
 8001666:	4603      	mov	r3, r0
}
 8001668:	4618      	mov	r0, r3
 800166a:	3708      	adds	r7, #8
 800166c:	46bd      	mov	sp, r7
 800166e:	bd80      	pop	{r7, pc}

08001670 <reset_imu_data>:


void reset_imu_data()
{
 8001670:	b480      	push	{r7}
 8001672:	af00      	add	r7, sp, #0
}
 8001674:	bf00      	nop
 8001676:	46bd      	mov	sp, r7
 8001678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167c:	4770      	bx	lr
	...

08001680 <imu_config>:
  * @param
  * @retval
  * @usage  call in main() function
	*/
uint8_t imu_config(void)
{
 8001680:	b5b0      	push	{r4, r5, r7, lr}
 8001682:	b086      	sub	sp, #24
 8001684:	af00      	add	r7, sp, #0
	MPU_DELAY(100);
 8001686:	2064      	movs	r0, #100	; 0x64
 8001688:	f006 f9f6 	bl	8007a78 <HAL_Delay>

	id                               = mpu_read_byte(MPU6500_WHO_AM_I);
 800168c:	2075      	movs	r0, #117	; 0x75
 800168e:	f7ff fe2f 	bl	80012f0 <mpu_read_byte>
 8001692:	4603      	mov	r3, r0
 8001694:	461a      	mov	r2, r3
 8001696:	4b2b      	ldr	r3, [pc, #172]	; (8001744 <imu_config+0xc4>)
 8001698:	701a      	strb	r2, [r3, #0]
	uint8_t i                        = 0;
 800169a:	2300      	movs	r3, #0
 800169c:	75fb      	strb	r3, [r7, #23]
	uint8_t MPU6500_Init_Data[9][2] = {{ MPU6500_PWR_MGMT_1, 		0x03 },		// Clock Source - auto select???
 800169e:	4b2a      	ldr	r3, [pc, #168]	; (8001748 <imu_config+0xc8>)
 80016a0:	1d3c      	adds	r4, r7, #4
 80016a2:	461d      	mov	r5, r3
 80016a4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80016a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80016a8:	682b      	ldr	r3, [r5, #0]
 80016aa:	8023      	strh	r3, [r4, #0]
										{ MPU6500_ACCEL_CONFIG_2, 	0x01 },		// Accl LPF 2 @ 460Hz */
										{ MPU6500_USER_CTRL, 		0x20 },		// Enable AUX */
										{ MPU6500_INT_PIN_CFG,		0x00 },		// Reset interrupt settings
										{ MPU6500_INT_ENABLE,		0x01 },		// Enable interrupts on data ready
										};
	mpu_write_byte(MPU6500_PWR_MGMT_1, 0x80);			//Reset device
 80016ac:	2180      	movs	r1, #128	; 0x80
 80016ae:	206b      	movs	r0, #107	; 0x6b
 80016b0:	f7ff fde8 	bl	8001284 <mpu_write_byte>
	HAL_Delay(200);
 80016b4:	20c8      	movs	r0, #200	; 0xc8
 80016b6:	f006 f9df 	bl	8007a78 <HAL_Delay>
	mpu_write_byte(MPU6500_PWR_MGMT_1, 0x80);			//Reset device
 80016ba:	2180      	movs	r1, #128	; 0x80
 80016bc:	206b      	movs	r0, #107	; 0x6b
 80016be:	f7ff fde1 	bl	8001284 <mpu_write_byte>
	HAL_Delay(200);
 80016c2:	20c8      	movs	r0, #200	; 0xc8
 80016c4:	f006 f9d8 	bl	8007a78 <HAL_Delay>
	mpu_write_byte(MPU6500_PWR_MGMT_1, 0x80);			//Reset device
 80016c8:	2180      	movs	r1, #128	; 0x80
 80016ca:	206b      	movs	r0, #107	; 0x6b
 80016cc:	f7ff fdda 	bl	8001284 <mpu_write_byte>
	HAL_Delay(200);
 80016d0:	20c8      	movs	r0, #200	; 0xc8
 80016d2:	f006 f9d1 	bl	8007a78 <HAL_Delay>
	mpu_write_byte(MPU6500_SIGNAL_PATH_RESET, 0x07);	//Signal path reset
 80016d6:	2107      	movs	r1, #7
 80016d8:	2068      	movs	r0, #104	; 0x68
 80016da:	f7ff fdd3 	bl	8001284 <mpu_write_byte>
	HAL_Delay(200);
 80016de:	20c8      	movs	r0, #200	; 0xc8
 80016e0:	f006 f9ca 	bl	8007a78 <HAL_Delay>
	//write configuration registers
	for (i = 0; i < 9; i++)
 80016e4:	2300      	movs	r3, #0
 80016e6:	75fb      	strb	r3, [r7, #23]
 80016e8:	e015      	b.n	8001716 <imu_config+0x96>
	{
		mpu_write_byte(MPU6500_Init_Data[i][0], MPU6500_Init_Data[i][1]);
 80016ea:	7dfb      	ldrb	r3, [r7, #23]
 80016ec:	005b      	lsls	r3, r3, #1
 80016ee:	3318      	adds	r3, #24
 80016f0:	443b      	add	r3, r7
 80016f2:	f813 2c14 	ldrb.w	r2, [r3, #-20]
 80016f6:	7dfb      	ldrb	r3, [r7, #23]
 80016f8:	005b      	lsls	r3, r3, #1
 80016fa:	3318      	adds	r3, #24
 80016fc:	443b      	add	r3, r7
 80016fe:	f813 3c13 	ldrb.w	r3, [r3, #-19]
 8001702:	4619      	mov	r1, r3
 8001704:	4610      	mov	r0, r2
 8001706:	f7ff fdbd 	bl	8001284 <mpu_write_byte>
		MPU_DELAY(2);
 800170a:	2002      	movs	r0, #2
 800170c:	f006 f9b4 	bl	8007a78 <HAL_Delay>
	for (i = 0; i < 9; i++)
 8001710:	7dfb      	ldrb	r3, [r7, #23]
 8001712:	3301      	adds	r3, #1
 8001714:	75fb      	strb	r3, [r7, #23]
 8001716:	7dfb      	ldrb	r3, [r7, #23]
 8001718:	2b08      	cmp	r3, #8
 800171a:	d9e6      	bls.n	80016ea <imu_config+0x6a>
	}

	mpu_set_gyro_fsr(3);
 800171c:	2003      	movs	r0, #3
 800171e:	f7ff ff85 	bl	800162c <mpu_set_gyro_fsr>
	mpu_set_accel_fsr(2);
 8001722:	2002      	movs	r0, #2
 8001724:	f7ff ff93 	bl	800164e <mpu_set_accel_fsr>

	ist8310_init();
 8001728:	f7ff feeb 	bl	8001502 <ist8310_init>
	mpu_offset_call();
 800172c:	f000 f810 	bl	8001750 <mpu_offset_call>
	reset_imu_data();
 8001730:	f7ff ff9e 	bl	8001670 <reset_imu_data>
	imu_init_status = 1;
 8001734:	4b05      	ldr	r3, [pc, #20]	; (800174c <imu_config+0xcc>)
 8001736:	2201      	movs	r2, #1
 8001738:	701a      	strb	r2, [r3, #0]
	return 0;
 800173a:	2300      	movs	r3, #0
}
 800173c:	4618      	mov	r0, r3
 800173e:	3718      	adds	r7, #24
 8001740:	46bd      	mov	sp, r7
 8001742:	bdb0      	pop	{r4, r5, r7, pc}
 8001744:	2000029a 	.word	0x2000029a
 8001748:	08016968 	.word	0x08016968
 800174c:	20000280 	.word	0x20000280

08001750 <mpu_offset_call>:
  * @param
	* @retval
  * @usage  call in main() function
	*/
void mpu_offset_call(void)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b082      	sub	sp, #8
 8001754:	af00      	add	r7, sp, #0
	int i;
	for (i=0; i<300;i++)
 8001756:	2300      	movs	r3, #0
 8001758:	607b      	str	r3, [r7, #4]
 800175a:	e043      	b.n	80017e4 <mpu_offset_call+0x94>
	{
		mpu_read_bytes(MPU6500_ACCEL_XOUT_H, mpu_buff, 14);
 800175c:	220e      	movs	r2, #14
 800175e:	4937      	ldr	r1, [pc, #220]	; (800183c <mpu_offset_call+0xec>)
 8001760:	203b      	movs	r0, #59	; 0x3b
 8001762:	f7ff fdf7 	bl	8001354 <mpu_read_bytes>
		imu_data.gx_offset += mpu_buff[8]  << 8 | mpu_buff[9];
 8001766:	4b36      	ldr	r3, [pc, #216]	; (8001840 <mpu_offset_call+0xf0>)
 8001768:	f9b3 3032 	ldrsh.w	r3, [r3, #50]	; 0x32
 800176c:	b29a      	uxth	r2, r3
 800176e:	4b33      	ldr	r3, [pc, #204]	; (800183c <mpu_offset_call+0xec>)
 8001770:	7a1b      	ldrb	r3, [r3, #8]
 8001772:	021b      	lsls	r3, r3, #8
 8001774:	b219      	sxth	r1, r3
 8001776:	4b31      	ldr	r3, [pc, #196]	; (800183c <mpu_offset_call+0xec>)
 8001778:	7a5b      	ldrb	r3, [r3, #9]
 800177a:	b21b      	sxth	r3, r3
 800177c:	430b      	orrs	r3, r1
 800177e:	b21b      	sxth	r3, r3
 8001780:	b29b      	uxth	r3, r3
 8001782:	4413      	add	r3, r2
 8001784:	b29b      	uxth	r3, r3
 8001786:	b21a      	sxth	r2, r3
 8001788:	4b2d      	ldr	r3, [pc, #180]	; (8001840 <mpu_offset_call+0xf0>)
 800178a:	865a      	strh	r2, [r3, #50]	; 0x32
		imu_data.gy_offset += mpu_buff[10] << 8 | mpu_buff[11];
 800178c:	4b2c      	ldr	r3, [pc, #176]	; (8001840 <mpu_offset_call+0xf0>)
 800178e:	f9b3 3034 	ldrsh.w	r3, [r3, #52]	; 0x34
 8001792:	b29a      	uxth	r2, r3
 8001794:	4b29      	ldr	r3, [pc, #164]	; (800183c <mpu_offset_call+0xec>)
 8001796:	7a9b      	ldrb	r3, [r3, #10]
 8001798:	021b      	lsls	r3, r3, #8
 800179a:	b219      	sxth	r1, r3
 800179c:	4b27      	ldr	r3, [pc, #156]	; (800183c <mpu_offset_call+0xec>)
 800179e:	7adb      	ldrb	r3, [r3, #11]
 80017a0:	b21b      	sxth	r3, r3
 80017a2:	430b      	orrs	r3, r1
 80017a4:	b21b      	sxth	r3, r3
 80017a6:	b29b      	uxth	r3, r3
 80017a8:	4413      	add	r3, r2
 80017aa:	b29b      	uxth	r3, r3
 80017ac:	b21a      	sxth	r2, r3
 80017ae:	4b24      	ldr	r3, [pc, #144]	; (8001840 <mpu_offset_call+0xf0>)
 80017b0:	869a      	strh	r2, [r3, #52]	; 0x34
		imu_data.gz_offset += mpu_buff[12] << 8 | mpu_buff[13];
 80017b2:	4b23      	ldr	r3, [pc, #140]	; (8001840 <mpu_offset_call+0xf0>)
 80017b4:	f9b3 3036 	ldrsh.w	r3, [r3, #54]	; 0x36
 80017b8:	b29a      	uxth	r2, r3
 80017ba:	4b20      	ldr	r3, [pc, #128]	; (800183c <mpu_offset_call+0xec>)
 80017bc:	7b1b      	ldrb	r3, [r3, #12]
 80017be:	021b      	lsls	r3, r3, #8
 80017c0:	b219      	sxth	r1, r3
 80017c2:	4b1e      	ldr	r3, [pc, #120]	; (800183c <mpu_offset_call+0xec>)
 80017c4:	7b5b      	ldrb	r3, [r3, #13]
 80017c6:	b21b      	sxth	r3, r3
 80017c8:	430b      	orrs	r3, r1
 80017ca:	b21b      	sxth	r3, r3
 80017cc:	b29b      	uxth	r3, r3
 80017ce:	4413      	add	r3, r2
 80017d0:	b29b      	uxth	r3, r3
 80017d2:	b21a      	sxth	r2, r3
 80017d4:	4b1a      	ldr	r3, [pc, #104]	; (8001840 <mpu_offset_call+0xf0>)
 80017d6:	86da      	strh	r2, [r3, #54]	; 0x36

		MPU_DELAY(2);
 80017d8:	2002      	movs	r0, #2
 80017da:	f006 f94d 	bl	8007a78 <HAL_Delay>
	for (i=0; i<300;i++)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	3301      	adds	r3, #1
 80017e2:	607b      	str	r3, [r7, #4]
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80017ea:	dbb7      	blt.n	800175c <mpu_offset_call+0xc>
	}
	imu_data.gx_offset= imu_data.gx_offset / 300;
 80017ec:	4b14      	ldr	r3, [pc, #80]	; (8001840 <mpu_offset_call+0xf0>)
 80017ee:	f9b3 3032 	ldrsh.w	r3, [r3, #50]	; 0x32
 80017f2:	4a14      	ldr	r2, [pc, #80]	; (8001844 <mpu_offset_call+0xf4>)
 80017f4:	fb82 1203 	smull	r1, r2, r2, r3
 80017f8:	1152      	asrs	r2, r2, #5
 80017fa:	17db      	asrs	r3, r3, #31
 80017fc:	1ad3      	subs	r3, r2, r3
 80017fe:	b21a      	sxth	r2, r3
 8001800:	4b0f      	ldr	r3, [pc, #60]	; (8001840 <mpu_offset_call+0xf0>)
 8001802:	865a      	strh	r2, [r3, #50]	; 0x32
	imu_data.gy_offset= imu_data.gy_offset / 300;
 8001804:	4b0e      	ldr	r3, [pc, #56]	; (8001840 <mpu_offset_call+0xf0>)
 8001806:	f9b3 3034 	ldrsh.w	r3, [r3, #52]	; 0x34
 800180a:	4a0e      	ldr	r2, [pc, #56]	; (8001844 <mpu_offset_call+0xf4>)
 800180c:	fb82 1203 	smull	r1, r2, r2, r3
 8001810:	1152      	asrs	r2, r2, #5
 8001812:	17db      	asrs	r3, r3, #31
 8001814:	1ad3      	subs	r3, r2, r3
 8001816:	b21a      	sxth	r2, r3
 8001818:	4b09      	ldr	r3, [pc, #36]	; (8001840 <mpu_offset_call+0xf0>)
 800181a:	869a      	strh	r2, [r3, #52]	; 0x34
	imu_data.gz_offset= imu_data.gz_offset / 300;
 800181c:	4b08      	ldr	r3, [pc, #32]	; (8001840 <mpu_offset_call+0xf0>)
 800181e:	f9b3 3036 	ldrsh.w	r3, [r3, #54]	; 0x36
 8001822:	4a08      	ldr	r2, [pc, #32]	; (8001844 <mpu_offset_call+0xf4>)
 8001824:	fb82 1203 	smull	r1, r2, r2, r3
 8001828:	1152      	asrs	r2, r2, #5
 800182a:	17db      	asrs	r3, r3, #31
 800182c:	1ad3      	subs	r3, r2, r3
 800182e:	b21a      	sxth	r2, r3
 8001830:	4b03      	ldr	r3, [pc, #12]	; (8001840 <mpu_offset_call+0xf0>)
 8001832:	86da      	strh	r2, [r3, #54]	; 0x36
}
 8001834:	bf00      	nop
 8001836:	3708      	adds	r7, #8
 8001838:	46bd      	mov	sp, r7
 800183a:	bd80      	pop	{r7, pc}
 800183c:	20000284 	.word	0x20000284
 8001840:	20000248 	.word	0x20000248
 8001844:	1b4e81b5 	.word	0x1b4e81b5

08001848 <get_imu_data>:



void get_imu_data(uint16_t trig_pin)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b082      	sub	sp, #8
 800184c:	af00      	add	r7, sp, #0
 800184e:	4603      	mov	r3, r0
 8001850:	80fb      	strh	r3, [r7, #6]
	if (imu_init_status == 1)
 8001852:	4b07      	ldr	r3, [pc, #28]	; (8001870 <get_imu_data+0x28>)
 8001854:	781b      	ldrb	r3, [r3, #0]
 8001856:	2b01      	cmp	r3, #1
 8001858:	d105      	bne.n	8001866 <get_imu_data+0x1e>
	{
		mpu_get_data();
 800185a:	f7ff fedb 	bl	8001614 <mpu_get_data>
		process_ist_data();
 800185e:	f000 f809 	bl	8001874 <process_ist_data>
		process_mpu_data();
 8001862:	f000 f81b 	bl	800189c <process_mpu_data>
	}
}
 8001866:	bf00      	nop
 8001868:	3708      	adds	r7, #8
 800186a:	46bd      	mov	sp, r7
 800186c:	bd80      	pop	{r7, pc}
 800186e:	bf00      	nop
 8001870:	20000280 	.word	0x20000280

08001874 <process_ist_data>:

void process_ist_data()
{
 8001874:	b480      	push	{r7}
 8001876:	af00      	add	r7, sp, #0
	memcpy(&imu_data.mag_data.mx, ist_buff, 6);
 8001878:	4b06      	ldr	r3, [pc, #24]	; (8001894 <process_ist_data+0x20>)
 800187a:	4a07      	ldr	r2, [pc, #28]	; (8001898 <process_ist_data+0x24>)
 800187c:	3320      	adds	r3, #32
 800187e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001882:	6018      	str	r0, [r3, #0]
 8001884:	3304      	adds	r3, #4
 8001886:	8019      	strh	r1, [r3, #0]
}
 8001888:	bf00      	nop
 800188a:	46bd      	mov	sp, r7
 800188c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001890:	4770      	bx	lr
 8001892:	bf00      	nop
 8001894:	20000248 	.word	0x20000248
 8001898:	20000294 	.word	0x20000294

0800189c <process_mpu_data>:

void process_mpu_data()
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b082      	sub	sp, #8
 80018a0:	af00      	add	r7, sp, #0
	int16_t mpu_temp;
	mpu_temp   			= mpu_buff[0] << 8 | mpu_buff[1];
 80018a2:	4b54      	ldr	r3, [pc, #336]	; (80019f4 <process_mpu_data+0x158>)
 80018a4:	781b      	ldrb	r3, [r3, #0]
 80018a6:	021b      	lsls	r3, r3, #8
 80018a8:	b21a      	sxth	r2, r3
 80018aa:	4b52      	ldr	r3, [pc, #328]	; (80019f4 <process_mpu_data+0x158>)
 80018ac:	785b      	ldrb	r3, [r3, #1]
 80018ae:	b21b      	sxth	r3, r3
 80018b0:	4313      	orrs	r3, r2
 80018b2:	80fb      	strh	r3, [r7, #6]
    imu_data.accel_data.ax 	= mpu_temp * 1;
 80018b4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80018b8:	ee07 3a90 	vmov	s15, r3
 80018bc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80018c0:	4b4d      	ldr	r3, [pc, #308]	; (80019f8 <process_mpu_data+0x15c>)
 80018c2:	edc3 7a04 	vstr	s15, [r3, #16]
	mpu_temp   			= mpu_buff[2] << 8 | mpu_buff[3];
 80018c6:	4b4b      	ldr	r3, [pc, #300]	; (80019f4 <process_mpu_data+0x158>)
 80018c8:	789b      	ldrb	r3, [r3, #2]
 80018ca:	021b      	lsls	r3, r3, #8
 80018cc:	b21a      	sxth	r2, r3
 80018ce:	4b49      	ldr	r3, [pc, #292]	; (80019f4 <process_mpu_data+0x158>)
 80018d0:	78db      	ldrb	r3, [r3, #3]
 80018d2:	b21b      	sxth	r3, r3
 80018d4:	4313      	orrs	r3, r2
 80018d6:	80fb      	strh	r3, [r7, #6]
    imu_data.accel_data.ay 	= mpu_temp * 1;
 80018d8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80018dc:	ee07 3a90 	vmov	s15, r3
 80018e0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80018e4:	4b44      	ldr	r3, [pc, #272]	; (80019f8 <process_mpu_data+0x15c>)
 80018e6:	edc3 7a05 	vstr	s15, [r3, #20]
	mpu_temp   			= mpu_buff[4] << 8 | mpu_buff[5];
 80018ea:	4b42      	ldr	r3, [pc, #264]	; (80019f4 <process_mpu_data+0x158>)
 80018ec:	791b      	ldrb	r3, [r3, #4]
 80018ee:	021b      	lsls	r3, r3, #8
 80018f0:	b21a      	sxth	r2, r3
 80018f2:	4b40      	ldr	r3, [pc, #256]	; (80019f4 <process_mpu_data+0x158>)
 80018f4:	795b      	ldrb	r3, [r3, #5]
 80018f6:	b21b      	sxth	r3, r3
 80018f8:	4313      	orrs	r3, r2
 80018fa:	80fb      	strh	r3, [r7, #6]
    imu_data.accel_data.az 	= mpu_temp * 1;
 80018fc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001900:	ee07 3a90 	vmov	s15, r3
 8001904:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001908:	4b3b      	ldr	r3, [pc, #236]	; (80019f8 <process_mpu_data+0x15c>)
 800190a:	edc3 7a06 	vstr	s15, [r3, #24]
	//temperature = mpu_buff[6] << 8 | mpu_buff[7];
    accel_data_ready(imu_data.accel_data);
 800190e:	4b3a      	ldr	r3, [pc, #232]	; (80019f8 <process_mpu_data+0x15c>)
 8001910:	3310      	adds	r3, #16
 8001912:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001914:	f002 fe8e 	bl	8004634 <accel_data_ready>

	mpu_temp = ((mpu_buff[8]  << 8 | mpu_buff[9])  - imu_data.gx_offset);
 8001918:	4b36      	ldr	r3, [pc, #216]	; (80019f4 <process_mpu_data+0x158>)
 800191a:	7a1b      	ldrb	r3, [r3, #8]
 800191c:	021b      	lsls	r3, r3, #8
 800191e:	b21a      	sxth	r2, r3
 8001920:	4b34      	ldr	r3, [pc, #208]	; (80019f4 <process_mpu_data+0x158>)
 8001922:	7a5b      	ldrb	r3, [r3, #9]
 8001924:	b21b      	sxth	r3, r3
 8001926:	4313      	orrs	r3, r2
 8001928:	b21b      	sxth	r3, r3
 800192a:	b29a      	uxth	r2, r3
 800192c:	4b32      	ldr	r3, [pc, #200]	; (80019f8 <process_mpu_data+0x15c>)
 800192e:	f9b3 3032 	ldrsh.w	r3, [r3, #50]	; 0x32
 8001932:	b29b      	uxth	r3, r3
 8001934:	1ad3      	subs	r3, r2, r3
 8001936:	b29b      	uxth	r3, r3
 8001938:	80fb      	strh	r3, [r7, #6]
	imu_data.gyro_data.gx = mpu_temp/ 16.384f / 57.3f;
 800193a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800193e:	ee07 3a90 	vmov	s15, r3
 8001942:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001946:	eddf 6a2d 	vldr	s13, [pc, #180]	; 80019fc <process_mpu_data+0x160>
 800194a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800194e:	eddf 6a2c 	vldr	s13, [pc, #176]	; 8001a00 <process_mpu_data+0x164>
 8001952:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001956:	4b28      	ldr	r3, [pc, #160]	; (80019f8 <process_mpu_data+0x15c>)
 8001958:	edc3 7a00 	vstr	s15, [r3]
	mpu_temp = ((mpu_buff[10] << 8 | mpu_buff[11]) - imu_data.gy_offset);
 800195c:	4b25      	ldr	r3, [pc, #148]	; (80019f4 <process_mpu_data+0x158>)
 800195e:	7a9b      	ldrb	r3, [r3, #10]
 8001960:	021b      	lsls	r3, r3, #8
 8001962:	b21a      	sxth	r2, r3
 8001964:	4b23      	ldr	r3, [pc, #140]	; (80019f4 <process_mpu_data+0x158>)
 8001966:	7adb      	ldrb	r3, [r3, #11]
 8001968:	b21b      	sxth	r3, r3
 800196a:	4313      	orrs	r3, r2
 800196c:	b21b      	sxth	r3, r3
 800196e:	b29a      	uxth	r2, r3
 8001970:	4b21      	ldr	r3, [pc, #132]	; (80019f8 <process_mpu_data+0x15c>)
 8001972:	f9b3 3034 	ldrsh.w	r3, [r3, #52]	; 0x34
 8001976:	b29b      	uxth	r3, r3
 8001978:	1ad3      	subs	r3, r2, r3
 800197a:	b29b      	uxth	r3, r3
 800197c:	80fb      	strh	r3, [r7, #6]
	imu_data.gyro_data.gy = mpu_temp/ 16.384f / 57.3f;
 800197e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001982:	ee07 3a90 	vmov	s15, r3
 8001986:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800198a:	eddf 6a1c 	vldr	s13, [pc, #112]	; 80019fc <process_mpu_data+0x160>
 800198e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001992:	eddf 6a1b 	vldr	s13, [pc, #108]	; 8001a00 <process_mpu_data+0x164>
 8001996:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800199a:	4b17      	ldr	r3, [pc, #92]	; (80019f8 <process_mpu_data+0x15c>)
 800199c:	edc3 7a01 	vstr	s15, [r3, #4]
	mpu_temp = ((mpu_buff[12] << 8 | mpu_buff[13]) - imu_data.gz_offset);
 80019a0:	4b14      	ldr	r3, [pc, #80]	; (80019f4 <process_mpu_data+0x158>)
 80019a2:	7b1b      	ldrb	r3, [r3, #12]
 80019a4:	021b      	lsls	r3, r3, #8
 80019a6:	b21a      	sxth	r2, r3
 80019a8:	4b12      	ldr	r3, [pc, #72]	; (80019f4 <process_mpu_data+0x158>)
 80019aa:	7b5b      	ldrb	r3, [r3, #13]
 80019ac:	b21b      	sxth	r3, r3
 80019ae:	4313      	orrs	r3, r2
 80019b0:	b21b      	sxth	r3, r3
 80019b2:	b29a      	uxth	r2, r3
 80019b4:	4b10      	ldr	r3, [pc, #64]	; (80019f8 <process_mpu_data+0x15c>)
 80019b6:	f9b3 3036 	ldrsh.w	r3, [r3, #54]	; 0x36
 80019ba:	b29b      	uxth	r3, r3
 80019bc:	1ad3      	subs	r3, r2, r3
 80019be:	b29b      	uxth	r3, r3
 80019c0:	80fb      	strh	r3, [r7, #6]
	imu_data.gyro_data.gz = mpu_temp/ 16.384f / 57.3f;
 80019c2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80019c6:	ee07 3a90 	vmov	s15, r3
 80019ca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80019ce:	eddf 6a0b 	vldr	s13, [pc, #44]	; 80019fc <process_mpu_data+0x160>
 80019d2:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80019d6:	eddf 6a0a 	vldr	s13, [pc, #40]	; 8001a00 <process_mpu_data+0x164>
 80019da:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80019de:	4b06      	ldr	r3, [pc, #24]	; (80019f8 <process_mpu_data+0x15c>)
 80019e0:	edc3 7a02 	vstr	s15, [r3, #8]
	gyro_data_ready(imu_data.gyro_data);
 80019e4:	4b04      	ldr	r3, [pc, #16]	; (80019f8 <process_mpu_data+0x15c>)
 80019e6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80019e8:	f002 fdf2 	bl	80045d0 <gyro_data_ready>
	//imu_heading.temp = 21 + mpu_data.temp / 333.87f;
}
 80019ec:	bf00      	nop
 80019ee:	3708      	adds	r7, #8
 80019f0:	46bd      	mov	sp, r7
 80019f2:	bd80      	pop	{r7, pc}
 80019f4:	20000284 	.word	0x20000284
 80019f8:	20000248 	.word	0x20000248
 80019fc:	4183126f 	.word	0x4183126f
 8001a00:	42653333 	.word	0x42653333

08001a04 <HAL_GPIO_EXTI_Callback>:


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b082      	sub	sp, #8
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	80fb      	strh	r3, [r7, #6]
	if((GPIO_Pin == IST_INT_Pin) || (GPIO_Pin == MPU_INT_Pin))
 8001a0e:	88fb      	ldrh	r3, [r7, #6]
 8001a10:	2b08      	cmp	r3, #8
 8001a12:	d003      	beq.n	8001a1c <HAL_GPIO_EXTI_Callback+0x18>
 8001a14:	88fb      	ldrh	r3, [r7, #6]
 8001a16:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001a1a:	d103      	bne.n	8001a24 <HAL_GPIO_EXTI_Callback+0x20>
	{
		get_imu_data(GPIO_Pin);
 8001a1c:	88fb      	ldrh	r3, [r7, #6]
 8001a1e:	4618      	mov	r0, r3
 8001a20:	f7ff ff12 	bl	8001848 <get_imu_data>
		//todo: add semaphore so gimbals only react if there's a new IMU reading
	}
}
 8001a24:	bf00      	nop
 8001a26:	3708      	adds	r7, #8
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	bd80      	pop	{r7, pc}

08001a2c <GPIO_ToggleBits>:
 *      Author: Kai Yang
 */

#include "bsp_led.h"

void GPIO_ToggleBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin){
 8001a2c:	b480      	push	{r7}
 8001a2e:	b083      	sub	sp, #12
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
 8001a34:	460b      	mov	r3, r1
 8001a36:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  /* points to address of GPIOx register and does bitwise XOR with bit GPIO_Pin */
  GPIOx->ODR ^= GPIO_Pin;
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	695a      	ldr	r2, [r3, #20]
 8001a3c:	887b      	ldrh	r3, [r7, #2]
 8001a3e:	405a      	eors	r2, r3
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	615a      	str	r2, [r3, #20]
}
 8001a44:	bf00      	nop
 8001a46:	370c      	adds	r7, #12
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4e:	4770      	bx	lr

08001a50 <led_green_off>:

/* calls HAL library function to directly write pin.             */
/* LEDs are active low, so SET (1) == off, while RESET (0) == on */
/* Definitions for LED port and pins are given in main.h file    */
void led_green_off(void){
 8001a50:	b580      	push	{r7, lr}
 8001a52:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(LED_G_GPIO_Port, LED_G_Pin, GPIO_PIN_SET);
 8001a54:	2201      	movs	r2, #1
 8001a56:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001a5a:	4802      	ldr	r0, [pc, #8]	; (8001a64 <led_green_off+0x14>)
 8001a5c:	f007 fd40 	bl	80094e0 <HAL_GPIO_WritePin>
}
 8001a60:	bf00      	nop
 8001a62:	bd80      	pop	{r7, pc}
 8001a64:	40021400 	.word	0x40021400

08001a68 <led_on>:

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_G_GPIO_Port, LED_G_Pin, GPIO_PIN_SET);
}

void led_on(void){
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, GPIO_PIN_RESET);
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001a72:	4805      	ldr	r0, [pc, #20]	; (8001a88 <led_on+0x20>)
 8001a74:	f007 fd34 	bl	80094e0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_14, GPIO_PIN_RESET);
 8001a78:	2200      	movs	r2, #0
 8001a7a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001a7e:	4803      	ldr	r0, [pc, #12]	; (8001a8c <led_on+0x24>)
 8001a80:	f007 fd2e 	bl	80094e0 <HAL_GPIO_WritePin>
}
 8001a84:	bf00      	nop
 8001a86:	bd80      	pop	{r7, pc}
 8001a88:	40021000 	.word	0x40021000
 8001a8c:	40021400 	.word	0x40021400

08001a90 <led_toggle>:
void led_toggle(void){
 8001a90:	b580      	push	{r7, lr}
 8001a92:	af00      	add	r7, sp, #0
	GPIO_ToggleBits(GPIOE, GPIO_PIN_11);
 8001a94:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001a98:	4804      	ldr	r0, [pc, #16]	; (8001aac <led_toggle+0x1c>)
 8001a9a:	f7ff ffc7 	bl	8001a2c <GPIO_ToggleBits>
	GPIO_ToggleBits(GPIOF, GPIO_PIN_14);
 8001a9e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001aa2:	4803      	ldr	r0, [pc, #12]	; (8001ab0 <led_toggle+0x20>)
 8001aa4:	f7ff ffc2 	bl	8001a2c <GPIO_ToggleBits>
}
 8001aa8:	bf00      	nop
 8001aaa:	bd80      	pop	{r7, pc}
 8001aac:	40021000 	.word	0x40021000
 8001ab0:	40021400 	.word	0x40021400

08001ab4 <status_led>:

void status_led(uint16_t led_no, uint8_t led_state)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	b083      	sub	sp, #12
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	4603      	mov	r3, r0
 8001abc:	460a      	mov	r2, r1
 8001abe:	80fb      	strh	r3, [r7, #6]
 8001ac0:	4613      	mov	r3, r2
 8001ac2:	717b      	strb	r3, [r7, #5]
	assert_param(IS_GPIO_ALL_PERIPH(GPIOG));

	  /* points to address of GPIOx register and does bitwise XOR with bit GPIO_Pin */

	if (led_no > 0 && led_no <= 8)
 8001ac4:	88fb      	ldrh	r3, [r7, #6]
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d02f      	beq.n	8001b2a <status_led+0x76>
 8001aca:	88fb      	ldrh	r3, [r7, #6]
 8001acc:	2b08      	cmp	r3, #8
 8001ace:	d82c      	bhi.n	8001b2a <status_led+0x76>
	{
		if (led_state == toggle_led)
 8001ad0:	797b      	ldrb	r3, [r7, #5]
 8001ad2:	2b02      	cmp	r3, #2
 8001ad4:	d10d      	bne.n	8001af2 <status_led+0x3e>
		{
			GPIOG->ODR ^= 1 << (1 << led_no);
 8001ad6:	4b28      	ldr	r3, [pc, #160]	; (8001b78 <status_led+0xc4>)
 8001ad8:	695b      	ldr	r3, [r3, #20]
 8001ada:	88fa      	ldrh	r2, [r7, #6]
 8001adc:	2101      	movs	r1, #1
 8001ade:	fa01 f202 	lsl.w	r2, r1, r2
 8001ae2:	2101      	movs	r1, #1
 8001ae4:	fa01 f202 	lsl.w	r2, r1, r2
 8001ae8:	4611      	mov	r1, r2
 8001aea:	4a23      	ldr	r2, [pc, #140]	; (8001b78 <status_led+0xc4>)
 8001aec:	404b      	eors	r3, r1
 8001aee:	6153      	str	r3, [r2, #20]
 8001af0:	e01b      	b.n	8001b2a <status_led+0x76>
		}
		else if (led_state == on_led)
 8001af2:	797b      	ldrb	r3, [r7, #5]
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d10b      	bne.n	8001b10 <status_led+0x5c>
		{
			GPIOG->ODR &= ~(1 << led_no);
 8001af8:	4b1f      	ldr	r3, [pc, #124]	; (8001b78 <status_led+0xc4>)
 8001afa:	695b      	ldr	r3, [r3, #20]
 8001afc:	88fa      	ldrh	r2, [r7, #6]
 8001afe:	2101      	movs	r1, #1
 8001b00:	fa01 f202 	lsl.w	r2, r1, r2
 8001b04:	43d2      	mvns	r2, r2
 8001b06:	4611      	mov	r1, r2
 8001b08:	4a1b      	ldr	r2, [pc, #108]	; (8001b78 <status_led+0xc4>)
 8001b0a:	400b      	ands	r3, r1
 8001b0c:	6153      	str	r3, [r2, #20]
 8001b0e:	e00c      	b.n	8001b2a <status_led+0x76>
		}
		else if (led_state == off_led)
 8001b10:	797b      	ldrb	r3, [r7, #5]
 8001b12:	2b01      	cmp	r3, #1
 8001b14:	d109      	bne.n	8001b2a <status_led+0x76>
		{
			GPIOG->ODR |= (1 << led_no);
 8001b16:	4b18      	ldr	r3, [pc, #96]	; (8001b78 <status_led+0xc4>)
 8001b18:	695b      	ldr	r3, [r3, #20]
 8001b1a:	88fa      	ldrh	r2, [r7, #6]
 8001b1c:	2101      	movs	r1, #1
 8001b1e:	fa01 f202 	lsl.w	r2, r1, r2
 8001b22:	4611      	mov	r1, r2
 8001b24:	4a14      	ldr	r2, [pc, #80]	; (8001b78 <status_led+0xc4>)
 8001b26:	430b      	orrs	r3, r1
 8001b28:	6153      	str	r3, [r2, #20]
		}
	}
	if (led_no == 9)
 8001b2a:	88fb      	ldrh	r3, [r7, #6]
 8001b2c:	2b09      	cmp	r3, #9
 8001b2e:	d11c      	bne.n	8001b6a <status_led+0xb6>
	{
		if (led_state == toggle_led)
 8001b30:	797b      	ldrb	r3, [r7, #5]
 8001b32:	2b02      	cmp	r3, #2
 8001b34:	d106      	bne.n	8001b44 <status_led+0x90>
		{
			GPIOG->ODR ^= 0xFF;
 8001b36:	4b10      	ldr	r3, [pc, #64]	; (8001b78 <status_led+0xc4>)
 8001b38:	695b      	ldr	r3, [r3, #20]
 8001b3a:	4a0f      	ldr	r2, [pc, #60]	; (8001b78 <status_led+0xc4>)
 8001b3c:	f083 03ff 	eor.w	r3, r3, #255	; 0xff
 8001b40:	6153      	str	r3, [r2, #20]
		{
			GPIOG->ODR |= (0xFF);
		}
	}

}
 8001b42:	e012      	b.n	8001b6a <status_led+0xb6>
		else if (led_state == on_led)
 8001b44:	797b      	ldrb	r3, [r7, #5]
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d106      	bne.n	8001b58 <status_led+0xa4>
			GPIOG->ODR &= ~(0xFF);
 8001b4a:	4b0b      	ldr	r3, [pc, #44]	; (8001b78 <status_led+0xc4>)
 8001b4c:	695b      	ldr	r3, [r3, #20]
 8001b4e:	4a0a      	ldr	r2, [pc, #40]	; (8001b78 <status_led+0xc4>)
 8001b50:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001b54:	6153      	str	r3, [r2, #20]
}
 8001b56:	e008      	b.n	8001b6a <status_led+0xb6>
		else if (led_state == off_led)
 8001b58:	797b      	ldrb	r3, [r7, #5]
 8001b5a:	2b01      	cmp	r3, #1
 8001b5c:	d105      	bne.n	8001b6a <status_led+0xb6>
			GPIOG->ODR |= (0xFF);
 8001b5e:	4b06      	ldr	r3, [pc, #24]	; (8001b78 <status_led+0xc4>)
 8001b60:	695b      	ldr	r3, [r3, #20]
 8001b62:	4a05      	ldr	r2, [pc, #20]	; (8001b78 <status_led+0xc4>)
 8001b64:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
 8001b68:	6153      	str	r3, [r2, #20]
}
 8001b6a:	bf00      	nop
 8001b6c:	370c      	adds	r7, #12
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b74:	4770      	bx	lr
 8001b76:	bf00      	nop
 8001b78:	40021800 	.word	0x40021800

08001b7c <micros_tick>:
#include "robot_config.h"

uint32_t gv_curr_micros = 0;
uint32_t gv_overflow_times = 0;

void micros_tick(){
 8001b7c:	b480      	push	{r7}
 8001b7e:	af00      	add	r7, sp, #0
	if (gv_curr_micros == 0xFFFFFFFF) //2^32 - 1
 8001b80:	4b09      	ldr	r3, [pc, #36]	; (8001ba8 <micros_tick+0x2c>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b88:	d104      	bne.n	8001b94 <micros_tick+0x18>
		gv_overflow_times ++;
 8001b8a:	4b08      	ldr	r3, [pc, #32]	; (8001bac <micros_tick+0x30>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	3301      	adds	r3, #1
 8001b90:	4a06      	ldr	r2, [pc, #24]	; (8001bac <micros_tick+0x30>)
 8001b92:	6013      	str	r3, [r2, #0]
	gv_curr_micros ++;
 8001b94:	4b04      	ldr	r3, [pc, #16]	; (8001ba8 <micros_tick+0x2c>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	3301      	adds	r3, #1
 8001b9a:	4a03      	ldr	r2, [pc, #12]	; (8001ba8 <micros_tick+0x2c>)
 8001b9c:	6013      	str	r3, [r2, #0]
}
 8001b9e:	bf00      	nop
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba6:	4770      	bx	lr
 8001ba8:	2000029c 	.word	0x2000029c
 8001bac:	200002a0 	.word	0x200002a0

08001bb0 <start_micros_timer>:

void start_micros_timer()
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	af00      	add	r7, sp, #0
	configASSERT(TIMER_FREQ <= 1000000);
	__HAL_TIM_SET_AUTORELOAD(&htim1, (999999/TIMER_FREQ) + 1);
 8001bb4:	4b09      	ldr	r3, [pc, #36]	; (8001bdc <start_micros_timer+0x2c>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	2264      	movs	r2, #100	; 0x64
 8001bba:	62da      	str	r2, [r3, #44]	; 0x2c
 8001bbc:	4b07      	ldr	r3, [pc, #28]	; (8001bdc <start_micros_timer+0x2c>)
 8001bbe:	2264      	movs	r2, #100	; 0x64
 8001bc0:	60da      	str	r2, [r3, #12]
	htim1.Instance->DIER |= TIM_DIER_UIE; //enable update interrupt
 8001bc2:	4b06      	ldr	r3, [pc, #24]	; (8001bdc <start_micros_timer+0x2c>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	68da      	ldr	r2, [r3, #12]
 8001bc8:	4b04      	ldr	r3, [pc, #16]	; (8001bdc <start_micros_timer+0x2c>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f042 0201 	orr.w	r2, r2, #1
 8001bd0:	60da      	str	r2, [r3, #12]
	HAL_TIM_Base_Start(&htim1);
 8001bd2:	4802      	ldr	r0, [pc, #8]	; (8001bdc <start_micros_timer+0x2c>)
 8001bd4:	f00a f892 	bl	800bcfc <HAL_TIM_Base_Start>
}
 8001bd8:	bf00      	nop
 8001bda:	bd80      	pop	{r7, pc}
 8001bdc:	20000bdc 	.word	0x20000bdc

08001be0 <get_microseconds>:



uint32_t get_microseconds()
{
 8001be0:	b480      	push	{r7}
 8001be2:	af00      	add	r7, sp, #0
	return gv_curr_micros;
 8001be4:	4b03      	ldr	r3, [pc, #12]	; (8001bf4 <get_microseconds+0x14>)
 8001be6:	681b      	ldr	r3, [r3, #0]
}
 8001be8:	4618      	mov	r0, r3
 8001bea:	46bd      	mov	sp, r7
 8001bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf0:	4770      	bx	lr
 8001bf2:	bf00      	nop
 8001bf4:	2000029c 	.word	0x2000029c

08001bf8 <xavier_usart_start>:
	return HAL_OK;
}


HAL_StatusTypeDef xavier_usart_start(uint8_t *pData, uint16_t Size)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b086      	sub	sp, #24
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
 8001c00:	460b      	mov	r3, r1
 8001c02:	807b      	strh	r3, [r7, #2]
	UART_HandleTypeDef *huart = &XAVIER_UART;
 8001c04:	4b37      	ldr	r3, [pc, #220]	; (8001ce4 <xavier_usart_start+0xec>)
 8001c06:	617b      	str	r3, [r7, #20]
	uint32_t *tmp;

	/* Check that a Rx process is not already ongoing */
	if (huart->RxState == HAL_UART_STATE_READY) {
 8001c08:	697b      	ldr	r3, [r7, #20]
 8001c0a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001c0e:	b2db      	uxtb	r3, r3
 8001c10:	2b20      	cmp	r3, #32
 8001c12:	d161      	bne.n	8001cd8 <xavier_usart_start+0xe0>
		if ((pData == NULL) || (Size == 0U))
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d002      	beq.n	8001c20 <xavier_usart_start+0x28>
 8001c1a:	887b      	ldrh	r3, [r7, #2]
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d101      	bne.n	8001c24 <xavier_usart_start+0x2c>
		{
			return HAL_ERROR;
 8001c20:	2301      	movs	r3, #1
 8001c22:	e05a      	b.n	8001cda <xavier_usart_start+0xe2>
		}

		/* Process Locked */
		__HAL_LOCK(huart);
 8001c24:	697b      	ldr	r3, [r7, #20]
 8001c26:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001c2a:	2b01      	cmp	r3, #1
 8001c2c:	d101      	bne.n	8001c32 <xavier_usart_start+0x3a>
 8001c2e:	2302      	movs	r3, #2
 8001c30:	e053      	b.n	8001cda <xavier_usart_start+0xe2>
 8001c32:	697b      	ldr	r3, [r7, #20]
 8001c34:	2201      	movs	r2, #1
 8001c36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

		huart->pRxBuffPtr = pData;
 8001c3a:	687a      	ldr	r2, [r7, #4]
 8001c3c:	697b      	ldr	r3, [r7, #20]
 8001c3e:	629a      	str	r2, [r3, #40]	; 0x28
		huart->RxXferSize = Size;
 8001c40:	697b      	ldr	r3, [r7, #20]
 8001c42:	887a      	ldrh	r2, [r7, #2]
 8001c44:	859a      	strh	r2, [r3, #44]	; 0x2c

		huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001c46:	697b      	ldr	r3, [r7, #20]
 8001c48:	2200      	movs	r2, #0
 8001c4a:	641a      	str	r2, [r3, #64]	; 0x40
		huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001c4c:	697b      	ldr	r3, [r7, #20]
 8001c4e:	2222      	movs	r2, #34	; 0x22
 8001c50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

		/* Set the UART DMA transfer complete callback */
		huart->hdmarx->XferCpltCallback = aimbot_ISR;
 8001c54:	697b      	ldr	r3, [r7, #20]
 8001c56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c58:	4a23      	ldr	r2, [pc, #140]	; (8001ce8 <xavier_usart_start+0xf0>)
 8001c5a:	63da      	str	r2, [r3, #60]	; 0x3c
		huart->hdmarx->XferHalfCpltCallback = aimbot_hlf_ISR;
 8001c5c:	697b      	ldr	r3, [r7, #20]
 8001c5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c60:	4a22      	ldr	r2, [pc, #136]	; (8001cec <xavier_usart_start+0xf4>)
 8001c62:	641a      	str	r2, [r3, #64]	; 0x40


		/* Set the DMA abort callback */
		huart->hdmarx->XferAbortCallback = NULL;
 8001c64:	697b      	ldr	r3, [r7, #20]
 8001c66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c68:	2200      	movs	r2, #0
 8001c6a:	651a      	str	r2, [r3, #80]	; 0x50

		/* Enable the DMA stream */
		tmp = (uint32_t *)&pData;
 8001c6c:	1d3b      	adds	r3, r7, #4
 8001c6e:	613b      	str	r3, [r7, #16]
		HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8001c70:	697b      	ldr	r3, [r7, #20]
 8001c72:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001c74:	697b      	ldr	r3, [r7, #20]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	3304      	adds	r3, #4
 8001c7a:	4619      	mov	r1, r3
 8001c7c:	693b      	ldr	r3, [r7, #16]
 8001c7e:	681a      	ldr	r2, [r3, #0]
 8001c80:	887b      	ldrh	r3, [r7, #2]
 8001c82:	f006 ff2d 	bl	8008ae0 <HAL_DMA_Start_IT>

		/* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
		__HAL_UART_CLEAR_OREFLAG(huart);
 8001c86:	2300      	movs	r3, #0
 8001c88:	60fb      	str	r3, [r7, #12]
 8001c8a:	697b      	ldr	r3, [r7, #20]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	60fb      	str	r3, [r7, #12]
 8001c92:	697b      	ldr	r3, [r7, #20]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	685b      	ldr	r3, [r3, #4]
 8001c98:	60fb      	str	r3, [r7, #12]
 8001c9a:	68fb      	ldr	r3, [r7, #12]

		/* Process Unlocked */
		__HAL_UNLOCK(huart);
 8001c9c:	697b      	ldr	r3, [r7, #20]
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

		/* Enable the UART Parity Error Interrupt */
		SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8001ca4:	697b      	ldr	r3, [r7, #20]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	68da      	ldr	r2, [r3, #12]
 8001caa:	697b      	ldr	r3, [r7, #20]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001cb2:	60da      	str	r2, [r3, #12]

		/* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
		SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001cb4:	697b      	ldr	r3, [r7, #20]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	695a      	ldr	r2, [r3, #20]
 8001cba:	697b      	ldr	r3, [r7, #20]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f042 0201 	orr.w	r2, r2, #1
 8001cc2:	615a      	str	r2, [r3, #20]

		/* Enable the DMA transfer for the receiver request by setting the DMAR bit
	    in the UART CR3 register */
		SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001cc4:	697b      	ldr	r3, [r7, #20]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	695a      	ldr	r2, [r3, #20]
 8001cca:	697b      	ldr	r3, [r7, #20]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001cd2:	615a      	str	r2, [r3, #20]

		return HAL_OK;
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	e000      	b.n	8001cda <xavier_usart_start+0xe2>
	} else {
		return HAL_BUSY;
 8001cd8:	2302      	movs	r3, #2
	}
}
 8001cda:	4618      	mov	r0, r3
 8001cdc:	3718      	adds	r7, #24
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bd80      	pop	{r7, pc}
 8001ce2:	bf00      	nop
 8001ce4:	20000dcc 	.word	0x20000dcc
 8001ce8:	08003f35 	.word	0x08003f35
 8001cec:	08003eb5 	.word	0x08003eb5

08001cf0 <MX_CAN1_Init>:
CAN_HandleTypeDef hcan1;
CAN_HandleTypeDef hcan2;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8001cf4:	4b17      	ldr	r3, [pc, #92]	; (8001d54 <MX_CAN1_Init+0x64>)
 8001cf6:	4a18      	ldr	r2, [pc, #96]	; (8001d58 <MX_CAN1_Init+0x68>)
 8001cf8:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 3;
 8001cfa:	4b16      	ldr	r3, [pc, #88]	; (8001d54 <MX_CAN1_Init+0x64>)
 8001cfc:	2203      	movs	r2, #3
 8001cfe:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001d00:	4b14      	ldr	r3, [pc, #80]	; (8001d54 <MX_CAN1_Init+0x64>)
 8001d02:	2200      	movs	r2, #0
 8001d04:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001d06:	4b13      	ldr	r3, [pc, #76]	; (8001d54 <MX_CAN1_Init+0x64>)
 8001d08:	2200      	movs	r2, #0
 8001d0a:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_9TQ;
 8001d0c:	4b11      	ldr	r3, [pc, #68]	; (8001d54 <MX_CAN1_Init+0x64>)
 8001d0e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001d12:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_4TQ;
 8001d14:	4b0f      	ldr	r3, [pc, #60]	; (8001d54 <MX_CAN1_Init+0x64>)
 8001d16:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 8001d1a:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8001d1c:	4b0d      	ldr	r3, [pc, #52]	; (8001d54 <MX_CAN1_Init+0x64>)
 8001d1e:	2200      	movs	r2, #0
 8001d20:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8001d22:	4b0c      	ldr	r3, [pc, #48]	; (8001d54 <MX_CAN1_Init+0x64>)
 8001d24:	2200      	movs	r2, #0
 8001d26:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8001d28:	4b0a      	ldr	r3, [pc, #40]	; (8001d54 <MX_CAN1_Init+0x64>)
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8001d2e:	4b09      	ldr	r3, [pc, #36]	; (8001d54 <MX_CAN1_Init+0x64>)
 8001d30:	2200      	movs	r2, #0
 8001d32:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001d34:	4b07      	ldr	r3, [pc, #28]	; (8001d54 <MX_CAN1_Init+0x64>)
 8001d36:	2200      	movs	r2, #0
 8001d38:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8001d3a:	4b06      	ldr	r3, [pc, #24]	; (8001d54 <MX_CAN1_Init+0x64>)
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001d40:	4804      	ldr	r0, [pc, #16]	; (8001d54 <MX_CAN1_Init+0x64>)
 8001d42:	f005 febd 	bl	8007ac0 <HAL_CAN_Init>
 8001d46:	4603      	mov	r3, r0
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d001      	beq.n	8001d50 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8001d4c:	f000 fc32 	bl	80025b4 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8001d50:	bf00      	nop
 8001d52:	bd80      	pop	{r7, pc}
 8001d54:	200002a4 	.word	0x200002a4
 8001d58:	40006400 	.word	0x40006400

08001d5c <MX_CAN2_Init>:
/* CAN2 init function */
void MX_CAN2_Init(void)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 8001d60:	4b17      	ldr	r3, [pc, #92]	; (8001dc0 <MX_CAN2_Init+0x64>)
 8001d62:	4a18      	ldr	r2, [pc, #96]	; (8001dc4 <MX_CAN2_Init+0x68>)
 8001d64:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 3;
 8001d66:	4b16      	ldr	r3, [pc, #88]	; (8001dc0 <MX_CAN2_Init+0x64>)
 8001d68:	2203      	movs	r2, #3
 8001d6a:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8001d6c:	4b14      	ldr	r3, [pc, #80]	; (8001dc0 <MX_CAN2_Init+0x64>)
 8001d6e:	2200      	movs	r2, #0
 8001d70:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001d72:	4b13      	ldr	r3, [pc, #76]	; (8001dc0 <MX_CAN2_Init+0x64>)
 8001d74:	2200      	movs	r2, #0
 8001d76:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_9TQ;
 8001d78:	4b11      	ldr	r3, [pc, #68]	; (8001dc0 <MX_CAN2_Init+0x64>)
 8001d7a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001d7e:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_4TQ;
 8001d80:	4b0f      	ldr	r3, [pc, #60]	; (8001dc0 <MX_CAN2_Init+0x64>)
 8001d82:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 8001d86:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 8001d88:	4b0d      	ldr	r3, [pc, #52]	; (8001dc0 <MX_CAN2_Init+0x64>)
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 8001d8e:	4b0c      	ldr	r3, [pc, #48]	; (8001dc0 <MX_CAN2_Init+0x64>)
 8001d90:	2200      	movs	r2, #0
 8001d92:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 8001d94:	4b0a      	ldr	r3, [pc, #40]	; (8001dc0 <MX_CAN2_Init+0x64>)
 8001d96:	2200      	movs	r2, #0
 8001d98:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 8001d9a:	4b09      	ldr	r3, [pc, #36]	; (8001dc0 <MX_CAN2_Init+0x64>)
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 8001da0:	4b07      	ldr	r3, [pc, #28]	; (8001dc0 <MX_CAN2_Init+0x64>)
 8001da2:	2200      	movs	r2, #0
 8001da4:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 8001da6:	4b06      	ldr	r3, [pc, #24]	; (8001dc0 <MX_CAN2_Init+0x64>)
 8001da8:	2200      	movs	r2, #0
 8001daa:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8001dac:	4804      	ldr	r0, [pc, #16]	; (8001dc0 <MX_CAN2_Init+0x64>)
 8001dae:	f005 fe87 	bl	8007ac0 <HAL_CAN_Init>
 8001db2:	4603      	mov	r3, r0
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d001      	beq.n	8001dbc <MX_CAN2_Init+0x60>
  {
    Error_Handler();
 8001db8:	f000 fbfc 	bl	80025b4 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 8001dbc:	bf00      	nop
 8001dbe:	bd80      	pop	{r7, pc}
 8001dc0:	200002cc 	.word	0x200002cc
 8001dc4:	40006800 	.word	0x40006800

08001dc8 <HAL_CAN_MspInit>:

static uint32_t HAL_RCC_CAN1_CLK_ENABLED=0;

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b08c      	sub	sp, #48	; 0x30
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dd0:	f107 031c 	add.w	r3, r7, #28
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	601a      	str	r2, [r3, #0]
 8001dd8:	605a      	str	r2, [r3, #4]
 8001dda:	609a      	str	r2, [r3, #8]
 8001ddc:	60da      	str	r2, [r3, #12]
 8001dde:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	4a4e      	ldr	r2, [pc, #312]	; (8001f20 <HAL_CAN_MspInit+0x158>)
 8001de6:	4293      	cmp	r3, r2
 8001de8:	d13d      	bne.n	8001e66 <HAL_CAN_MspInit+0x9e>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 8001dea:	4b4e      	ldr	r3, [pc, #312]	; (8001f24 <HAL_CAN_MspInit+0x15c>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	3301      	adds	r3, #1
 8001df0:	4a4c      	ldr	r2, [pc, #304]	; (8001f24 <HAL_CAN_MspInit+0x15c>)
 8001df2:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8001df4:	4b4b      	ldr	r3, [pc, #300]	; (8001f24 <HAL_CAN_MspInit+0x15c>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	2b01      	cmp	r3, #1
 8001dfa:	d10d      	bne.n	8001e18 <HAL_CAN_MspInit+0x50>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	61bb      	str	r3, [r7, #24]
 8001e00:	4b49      	ldr	r3, [pc, #292]	; (8001f28 <HAL_CAN_MspInit+0x160>)
 8001e02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e04:	4a48      	ldr	r2, [pc, #288]	; (8001f28 <HAL_CAN_MspInit+0x160>)
 8001e06:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001e0a:	6413      	str	r3, [r2, #64]	; 0x40
 8001e0c:	4b46      	ldr	r3, [pc, #280]	; (8001f28 <HAL_CAN_MspInit+0x160>)
 8001e0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e14:	61bb      	str	r3, [r7, #24]
 8001e16:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e18:	2300      	movs	r3, #0
 8001e1a:	617b      	str	r3, [r7, #20]
 8001e1c:	4b42      	ldr	r3, [pc, #264]	; (8001f28 <HAL_CAN_MspInit+0x160>)
 8001e1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e20:	4a41      	ldr	r2, [pc, #260]	; (8001f28 <HAL_CAN_MspInit+0x160>)
 8001e22:	f043 0308 	orr.w	r3, r3, #8
 8001e26:	6313      	str	r3, [r2, #48]	; 0x30
 8001e28:	4b3f      	ldr	r3, [pc, #252]	; (8001f28 <HAL_CAN_MspInit+0x160>)
 8001e2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e2c:	f003 0308 	and.w	r3, r3, #8
 8001e30:	617b      	str	r3, [r7, #20]
 8001e32:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001e34:	2303      	movs	r3, #3
 8001e36:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e38:	2302      	movs	r3, #2
 8001e3a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e40:	2303      	movs	r3, #3
 8001e42:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001e44:	2309      	movs	r3, #9
 8001e46:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001e48:	f107 031c 	add.w	r3, r7, #28
 8001e4c:	4619      	mov	r1, r3
 8001e4e:	4837      	ldr	r0, [pc, #220]	; (8001f2c <HAL_CAN_MspInit+0x164>)
 8001e50:	f007 f99a 	bl	8009188 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 8001e54:	2200      	movs	r2, #0
 8001e56:	2105      	movs	r1, #5
 8001e58:	2014      	movs	r0, #20
 8001e5a:	f006 fd69 	bl	8008930 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8001e5e:	2014      	movs	r0, #20
 8001e60:	f006 fd82 	bl	8008968 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(CAN2_RX1_IRQn);
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }
}
 8001e64:	e058      	b.n	8001f18 <HAL_CAN_MspInit+0x150>
  else if(canHandle->Instance==CAN2)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	4a31      	ldr	r2, [pc, #196]	; (8001f30 <HAL_CAN_MspInit+0x168>)
 8001e6c:	4293      	cmp	r3, r2
 8001e6e:	d153      	bne.n	8001f18 <HAL_CAN_MspInit+0x150>
    __HAL_RCC_CAN2_CLK_ENABLE();
 8001e70:	2300      	movs	r3, #0
 8001e72:	613b      	str	r3, [r7, #16]
 8001e74:	4b2c      	ldr	r3, [pc, #176]	; (8001f28 <HAL_CAN_MspInit+0x160>)
 8001e76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e78:	4a2b      	ldr	r2, [pc, #172]	; (8001f28 <HAL_CAN_MspInit+0x160>)
 8001e7a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001e7e:	6413      	str	r3, [r2, #64]	; 0x40
 8001e80:	4b29      	ldr	r3, [pc, #164]	; (8001f28 <HAL_CAN_MspInit+0x160>)
 8001e82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e84:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001e88:	613b      	str	r3, [r7, #16]
 8001e8a:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 8001e8c:	4b25      	ldr	r3, [pc, #148]	; (8001f24 <HAL_CAN_MspInit+0x15c>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	3301      	adds	r3, #1
 8001e92:	4a24      	ldr	r2, [pc, #144]	; (8001f24 <HAL_CAN_MspInit+0x15c>)
 8001e94:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8001e96:	4b23      	ldr	r3, [pc, #140]	; (8001f24 <HAL_CAN_MspInit+0x15c>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	2b01      	cmp	r3, #1
 8001e9c:	d10d      	bne.n	8001eba <HAL_CAN_MspInit+0xf2>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	60fb      	str	r3, [r7, #12]
 8001ea2:	4b21      	ldr	r3, [pc, #132]	; (8001f28 <HAL_CAN_MspInit+0x160>)
 8001ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ea6:	4a20      	ldr	r2, [pc, #128]	; (8001f28 <HAL_CAN_MspInit+0x160>)
 8001ea8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001eac:	6413      	str	r3, [r2, #64]	; 0x40
 8001eae:	4b1e      	ldr	r3, [pc, #120]	; (8001f28 <HAL_CAN_MspInit+0x160>)
 8001eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001eb6:	60fb      	str	r3, [r7, #12]
 8001eb8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001eba:	2300      	movs	r3, #0
 8001ebc:	60bb      	str	r3, [r7, #8]
 8001ebe:	4b1a      	ldr	r3, [pc, #104]	; (8001f28 <HAL_CAN_MspInit+0x160>)
 8001ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ec2:	4a19      	ldr	r2, [pc, #100]	; (8001f28 <HAL_CAN_MspInit+0x160>)
 8001ec4:	f043 0302 	orr.w	r3, r3, #2
 8001ec8:	6313      	str	r3, [r2, #48]	; 0x30
 8001eca:	4b17      	ldr	r3, [pc, #92]	; (8001f28 <HAL_CAN_MspInit+0x160>)
 8001ecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ece:	f003 0302 	and.w	r3, r3, #2
 8001ed2:	60bb      	str	r3, [r7, #8]
 8001ed4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8001ed6:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001eda:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001edc:	2302      	movs	r3, #2
 8001ede:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ee4:	2303      	movs	r3, #3
 8001ee6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8001ee8:	2309      	movs	r3, #9
 8001eea:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001eec:	f107 031c 	add.w	r3, r7, #28
 8001ef0:	4619      	mov	r1, r3
 8001ef2:	4810      	ldr	r0, [pc, #64]	; (8001f34 <HAL_CAN_MspInit+0x16c>)
 8001ef4:	f007 f948 	bl	8009188 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 5, 0);
 8001ef8:	2200      	movs	r2, #0
 8001efa:	2105      	movs	r1, #5
 8001efc:	2040      	movs	r0, #64	; 0x40
 8001efe:	f006 fd17 	bl	8008930 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 8001f02:	2040      	movs	r0, #64	; 0x40
 8001f04:	f006 fd30 	bl	8008968 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN2_RX1_IRQn, 5, 0);
 8001f08:	2200      	movs	r2, #0
 8001f0a:	2105      	movs	r1, #5
 8001f0c:	2041      	movs	r0, #65	; 0x41
 8001f0e:	f006 fd0f 	bl	8008930 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX1_IRQn);
 8001f12:	2041      	movs	r0, #65	; 0x41
 8001f14:	f006 fd28 	bl	8008968 <HAL_NVIC_EnableIRQ>
}
 8001f18:	bf00      	nop
 8001f1a:	3730      	adds	r7, #48	; 0x30
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	bd80      	pop	{r7, pc}
 8001f20:	40006400 	.word	0x40006400
 8001f24:	200002f4 	.word	0x200002f4
 8001f28:	40023800 	.word	0x40023800
 8001f2c:	40020c00 	.word	0x40020c00
 8001f30:	40006800 	.word	0x40006800
 8001f34:	40020400 	.word	0x40020400

08001f38 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b082      	sub	sp, #8
 8001f3c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001f3e:	2300      	movs	r3, #0
 8001f40:	607b      	str	r3, [r7, #4]
 8001f42:	4b23      	ldr	r3, [pc, #140]	; (8001fd0 <MX_DMA_Init+0x98>)
 8001f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f46:	4a22      	ldr	r2, [pc, #136]	; (8001fd0 <MX_DMA_Init+0x98>)
 8001f48:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001f4c:	6313      	str	r3, [r2, #48]	; 0x30
 8001f4e:	4b20      	ldr	r3, [pc, #128]	; (8001fd0 <MX_DMA_Init+0x98>)
 8001f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f52:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f56:	607b      	str	r3, [r7, #4]
 8001f58:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	603b      	str	r3, [r7, #0]
 8001f5e:	4b1c      	ldr	r3, [pc, #112]	; (8001fd0 <MX_DMA_Init+0x98>)
 8001f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f62:	4a1b      	ldr	r2, [pc, #108]	; (8001fd0 <MX_DMA_Init+0x98>)
 8001f64:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001f68:	6313      	str	r3, [r2, #48]	; 0x30
 8001f6a:	4b19      	ldr	r3, [pc, #100]	; (8001fd0 <MX_DMA_Init+0x98>)
 8001f6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f6e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f72:	603b      	str	r3, [r7, #0]
 8001f74:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 8001f76:	2200      	movs	r2, #0
 8001f78:	2105      	movs	r1, #5
 8001f7a:	200e      	movs	r0, #14
 8001f7c:	f006 fcd8 	bl	8008930 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8001f80:	200e      	movs	r0, #14
 8001f82:	f006 fcf1 	bl	8008968 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 8001f86:	2200      	movs	r2, #0
 8001f88:	2105      	movs	r1, #5
 8001f8a:	2039      	movs	r0, #57	; 0x39
 8001f8c:	f006 fcd0 	bl	8008930 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8001f90:	2039      	movs	r0, #57	; 0x39
 8001f92:	f006 fce9 	bl	8008968 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 8001f96:	2200      	movs	r2, #0
 8001f98:	2105      	movs	r1, #5
 8001f9a:	203a      	movs	r0, #58	; 0x3a
 8001f9c:	f006 fcc8 	bl	8008930 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8001fa0:	203a      	movs	r0, #58	; 0x3a
 8001fa2:	f006 fce1 	bl	8008968 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 5, 0);
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	2105      	movs	r1, #5
 8001faa:	203b      	movs	r0, #59	; 0x3b
 8001fac:	f006 fcc0 	bl	8008930 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8001fb0:	203b      	movs	r0, #59	; 0x3b
 8001fb2:	f006 fcd9 	bl	8008968 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 5, 0);
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	2105      	movs	r1, #5
 8001fba:	203c      	movs	r0, #60	; 0x3c
 8001fbc:	f006 fcb8 	bl	8008930 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 8001fc0:	203c      	movs	r0, #60	; 0x3c
 8001fc2:	f006 fcd1 	bl	8008968 <HAL_NVIC_EnableIRQ>

}
 8001fc6:	bf00      	nop
 8001fc8:	3708      	adds	r7, #8
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	bd80      	pop	{r7, pc}
 8001fce:	bf00      	nop
 8001fd0:	40023800 	.word	0x40023800

08001fd4 <configureTimerForRunTimeStats>:
unsigned long getRunTimeCounterValue(void);

/* USER CODE BEGIN 1 */
/* Functions needed when configGENERATE_RUN_TIME_STATS is on */
__weak void configureTimerForRunTimeStats(void)
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	af00      	add	r7, sp, #0

}
 8001fd8:	bf00      	nop
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe0:	4770      	bx	lr

08001fe2 <getRunTimeCounterValue>:

__weak unsigned long getRunTimeCounterValue(void)
{
 8001fe2:	b480      	push	{r7}
 8001fe4:	af00      	add	r7, sp, #0
return 0;
 8001fe6:	2300      	movs	r3, #0
}
 8001fe8:	4618      	mov	r0, r3
 8001fea:	46bd      	mov	sp, r7
 8001fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff0:	4770      	bx	lr
	...

08001ff4 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	b085      	sub	sp, #20
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	60f8      	str	r0, [r7, #12]
 8001ffc:	60b9      	str	r1, [r7, #8]
 8001ffe:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	4a07      	ldr	r2, [pc, #28]	; (8002020 <vApplicationGetIdleTaskMemory+0x2c>)
 8002004:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8002006:	68bb      	ldr	r3, [r7, #8]
 8002008:	4a06      	ldr	r2, [pc, #24]	; (8002024 <vApplicationGetIdleTaskMemory+0x30>)
 800200a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	2280      	movs	r2, #128	; 0x80
 8002010:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8002012:	bf00      	nop
 8002014:	3714      	adds	r7, #20
 8002016:	46bd      	mov	sp, r7
 8002018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201c:	4770      	bx	lr
 800201e:	bf00      	nop
 8002020:	20000334 	.word	0x20000334
 8002024:	200003d8 	.word	0x200003d8

08002028 <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )
{
 8002028:	b480      	push	{r7}
 800202a:	b085      	sub	sp, #20
 800202c:	af00      	add	r7, sp, #0
 800202e:	60f8      	str	r0, [r7, #12]
 8002030:	60b9      	str	r1, [r7, #8]
 8002032:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	4a07      	ldr	r2, [pc, #28]	; (8002054 <vApplicationGetTimerTaskMemory+0x2c>)
 8002038:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 800203a:	68bb      	ldr	r3, [r7, #8]
 800203c:	4a06      	ldr	r2, [pc, #24]	; (8002058 <vApplicationGetTimerTaskMemory+0x30>)
 800203e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002046:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8002048:	bf00      	nop
 800204a:	3714      	adds	r7, #20
 800204c:	46bd      	mov	sp, r7
 800204e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002052:	4770      	bx	lr
 8002054:	200005d8 	.word	0x200005d8
 8002058:	2000067c 	.word	0x2000067c

0800205c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 800205c:	b5b0      	push	{r4, r5, r7, lr}
 800205e:	b08a      	sub	sp, #40	; 0x28
 8002060:	af02      	add	r7, sp, #8
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* USER CODE BEGIN RTOS_SEMAPHORES */
  /* add semaphores, ... */
	gimbal_event_group = xEventGroupCreate();
 8002062:	f00e ffc1 	bl	8010fe8 <xEventGroupCreate>
 8002066:	4603      	mov	r3, r0
 8002068:	4a44      	ldr	r2, [pc, #272]	; (800217c <MX_FREERTOS_Init+0x120>)
 800206a:	6013      	str	r3, [r2, #0]
	chassis_event_group = xEventGroupCreate();
 800206c:	f00e ffbc 	bl	8010fe8 <xEventGroupCreate>
 8002070:	4603      	mov	r3, r0
 8002072:	4a43      	ldr	r2, [pc, #268]	; (8002180 <MX_FREERTOS_Init+0x124>)
 8002074:	6013      	str	r3, [r2, #0]
	launcher_event_group = xEventGroupCreate();
 8002076:	f00e ffb7 	bl	8010fe8 <xEventGroupCreate>
 800207a:	4603      	mov	r3, r0
 800207c:	4a41      	ldr	r2, [pc, #260]	; (8002184 <MX_FREERTOS_Init+0x128>)
 800207e:	6013      	str	r3, [r2, #0]

	usb_continue_semaphore = xSemaphoreCreateBinary();
 8002080:	2203      	movs	r2, #3
 8002082:	2100      	movs	r1, #0
 8002084:	2001      	movs	r0, #1
 8002086:	f00f fb1d 	bl	80116c4 <xQueueGenericCreate>
 800208a:	4603      	mov	r3, r0
 800208c:	4a3e      	ldr	r2, [pc, #248]	; (8002188 <MX_FREERTOS_Init+0x12c>)
 800208e:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */
	gyro_data_queue = xQueueCreate(5, sizeof(gyro_data_t));
 8002090:	2200      	movs	r2, #0
 8002092:	2110      	movs	r1, #16
 8002094:	2005      	movs	r0, #5
 8002096:	f00f fb15 	bl	80116c4 <xQueueGenericCreate>
 800209a:	4603      	mov	r3, r0
 800209c:	4a3b      	ldr	r2, [pc, #236]	; (800218c <MX_FREERTOS_Init+0x130>)
 800209e:	6013      	str	r3, [r2, #0]
	accel_data_queue = xQueueCreate(5, sizeof(accel_data_t));
 80020a0:	2200      	movs	r2, #0
 80020a2:	2110      	movs	r1, #16
 80020a4:	2005      	movs	r0, #5
 80020a6:	f00f fb0d 	bl	80116c4 <xQueueGenericCreate>
 80020aa:	4603      	mov	r3, r0
 80020ac:	4a38      	ldr	r2, [pc, #224]	; (8002190 <MX_FREERTOS_Init+0x134>)
 80020ae:	6013      	str	r3, [r2, #0]
	mag_data_queue = xQueueCreate(5, sizeof(mag_data_t));
 80020b0:	2200      	movs	r2, #0
 80020b2:	210c      	movs	r1, #12
 80020b4:	2005      	movs	r0, #5
 80020b6:	f00f fb05 	bl	80116c4 <xQueueGenericCreate>
 80020ba:	4603      	mov	r3, r0
 80020bc:	4a35      	ldr	r2, [pc, #212]	; (8002194 <MX_FREERTOS_Init+0x138>)
 80020be:	6013      	str	r3, [r2, #0]
	//telem_data_queue = xQueueCreate(10, sizeof(telem_data_struct_t));
	buzzing_task_msg = xQueueCreate(5, sizeof(uint8_t));
 80020c0:	2200      	movs	r2, #0
 80020c2:	2101      	movs	r1, #1
 80020c4:	2005      	movs	r0, #5
 80020c6:	f00f fafd 	bl	80116c4 <xQueueGenericCreate>
 80020ca:	4603      	mov	r3, r0
 80020cc:	4a32      	ldr	r2, [pc, #200]	; (8002198 <MX_FREERTOS_Init+0x13c>)
 80020ce:	6013      	str	r3, [r2, #0]

  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80020d0:	4b32      	ldr	r3, [pc, #200]	; (800219c <MX_FREERTOS_Init+0x140>)
 80020d2:	1d3c      	adds	r4, r7, #4
 80020d4:	461d      	mov	r5, r3
 80020d6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80020d8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80020da:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80020de:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80020e2:	1d3b      	adds	r3, r7, #4
 80020e4:	2100      	movs	r1, #0
 80020e6:	4618      	mov	r0, r3
 80020e8:	f00e ff1e 	bl	8010f28 <osThreadCreate>
 80020ec:	4603      	mov	r3, r0
 80020ee:	4a2c      	ldr	r2, [pc, #176]	; (80021a0 <MX_FREERTOS_Init+0x144>)
 80020f0:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  //todo: adjust priorities
  //Threads creation
  xTaskCreate(imu_processing_task		, "IMU_task" 		,
 80020f2:	4b2c      	ldr	r3, [pc, #176]	; (80021a4 <MX_FREERTOS_Init+0x148>)
 80020f4:	9301      	str	r3, [sp, #4]
 80020f6:	230f      	movs	r3, #15
 80020f8:	9300      	str	r3, [sp, #0]
 80020fa:	2301      	movs	r3, #1
 80020fc:	2280      	movs	r2, #128	; 0x80
 80020fe:	492a      	ldr	r1, [pc, #168]	; (80021a8 <MX_FREERTOS_Init+0x14c>)
 8002100:	482a      	ldr	r0, [pc, #168]	; (80021ac <MX_FREERTOS_Init+0x150>)
 8002102:	f00f ff7e 	bl	8012002 <xTaskCreate>
		  configMINIMAL_STACK_SIZE ,(void *) 1, (UBaseType_t)15, &imu_processing_task_handle);

  xTaskCreate(motor_calib_task			, "motor_calib_task" ,
 8002106:	4b2a      	ldr	r3, [pc, #168]	; (80021b0 <MX_FREERTOS_Init+0x154>)
 8002108:	9301      	str	r3, [sp, #4]
 800210a:	2309      	movs	r3, #9
 800210c:	9300      	str	r3, [sp, #0]
 800210e:	2301      	movs	r3, #1
 8002110:	2280      	movs	r2, #128	; 0x80
 8002112:	4928      	ldr	r1, [pc, #160]	; (80021b4 <MX_FREERTOS_Init+0x158>)
 8002114:	4828      	ldr	r0, [pc, #160]	; (80021b8 <MX_FREERTOS_Init+0x15c>)
 8002116:	f00f ff74 	bl	8012002 <xTaskCreate>
		  configMINIMAL_STACK_SIZE ,(void *) 1, (UBaseType_t)9, &motor_calib_task_handle);


  if (chassis_event_group == NULL) {
 800211a:	4b19      	ldr	r3, [pc, #100]	; (8002180 <MX_FREERTOS_Init+0x124>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	2b00      	cmp	r3, #0
 8002120:	d009      	beq.n	8002136 <MX_FREERTOS_Init+0xda>
 	  //error handler
   }
   else {
	   xTaskCreate(movement_control_task, "chassis_task" 	,
 8002122:	4b26      	ldr	r3, [pc, #152]	; (80021bc <MX_FREERTOS_Init+0x160>)
 8002124:	9301      	str	r3, [sp, #4]
 8002126:	2304      	movs	r3, #4
 8002128:	9300      	str	r3, [sp, #0]
 800212a:	2301      	movs	r3, #1
 800212c:	2280      	movs	r2, #128	; 0x80
 800212e:	4924      	ldr	r1, [pc, #144]	; (80021c0 <MX_FREERTOS_Init+0x164>)
 8002130:	4824      	ldr	r0, [pc, #144]	; (80021c4 <MX_FREERTOS_Init+0x168>)
 8002132:	f00f ff66 	bl	8012002 <xTaskCreate>
			   configMINIMAL_STACK_SIZE ,(void *) 1, (UBaseType_t)4, &movement_control_task_handle);
   }
  xTaskCreate(motor_feedback_task, "feedback_loop_task" 	,
 8002136:	4b24      	ldr	r3, [pc, #144]	; (80021c8 <MX_FREERTOS_Init+0x16c>)
 8002138:	9301      	str	r3, [sp, #4]
 800213a:	2304      	movs	r3, #4
 800213c:	9300      	str	r3, [sp, #0]
 800213e:	2301      	movs	r3, #1
 8002140:	2280      	movs	r2, #128	; 0x80
 8002142:	4922      	ldr	r1, [pc, #136]	; (80021cc <MX_FREERTOS_Init+0x170>)
 8002144:	4822      	ldr	r0, [pc, #136]	; (80021d0 <MX_FREERTOS_Init+0x174>)
 8002146:	f00f ff5c 	bl	8012002 <xTaskCreate>
  			   configMINIMAL_STACK_SIZE ,(void *) 1, (UBaseType_t)4, &motor_feedback_task_handle);


  xTaskCreate(control_input_task		, "RC_task" 		,
 800214a:	4b22      	ldr	r3, [pc, #136]	; (80021d4 <MX_FREERTOS_Init+0x178>)
 800214c:	9301      	str	r3, [sp, #4]
 800214e:	2304      	movs	r3, #4
 8002150:	9300      	str	r3, [sp, #0]
 8002152:	2301      	movs	r3, #1
 8002154:	2280      	movs	r2, #128	; 0x80
 8002156:	4920      	ldr	r1, [pc, #128]	; (80021d8 <MX_FREERTOS_Init+0x17c>)
 8002158:	4820      	ldr	r0, [pc, #128]	; (80021dc <MX_FREERTOS_Init+0x180>)
 800215a:	f00f ff52 	bl	8012002 <xTaskCreate>
		  configMINIMAL_STACK_SIZE ,(void *) 1, (UBaseType_t)4, &control_input_task_handle);
  xTaskCreate(buzzing_task				, "buzzer_task" 	,
 800215e:	4b20      	ldr	r3, [pc, #128]	; (80021e0 <MX_FREERTOS_Init+0x184>)
 8002160:	9301      	str	r3, [sp, #4]
 8002162:	2301      	movs	r3, #1
 8002164:	9300      	str	r3, [sp, #0]
 8002166:	2301      	movs	r3, #1
 8002168:	2280      	movs	r2, #128	; 0x80
 800216a:	491e      	ldr	r1, [pc, #120]	; (80021e4 <MX_FREERTOS_Init+0x188>)
 800216c:	481e      	ldr	r0, [pc, #120]	; (80021e8 <MX_FREERTOS_Init+0x18c>)
 800216e:	f00f ff48 	bl	8012002 <xTaskCreate>
		  configMINIMAL_STACK_SIZE ,(void *) 1,(UBaseType_t) 1, &buzzing_task_handle);

  /* USER CODE END RTOS_THREADS */

}
 8002172:	bf00      	nop
 8002174:	3720      	adds	r7, #32
 8002176:	46bd      	mov	sp, r7
 8002178:	bdb0      	pop	{r4, r5, r7, pc}
 800217a:	bf00      	nop
 800217c:	20000310 	.word	0x20000310
 8002180:	20000314 	.word	0x20000314
 8002184:	20000318 	.word	0x20000318
 8002188:	2000031c 	.word	0x2000031c
 800218c:	20000320 	.word	0x20000320
 8002190:	20000324 	.word	0x20000324
 8002194:	20000328 	.word	0x20000328
 8002198:	2000032c 	.word	0x2000032c
 800219c:	080169e0 	.word	0x080169e0
 80021a0:	20000330 	.word	0x20000330
 80021a4:	20000308 	.word	0x20000308
 80021a8:	0801697c 	.word	0x0801697c
 80021ac:	08004699 	.word	0x08004699
 80021b0:	20000304 	.word	0x20000304
 80021b4:	08016988 	.word	0x08016988
 80021b8:	080067d1 	.word	0x080067d1
 80021bc:	200002f8 	.word	0x200002f8
 80021c0:	0801699c 	.word	0x0801699c
 80021c4:	080072cd 	.word	0x080072cd
 80021c8:	2000030c 	.word	0x2000030c
 80021cc:	080169ac 	.word	0x080169ac
 80021d0:	08007049 	.word	0x08007049
 80021d4:	200002fc 	.word	0x200002fc
 80021d8:	080169c0 	.word	0x080169c0
 80021dc:	08004311 	.word	0x08004311
 80021e0:	20000300 	.word	0x20000300
 80021e4:	080169c8 	.word	0x080169c8
 80021e8:	08003599 	.word	0x08003599

080021ec <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b082      	sub	sp, #8
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 80021f4:	f011 ffc2 	bl	801417c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80021f8:	2001      	movs	r0, #1
 80021fa:	f00e fee1 	bl	8010fc0 <osDelay>
 80021fe:	e7fb      	b.n	80021f8 <StartDefaultTask+0xc>

08002200 <MX_GPIO_Init>:
        * EVENT_OUT
        * EXTI
     PA7   ------> SPI1_MOSI
*/
void MX_GPIO_Init(void)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b08c      	sub	sp, #48	; 0x30
 8002204:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002206:	f107 031c 	add.w	r3, r7, #28
 800220a:	2200      	movs	r2, #0
 800220c:	601a      	str	r2, [r3, #0]
 800220e:	605a      	str	r2, [r3, #4]
 8002210:	609a      	str	r2, [r3, #8]
 8002212:	60da      	str	r2, [r3, #12]
 8002214:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002216:	2300      	movs	r3, #0
 8002218:	61bb      	str	r3, [r7, #24]
 800221a:	4b8c      	ldr	r3, [pc, #560]	; (800244c <MX_GPIO_Init+0x24c>)
 800221c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800221e:	4a8b      	ldr	r2, [pc, #556]	; (800244c <MX_GPIO_Init+0x24c>)
 8002220:	f043 0310 	orr.w	r3, r3, #16
 8002224:	6313      	str	r3, [r2, #48]	; 0x30
 8002226:	4b89      	ldr	r3, [pc, #548]	; (800244c <MX_GPIO_Init+0x24c>)
 8002228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800222a:	f003 0310 	and.w	r3, r3, #16
 800222e:	61bb      	str	r3, [r7, #24]
 8002230:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002232:	2300      	movs	r3, #0
 8002234:	617b      	str	r3, [r7, #20]
 8002236:	4b85      	ldr	r3, [pc, #532]	; (800244c <MX_GPIO_Init+0x24c>)
 8002238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800223a:	4a84      	ldr	r2, [pc, #528]	; (800244c <MX_GPIO_Init+0x24c>)
 800223c:	f043 0302 	orr.w	r3, r3, #2
 8002240:	6313      	str	r3, [r2, #48]	; 0x30
 8002242:	4b82      	ldr	r3, [pc, #520]	; (800244c <MX_GPIO_Init+0x24c>)
 8002244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002246:	f003 0302 	and.w	r3, r3, #2
 800224a:	617b      	str	r3, [r7, #20]
 800224c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800224e:	2300      	movs	r3, #0
 8002250:	613b      	str	r3, [r7, #16]
 8002252:	4b7e      	ldr	r3, [pc, #504]	; (800244c <MX_GPIO_Init+0x24c>)
 8002254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002256:	4a7d      	ldr	r2, [pc, #500]	; (800244c <MX_GPIO_Init+0x24c>)
 8002258:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800225c:	6313      	str	r3, [r2, #48]	; 0x30
 800225e:	4b7b      	ldr	r3, [pc, #492]	; (800244c <MX_GPIO_Init+0x24c>)
 8002260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002262:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002266:	613b      	str	r3, [r7, #16]
 8002268:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800226a:	2300      	movs	r3, #0
 800226c:	60fb      	str	r3, [r7, #12]
 800226e:	4b77      	ldr	r3, [pc, #476]	; (800244c <MX_GPIO_Init+0x24c>)
 8002270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002272:	4a76      	ldr	r2, [pc, #472]	; (800244c <MX_GPIO_Init+0x24c>)
 8002274:	f043 0301 	orr.w	r3, r3, #1
 8002278:	6313      	str	r3, [r2, #48]	; 0x30
 800227a:	4b74      	ldr	r3, [pc, #464]	; (800244c <MX_GPIO_Init+0x24c>)
 800227c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800227e:	f003 0301 	and.w	r3, r3, #1
 8002282:	60fb      	str	r3, [r7, #12]
 8002284:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002286:	2300      	movs	r3, #0
 8002288:	60bb      	str	r3, [r7, #8]
 800228a:	4b70      	ldr	r3, [pc, #448]	; (800244c <MX_GPIO_Init+0x24c>)
 800228c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800228e:	4a6f      	ldr	r2, [pc, #444]	; (800244c <MX_GPIO_Init+0x24c>)
 8002290:	f043 0308 	orr.w	r3, r3, #8
 8002294:	6313      	str	r3, [r2, #48]	; 0x30
 8002296:	4b6d      	ldr	r3, [pc, #436]	; (800244c <MX_GPIO_Init+0x24c>)
 8002298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800229a:	f003 0308 	and.w	r3, r3, #8
 800229e:	60bb      	str	r3, [r7, #8]
 80022a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80022a2:	2300      	movs	r3, #0
 80022a4:	607b      	str	r3, [r7, #4]
 80022a6:	4b69      	ldr	r3, [pc, #420]	; (800244c <MX_GPIO_Init+0x24c>)
 80022a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022aa:	4a68      	ldr	r2, [pc, #416]	; (800244c <MX_GPIO_Init+0x24c>)
 80022ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80022b0:	6313      	str	r3, [r2, #48]	; 0x30
 80022b2:	4b66      	ldr	r3, [pc, #408]	; (800244c <MX_GPIO_Init+0x24c>)
 80022b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022ba:	607b      	str	r3, [r7, #4]
 80022bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80022be:	2300      	movs	r3, #0
 80022c0:	603b      	str	r3, [r7, #0]
 80022c2:	4b62      	ldr	r3, [pc, #392]	; (800244c <MX_GPIO_Init+0x24c>)
 80022c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022c6:	4a61      	ldr	r2, [pc, #388]	; (800244c <MX_GPIO_Init+0x24c>)
 80022c8:	f043 0320 	orr.w	r3, r3, #32
 80022cc:	6313      	str	r3, [r2, #48]	; 0x30
 80022ce:	4b5f      	ldr	r3, [pc, #380]	; (800244c <MX_GPIO_Init+0x24c>)
 80022d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022d2:	f003 0320 	and.w	r3, r3, #32
 80022d6:	603b      	str	r3, [r7, #0]
 80022d8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LASER_GPIO_Port, LASER_Pin, GPIO_PIN_RESET);
 80022da:	2200      	movs	r2, #0
 80022dc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80022e0:	485b      	ldr	r0, [pc, #364]	; (8002450 <MX_GPIO_Init+0x250>)
 80022e2:	f007 f8fd 	bl	80094e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, PWR_A_Pin|PWR_B_Pin|PWR_C_Pin|PWR_D_Pin, GPIO_PIN_SET);
 80022e6:	2201      	movs	r2, #1
 80022e8:	213c      	movs	r1, #60	; 0x3c
 80022ea:	485a      	ldr	r0, [pc, #360]	; (8002454 <MX_GPIO_Init+0x254>)
 80022ec:	f007 f8f8 	bl	80094e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LED8_Pin|LED7_Pin|LED6_Pin|LED5_Pin
 80022f0:	2201      	movs	r2, #1
 80022f2:	f44f 71ff 	mov.w	r1, #510	; 0x1fe
 80022f6:	4856      	ldr	r0, [pc, #344]	; (8002450 <MX_GPIO_Init+0x250>)
 80022f8:	f007 f8f2 	bl	80094e0 <HAL_GPIO_WritePin>
                          |LED4_Pin|LED3_Pin|LED2_Pin|LED1_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_6, GPIO_PIN_SET);
 80022fc:	2201      	movs	r2, #1
 80022fe:	2140      	movs	r1, #64	; 0x40
 8002300:	4855      	ldr	r0, [pc, #340]	; (8002458 <MX_GPIO_Init+0x258>)
 8002302:	f007 f8ed 	bl	80094e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_R_GPIO_Port, LED_R_Pin, GPIO_PIN_RESET);
 8002306:	2200      	movs	r2, #0
 8002308:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800230c:	4853      	ldr	r0, [pc, #332]	; (800245c <MX_GPIO_Init+0x25c>)
 800230e:	f007 f8e7 	bl	80094e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_G_GPIO_Port, LED_G_Pin, GPIO_PIN_RESET);
 8002312:	2200      	movs	r2, #0
 8002314:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002318:	484f      	ldr	r0, [pc, #316]	; (8002458 <MX_GPIO_Init+0x258>)
 800231a:	f007 f8e1 	bl	80094e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IST_INT_Pin;
 800231e:	2308      	movs	r3, #8
 8002320:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002322:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002326:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002328:	2302      	movs	r3, #2
 800232a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(IST_INT_GPIO_Port, &GPIO_InitStruct);
 800232c:	f107 031c 	add.w	r3, r7, #28
 8002330:	4619      	mov	r1, r3
 8002332:	484a      	ldr	r0, [pc, #296]	; (800245c <MX_GPIO_Init+0x25c>)
 8002334:	f006 ff28 	bl	8009188 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MPU_INT_Pin;
 8002338:	f44f 7380 	mov.w	r3, #256	; 0x100
 800233c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800233e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002342:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002344:	2302      	movs	r3, #2
 8002346:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MPU_INT_GPIO_Port, &GPIO_InitStruct);
 8002348:	f107 031c 	add.w	r3, r7, #28
 800234c:	4619      	mov	r1, r3
 800234e:	4844      	ldr	r0, [pc, #272]	; (8002460 <MX_GPIO_Init+0x260>)
 8002350:	f006 ff1a 	bl	8009188 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LASER_Pin;
 8002354:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002358:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800235a:	2301      	movs	r3, #1
 800235c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800235e:	2300      	movs	r3, #0
 8002360:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002362:	2300      	movs	r3, #0
 8002364:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LASER_GPIO_Port, &GPIO_InitStruct);
 8002366:	f107 031c 	add.w	r3, r7, #28
 800236a:	4619      	mov	r1, r3
 800236c:	4838      	ldr	r0, [pc, #224]	; (8002450 <MX_GPIO_Init+0x250>)
 800236e:	f006 ff0b 	bl	8009188 <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin PHPin PHPin */
  GPIO_InitStruct.Pin = PWR_A_Pin|PWR_B_Pin|PWR_C_Pin|PWR_D_Pin;
 8002372:	233c      	movs	r3, #60	; 0x3c
 8002374:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002376:	2301      	movs	r3, #1
 8002378:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800237a:	2301      	movs	r3, #1
 800237c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800237e:	2300      	movs	r3, #0
 8002380:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002382:	f107 031c 	add.w	r3, r7, #28
 8002386:	4619      	mov	r1, r3
 8002388:	4832      	ldr	r0, [pc, #200]	; (8002454 <MX_GPIO_Init+0x254>)
 800238a:	f006 fefd 	bl	8009188 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin PGPin
                           PGPin PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = LED8_Pin|LED7_Pin|LED6_Pin|LED5_Pin
 800238e:	f44f 73ff 	mov.w	r3, #510	; 0x1fe
 8002392:	61fb      	str	r3, [r7, #28]
                          |LED4_Pin|LED3_Pin|LED2_Pin|LED1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002394:	2301      	movs	r3, #1
 8002396:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002398:	2300      	movs	r3, #0
 800239a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800239c:	2303      	movs	r3, #3
 800239e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80023a0:	f107 031c 	add.w	r3, r7, #28
 80023a4:	4619      	mov	r1, r3
 80023a6:	482a      	ldr	r0, [pc, #168]	; (8002450 <MX_GPIO_Init+0x250>)
 80023a8:	f006 feee 	bl	8009188 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80023ac:	2340      	movs	r3, #64	; 0x40
 80023ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023b0:	2301      	movs	r3, #1
 80023b2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80023b4:	2302      	movs	r3, #2
 80023b6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80023b8:	2301      	movs	r3, #1
 80023ba:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80023bc:	f107 031c 	add.w	r3, r7, #28
 80023c0:	4619      	mov	r1, r3
 80023c2:	4825      	ldr	r0, [pc, #148]	; (8002458 <MX_GPIO_Init+0x258>)
 80023c4:	f006 fee0 	bl	8009188 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_R_Pin;
 80023c8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80023cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023ce:	2301      	movs	r3, #1
 80023d0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023d2:	2300      	movs	r3, #0
 80023d4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023d6:	2300      	movs	r3, #0
 80023d8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_R_GPIO_Port, &GPIO_InitStruct);
 80023da:	f107 031c 	add.w	r3, r7, #28
 80023de:	4619      	mov	r1, r3
 80023e0:	481e      	ldr	r0, [pc, #120]	; (800245c <MX_GPIO_Init+0x25c>)
 80023e2:	f006 fed1 	bl	8009188 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80023e6:	2380      	movs	r3, #128	; 0x80
 80023e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023ea:	2302      	movs	r3, #2
 80023ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023ee:	2300      	movs	r3, #0
 80023f0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023f2:	2303      	movs	r3, #3
 80023f4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80023f6:	2305      	movs	r3, #5
 80023f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023fa:	f107 031c 	add.w	r3, r7, #28
 80023fe:	4619      	mov	r1, r3
 8002400:	4818      	ldr	r0, [pc, #96]	; (8002464 <MX_GPIO_Init+0x264>)
 8002402:	f006 fec1 	bl	8009188 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_G_Pin;
 8002406:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800240a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800240c:	2301      	movs	r3, #1
 800240e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002410:	2300      	movs	r3, #0
 8002412:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002414:	2300      	movs	r3, #0
 8002416:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_G_GPIO_Port, &GPIO_InitStruct);
 8002418:	f107 031c 	add.w	r3, r7, #28
 800241c:	4619      	mov	r1, r3
 800241e:	480e      	ldr	r0, [pc, #56]	; (8002458 <MX_GPIO_Init+0x258>)
 8002420:	f006 feb2 	bl	8009188 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 5, 0);
 8002424:	2200      	movs	r2, #0
 8002426:	2105      	movs	r1, #5
 8002428:	2009      	movs	r0, #9
 800242a:	f006 fa81 	bl	8008930 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 800242e:	2009      	movs	r0, #9
 8002430:	f006 fa9a 	bl	8008968 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8002434:	2200      	movs	r2, #0
 8002436:	2105      	movs	r1, #5
 8002438:	2017      	movs	r0, #23
 800243a:	f006 fa79 	bl	8008930 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800243e:	2017      	movs	r0, #23
 8002440:	f006 fa92 	bl	8008968 <HAL_NVIC_EnableIRQ>

}
 8002444:	bf00      	nop
 8002446:	3730      	adds	r7, #48	; 0x30
 8002448:	46bd      	mov	sp, r7
 800244a:	bd80      	pop	{r7, pc}
 800244c:	40023800 	.word	0x40023800
 8002450:	40021800 	.word	0x40021800
 8002454:	40021c00 	.word	0x40021c00
 8002458:	40021400 	.word	0x40021400
 800245c:	40021000 	.word	0x40021000
 8002460:	40020400 	.word	0x40020400
 8002464:	40020000 	.word	0x40020000

08002468 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800246c:	f005 fac2 	bl	80079f4 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002470:	f000 f824 	bl	80024bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002474:	f7ff fec4 	bl	8002200 <MX_GPIO_Init>
  MX_DMA_Init();
 8002478:	f7ff fd5e 	bl	8001f38 <MX_DMA_Init>
  MX_USART1_UART_Init();
 800247c:	f000 fe74 	bl	8003168 <MX_USART1_UART_Init>
  MX_CAN1_Init();
 8002480:	f7ff fc36 	bl	8001cf0 <MX_CAN1_Init>
  MX_USART6_UART_Init();
 8002484:	f000 fe9c 	bl	80031c0 <MX_USART6_UART_Init>
  MX_SPI5_Init();
 8002488:	f000 f89a 	bl	80025c0 <MX_SPI5_Init>
  MX_TIM12_Init();
 800248c:	f000 fce6 	bl	8002e5c <MX_TIM12_Init>
  MX_CAN2_Init();
 8002490:	f7ff fc64 	bl	8001d5c <MX_CAN2_Init>
  MX_TIM4_Init();
 8002494:	f000 fbb2 	bl	8002bfc <MX_TIM4_Init>
  MX_UART7_Init();
 8002498:	f000 fe3c 	bl	8003114 <MX_UART7_Init>
  MX_FATFS_Init();
 800249c:	f00d f802 	bl	800f4a4 <MX_FATFS_Init>
  MX_TIM5_Init();
 80024a0:	f000 fc06 	bl	8002cb0 <MX_TIM5_Init>
  MX_TIM8_Init();
 80024a4:	f000 fc5a 	bl	8002d5c <MX_TIM8_Init>
  MX_TIM1_Init();
 80024a8:	f000 fb28 	bl	8002afc <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  startup_task();
 80024ac:	f005 fa46 	bl	800793c <startup_task>
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 80024b0:	f7ff fdd4 	bl	800205c <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 80024b4:	f00e fd31 	bl	8010f1a <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80024b8:	e7fe      	b.n	80024b8 <main+0x50>
	...

080024bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b094      	sub	sp, #80	; 0x50
 80024c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80024c2:	f107 0320 	add.w	r3, r7, #32
 80024c6:	2230      	movs	r2, #48	; 0x30
 80024c8:	2100      	movs	r1, #0
 80024ca:	4618      	mov	r0, r3
 80024cc:	f012 fb4a 	bl	8014b64 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80024d0:	f107 030c 	add.w	r3, r7, #12
 80024d4:	2200      	movs	r2, #0
 80024d6:	601a      	str	r2, [r3, #0]
 80024d8:	605a      	str	r2, [r3, #4]
 80024da:	609a      	str	r2, [r3, #8]
 80024dc:	60da      	str	r2, [r3, #12]
 80024de:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80024e0:	2300      	movs	r3, #0
 80024e2:	60bb      	str	r3, [r7, #8]
 80024e4:	4b28      	ldr	r3, [pc, #160]	; (8002588 <SystemClock_Config+0xcc>)
 80024e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024e8:	4a27      	ldr	r2, [pc, #156]	; (8002588 <SystemClock_Config+0xcc>)
 80024ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024ee:	6413      	str	r3, [r2, #64]	; 0x40
 80024f0:	4b25      	ldr	r3, [pc, #148]	; (8002588 <SystemClock_Config+0xcc>)
 80024f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024f8:	60bb      	str	r3, [r7, #8]
 80024fa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80024fc:	2300      	movs	r3, #0
 80024fe:	607b      	str	r3, [r7, #4]
 8002500:	4b22      	ldr	r3, [pc, #136]	; (800258c <SystemClock_Config+0xd0>)
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	4a21      	ldr	r2, [pc, #132]	; (800258c <SystemClock_Config+0xd0>)
 8002506:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800250a:	6013      	str	r3, [r2, #0]
 800250c:	4b1f      	ldr	r3, [pc, #124]	; (800258c <SystemClock_Config+0xd0>)
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002514:	607b      	str	r3, [r7, #4]
 8002516:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002518:	2301      	movs	r3, #1
 800251a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800251c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002520:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002522:	2302      	movs	r3, #2
 8002524:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002526:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800252a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 6;
 800252c:	2306      	movs	r3, #6
 800252e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8002530:	23a8      	movs	r3, #168	; 0xa8
 8002532:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002534:	2302      	movs	r3, #2
 8002536:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8002538:	2307      	movs	r3, #7
 800253a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800253c:	f107 0320 	add.w	r3, r7, #32
 8002540:	4618      	mov	r0, r3
 8002542:	f008 f983 	bl	800a84c <HAL_RCC_OscConfig>
 8002546:	4603      	mov	r3, r0
 8002548:	2b00      	cmp	r3, #0
 800254a:	d001      	beq.n	8002550 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800254c:	f000 f832 	bl	80025b4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002550:	230f      	movs	r3, #15
 8002552:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002554:	2302      	movs	r3, #2
 8002556:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002558:	2300      	movs	r3, #0
 800255a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800255c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002560:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002562:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002566:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002568:	f107 030c 	add.w	r3, r7, #12
 800256c:	2105      	movs	r1, #5
 800256e:	4618      	mov	r0, r3
 8002570:	f008 fbe4 	bl	800ad3c <HAL_RCC_ClockConfig>
 8002574:	4603      	mov	r3, r0
 8002576:	2b00      	cmp	r3, #0
 8002578:	d001      	beq.n	800257e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800257a:	f000 f81b 	bl	80025b4 <Error_Handler>
  }
}
 800257e:	bf00      	nop
 8002580:	3750      	adds	r7, #80	; 0x50
 8002582:	46bd      	mov	sp, r7
 8002584:	bd80      	pop	{r7, pc}
 8002586:	bf00      	nop
 8002588:	40023800 	.word	0x40023800
 800258c:	40007000 	.word	0x40007000

08002590 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	b082      	sub	sp, #8
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM3) {
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	4a04      	ldr	r2, [pc, #16]	; (80025b0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800259e:	4293      	cmp	r3, r2
 80025a0:	d101      	bne.n	80025a6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80025a2:	f005 fa49 	bl	8007a38 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80025a6:	bf00      	nop
 80025a8:	3708      	adds	r7, #8
 80025aa:	46bd      	mov	sp, r7
 80025ac:	bd80      	pop	{r7, pc}
 80025ae:	bf00      	nop
 80025b0:	40000400 	.word	0x40000400

080025b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80025b4:	b480      	push	{r7}
 80025b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80025b8:	b672      	cpsid	i
}
 80025ba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80025bc:	e7fe      	b.n	80025bc <Error_Handler+0x8>
	...

080025c0 <MX_SPI5_Init>:
DMA_HandleTypeDef hdma_spi5_rx;
DMA_HandleTypeDef hdma_spi5_tx;

/* SPI5 init function */
void MX_SPI5_Init(void)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI5_Init 0 */

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  hspi5.Instance = SPI5;
 80025c4:	4b17      	ldr	r3, [pc, #92]	; (8002624 <MX_SPI5_Init+0x64>)
 80025c6:	4a18      	ldr	r2, [pc, #96]	; (8002628 <MX_SPI5_Init+0x68>)
 80025c8:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 80025ca:	4b16      	ldr	r3, [pc, #88]	; (8002624 <MX_SPI5_Init+0x64>)
 80025cc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80025d0:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 80025d2:	4b14      	ldr	r3, [pc, #80]	; (8002624 <MX_SPI5_Init+0x64>)
 80025d4:	2200      	movs	r2, #0
 80025d6:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 80025d8:	4b12      	ldr	r3, [pc, #72]	; (8002624 <MX_SPI5_Init+0x64>)
 80025da:	2200      	movs	r2, #0
 80025dc:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80025de:	4b11      	ldr	r3, [pc, #68]	; (8002624 <MX_SPI5_Init+0x64>)
 80025e0:	2202      	movs	r2, #2
 80025e2:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_2EDGE;
 80025e4:	4b0f      	ldr	r3, [pc, #60]	; (8002624 <MX_SPI5_Init+0x64>)
 80025e6:	2201      	movs	r2, #1
 80025e8:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 80025ea:	4b0e      	ldr	r3, [pc, #56]	; (8002624 <MX_SPI5_Init+0x64>)
 80025ec:	f44f 7200 	mov.w	r2, #512	; 0x200
 80025f0:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 80025f2:	4b0c      	ldr	r3, [pc, #48]	; (8002624 <MX_SPI5_Init+0x64>)
 80025f4:	2238      	movs	r2, #56	; 0x38
 80025f6:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80025f8:	4b0a      	ldr	r3, [pc, #40]	; (8002624 <MX_SPI5_Init+0x64>)
 80025fa:	2200      	movs	r2, #0
 80025fc:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 80025fe:	4b09      	ldr	r3, [pc, #36]	; (8002624 <MX_SPI5_Init+0x64>)
 8002600:	2200      	movs	r2, #0
 8002602:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002604:	4b07      	ldr	r3, [pc, #28]	; (8002624 <MX_SPI5_Init+0x64>)
 8002606:	2200      	movs	r2, #0
 8002608:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 800260a:	4b06      	ldr	r3, [pc, #24]	; (8002624 <MX_SPI5_Init+0x64>)
 800260c:	220a      	movs	r2, #10
 800260e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8002610:	4804      	ldr	r0, [pc, #16]	; (8002624 <MX_SPI5_Init+0x64>)
 8002612:	f008 fda5 	bl	800b160 <HAL_SPI_Init>
 8002616:	4603      	mov	r3, r0
 8002618:	2b00      	cmp	r3, #0
 800261a:	d001      	beq.n	8002620 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 800261c:	f7ff ffca 	bl	80025b4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8002620:	bf00      	nop
 8002622:	bd80      	pop	{r7, pc}
 8002624:	20000a7c 	.word	0x20000a7c
 8002628:	40015000 	.word	0x40015000

0800262c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b08a      	sub	sp, #40	; 0x28
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002634:	f107 0314 	add.w	r3, r7, #20
 8002638:	2200      	movs	r2, #0
 800263a:	601a      	str	r2, [r3, #0]
 800263c:	605a      	str	r2, [r3, #4]
 800263e:	609a      	str	r2, [r3, #8]
 8002640:	60da      	str	r2, [r3, #12]
 8002642:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI5)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	4a51      	ldr	r2, [pc, #324]	; (8002790 <HAL_SPI_MspInit+0x164>)
 800264a:	4293      	cmp	r3, r2
 800264c:	f040 809c 	bne.w	8002788 <HAL_SPI_MspInit+0x15c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* SPI5 clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8002650:	2300      	movs	r3, #0
 8002652:	613b      	str	r3, [r7, #16]
 8002654:	4b4f      	ldr	r3, [pc, #316]	; (8002794 <HAL_SPI_MspInit+0x168>)
 8002656:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002658:	4a4e      	ldr	r2, [pc, #312]	; (8002794 <HAL_SPI_MspInit+0x168>)
 800265a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800265e:	6453      	str	r3, [r2, #68]	; 0x44
 8002660:	4b4c      	ldr	r3, [pc, #304]	; (8002794 <HAL_SPI_MspInit+0x168>)
 8002662:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002664:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002668:	613b      	str	r3, [r7, #16]
 800266a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800266c:	2300      	movs	r3, #0
 800266e:	60fb      	str	r3, [r7, #12]
 8002670:	4b48      	ldr	r3, [pc, #288]	; (8002794 <HAL_SPI_MspInit+0x168>)
 8002672:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002674:	4a47      	ldr	r2, [pc, #284]	; (8002794 <HAL_SPI_MspInit+0x168>)
 8002676:	f043 0320 	orr.w	r3, r3, #32
 800267a:	6313      	str	r3, [r2, #48]	; 0x30
 800267c:	4b45      	ldr	r3, [pc, #276]	; (8002794 <HAL_SPI_MspInit+0x168>)
 800267e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002680:	f003 0320 	and.w	r3, r3, #32
 8002684:	60fb      	str	r3, [r7, #12]
 8002686:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF9     ------> SPI5_MOSI
    PF8     ------> SPI5_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_9|GPIO_PIN_8;
 8002688:	f44f 7360 	mov.w	r3, #896	; 0x380
 800268c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800268e:	2302      	movs	r3, #2
 8002690:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002692:	2300      	movs	r3, #0
 8002694:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002696:	2303      	movs	r3, #3
 8002698:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 800269a:	2305      	movs	r3, #5
 800269c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800269e:	f107 0314 	add.w	r3, r7, #20
 80026a2:	4619      	mov	r1, r3
 80026a4:	483c      	ldr	r0, [pc, #240]	; (8002798 <HAL_SPI_MspInit+0x16c>)
 80026a6:	f006 fd6f 	bl	8009188 <HAL_GPIO_Init>

    /* SPI5 DMA Init */
    /* SPI5_RX Init */
    hdma_spi5_rx.Instance = DMA2_Stream3;
 80026aa:	4b3c      	ldr	r3, [pc, #240]	; (800279c <HAL_SPI_MspInit+0x170>)
 80026ac:	4a3c      	ldr	r2, [pc, #240]	; (80027a0 <HAL_SPI_MspInit+0x174>)
 80026ae:	601a      	str	r2, [r3, #0]
    hdma_spi5_rx.Init.Channel = DMA_CHANNEL_2;
 80026b0:	4b3a      	ldr	r3, [pc, #232]	; (800279c <HAL_SPI_MspInit+0x170>)
 80026b2:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80026b6:	605a      	str	r2, [r3, #4]
    hdma_spi5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80026b8:	4b38      	ldr	r3, [pc, #224]	; (800279c <HAL_SPI_MspInit+0x170>)
 80026ba:	2200      	movs	r2, #0
 80026bc:	609a      	str	r2, [r3, #8]
    hdma_spi5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80026be:	4b37      	ldr	r3, [pc, #220]	; (800279c <HAL_SPI_MspInit+0x170>)
 80026c0:	2200      	movs	r2, #0
 80026c2:	60da      	str	r2, [r3, #12]
    hdma_spi5_rx.Init.MemInc = DMA_MINC_ENABLE;
 80026c4:	4b35      	ldr	r3, [pc, #212]	; (800279c <HAL_SPI_MspInit+0x170>)
 80026c6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80026ca:	611a      	str	r2, [r3, #16]
    hdma_spi5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80026cc:	4b33      	ldr	r3, [pc, #204]	; (800279c <HAL_SPI_MspInit+0x170>)
 80026ce:	2200      	movs	r2, #0
 80026d0:	615a      	str	r2, [r3, #20]
    hdma_spi5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80026d2:	4b32      	ldr	r3, [pc, #200]	; (800279c <HAL_SPI_MspInit+0x170>)
 80026d4:	2200      	movs	r2, #0
 80026d6:	619a      	str	r2, [r3, #24]
    hdma_spi5_rx.Init.Mode = DMA_NORMAL;
 80026d8:	4b30      	ldr	r3, [pc, #192]	; (800279c <HAL_SPI_MspInit+0x170>)
 80026da:	2200      	movs	r2, #0
 80026dc:	61da      	str	r2, [r3, #28]
    hdma_spi5_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80026de:	4b2f      	ldr	r3, [pc, #188]	; (800279c <HAL_SPI_MspInit+0x170>)
 80026e0:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80026e4:	621a      	str	r2, [r3, #32]
    hdma_spi5_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80026e6:	4b2d      	ldr	r3, [pc, #180]	; (800279c <HAL_SPI_MspInit+0x170>)
 80026e8:	2204      	movs	r2, #4
 80026ea:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_spi5_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80026ec:	4b2b      	ldr	r3, [pc, #172]	; (800279c <HAL_SPI_MspInit+0x170>)
 80026ee:	2203      	movs	r2, #3
 80026f0:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_spi5_rx.Init.MemBurst = DMA_MBURST_SINGLE;
 80026f2:	4b2a      	ldr	r3, [pc, #168]	; (800279c <HAL_SPI_MspInit+0x170>)
 80026f4:	2200      	movs	r2, #0
 80026f6:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_spi5_rx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80026f8:	4b28      	ldr	r3, [pc, #160]	; (800279c <HAL_SPI_MspInit+0x170>)
 80026fa:	2200      	movs	r2, #0
 80026fc:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_spi5_rx) != HAL_OK)
 80026fe:	4827      	ldr	r0, [pc, #156]	; (800279c <HAL_SPI_MspInit+0x170>)
 8002700:	f006 f940 	bl	8008984 <HAL_DMA_Init>
 8002704:	4603      	mov	r3, r0
 8002706:	2b00      	cmp	r3, #0
 8002708:	d001      	beq.n	800270e <HAL_SPI_MspInit+0xe2>
    {
      Error_Handler();
 800270a:	f7ff ff53 	bl	80025b4 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi5_rx);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	4a22      	ldr	r2, [pc, #136]	; (800279c <HAL_SPI_MspInit+0x170>)
 8002712:	64da      	str	r2, [r3, #76]	; 0x4c
 8002714:	4a21      	ldr	r2, [pc, #132]	; (800279c <HAL_SPI_MspInit+0x170>)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI5_TX Init */
    hdma_spi5_tx.Instance = DMA2_Stream4;
 800271a:	4b22      	ldr	r3, [pc, #136]	; (80027a4 <HAL_SPI_MspInit+0x178>)
 800271c:	4a22      	ldr	r2, [pc, #136]	; (80027a8 <HAL_SPI_MspInit+0x17c>)
 800271e:	601a      	str	r2, [r3, #0]
    hdma_spi5_tx.Init.Channel = DMA_CHANNEL_2;
 8002720:	4b20      	ldr	r3, [pc, #128]	; (80027a4 <HAL_SPI_MspInit+0x178>)
 8002722:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002726:	605a      	str	r2, [r3, #4]
    hdma_spi5_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002728:	4b1e      	ldr	r3, [pc, #120]	; (80027a4 <HAL_SPI_MspInit+0x178>)
 800272a:	2240      	movs	r2, #64	; 0x40
 800272c:	609a      	str	r2, [r3, #8]
    hdma_spi5_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800272e:	4b1d      	ldr	r3, [pc, #116]	; (80027a4 <HAL_SPI_MspInit+0x178>)
 8002730:	2200      	movs	r2, #0
 8002732:	60da      	str	r2, [r3, #12]
    hdma_spi5_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002734:	4b1b      	ldr	r3, [pc, #108]	; (80027a4 <HAL_SPI_MspInit+0x178>)
 8002736:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800273a:	611a      	str	r2, [r3, #16]
    hdma_spi5_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800273c:	4b19      	ldr	r3, [pc, #100]	; (80027a4 <HAL_SPI_MspInit+0x178>)
 800273e:	2200      	movs	r2, #0
 8002740:	615a      	str	r2, [r3, #20]
    hdma_spi5_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002742:	4b18      	ldr	r3, [pc, #96]	; (80027a4 <HAL_SPI_MspInit+0x178>)
 8002744:	2200      	movs	r2, #0
 8002746:	619a      	str	r2, [r3, #24]
    hdma_spi5_tx.Init.Mode = DMA_NORMAL;
 8002748:	4b16      	ldr	r3, [pc, #88]	; (80027a4 <HAL_SPI_MspInit+0x178>)
 800274a:	2200      	movs	r2, #0
 800274c:	61da      	str	r2, [r3, #28]
    hdma_spi5_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800274e:	4b15      	ldr	r3, [pc, #84]	; (80027a4 <HAL_SPI_MspInit+0x178>)
 8002750:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002754:	621a      	str	r2, [r3, #32]
    hdma_spi5_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002756:	4b13      	ldr	r3, [pc, #76]	; (80027a4 <HAL_SPI_MspInit+0x178>)
 8002758:	2200      	movs	r2, #0
 800275a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi5_tx) != HAL_OK)
 800275c:	4811      	ldr	r0, [pc, #68]	; (80027a4 <HAL_SPI_MspInit+0x178>)
 800275e:	f006 f911 	bl	8008984 <HAL_DMA_Init>
 8002762:	4603      	mov	r3, r0
 8002764:	2b00      	cmp	r3, #0
 8002766:	d001      	beq.n	800276c <HAL_SPI_MspInit+0x140>
    {
      Error_Handler();
 8002768:	f7ff ff24 	bl	80025b4 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi5_tx);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	4a0d      	ldr	r2, [pc, #52]	; (80027a4 <HAL_SPI_MspInit+0x178>)
 8002770:	649a      	str	r2, [r3, #72]	; 0x48
 8002772:	4a0c      	ldr	r2, [pc, #48]	; (80027a4 <HAL_SPI_MspInit+0x178>)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI5 interrupt Init */
    HAL_NVIC_SetPriority(SPI5_IRQn, 5, 0);
 8002778:	2200      	movs	r2, #0
 800277a:	2105      	movs	r1, #5
 800277c:	2055      	movs	r0, #85	; 0x55
 800277e:	f006 f8d7 	bl	8008930 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI5_IRQn);
 8002782:	2055      	movs	r0, #85	; 0x55
 8002784:	f006 f8f0 	bl	8008968 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }
}
 8002788:	bf00      	nop
 800278a:	3728      	adds	r7, #40	; 0x28
 800278c:	46bd      	mov	sp, r7
 800278e:	bd80      	pop	{r7, pc}
 8002790:	40015000 	.word	0x40015000
 8002794:	40023800 	.word	0x40023800
 8002798:	40021400 	.word	0x40021400
 800279c:	20000ad4 	.word	0x20000ad4
 80027a0:	40026458 	.word	0x40026458
 80027a4:	20000b34 	.word	0x20000b34
 80027a8:	40026470 	.word	0x40026470

080027ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b082      	sub	sp, #8
 80027b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027b2:	2300      	movs	r3, #0
 80027b4:	607b      	str	r3, [r7, #4]
 80027b6:	4b21      	ldr	r3, [pc, #132]	; (800283c <HAL_MspInit+0x90>)
 80027b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027ba:	4a20      	ldr	r2, [pc, #128]	; (800283c <HAL_MspInit+0x90>)
 80027bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80027c0:	6453      	str	r3, [r2, #68]	; 0x44
 80027c2:	4b1e      	ldr	r3, [pc, #120]	; (800283c <HAL_MspInit+0x90>)
 80027c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80027ca:	607b      	str	r3, [r7, #4]
 80027cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80027ce:	2300      	movs	r3, #0
 80027d0:	603b      	str	r3, [r7, #0]
 80027d2:	4b1a      	ldr	r3, [pc, #104]	; (800283c <HAL_MspInit+0x90>)
 80027d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027d6:	4a19      	ldr	r2, [pc, #100]	; (800283c <HAL_MspInit+0x90>)
 80027d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027dc:	6413      	str	r3, [r2, #64]	; 0x40
 80027de:	4b17      	ldr	r3, [pc, #92]	; (800283c <HAL_MspInit+0x90>)
 80027e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027e6:	603b      	str	r3, [r7, #0]
 80027e8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 1, 0);
 80027ea:	2200      	movs	r2, #0
 80027ec:	2101      	movs	r1, #1
 80027ee:	f06f 000b 	mvn.w	r0, #11
 80027f2:	f006 f89d 	bl	8008930 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 2, 0);
 80027f6:	2200      	movs	r2, #0
 80027f8:	2102      	movs	r1, #2
 80027fa:	f06f 000a 	mvn.w	r0, #10
 80027fe:	f006 f897 	bl	8008930 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 3, 0);
 8002802:	2200      	movs	r2, #0
 8002804:	2103      	movs	r1, #3
 8002806:	f06f 0009 	mvn.w	r0, #9
 800280a:	f006 f891 	bl	8008930 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 4, 0);
 800280e:	2200      	movs	r2, #0
 8002810:	2104      	movs	r1, #4
 8002812:	f06f 0004 	mvn.w	r0, #4
 8002816:	f006 f88b 	bl	8008930 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 5, 0);
 800281a:	2200      	movs	r2, #0
 800281c:	2105      	movs	r1, #5
 800281e:	f06f 0003 	mvn.w	r0, #3
 8002822:	f006 f885 	bl	8008930 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002826:	2200      	movs	r2, #0
 8002828:	210f      	movs	r1, #15
 800282a:	f06f 0001 	mvn.w	r0, #1
 800282e:	f006 f87f 	bl	8008930 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002832:	bf00      	nop
 8002834:	3708      	adds	r7, #8
 8002836:	46bd      	mov	sp, r7
 8002838:	bd80      	pop	{r7, pc}
 800283a:	bf00      	nop
 800283c:	40023800 	.word	0x40023800

08002840 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	b08c      	sub	sp, #48	; 0x30
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002848:	2300      	movs	r3, #0
 800284a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800284c:	2300      	movs	r3, #0
 800284e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM3 IRQ priority */
  HAL_NVIC_SetPriority(TIM3_IRQn, TickPriority ,0);
 8002850:	2200      	movs	r2, #0
 8002852:	6879      	ldr	r1, [r7, #4]
 8002854:	201d      	movs	r0, #29
 8002856:	f006 f86b 	bl	8008930 <HAL_NVIC_SetPriority>

  /* Enable the TIM3 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800285a:	201d      	movs	r0, #29
 800285c:	f006 f884 	bl	8008968 <HAL_NVIC_EnableIRQ>

  /* Enable TIM3 clock */
  __HAL_RCC_TIM3_CLK_ENABLE();
 8002860:	2300      	movs	r3, #0
 8002862:	60fb      	str	r3, [r7, #12]
 8002864:	4b1f      	ldr	r3, [pc, #124]	; (80028e4 <HAL_InitTick+0xa4>)
 8002866:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002868:	4a1e      	ldr	r2, [pc, #120]	; (80028e4 <HAL_InitTick+0xa4>)
 800286a:	f043 0302 	orr.w	r3, r3, #2
 800286e:	6413      	str	r3, [r2, #64]	; 0x40
 8002870:	4b1c      	ldr	r3, [pc, #112]	; (80028e4 <HAL_InitTick+0xa4>)
 8002872:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002874:	f003 0302 	and.w	r3, r3, #2
 8002878:	60fb      	str	r3, [r7, #12]
 800287a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800287c:	f107 0210 	add.w	r2, r7, #16
 8002880:	f107 0314 	add.w	r3, r7, #20
 8002884:	4611      	mov	r1, r2
 8002886:	4618      	mov	r0, r3
 8002888:	f008 fc38 	bl	800b0fc <HAL_RCC_GetClockConfig>

  /* Compute TIM3 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 800288c:	f008 fc0e 	bl	800b0ac <HAL_RCC_GetPCLK1Freq>
 8002890:	4603      	mov	r3, r0
 8002892:	005b      	lsls	r3, r3, #1
 8002894:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM3 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002896:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002898:	4a13      	ldr	r2, [pc, #76]	; (80028e8 <HAL_InitTick+0xa8>)
 800289a:	fba2 2303 	umull	r2, r3, r2, r3
 800289e:	0c9b      	lsrs	r3, r3, #18
 80028a0:	3b01      	subs	r3, #1
 80028a2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM3 */
  htim3.Instance = TIM3;
 80028a4:	4b11      	ldr	r3, [pc, #68]	; (80028ec <HAL_InitTick+0xac>)
 80028a6:	4a12      	ldr	r2, [pc, #72]	; (80028f0 <HAL_InitTick+0xb0>)
 80028a8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM3CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim3.Init.Period = (1000000U / 1000U) - 1U;
 80028aa:	4b10      	ldr	r3, [pc, #64]	; (80028ec <HAL_InitTick+0xac>)
 80028ac:	f240 32e7 	movw	r2, #999	; 0x3e7
 80028b0:	60da      	str	r2, [r3, #12]
  htim3.Init.Prescaler = uwPrescalerValue;
 80028b2:	4a0e      	ldr	r2, [pc, #56]	; (80028ec <HAL_InitTick+0xac>)
 80028b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028b6:	6053      	str	r3, [r2, #4]
  htim3.Init.ClockDivision = 0;
 80028b8:	4b0c      	ldr	r3, [pc, #48]	; (80028ec <HAL_InitTick+0xac>)
 80028ba:	2200      	movs	r2, #0
 80028bc:	611a      	str	r2, [r3, #16]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80028be:	4b0b      	ldr	r3, [pc, #44]	; (80028ec <HAL_InitTick+0xac>)
 80028c0:	2200      	movs	r2, #0
 80028c2:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim3) == HAL_OK)
 80028c4:	4809      	ldr	r0, [pc, #36]	; (80028ec <HAL_InitTick+0xac>)
 80028c6:	f009 f9c9 	bl	800bc5c <HAL_TIM_Base_Init>
 80028ca:	4603      	mov	r3, r0
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d104      	bne.n	80028da <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim3);
 80028d0:	4806      	ldr	r0, [pc, #24]	; (80028ec <HAL_InitTick+0xac>)
 80028d2:	f009 fa7b 	bl	800bdcc <HAL_TIM_Base_Start_IT>
 80028d6:	4603      	mov	r3, r0
 80028d8:	e000      	b.n	80028dc <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 80028da:	2301      	movs	r3, #1
}
 80028dc:	4618      	mov	r0, r3
 80028de:	3730      	adds	r7, #48	; 0x30
 80028e0:	46bd      	mov	sp, r7
 80028e2:	bd80      	pop	{r7, pc}
 80028e4:	40023800 	.word	0x40023800
 80028e8:	431bde83 	.word	0x431bde83
 80028ec:	20000b94 	.word	0x20000b94
 80028f0:	40000400 	.word	0x40000400

080028f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80028f4:	b480      	push	{r7}
 80028f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80028f8:	e7fe      	b.n	80028f8 <NMI_Handler+0x4>

080028fa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80028fa:	b480      	push	{r7}
 80028fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80028fe:	e7fe      	b.n	80028fe <HardFault_Handler+0x4>

08002900 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002900:	b480      	push	{r7}
 8002902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002904:	e7fe      	b.n	8002904 <MemManage_Handler+0x4>

08002906 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002906:	b480      	push	{r7}
 8002908:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800290a:	e7fe      	b.n	800290a <BusFault_Handler+0x4>

0800290c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800290c:	b480      	push	{r7}
 800290e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002910:	e7fe      	b.n	8002910 <UsageFault_Handler+0x4>

08002912 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002912:	b480      	push	{r7}
 8002914:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002916:	bf00      	nop
 8002918:	46bd      	mov	sp, r7
 800291a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291e:	4770      	bx	lr

08002920 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(IST_INT_Pin);
 8002924:	2008      	movs	r0, #8
 8002926:	f006 fdf5 	bl	8009514 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 800292a:	bf00      	nop
 800292c:	bd80      	pop	{r7, pc}
	...

08002930 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart7_rx);
 8002934:	4802      	ldr	r0, [pc, #8]	; (8002940 <DMA1_Stream3_IRQHandler+0x10>)
 8002936:	f006 f9bd 	bl	8008cb4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 800293a:	bf00      	nop
 800293c:	bd80      	pop	{r7, pc}
 800293e:	bf00      	nop
 8002940:	20000e10 	.word	0x20000e10

08002944 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8002948:	4802      	ldr	r0, [pc, #8]	; (8002954 <CAN1_RX0_IRQHandler+0x10>)
 800294a:	f005 fd13 	bl	8008374 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 800294e:	bf00      	nop
 8002950:	bd80      	pop	{r7, pc}
 8002952:	bf00      	nop
 8002954:	200002a4 	.word	0x200002a4

08002958 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(MPU_INT_Pin);
 800295c:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002960:	f006 fdd8 	bl	8009514 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002964:	bf00      	nop
 8002966:	bd80      	pop	{r7, pc}

08002968 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800296c:	4803      	ldr	r0, [pc, #12]	; (800297c <TIM1_UP_TIM10_IRQHandler+0x14>)
 800296e:	f009 fc03 	bl	800c178 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */
  micros_tick();
 8002972:	f7ff f903 	bl	8001b7c <micros_tick>
  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8002976:	bf00      	nop
 8002978:	bd80      	pop	{r7, pc}
 800297a:	bf00      	nop
 800297c:	20000bdc 	.word	0x20000bdc

08002980 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002984:	4802      	ldr	r0, [pc, #8]	; (8002990 <TIM3_IRQHandler+0x10>)
 8002986:	f009 fbf7 	bl	800c178 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800298a:	bf00      	nop
 800298c:	bd80      	pop	{r7, pc}
 800298e:	bf00      	nop
 8002990:	20000b94 	.word	0x20000b94

08002994 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b082      	sub	sp, #8
 8002998:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
	if (__HAL_UART_GET_FLAG(&huart1, UART_FLAG_IDLE))
 800299a:	4b19      	ldr	r3, [pc, #100]	; (8002a00 <USART1_IRQHandler+0x6c>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f003 0310 	and.w	r3, r3, #16
 80029a4:	2b10      	cmp	r3, #16
 80029a6:	d123      	bne.n	80029f0 <USART1_IRQHandler+0x5c>
	{
		__HAL_UART_CLEAR_IDLEFLAG(&huart1);
 80029a8:	2300      	movs	r3, #0
 80029aa:	607b      	str	r3, [r7, #4]
 80029ac:	4b14      	ldr	r3, [pc, #80]	; (8002a00 <USART1_IRQHandler+0x6c>)
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	607b      	str	r3, [r7, #4]
 80029b4:	4b12      	ldr	r3, [pc, #72]	; (8002a00 <USART1_IRQHandler+0x6c>)
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	685b      	ldr	r3, [r3, #4]
 80029ba:	607b      	str	r3, [r7, #4]
 80029bc:	687b      	ldr	r3, [r7, #4]
		if (hdma_usart1_rx.Instance->NDTR != 18)
 80029be:	4b11      	ldr	r3, [pc, #68]	; (8002a04 <USART1_IRQHandler+0x70>)
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	685b      	ldr	r3, [r3, #4]
 80029c4:	2b12      	cmp	r3, #18
 80029c6:	d013      	beq.n	80029f0 <USART1_IRQHandler+0x5c>
		{
		__HAL_DMA_DISABLE(&hdma_usart1_rx);
 80029c8:	4b0e      	ldr	r3, [pc, #56]	; (8002a04 <USART1_IRQHandler+0x70>)
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	681a      	ldr	r2, [r3, #0]
 80029ce:	4b0d      	ldr	r3, [pc, #52]	; (8002a04 <USART1_IRQHandler+0x70>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f022 0201 	bic.w	r2, r2, #1
 80029d6:	601a      	str	r2, [r3, #0]
		hdma_usart1_rx.Instance->NDTR = 18;
 80029d8:	4b0a      	ldr	r3, [pc, #40]	; (8002a04 <USART1_IRQHandler+0x70>)
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	2212      	movs	r2, #18
 80029de:	605a      	str	r2, [r3, #4]
		__HAL_DMA_ENABLE(&hdma_usart1_rx);
 80029e0:	4b08      	ldr	r3, [pc, #32]	; (8002a04 <USART1_IRQHandler+0x70>)
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	681a      	ldr	r2, [r3, #0]
 80029e6:	4b07      	ldr	r3, [pc, #28]	; (8002a04 <USART1_IRQHandler+0x70>)
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f042 0201 	orr.w	r2, r2, #1
 80029ee:	601a      	str	r2, [r3, #0]
		}
	}
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80029f0:	4803      	ldr	r0, [pc, #12]	; (8002a00 <USART1_IRQHandler+0x6c>)
 80029f2:	f00a fb17 	bl	800d024 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80029f6:	bf00      	nop
 80029f8:	3708      	adds	r7, #8
 80029fa:	46bd      	mov	sp, r7
 80029fc:	bd80      	pop	{r7, pc}
 80029fe:	bf00      	nop
 8002a00:	20000d88 	.word	0x20000d88
 8002a04:	20000e70 	.word	0x20000e70

08002a08 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 8002a0c:	4802      	ldr	r0, [pc, #8]	; (8002a18 <DMA2_Stream1_IRQHandler+0x10>)
 8002a0e:	f006 f951 	bl	8008cb4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8002a12:	bf00      	nop
 8002a14:	bd80      	pop	{r7, pc}
 8002a16:	bf00      	nop
 8002a18:	20000ed0 	.word	0x20000ed0

08002a1c <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002a20:	4802      	ldr	r0, [pc, #8]	; (8002a2c <DMA2_Stream2_IRQHandler+0x10>)
 8002a22:	f006 f947 	bl	8008cb4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8002a26:	bf00      	nop
 8002a28:	bd80      	pop	{r7, pc}
 8002a2a:	bf00      	nop
 8002a2c:	20000e70 	.word	0x20000e70

08002a30 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi5_rx);
 8002a34:	4802      	ldr	r0, [pc, #8]	; (8002a40 <DMA2_Stream3_IRQHandler+0x10>)
 8002a36:	f006 f93d 	bl	8008cb4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8002a3a:	bf00      	nop
 8002a3c:	bd80      	pop	{r7, pc}
 8002a3e:	bf00      	nop
 8002a40:	20000ad4 	.word	0x20000ad4

08002a44 <DMA2_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA2 stream4 global interrupt.
  */
void DMA2_Stream4_IRQHandler(void)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi5_tx);
 8002a48:	4802      	ldr	r0, [pc, #8]	; (8002a54 <DMA2_Stream4_IRQHandler+0x10>)
 8002a4a:	f006 f933 	bl	8008cb4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream4_IRQn 1 */

  /* USER CODE END DMA2_Stream4_IRQn 1 */
}
 8002a4e:	bf00      	nop
 8002a50:	bd80      	pop	{r7, pc}
 8002a52:	bf00      	nop
 8002a54:	20000b34 	.word	0x20000b34

08002a58 <CAN2_RX0_IRQHandler>:

/**
  * @brief This function handles CAN2 RX0 interrupts.
  */
void CAN2_RX0_IRQHandler(void)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX0_IRQn 0 */

  /* USER CODE END CAN2_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8002a5c:	4802      	ldr	r0, [pc, #8]	; (8002a68 <CAN2_RX0_IRQHandler+0x10>)
 8002a5e:	f005 fc89 	bl	8008374 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX0_IRQn 1 */

  /* USER CODE END CAN2_RX0_IRQn 1 */
}
 8002a62:	bf00      	nop
 8002a64:	bd80      	pop	{r7, pc}
 8002a66:	bf00      	nop
 8002a68:	200002cc 	.word	0x200002cc

08002a6c <CAN2_RX1_IRQHandler>:

/**
  * @brief This function handles CAN2 RX1 interrupt.
  */
void CAN2_RX1_IRQHandler(void)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX1_IRQn 0 */

  /* USER CODE END CAN2_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8002a70:	4802      	ldr	r0, [pc, #8]	; (8002a7c <CAN2_RX1_IRQHandler+0x10>)
 8002a72:	f005 fc7f 	bl	8008374 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX1_IRQn 1 */

  /* USER CODE END CAN2_RX1_IRQn 1 */
}
 8002a76:	bf00      	nop
 8002a78:	bd80      	pop	{r7, pc}
 8002a7a:	bf00      	nop
 8002a7c:	200002cc 	.word	0x200002cc

08002a80 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8002a84:	4802      	ldr	r0, [pc, #8]	; (8002a90 <OTG_FS_IRQHandler+0x10>)
 8002a86:	f006 fead 	bl	80097e4 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8002a8a:	bf00      	nop
 8002a8c:	bd80      	pop	{r7, pc}
 8002a8e:	bf00      	nop
 8002a90:	2000751c 	.word	0x2000751c

08002a94 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8002a98:	4802      	ldr	r0, [pc, #8]	; (8002aa4 <USART6_IRQHandler+0x10>)
 8002a9a:	f00a fac3 	bl	800d024 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8002a9e:	bf00      	nop
 8002aa0:	bd80      	pop	{r7, pc}
 8002aa2:	bf00      	nop
 8002aa4:	20000dcc 	.word	0x20000dcc

08002aa8 <UART7_IRQHandler>:

/**
  * @brief This function handles UART7 global interrupt.
  */
void UART7_IRQHandler(void)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART7_IRQn 0 */

  /* USER CODE END UART7_IRQn 0 */
  HAL_UART_IRQHandler(&huart7);
 8002aac:	4802      	ldr	r0, [pc, #8]	; (8002ab8 <UART7_IRQHandler+0x10>)
 8002aae:	f00a fab9 	bl	800d024 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART7_IRQn 1 */

  /* USER CODE END UART7_IRQn 1 */
}
 8002ab2:	bf00      	nop
 8002ab4:	bd80      	pop	{r7, pc}
 8002ab6:	bf00      	nop
 8002ab8:	20000d44 	.word	0x20000d44

08002abc <SPI5_IRQHandler>:

/**
  * @brief This function handles SPI5 global interrupt.
  */
void SPI5_IRQHandler(void)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI5_IRQn 0 */

  /* USER CODE END SPI5_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi5);
 8002ac0:	4802      	ldr	r0, [pc, #8]	; (8002acc <SPI5_IRQHandler+0x10>)
 8002ac2:	f008 fe89 	bl	800b7d8 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI5_IRQn 1 */

  /* USER CODE END SPI5_IRQn 1 */
}
 8002ac6:	bf00      	nop
 8002ac8:	bd80      	pop	{r7, pc}
 8002aca:	bf00      	nop
 8002acc:	20000a7c 	.word	0x20000a7c

08002ad0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002ad0:	b480      	push	{r7}
 8002ad2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002ad4:	4b08      	ldr	r3, [pc, #32]	; (8002af8 <SystemInit+0x28>)
 8002ad6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ada:	4a07      	ldr	r2, [pc, #28]	; (8002af8 <SystemInit+0x28>)
 8002adc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002ae0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002ae4:	4b04      	ldr	r3, [pc, #16]	; (8002af8 <SystemInit+0x28>)
 8002ae6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002aea:	609a      	str	r2, [r3, #8]
#endif
}
 8002aec:	bf00      	nop
 8002aee:	46bd      	mov	sp, r7
 8002af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af4:	4770      	bx	lr
 8002af6:	bf00      	nop
 8002af8:	e000ed00 	.word	0xe000ed00

08002afc <MX_TIM1_Init>:
TIM_HandleTypeDef htim8;
TIM_HandleTypeDef htim12;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b092      	sub	sp, #72	; 0x48
 8002b00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002b02:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002b06:	2200      	movs	r2, #0
 8002b08:	601a      	str	r2, [r3, #0]
 8002b0a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002b0c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b10:	2200      	movs	r2, #0
 8002b12:	601a      	str	r2, [r3, #0]
 8002b14:	605a      	str	r2, [r3, #4]
 8002b16:	609a      	str	r2, [r3, #8]
 8002b18:	60da      	str	r2, [r3, #12]
 8002b1a:	611a      	str	r2, [r3, #16]
 8002b1c:	615a      	str	r2, [r3, #20]
 8002b1e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002b20:	1d3b      	adds	r3, r7, #4
 8002b22:	2220      	movs	r2, #32
 8002b24:	2100      	movs	r1, #0
 8002b26:	4618      	mov	r0, r3
 8002b28:	f012 f81c 	bl	8014b64 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002b2c:	4b31      	ldr	r3, [pc, #196]	; (8002bf4 <MX_TIM1_Init+0xf8>)
 8002b2e:	4a32      	ldr	r2, [pc, #200]	; (8002bf8 <MX_TIM1_Init+0xfc>)
 8002b30:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 168-1;
 8002b32:	4b30      	ldr	r3, [pc, #192]	; (8002bf4 <MX_TIM1_Init+0xf8>)
 8002b34:	22a7      	movs	r2, #167	; 0xa7
 8002b36:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b38:	4b2e      	ldr	r3, [pc, #184]	; (8002bf4 <MX_TIM1_Init+0xf8>)
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1;
 8002b3e:	4b2d      	ldr	r3, [pc, #180]	; (8002bf4 <MX_TIM1_Init+0xf8>)
 8002b40:	2201      	movs	r2, #1
 8002b42:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b44:	4b2b      	ldr	r3, [pc, #172]	; (8002bf4 <MX_TIM1_Init+0xf8>)
 8002b46:	2200      	movs	r2, #0
 8002b48:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002b4a:	4b2a      	ldr	r3, [pc, #168]	; (8002bf4 <MX_TIM1_Init+0xf8>)
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b50:	4b28      	ldr	r3, [pc, #160]	; (8002bf4 <MX_TIM1_Init+0xf8>)
 8002b52:	2200      	movs	r2, #0
 8002b54:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 8002b56:	4827      	ldr	r0, [pc, #156]	; (8002bf4 <MX_TIM1_Init+0xf8>)
 8002b58:	f009 f9a8 	bl	800beac <HAL_TIM_OC_Init>
 8002b5c:	4603      	mov	r3, r0
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d001      	beq.n	8002b66 <MX_TIM1_Init+0x6a>
  {
    Error_Handler();
 8002b62:	f7ff fd27 	bl	80025b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002b66:	2300      	movs	r3, #0
 8002b68:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002b6e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002b72:	4619      	mov	r1, r3
 8002b74:	481f      	ldr	r0, [pc, #124]	; (8002bf4 <MX_TIM1_Init+0xf8>)
 8002b76:	f00a f925 	bl	800cdc4 <HAL_TIMEx_MasterConfigSynchronization>
 8002b7a:	4603      	mov	r3, r0
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d001      	beq.n	8002b84 <MX_TIM1_Init+0x88>
  {
    Error_Handler();
 8002b80:	f7ff fd18 	bl	80025b4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8002b84:	2300      	movs	r3, #0
 8002b86:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8002b88:	2300      	movs	r3, #0
 8002b8a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002b90:	2300      	movs	r3, #0
 8002b92:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002b94:	2300      	movs	r3, #0
 8002b96:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002b98:	2300      	movs	r3, #0
 8002b9a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002ba0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	4619      	mov	r1, r3
 8002ba8:	4812      	ldr	r0, [pc, #72]	; (8002bf4 <MX_TIM1_Init+0xf8>)
 8002baa:	f009 fbed 	bl	800c388 <HAL_TIM_OC_ConfigChannel>
 8002bae:	4603      	mov	r3, r0
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d001      	beq.n	8002bb8 <MX_TIM1_Init+0xbc>
  {
    Error_Handler();
 8002bb4:	f7ff fcfe 	bl	80025b4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002bb8:	2300      	movs	r3, #0
 8002bba:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002bbc:	2300      	movs	r3, #0
 8002bbe:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002bc8:	2300      	movs	r3, #0
 8002bca:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002bcc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002bd0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002bd6:	1d3b      	adds	r3, r7, #4
 8002bd8:	4619      	mov	r1, r3
 8002bda:	4806      	ldr	r0, [pc, #24]	; (8002bf4 <MX_TIM1_Init+0xf8>)
 8002bdc:	f00a f96e 	bl	800cebc <HAL_TIMEx_ConfigBreakDeadTime>
 8002be0:	4603      	mov	r3, r0
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d001      	beq.n	8002bea <MX_TIM1_Init+0xee>
  {
    Error_Handler();
 8002be6:	f7ff fce5 	bl	80025b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002bea:	bf00      	nop
 8002bec:	3748      	adds	r7, #72	; 0x48
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	bd80      	pop	{r7, pc}
 8002bf2:	bf00      	nop
 8002bf4:	20000bdc 	.word	0x20000bdc
 8002bf8:	40010000 	.word	0x40010000

08002bfc <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	b08a      	sub	sp, #40	; 0x28
 8002c00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002c02:	f107 0320 	add.w	r3, r7, #32
 8002c06:	2200      	movs	r2, #0
 8002c08:	601a      	str	r2, [r3, #0]
 8002c0a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002c0c:	1d3b      	adds	r3, r7, #4
 8002c0e:	2200      	movs	r2, #0
 8002c10:	601a      	str	r2, [r3, #0]
 8002c12:	605a      	str	r2, [r3, #4]
 8002c14:	609a      	str	r2, [r3, #8]
 8002c16:	60da      	str	r2, [r3, #12]
 8002c18:	611a      	str	r2, [r3, #16]
 8002c1a:	615a      	str	r2, [r3, #20]
 8002c1c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002c1e:	4b22      	ldr	r3, [pc, #136]	; (8002ca8 <MX_TIM4_Init+0xac>)
 8002c20:	4a22      	ldr	r2, [pc, #136]	; (8002cac <MX_TIM4_Init+0xb0>)
 8002c22:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 84;
 8002c24:	4b20      	ldr	r3, [pc, #128]	; (8002ca8 <MX_TIM4_Init+0xac>)
 8002c26:	2254      	movs	r2, #84	; 0x54
 8002c28:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c2a:	4b1f      	ldr	r3, [pc, #124]	; (8002ca8 <MX_TIM4_Init+0xac>)
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000;
 8002c30:	4b1d      	ldr	r3, [pc, #116]	; (8002ca8 <MX_TIM4_Init+0xac>)
 8002c32:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002c36:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002c38:	4b1b      	ldr	r3, [pc, #108]	; (8002ca8 <MX_TIM4_Init+0xac>)
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002c3e:	4b1a      	ldr	r3, [pc, #104]	; (8002ca8 <MX_TIM4_Init+0xac>)
 8002c40:	2200      	movs	r2, #0
 8002c42:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8002c44:	4818      	ldr	r0, [pc, #96]	; (8002ca8 <MX_TIM4_Init+0xac>)
 8002c46:	f009 f980 	bl	800bf4a <HAL_TIM_PWM_Init>
 8002c4a:	4603      	mov	r3, r0
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d001      	beq.n	8002c54 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 8002c50:	f7ff fcb0 	bl	80025b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002c54:	2300      	movs	r3, #0
 8002c56:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002c58:	2300      	movs	r3, #0
 8002c5a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002c5c:	f107 0320 	add.w	r3, r7, #32
 8002c60:	4619      	mov	r1, r3
 8002c62:	4811      	ldr	r0, [pc, #68]	; (8002ca8 <MX_TIM4_Init+0xac>)
 8002c64:	f00a f8ae 	bl	800cdc4 <HAL_TIMEx_MasterConfigSynchronization>
 8002c68:	4603      	mov	r3, r0
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d001      	beq.n	8002c72 <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 8002c6e:	f7ff fca1 	bl	80025b4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002c72:	2360      	movs	r3, #96	; 0x60
 8002c74:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002c76:	2300      	movs	r3, #0
 8002c78:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002c7e:	2300      	movs	r3, #0
 8002c80:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002c82:	1d3b      	adds	r3, r7, #4
 8002c84:	2200      	movs	r2, #0
 8002c86:	4619      	mov	r1, r3
 8002c88:	4807      	ldr	r0, [pc, #28]	; (8002ca8 <MX_TIM4_Init+0xac>)
 8002c8a:	f009 fbd9 	bl	800c440 <HAL_TIM_PWM_ConfigChannel>
 8002c8e:	4603      	mov	r3, r0
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d001      	beq.n	8002c98 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 8002c94:	f7ff fc8e 	bl	80025b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8002c98:	4803      	ldr	r0, [pc, #12]	; (8002ca8 <MX_TIM4_Init+0xac>)
 8002c9a:	f000 f9d9 	bl	8003050 <HAL_TIM_MspPostInit>

}
 8002c9e:	bf00      	nop
 8002ca0:	3728      	adds	r7, #40	; 0x28
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	bd80      	pop	{r7, pc}
 8002ca6:	bf00      	nop
 8002ca8:	20000c24 	.word	0x20000c24
 8002cac:	40000800 	.word	0x40000800

08002cb0 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b08a      	sub	sp, #40	; 0x28
 8002cb4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002cb6:	f107 0320 	add.w	r3, r7, #32
 8002cba:	2200      	movs	r2, #0
 8002cbc:	601a      	str	r2, [r3, #0]
 8002cbe:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002cc0:	1d3b      	adds	r3, r7, #4
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	601a      	str	r2, [r3, #0]
 8002cc6:	605a      	str	r2, [r3, #4]
 8002cc8:	609a      	str	r2, [r3, #8]
 8002cca:	60da      	str	r2, [r3, #12]
 8002ccc:	611a      	str	r2, [r3, #16]
 8002cce:	615a      	str	r2, [r3, #20]
 8002cd0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8002cd2:	4b20      	ldr	r3, [pc, #128]	; (8002d54 <MX_TIM5_Init+0xa4>)
 8002cd4:	4a20      	ldr	r2, [pc, #128]	; (8002d58 <MX_TIM5_Init+0xa8>)
 8002cd6:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8002cd8:	4b1e      	ldr	r3, [pc, #120]	; (8002d54 <MX_TIM5_Init+0xa4>)
 8002cda:	2200      	movs	r2, #0
 8002cdc:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002cde:	4b1d      	ldr	r3, [pc, #116]	; (8002d54 <MX_TIM5_Init+0xa4>)
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8002ce4:	4b1b      	ldr	r3, [pc, #108]	; (8002d54 <MX_TIM5_Init+0xa4>)
 8002ce6:	f04f 32ff 	mov.w	r2, #4294967295
 8002cea:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002cec:	4b19      	ldr	r3, [pc, #100]	; (8002d54 <MX_TIM5_Init+0xa4>)
 8002cee:	2200      	movs	r2, #0
 8002cf0:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002cf2:	4b18      	ldr	r3, [pc, #96]	; (8002d54 <MX_TIM5_Init+0xa4>)
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8002cf8:	4816      	ldr	r0, [pc, #88]	; (8002d54 <MX_TIM5_Init+0xa4>)
 8002cfa:	f009 f926 	bl	800bf4a <HAL_TIM_PWM_Init>
 8002cfe:	4603      	mov	r3, r0
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d001      	beq.n	8002d08 <MX_TIM5_Init+0x58>
  {
    Error_Handler();
 8002d04:	f7ff fc56 	bl	80025b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002d08:	2300      	movs	r3, #0
 8002d0a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002d0c:	2300      	movs	r3, #0
 8002d0e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002d10:	f107 0320 	add.w	r3, r7, #32
 8002d14:	4619      	mov	r1, r3
 8002d16:	480f      	ldr	r0, [pc, #60]	; (8002d54 <MX_TIM5_Init+0xa4>)
 8002d18:	f00a f854 	bl	800cdc4 <HAL_TIMEx_MasterConfigSynchronization>
 8002d1c:	4603      	mov	r3, r0
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d001      	beq.n	8002d26 <MX_TIM5_Init+0x76>
  {
    Error_Handler();
 8002d22:	f7ff fc47 	bl	80025b4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002d26:	2360      	movs	r3, #96	; 0x60
 8002d28:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002d2e:	2300      	movs	r3, #0
 8002d30:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002d32:	2300      	movs	r3, #0
 8002d34:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002d36:	1d3b      	adds	r3, r7, #4
 8002d38:	2200      	movs	r2, #0
 8002d3a:	4619      	mov	r1, r3
 8002d3c:	4805      	ldr	r0, [pc, #20]	; (8002d54 <MX_TIM5_Init+0xa4>)
 8002d3e:	f009 fb7f 	bl	800c440 <HAL_TIM_PWM_ConfigChannel>
 8002d42:	4603      	mov	r3, r0
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d001      	beq.n	8002d4c <MX_TIM5_Init+0x9c>
  {
    Error_Handler();
 8002d48:	f7ff fc34 	bl	80025b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8002d4c:	bf00      	nop
 8002d4e:	3728      	adds	r7, #40	; 0x28
 8002d50:	46bd      	mov	sp, r7
 8002d52:	bd80      	pop	{r7, pc}
 8002d54:	20000c6c 	.word	0x20000c6c
 8002d58:	40000c00 	.word	0x40000c00

08002d5c <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	b092      	sub	sp, #72	; 0x48
 8002d60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002d62:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002d66:	2200      	movs	r2, #0
 8002d68:	601a      	str	r2, [r3, #0]
 8002d6a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002d6c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d70:	2200      	movs	r2, #0
 8002d72:	601a      	str	r2, [r3, #0]
 8002d74:	605a      	str	r2, [r3, #4]
 8002d76:	609a      	str	r2, [r3, #8]
 8002d78:	60da      	str	r2, [r3, #12]
 8002d7a:	611a      	str	r2, [r3, #16]
 8002d7c:	615a      	str	r2, [r3, #20]
 8002d7e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002d80:	1d3b      	adds	r3, r7, #4
 8002d82:	2220      	movs	r2, #32
 8002d84:	2100      	movs	r1, #0
 8002d86:	4618      	mov	r0, r3
 8002d88:	f011 feec 	bl	8014b64 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8002d8c:	4b31      	ldr	r3, [pc, #196]	; (8002e54 <MX_TIM8_Init+0xf8>)
 8002d8e:	4a32      	ldr	r2, [pc, #200]	; (8002e58 <MX_TIM8_Init+0xfc>)
 8002d90:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8002d92:	4b30      	ldr	r3, [pc, #192]	; (8002e54 <MX_TIM8_Init+0xf8>)
 8002d94:	2200      	movs	r2, #0
 8002d96:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d98:	4b2e      	ldr	r3, [pc, #184]	; (8002e54 <MX_TIM8_Init+0xf8>)
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8002d9e:	4b2d      	ldr	r3, [pc, #180]	; (8002e54 <MX_TIM8_Init+0xf8>)
 8002da0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002da4:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002da6:	4b2b      	ldr	r3, [pc, #172]	; (8002e54 <MX_TIM8_Init+0xf8>)
 8002da8:	2200      	movs	r2, #0
 8002daa:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8002dac:	4b29      	ldr	r3, [pc, #164]	; (8002e54 <MX_TIM8_Init+0xf8>)
 8002dae:	2200      	movs	r2, #0
 8002db0:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002db2:	4b28      	ldr	r3, [pc, #160]	; (8002e54 <MX_TIM8_Init+0xf8>)
 8002db4:	2200      	movs	r2, #0
 8002db6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim8) != HAL_OK)
 8002db8:	4826      	ldr	r0, [pc, #152]	; (8002e54 <MX_TIM8_Init+0xf8>)
 8002dba:	f009 f877 	bl	800beac <HAL_TIM_OC_Init>
 8002dbe:	4603      	mov	r3, r0
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d001      	beq.n	8002dc8 <MX_TIM8_Init+0x6c>
  {
    Error_Handler();
 8002dc4:	f7ff fbf6 	bl	80025b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002dc8:	2300      	movs	r3, #0
 8002dca:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002dcc:	2300      	movs	r3, #0
 8002dce:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8002dd0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002dd4:	4619      	mov	r1, r3
 8002dd6:	481f      	ldr	r0, [pc, #124]	; (8002e54 <MX_TIM8_Init+0xf8>)
 8002dd8:	f009 fff4 	bl	800cdc4 <HAL_TIMEx_MasterConfigSynchronization>
 8002ddc:	4603      	mov	r3, r0
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d001      	beq.n	8002de6 <MX_TIM8_Init+0x8a>
  {
    Error_Handler();
 8002de2:	f7ff fbe7 	bl	80025b4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8002de6:	2300      	movs	r3, #0
 8002de8:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8002dea:	2300      	movs	r3, #0
 8002dec:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002dee:	2300      	movs	r3, #0
 8002df0:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002df2:	2300      	movs	r3, #0
 8002df4:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002df6:	2300      	movs	r3, #0
 8002df8:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002dfe:	2300      	movs	r3, #0
 8002e00:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_OC_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002e02:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e06:	2200      	movs	r2, #0
 8002e08:	4619      	mov	r1, r3
 8002e0a:	4812      	ldr	r0, [pc, #72]	; (8002e54 <MX_TIM8_Init+0xf8>)
 8002e0c:	f009 fabc 	bl	800c388 <HAL_TIM_OC_ConfigChannel>
 8002e10:	4603      	mov	r3, r0
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d001      	beq.n	8002e1a <MX_TIM8_Init+0xbe>
  {
    Error_Handler();
 8002e16:	f7ff fbcd 	bl	80025b4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002e1e:	2300      	movs	r3, #0
 8002e20:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002e22:	2300      	movs	r3, #0
 8002e24:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002e26:	2300      	movs	r3, #0
 8002e28:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002e2e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002e32:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002e34:	2300      	movs	r3, #0
 8002e36:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8002e38:	1d3b      	adds	r3, r7, #4
 8002e3a:	4619      	mov	r1, r3
 8002e3c:	4805      	ldr	r0, [pc, #20]	; (8002e54 <MX_TIM8_Init+0xf8>)
 8002e3e:	f00a f83d 	bl	800cebc <HAL_TIMEx_ConfigBreakDeadTime>
 8002e42:	4603      	mov	r3, r0
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d001      	beq.n	8002e4c <MX_TIM8_Init+0xf0>
  {
    Error_Handler();
 8002e48:	f7ff fbb4 	bl	80025b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8002e4c:	bf00      	nop
 8002e4e:	3748      	adds	r7, #72	; 0x48
 8002e50:	46bd      	mov	sp, r7
 8002e52:	bd80      	pop	{r7, pc}
 8002e54:	20000cb4 	.word	0x20000cb4
 8002e58:	40010400 	.word	0x40010400

08002e5c <MX_TIM12_Init>:
/* TIM12 init function */
void MX_TIM12_Init(void)
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	b08c      	sub	sp, #48	; 0x30
 8002e60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002e62:	f107 0320 	add.w	r3, r7, #32
 8002e66:	2200      	movs	r2, #0
 8002e68:	601a      	str	r2, [r3, #0]
 8002e6a:	605a      	str	r2, [r3, #4]
 8002e6c:	609a      	str	r2, [r3, #8]
 8002e6e:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002e70:	1d3b      	adds	r3, r7, #4
 8002e72:	2200      	movs	r2, #0
 8002e74:	601a      	str	r2, [r3, #0]
 8002e76:	605a      	str	r2, [r3, #4]
 8002e78:	609a      	str	r2, [r3, #8]
 8002e7a:	60da      	str	r2, [r3, #12]
 8002e7c:	611a      	str	r2, [r3, #16]
 8002e7e:	615a      	str	r2, [r3, #20]
 8002e80:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8002e82:	4b25      	ldr	r3, [pc, #148]	; (8002f18 <MX_TIM12_Init+0xbc>)
 8002e84:	4a25      	ldr	r2, [pc, #148]	; (8002f1c <MX_TIM12_Init+0xc0>)
 8002e86:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 84;
 8002e88:	4b23      	ldr	r3, [pc, #140]	; (8002f18 <MX_TIM12_Init+0xbc>)
 8002e8a:	2254      	movs	r2, #84	; 0x54
 8002e8c:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002e8e:	4b22      	ldr	r3, [pc, #136]	; (8002f18 <MX_TIM12_Init+0xbc>)
 8002e90:	2200      	movs	r2, #0
 8002e92:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 1000;
 8002e94:	4b20      	ldr	r3, [pc, #128]	; (8002f18 <MX_TIM12_Init+0xbc>)
 8002e96:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002e9a:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002e9c:	4b1e      	ldr	r3, [pc, #120]	; (8002f18 <MX_TIM12_Init+0xbc>)
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002ea2:	4b1d      	ldr	r3, [pc, #116]	; (8002f18 <MX_TIM12_Init+0xbc>)
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 8002ea8:	481b      	ldr	r0, [pc, #108]	; (8002f18 <MX_TIM12_Init+0xbc>)
 8002eaa:	f008 fed7 	bl	800bc5c <HAL_TIM_Base_Init>
 8002eae:	4603      	mov	r3, r0
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d001      	beq.n	8002eb8 <MX_TIM12_Init+0x5c>
  {
    Error_Handler();
 8002eb4:	f7ff fb7e 	bl	80025b4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002eb8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002ebc:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 8002ebe:	f107 0320 	add.w	r3, r7, #32
 8002ec2:	4619      	mov	r1, r3
 8002ec4:	4814      	ldr	r0, [pc, #80]	; (8002f18 <MX_TIM12_Init+0xbc>)
 8002ec6:	f009 fb7d 	bl	800c5c4 <HAL_TIM_ConfigClockSource>
 8002eca:	4603      	mov	r3, r0
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d001      	beq.n	8002ed4 <MX_TIM12_Init+0x78>
  {
    Error_Handler();
 8002ed0:	f7ff fb70 	bl	80025b4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8002ed4:	4810      	ldr	r0, [pc, #64]	; (8002f18 <MX_TIM12_Init+0xbc>)
 8002ed6:	f009 f838 	bl	800bf4a <HAL_TIM_PWM_Init>
 8002eda:	4603      	mov	r3, r0
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d001      	beq.n	8002ee4 <MX_TIM12_Init+0x88>
  {
    Error_Handler();
 8002ee0:	f7ff fb68 	bl	80025b4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002ee4:	2360      	movs	r3, #96	; 0x60
 8002ee6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002ee8:	2300      	movs	r3, #0
 8002eea:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002eec:	2300      	movs	r3, #0
 8002eee:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002ef0:	2300      	movs	r3, #0
 8002ef2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002ef4:	1d3b      	adds	r3, r7, #4
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	4619      	mov	r1, r3
 8002efa:	4807      	ldr	r0, [pc, #28]	; (8002f18 <MX_TIM12_Init+0xbc>)
 8002efc:	f009 faa0 	bl	800c440 <HAL_TIM_PWM_ConfigChannel>
 8002f00:	4603      	mov	r3, r0
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d001      	beq.n	8002f0a <MX_TIM12_Init+0xae>
  {
    Error_Handler();
 8002f06:	f7ff fb55 	bl	80025b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 8002f0a:	4803      	ldr	r0, [pc, #12]	; (8002f18 <MX_TIM12_Init+0xbc>)
 8002f0c:	f000 f8a0 	bl	8003050 <HAL_TIM_MspPostInit>

}
 8002f10:	bf00      	nop
 8002f12:	3730      	adds	r7, #48	; 0x30
 8002f14:	46bd      	mov	sp, r7
 8002f16:	bd80      	pop	{r7, pc}
 8002f18:	20000cfc 	.word	0x20000cfc
 8002f1c:	40001800 	.word	0x40001800

08002f20 <HAL_TIM_OC_MspInit>:

void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* tim_ocHandle)
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b084      	sub	sp, #16
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]

  if(tim_ocHandle->Instance==TIM1)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	4a18      	ldr	r2, [pc, #96]	; (8002f90 <HAL_TIM_OC_MspInit+0x70>)
 8002f2e:	4293      	cmp	r3, r2
 8002f30:	d116      	bne.n	8002f60 <HAL_TIM_OC_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002f32:	2300      	movs	r3, #0
 8002f34:	60fb      	str	r3, [r7, #12]
 8002f36:	4b17      	ldr	r3, [pc, #92]	; (8002f94 <HAL_TIM_OC_MspInit+0x74>)
 8002f38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f3a:	4a16      	ldr	r2, [pc, #88]	; (8002f94 <HAL_TIM_OC_MspInit+0x74>)
 8002f3c:	f043 0301 	orr.w	r3, r3, #1
 8002f40:	6453      	str	r3, [r2, #68]	; 0x44
 8002f42:	4b14      	ldr	r3, [pc, #80]	; (8002f94 <HAL_TIM_OC_MspInit+0x74>)
 8002f44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f46:	f003 0301 	and.w	r3, r3, #1
 8002f4a:	60fb      	str	r3, [r7, #12]
 8002f4c:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 5, 0);
 8002f4e:	2200      	movs	r2, #0
 8002f50:	2105      	movs	r1, #5
 8002f52:	2019      	movs	r0, #25
 8002f54:	f005 fcec 	bl	8008930 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002f58:	2019      	movs	r0, #25
 8002f5a:	f005 fd05 	bl	8008968 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM8_CLK_ENABLE();
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8002f5e:	e012      	b.n	8002f86 <HAL_TIM_OC_MspInit+0x66>
  else if(tim_ocHandle->Instance==TIM8)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	4a0c      	ldr	r2, [pc, #48]	; (8002f98 <HAL_TIM_OC_MspInit+0x78>)
 8002f66:	4293      	cmp	r3, r2
 8002f68:	d10d      	bne.n	8002f86 <HAL_TIM_OC_MspInit+0x66>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	60bb      	str	r3, [r7, #8]
 8002f6e:	4b09      	ldr	r3, [pc, #36]	; (8002f94 <HAL_TIM_OC_MspInit+0x74>)
 8002f70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f72:	4a08      	ldr	r2, [pc, #32]	; (8002f94 <HAL_TIM_OC_MspInit+0x74>)
 8002f74:	f043 0302 	orr.w	r3, r3, #2
 8002f78:	6453      	str	r3, [r2, #68]	; 0x44
 8002f7a:	4b06      	ldr	r3, [pc, #24]	; (8002f94 <HAL_TIM_OC_MspInit+0x74>)
 8002f7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f7e:	f003 0302 	and.w	r3, r3, #2
 8002f82:	60bb      	str	r3, [r7, #8]
 8002f84:	68bb      	ldr	r3, [r7, #8]
}
 8002f86:	bf00      	nop
 8002f88:	3710      	adds	r7, #16
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	bd80      	pop	{r7, pc}
 8002f8e:	bf00      	nop
 8002f90:	40010000 	.word	0x40010000
 8002f94:	40023800 	.word	0x40023800
 8002f98:	40010400 	.word	0x40010400

08002f9c <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8002f9c:	b480      	push	{r7}
 8002f9e:	b085      	sub	sp, #20
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM4)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	4a15      	ldr	r2, [pc, #84]	; (8003000 <HAL_TIM_PWM_MspInit+0x64>)
 8002faa:	4293      	cmp	r3, r2
 8002fac:	d10e      	bne.n	8002fcc <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002fae:	2300      	movs	r3, #0
 8002fb0:	60fb      	str	r3, [r7, #12]
 8002fb2:	4b14      	ldr	r3, [pc, #80]	; (8003004 <HAL_TIM_PWM_MspInit+0x68>)
 8002fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fb6:	4a13      	ldr	r2, [pc, #76]	; (8003004 <HAL_TIM_PWM_MspInit+0x68>)
 8002fb8:	f043 0304 	orr.w	r3, r3, #4
 8002fbc:	6413      	str	r3, [r2, #64]	; 0x40
 8002fbe:	4b11      	ldr	r3, [pc, #68]	; (8003004 <HAL_TIM_PWM_MspInit+0x68>)
 8002fc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fc2:	f003 0304 	and.w	r3, r3, #4
 8002fc6:	60fb      	str	r3, [r7, #12]
 8002fc8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM5_CLK_ENABLE();
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 8002fca:	e012      	b.n	8002ff2 <HAL_TIM_PWM_MspInit+0x56>
  else if(tim_pwmHandle->Instance==TIM5)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	4a0d      	ldr	r2, [pc, #52]	; (8003008 <HAL_TIM_PWM_MspInit+0x6c>)
 8002fd2:	4293      	cmp	r3, r2
 8002fd4:	d10d      	bne.n	8002ff2 <HAL_TIM_PWM_MspInit+0x56>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	60bb      	str	r3, [r7, #8]
 8002fda:	4b0a      	ldr	r3, [pc, #40]	; (8003004 <HAL_TIM_PWM_MspInit+0x68>)
 8002fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fde:	4a09      	ldr	r2, [pc, #36]	; (8003004 <HAL_TIM_PWM_MspInit+0x68>)
 8002fe0:	f043 0308 	orr.w	r3, r3, #8
 8002fe4:	6413      	str	r3, [r2, #64]	; 0x40
 8002fe6:	4b07      	ldr	r3, [pc, #28]	; (8003004 <HAL_TIM_PWM_MspInit+0x68>)
 8002fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fea:	f003 0308 	and.w	r3, r3, #8
 8002fee:	60bb      	str	r3, [r7, #8]
 8002ff0:	68bb      	ldr	r3, [r7, #8]
}
 8002ff2:	bf00      	nop
 8002ff4:	3714      	adds	r7, #20
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffc:	4770      	bx	lr
 8002ffe:	bf00      	nop
 8003000:	40000800 	.word	0x40000800
 8003004:	40023800 	.word	0x40023800
 8003008:	40000c00 	.word	0x40000c00

0800300c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800300c:	b480      	push	{r7}
 800300e:	b085      	sub	sp, #20
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM12)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	4a0b      	ldr	r2, [pc, #44]	; (8003048 <HAL_TIM_Base_MspInit+0x3c>)
 800301a:	4293      	cmp	r3, r2
 800301c:	d10d      	bne.n	800303a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM12_MspInit 0 */

  /* USER CODE END TIM12_MspInit 0 */
    /* TIM12 clock enable */
    __HAL_RCC_TIM12_CLK_ENABLE();
 800301e:	2300      	movs	r3, #0
 8003020:	60fb      	str	r3, [r7, #12]
 8003022:	4b0a      	ldr	r3, [pc, #40]	; (800304c <HAL_TIM_Base_MspInit+0x40>)
 8003024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003026:	4a09      	ldr	r2, [pc, #36]	; (800304c <HAL_TIM_Base_MspInit+0x40>)
 8003028:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800302c:	6413      	str	r3, [r2, #64]	; 0x40
 800302e:	4b07      	ldr	r3, [pc, #28]	; (800304c <HAL_TIM_Base_MspInit+0x40>)
 8003030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003032:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003036:	60fb      	str	r3, [r7, #12]
 8003038:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }
}
 800303a:	bf00      	nop
 800303c:	3714      	adds	r7, #20
 800303e:	46bd      	mov	sp, r7
 8003040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003044:	4770      	bx	lr
 8003046:	bf00      	nop
 8003048:	40001800 	.word	0x40001800
 800304c:	40023800 	.word	0x40023800

08003050 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8003050:	b580      	push	{r7, lr}
 8003052:	b08a      	sub	sp, #40	; 0x28
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003058:	f107 0314 	add.w	r3, r7, #20
 800305c:	2200      	movs	r2, #0
 800305e:	601a      	str	r2, [r3, #0]
 8003060:	605a      	str	r2, [r3, #4]
 8003062:	609a      	str	r2, [r3, #8]
 8003064:	60da      	str	r2, [r3, #12]
 8003066:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM4)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	4a24      	ldr	r2, [pc, #144]	; (8003100 <HAL_TIM_MspPostInit+0xb0>)
 800306e:	4293      	cmp	r3, r2
 8003070:	d11f      	bne.n	80030b2 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003072:	2300      	movs	r3, #0
 8003074:	613b      	str	r3, [r7, #16]
 8003076:	4b23      	ldr	r3, [pc, #140]	; (8003104 <HAL_TIM_MspPostInit+0xb4>)
 8003078:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800307a:	4a22      	ldr	r2, [pc, #136]	; (8003104 <HAL_TIM_MspPostInit+0xb4>)
 800307c:	f043 0308 	orr.w	r3, r3, #8
 8003080:	6313      	str	r3, [r2, #48]	; 0x30
 8003082:	4b20      	ldr	r3, [pc, #128]	; (8003104 <HAL_TIM_MspPostInit+0xb4>)
 8003084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003086:	f003 0308 	and.w	r3, r3, #8
 800308a:	613b      	str	r3, [r7, #16]
 800308c:	693b      	ldr	r3, [r7, #16]
    /**TIM4 GPIO Configuration
    PD12     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800308e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003092:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003094:	2302      	movs	r3, #2
 8003096:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003098:	2300      	movs	r3, #0
 800309a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800309c:	2300      	movs	r3, #0
 800309e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80030a0:	2302      	movs	r3, #2
 80030a2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80030a4:	f107 0314 	add.w	r3, r7, #20
 80030a8:	4619      	mov	r1, r3
 80030aa:	4817      	ldr	r0, [pc, #92]	; (8003108 <HAL_TIM_MspPostInit+0xb8>)
 80030ac:	f006 f86c 	bl	8009188 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 80030b0:	e022      	b.n	80030f8 <HAL_TIM_MspPostInit+0xa8>
  else if(timHandle->Instance==TIM12)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	4a15      	ldr	r2, [pc, #84]	; (800310c <HAL_TIM_MspPostInit+0xbc>)
 80030b8:	4293      	cmp	r3, r2
 80030ba:	d11d      	bne.n	80030f8 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80030bc:	2300      	movs	r3, #0
 80030be:	60fb      	str	r3, [r7, #12]
 80030c0:	4b10      	ldr	r3, [pc, #64]	; (8003104 <HAL_TIM_MspPostInit+0xb4>)
 80030c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030c4:	4a0f      	ldr	r2, [pc, #60]	; (8003104 <HAL_TIM_MspPostInit+0xb4>)
 80030c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80030ca:	6313      	str	r3, [r2, #48]	; 0x30
 80030cc:	4b0d      	ldr	r3, [pc, #52]	; (8003104 <HAL_TIM_MspPostInit+0xb4>)
 80030ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030d4:	60fb      	str	r3, [r7, #12]
 80030d6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80030d8:	2340      	movs	r3, #64	; 0x40
 80030da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030dc:	2302      	movs	r3, #2
 80030de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030e0:	2300      	movs	r3, #0
 80030e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030e4:	2300      	movs	r3, #0
 80030e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 80030e8:	2309      	movs	r3, #9
 80030ea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80030ec:	f107 0314 	add.w	r3, r7, #20
 80030f0:	4619      	mov	r1, r3
 80030f2:	4807      	ldr	r0, [pc, #28]	; (8003110 <HAL_TIM_MspPostInit+0xc0>)
 80030f4:	f006 f848 	bl	8009188 <HAL_GPIO_Init>
}
 80030f8:	bf00      	nop
 80030fa:	3728      	adds	r7, #40	; 0x28
 80030fc:	46bd      	mov	sp, r7
 80030fe:	bd80      	pop	{r7, pc}
 8003100:	40000800 	.word	0x40000800
 8003104:	40023800 	.word	0x40023800
 8003108:	40020c00 	.word	0x40020c00
 800310c:	40001800 	.word	0x40001800
 8003110:	40021c00 	.word	0x40021c00

08003114 <MX_UART7_Init>:
DMA_HandleTypeDef hdma_usart1_rx;
DMA_HandleTypeDef hdma_usart6_rx;

/* UART7 init function */
void MX_UART7_Init(void)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 8003118:	4b11      	ldr	r3, [pc, #68]	; (8003160 <MX_UART7_Init+0x4c>)
 800311a:	4a12      	ldr	r2, [pc, #72]	; (8003164 <MX_UART7_Init+0x50>)
 800311c:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 800311e:	4b10      	ldr	r3, [pc, #64]	; (8003160 <MX_UART7_Init+0x4c>)
 8003120:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003124:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 8003126:	4b0e      	ldr	r3, [pc, #56]	; (8003160 <MX_UART7_Init+0x4c>)
 8003128:	2200      	movs	r2, #0
 800312a:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 800312c:	4b0c      	ldr	r3, [pc, #48]	; (8003160 <MX_UART7_Init+0x4c>)
 800312e:	2200      	movs	r2, #0
 8003130:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 8003132:	4b0b      	ldr	r3, [pc, #44]	; (8003160 <MX_UART7_Init+0x4c>)
 8003134:	2200      	movs	r2, #0
 8003136:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8003138:	4b09      	ldr	r3, [pc, #36]	; (8003160 <MX_UART7_Init+0x4c>)
 800313a:	220c      	movs	r2, #12
 800313c:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800313e:	4b08      	ldr	r3, [pc, #32]	; (8003160 <MX_UART7_Init+0x4c>)
 8003140:	2200      	movs	r2, #0
 8003142:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8003144:	4b06      	ldr	r3, [pc, #24]	; (8003160 <MX_UART7_Init+0x4c>)
 8003146:	2200      	movs	r2, #0
 8003148:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart7) != HAL_OK)
 800314a:	4805      	ldr	r0, [pc, #20]	; (8003160 <MX_UART7_Init+0x4c>)
 800314c:	f009 ff1c 	bl	800cf88 <HAL_UART_Init>
 8003150:	4603      	mov	r3, r0
 8003152:	2b00      	cmp	r3, #0
 8003154:	d001      	beq.n	800315a <MX_UART7_Init+0x46>
  {
    Error_Handler();
 8003156:	f7ff fa2d 	bl	80025b4 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 800315a:	bf00      	nop
 800315c:	bd80      	pop	{r7, pc}
 800315e:	bf00      	nop
 8003160:	20000d44 	.word	0x20000d44
 8003164:	40007800 	.word	0x40007800

08003168 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8003168:	b580      	push	{r7, lr}
 800316a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800316c:	4b11      	ldr	r3, [pc, #68]	; (80031b4 <MX_USART1_UART_Init+0x4c>)
 800316e:	4a12      	ldr	r2, [pc, #72]	; (80031b8 <MX_USART1_UART_Init+0x50>)
 8003170:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 100000;
 8003172:	4b10      	ldr	r3, [pc, #64]	; (80031b4 <MX_USART1_UART_Init+0x4c>)
 8003174:	4a11      	ldr	r2, [pc, #68]	; (80031bc <MX_USART1_UART_Init+0x54>)
 8003176:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_9B;
 8003178:	4b0e      	ldr	r3, [pc, #56]	; (80031b4 <MX_USART1_UART_Init+0x4c>)
 800317a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800317e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003180:	4b0c      	ldr	r3, [pc, #48]	; (80031b4 <MX_USART1_UART_Init+0x4c>)
 8003182:	2200      	movs	r2, #0
 8003184:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_EVEN;
 8003186:	4b0b      	ldr	r3, [pc, #44]	; (80031b4 <MX_USART1_UART_Init+0x4c>)
 8003188:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800318c:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_RX;
 800318e:	4b09      	ldr	r3, [pc, #36]	; (80031b4 <MX_USART1_UART_Init+0x4c>)
 8003190:	2204      	movs	r2, #4
 8003192:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003194:	4b07      	ldr	r3, [pc, #28]	; (80031b4 <MX_USART1_UART_Init+0x4c>)
 8003196:	2200      	movs	r2, #0
 8003198:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800319a:	4b06      	ldr	r3, [pc, #24]	; (80031b4 <MX_USART1_UART_Init+0x4c>)
 800319c:	2200      	movs	r2, #0
 800319e:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80031a0:	4804      	ldr	r0, [pc, #16]	; (80031b4 <MX_USART1_UART_Init+0x4c>)
 80031a2:	f009 fef1 	bl	800cf88 <HAL_UART_Init>
 80031a6:	4603      	mov	r3, r0
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d001      	beq.n	80031b0 <MX_USART1_UART_Init+0x48>
  {
    Error_Handler();
 80031ac:	f7ff fa02 	bl	80025b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80031b0:	bf00      	nop
 80031b2:	bd80      	pop	{r7, pc}
 80031b4:	20000d88 	.word	0x20000d88
 80031b8:	40011000 	.word	0x40011000
 80031bc:	000186a0 	.word	0x000186a0

080031c0 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80031c4:	4b11      	ldr	r3, [pc, #68]	; (800320c <MX_USART6_UART_Init+0x4c>)
 80031c6:	4a12      	ldr	r2, [pc, #72]	; (8003210 <MX_USART6_UART_Init+0x50>)
 80031c8:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 80031ca:	4b10      	ldr	r3, [pc, #64]	; (800320c <MX_USART6_UART_Init+0x4c>)
 80031cc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80031d0:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80031d2:	4b0e      	ldr	r3, [pc, #56]	; (800320c <MX_USART6_UART_Init+0x4c>)
 80031d4:	2200      	movs	r2, #0
 80031d6:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80031d8:	4b0c      	ldr	r3, [pc, #48]	; (800320c <MX_USART6_UART_Init+0x4c>)
 80031da:	2200      	movs	r2, #0
 80031dc:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80031de:	4b0b      	ldr	r3, [pc, #44]	; (800320c <MX_USART6_UART_Init+0x4c>)
 80031e0:	2200      	movs	r2, #0
 80031e2:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_RX;
 80031e4:	4b09      	ldr	r3, [pc, #36]	; (800320c <MX_USART6_UART_Init+0x4c>)
 80031e6:	2204      	movs	r2, #4
 80031e8:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80031ea:	4b08      	ldr	r3, [pc, #32]	; (800320c <MX_USART6_UART_Init+0x4c>)
 80031ec:	2200      	movs	r2, #0
 80031ee:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80031f0:	4b06      	ldr	r3, [pc, #24]	; (800320c <MX_USART6_UART_Init+0x4c>)
 80031f2:	2200      	movs	r2, #0
 80031f4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80031f6:	4805      	ldr	r0, [pc, #20]	; (800320c <MX_USART6_UART_Init+0x4c>)
 80031f8:	f009 fec6 	bl	800cf88 <HAL_UART_Init>
 80031fc:	4603      	mov	r3, r0
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d001      	beq.n	8003206 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8003202:	f7ff f9d7 	bl	80025b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8003206:	bf00      	nop
 8003208:	bd80      	pop	{r7, pc}
 800320a:	bf00      	nop
 800320c:	20000dcc 	.word	0x20000dcc
 8003210:	40011400 	.word	0x40011400

08003214 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	b08e      	sub	sp, #56	; 0x38
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800321c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003220:	2200      	movs	r2, #0
 8003222:	601a      	str	r2, [r3, #0]
 8003224:	605a      	str	r2, [r3, #4]
 8003226:	609a      	str	r2, [r3, #8]
 8003228:	60da      	str	r2, [r3, #12]
 800322a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART7)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	4a7c      	ldr	r2, [pc, #496]	; (8003424 <HAL_UART_MspInit+0x210>)
 8003232:	4293      	cmp	r3, r2
 8003234:	d164      	bne.n	8003300 <HAL_UART_MspInit+0xec>
  {
  /* USER CODE BEGIN UART7_MspInit 0 */

  /* USER CODE END UART7_MspInit 0 */
    /* UART7 clock enable */
    __HAL_RCC_UART7_CLK_ENABLE();
 8003236:	2300      	movs	r3, #0
 8003238:	623b      	str	r3, [r7, #32]
 800323a:	4b7b      	ldr	r3, [pc, #492]	; (8003428 <HAL_UART_MspInit+0x214>)
 800323c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800323e:	4a7a      	ldr	r2, [pc, #488]	; (8003428 <HAL_UART_MspInit+0x214>)
 8003240:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003244:	6413      	str	r3, [r2, #64]	; 0x40
 8003246:	4b78      	ldr	r3, [pc, #480]	; (8003428 <HAL_UART_MspInit+0x214>)
 8003248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800324a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800324e:	623b      	str	r3, [r7, #32]
 8003250:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003252:	2300      	movs	r3, #0
 8003254:	61fb      	str	r3, [r7, #28]
 8003256:	4b74      	ldr	r3, [pc, #464]	; (8003428 <HAL_UART_MspInit+0x214>)
 8003258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800325a:	4a73      	ldr	r2, [pc, #460]	; (8003428 <HAL_UART_MspInit+0x214>)
 800325c:	f043 0310 	orr.w	r3, r3, #16
 8003260:	6313      	str	r3, [r2, #48]	; 0x30
 8003262:	4b71      	ldr	r3, [pc, #452]	; (8003428 <HAL_UART_MspInit+0x214>)
 8003264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003266:	f003 0310 	and.w	r3, r3, #16
 800326a:	61fb      	str	r3, [r7, #28]
 800326c:	69fb      	ldr	r3, [r7, #28]
    /**UART7 GPIO Configuration
    PE8     ------> UART7_TX
    PE7     ------> UART7_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_7;
 800326e:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8003272:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003274:	2302      	movs	r3, #2
 8003276:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003278:	2300      	movs	r3, #0
 800327a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800327c:	2303      	movs	r3, #3
 800327e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 8003280:	2308      	movs	r3, #8
 8003282:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003284:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003288:	4619      	mov	r1, r3
 800328a:	4868      	ldr	r0, [pc, #416]	; (800342c <HAL_UART_MspInit+0x218>)
 800328c:	f005 ff7c 	bl	8009188 <HAL_GPIO_Init>

    /* UART7 DMA Init */
    /* UART7_RX Init */
    hdma_uart7_rx.Instance = DMA1_Stream3;
 8003290:	4b67      	ldr	r3, [pc, #412]	; (8003430 <HAL_UART_MspInit+0x21c>)
 8003292:	4a68      	ldr	r2, [pc, #416]	; (8003434 <HAL_UART_MspInit+0x220>)
 8003294:	601a      	str	r2, [r3, #0]
    hdma_uart7_rx.Init.Channel = DMA_CHANNEL_5;
 8003296:	4b66      	ldr	r3, [pc, #408]	; (8003430 <HAL_UART_MspInit+0x21c>)
 8003298:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 800329c:	605a      	str	r2, [r3, #4]
    hdma_uart7_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800329e:	4b64      	ldr	r3, [pc, #400]	; (8003430 <HAL_UART_MspInit+0x21c>)
 80032a0:	2200      	movs	r2, #0
 80032a2:	609a      	str	r2, [r3, #8]
    hdma_uart7_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80032a4:	4b62      	ldr	r3, [pc, #392]	; (8003430 <HAL_UART_MspInit+0x21c>)
 80032a6:	2200      	movs	r2, #0
 80032a8:	60da      	str	r2, [r3, #12]
    hdma_uart7_rx.Init.MemInc = DMA_MINC_ENABLE;
 80032aa:	4b61      	ldr	r3, [pc, #388]	; (8003430 <HAL_UART_MspInit+0x21c>)
 80032ac:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80032b0:	611a      	str	r2, [r3, #16]
    hdma_uart7_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80032b2:	4b5f      	ldr	r3, [pc, #380]	; (8003430 <HAL_UART_MspInit+0x21c>)
 80032b4:	2200      	movs	r2, #0
 80032b6:	615a      	str	r2, [r3, #20]
    hdma_uart7_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80032b8:	4b5d      	ldr	r3, [pc, #372]	; (8003430 <HAL_UART_MspInit+0x21c>)
 80032ba:	2200      	movs	r2, #0
 80032bc:	619a      	str	r2, [r3, #24]
    hdma_uart7_rx.Init.Mode = DMA_CIRCULAR;
 80032be:	4b5c      	ldr	r3, [pc, #368]	; (8003430 <HAL_UART_MspInit+0x21c>)
 80032c0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80032c4:	61da      	str	r2, [r3, #28]
    hdma_uart7_rx.Init.Priority = DMA_PRIORITY_LOW;
 80032c6:	4b5a      	ldr	r3, [pc, #360]	; (8003430 <HAL_UART_MspInit+0x21c>)
 80032c8:	2200      	movs	r2, #0
 80032ca:	621a      	str	r2, [r3, #32]
    hdma_uart7_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80032cc:	4b58      	ldr	r3, [pc, #352]	; (8003430 <HAL_UART_MspInit+0x21c>)
 80032ce:	2200      	movs	r2, #0
 80032d0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart7_rx) != HAL_OK)
 80032d2:	4857      	ldr	r0, [pc, #348]	; (8003430 <HAL_UART_MspInit+0x21c>)
 80032d4:	f005 fb56 	bl	8008984 <HAL_DMA_Init>
 80032d8:	4603      	mov	r3, r0
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d001      	beq.n	80032e2 <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 80032de:	f7ff f969 	bl	80025b4 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart7_rx);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	4a52      	ldr	r2, [pc, #328]	; (8003430 <HAL_UART_MspInit+0x21c>)
 80032e6:	639a      	str	r2, [r3, #56]	; 0x38
 80032e8:	4a51      	ldr	r2, [pc, #324]	; (8003430 <HAL_UART_MspInit+0x21c>)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART7 interrupt Init */
    HAL_NVIC_SetPriority(UART7_IRQn, 5, 0);
 80032ee:	2200      	movs	r2, #0
 80032f0:	2105      	movs	r1, #5
 80032f2:	2052      	movs	r0, #82	; 0x52
 80032f4:	f005 fb1c 	bl	8008930 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART7_IRQn);
 80032f8:	2052      	movs	r0, #82	; 0x52
 80032fa:	f005 fb35 	bl	8008968 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 80032fe:	e110      	b.n	8003522 <HAL_UART_MspInit+0x30e>
  else if(uartHandle->Instance==USART1)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	4a4c      	ldr	r2, [pc, #304]	; (8003438 <HAL_UART_MspInit+0x224>)
 8003306:	4293      	cmp	r3, r2
 8003308:	f040 80a2 	bne.w	8003450 <HAL_UART_MspInit+0x23c>
    __HAL_RCC_USART1_CLK_ENABLE();
 800330c:	2300      	movs	r3, #0
 800330e:	61bb      	str	r3, [r7, #24]
 8003310:	4b45      	ldr	r3, [pc, #276]	; (8003428 <HAL_UART_MspInit+0x214>)
 8003312:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003314:	4a44      	ldr	r2, [pc, #272]	; (8003428 <HAL_UART_MspInit+0x214>)
 8003316:	f043 0310 	orr.w	r3, r3, #16
 800331a:	6453      	str	r3, [r2, #68]	; 0x44
 800331c:	4b42      	ldr	r3, [pc, #264]	; (8003428 <HAL_UART_MspInit+0x214>)
 800331e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003320:	f003 0310 	and.w	r3, r3, #16
 8003324:	61bb      	str	r3, [r7, #24]
 8003326:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003328:	2300      	movs	r3, #0
 800332a:	617b      	str	r3, [r7, #20]
 800332c:	4b3e      	ldr	r3, [pc, #248]	; (8003428 <HAL_UART_MspInit+0x214>)
 800332e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003330:	4a3d      	ldr	r2, [pc, #244]	; (8003428 <HAL_UART_MspInit+0x214>)
 8003332:	f043 0302 	orr.w	r3, r3, #2
 8003336:	6313      	str	r3, [r2, #48]	; 0x30
 8003338:	4b3b      	ldr	r3, [pc, #236]	; (8003428 <HAL_UART_MspInit+0x214>)
 800333a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800333c:	f003 0302 	and.w	r3, r3, #2
 8003340:	617b      	str	r3, [r7, #20]
 8003342:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003344:	2300      	movs	r3, #0
 8003346:	613b      	str	r3, [r7, #16]
 8003348:	4b37      	ldr	r3, [pc, #220]	; (8003428 <HAL_UART_MspInit+0x214>)
 800334a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800334c:	4a36      	ldr	r2, [pc, #216]	; (8003428 <HAL_UART_MspInit+0x214>)
 800334e:	f043 0301 	orr.w	r3, r3, #1
 8003352:	6313      	str	r3, [r2, #48]	; 0x30
 8003354:	4b34      	ldr	r3, [pc, #208]	; (8003428 <HAL_UART_MspInit+0x214>)
 8003356:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003358:	f003 0301 	and.w	r3, r3, #1
 800335c:	613b      	str	r3, [r7, #16]
 800335e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8003360:	2380      	movs	r3, #128	; 0x80
 8003362:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003364:	2302      	movs	r3, #2
 8003366:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003368:	2300      	movs	r3, #0
 800336a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800336c:	2303      	movs	r3, #3
 800336e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003370:	2307      	movs	r3, #7
 8003372:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003374:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003378:	4619      	mov	r1, r3
 800337a:	4830      	ldr	r0, [pc, #192]	; (800343c <HAL_UART_MspInit+0x228>)
 800337c:	f005 ff04 	bl	8009188 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003380:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003384:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003386:	2302      	movs	r3, #2
 8003388:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800338a:	2300      	movs	r3, #0
 800338c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800338e:	2303      	movs	r3, #3
 8003390:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003392:	2307      	movs	r3, #7
 8003394:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003396:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800339a:	4619      	mov	r1, r3
 800339c:	4828      	ldr	r0, [pc, #160]	; (8003440 <HAL_UART_MspInit+0x22c>)
 800339e:	f005 fef3 	bl	8009188 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA2_Stream2;
 80033a2:	4b28      	ldr	r3, [pc, #160]	; (8003444 <HAL_UART_MspInit+0x230>)
 80033a4:	4a28      	ldr	r2, [pc, #160]	; (8003448 <HAL_UART_MspInit+0x234>)
 80033a6:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 80033a8:	4b26      	ldr	r3, [pc, #152]	; (8003444 <HAL_UART_MspInit+0x230>)
 80033aa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80033ae:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80033b0:	4b24      	ldr	r3, [pc, #144]	; (8003444 <HAL_UART_MspInit+0x230>)
 80033b2:	2200      	movs	r2, #0
 80033b4:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80033b6:	4b23      	ldr	r3, [pc, #140]	; (8003444 <HAL_UART_MspInit+0x230>)
 80033b8:	2200      	movs	r2, #0
 80033ba:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80033bc:	4b21      	ldr	r3, [pc, #132]	; (8003444 <HAL_UART_MspInit+0x230>)
 80033be:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80033c2:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80033c4:	4b1f      	ldr	r3, [pc, #124]	; (8003444 <HAL_UART_MspInit+0x230>)
 80033c6:	2200      	movs	r2, #0
 80033c8:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80033ca:	4b1e      	ldr	r3, [pc, #120]	; (8003444 <HAL_UART_MspInit+0x230>)
 80033cc:	2200      	movs	r2, #0
 80033ce:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 80033d0:	4b1c      	ldr	r3, [pc, #112]	; (8003444 <HAL_UART_MspInit+0x230>)
 80033d2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80033d6:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80033d8:	4b1a      	ldr	r3, [pc, #104]	; (8003444 <HAL_UART_MspInit+0x230>)
 80033da:	2200      	movs	r2, #0
 80033dc:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80033de:	4b19      	ldr	r3, [pc, #100]	; (8003444 <HAL_UART_MspInit+0x230>)
 80033e0:	2200      	movs	r2, #0
 80033e2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80033e4:	4817      	ldr	r0, [pc, #92]	; (8003444 <HAL_UART_MspInit+0x230>)
 80033e6:	f005 facd 	bl	8008984 <HAL_DMA_Init>
 80033ea:	4603      	mov	r3, r0
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d001      	beq.n	80033f4 <HAL_UART_MspInit+0x1e0>
      Error_Handler();
 80033f0:	f7ff f8e0 	bl	80025b4 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	4a13      	ldr	r2, [pc, #76]	; (8003444 <HAL_UART_MspInit+0x230>)
 80033f8:	639a      	str	r2, [r3, #56]	; 0x38
 80033fa:	4a12      	ldr	r2, [pc, #72]	; (8003444 <HAL_UART_MspInit+0x230>)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8003400:	2200      	movs	r2, #0
 8003402:	2105      	movs	r1, #5
 8003404:	2025      	movs	r0, #37	; 0x25
 8003406:	f005 fa93 	bl	8008930 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800340a:	2025      	movs	r0, #37	; 0x25
 800340c:	f005 faac 	bl	8008968 <HAL_NVIC_EnableIRQ>
	__HAL_UART_ENABLE_IT(&huart1, UART_IT_IDLE);
 8003410:	4b0e      	ldr	r3, [pc, #56]	; (800344c <HAL_UART_MspInit+0x238>)
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	68da      	ldr	r2, [r3, #12]
 8003416:	4b0d      	ldr	r3, [pc, #52]	; (800344c <HAL_UART_MspInit+0x238>)
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f042 0210 	orr.w	r2, r2, #16
 800341e:	60da      	str	r2, [r3, #12]
}
 8003420:	e07f      	b.n	8003522 <HAL_UART_MspInit+0x30e>
 8003422:	bf00      	nop
 8003424:	40007800 	.word	0x40007800
 8003428:	40023800 	.word	0x40023800
 800342c:	40021000 	.word	0x40021000
 8003430:	20000e10 	.word	0x20000e10
 8003434:	40026058 	.word	0x40026058
 8003438:	40011000 	.word	0x40011000
 800343c:	40020400 	.word	0x40020400
 8003440:	40020000 	.word	0x40020000
 8003444:	20000e70 	.word	0x20000e70
 8003448:	40026440 	.word	0x40026440
 800344c:	20000d88 	.word	0x20000d88
  else if(uartHandle->Instance==USART6)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	4a35      	ldr	r2, [pc, #212]	; (800352c <HAL_UART_MspInit+0x318>)
 8003456:	4293      	cmp	r3, r2
 8003458:	d163      	bne.n	8003522 <HAL_UART_MspInit+0x30e>
    __HAL_RCC_USART6_CLK_ENABLE();
 800345a:	2300      	movs	r3, #0
 800345c:	60fb      	str	r3, [r7, #12]
 800345e:	4b34      	ldr	r3, [pc, #208]	; (8003530 <HAL_UART_MspInit+0x31c>)
 8003460:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003462:	4a33      	ldr	r2, [pc, #204]	; (8003530 <HAL_UART_MspInit+0x31c>)
 8003464:	f043 0320 	orr.w	r3, r3, #32
 8003468:	6453      	str	r3, [r2, #68]	; 0x44
 800346a:	4b31      	ldr	r3, [pc, #196]	; (8003530 <HAL_UART_MspInit+0x31c>)
 800346c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800346e:	f003 0320 	and.w	r3, r3, #32
 8003472:	60fb      	str	r3, [r7, #12]
 8003474:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8003476:	2300      	movs	r3, #0
 8003478:	60bb      	str	r3, [r7, #8]
 800347a:	4b2d      	ldr	r3, [pc, #180]	; (8003530 <HAL_UART_MspInit+0x31c>)
 800347c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800347e:	4a2c      	ldr	r2, [pc, #176]	; (8003530 <HAL_UART_MspInit+0x31c>)
 8003480:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003484:	6313      	str	r3, [r2, #48]	; 0x30
 8003486:	4b2a      	ldr	r3, [pc, #168]	; (8003530 <HAL_UART_MspInit+0x31c>)
 8003488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800348a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800348e:	60bb      	str	r3, [r7, #8]
 8003490:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_9;
 8003492:	f44f 4384 	mov.w	r3, #16896	; 0x4200
 8003496:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003498:	2302      	movs	r3, #2
 800349a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800349c:	2300      	movs	r3, #0
 800349e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80034a0:	2303      	movs	r3, #3
 80034a2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80034a4:	2308      	movs	r3, #8
 80034a6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80034a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80034ac:	4619      	mov	r1, r3
 80034ae:	4821      	ldr	r0, [pc, #132]	; (8003534 <HAL_UART_MspInit+0x320>)
 80034b0:	f005 fe6a 	bl	8009188 <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream1;
 80034b4:	4b20      	ldr	r3, [pc, #128]	; (8003538 <HAL_UART_MspInit+0x324>)
 80034b6:	4a21      	ldr	r2, [pc, #132]	; (800353c <HAL_UART_MspInit+0x328>)
 80034b8:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 80034ba:	4b1f      	ldr	r3, [pc, #124]	; (8003538 <HAL_UART_MspInit+0x324>)
 80034bc:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 80034c0:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80034c2:	4b1d      	ldr	r3, [pc, #116]	; (8003538 <HAL_UART_MspInit+0x324>)
 80034c4:	2200      	movs	r2, #0
 80034c6:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80034c8:	4b1b      	ldr	r3, [pc, #108]	; (8003538 <HAL_UART_MspInit+0x324>)
 80034ca:	2200      	movs	r2, #0
 80034cc:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 80034ce:	4b1a      	ldr	r3, [pc, #104]	; (8003538 <HAL_UART_MspInit+0x324>)
 80034d0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80034d4:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80034d6:	4b18      	ldr	r3, [pc, #96]	; (8003538 <HAL_UART_MspInit+0x324>)
 80034d8:	2200      	movs	r2, #0
 80034da:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80034dc:	4b16      	ldr	r3, [pc, #88]	; (8003538 <HAL_UART_MspInit+0x324>)
 80034de:	2200      	movs	r2, #0
 80034e0:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_CIRCULAR;
 80034e2:	4b15      	ldr	r3, [pc, #84]	; (8003538 <HAL_UART_MspInit+0x324>)
 80034e4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80034e8:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 80034ea:	4b13      	ldr	r3, [pc, #76]	; (8003538 <HAL_UART_MspInit+0x324>)
 80034ec:	2200      	movs	r2, #0
 80034ee:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80034f0:	4b11      	ldr	r3, [pc, #68]	; (8003538 <HAL_UART_MspInit+0x324>)
 80034f2:	2200      	movs	r2, #0
 80034f4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 80034f6:	4810      	ldr	r0, [pc, #64]	; (8003538 <HAL_UART_MspInit+0x324>)
 80034f8:	f005 fa44 	bl	8008984 <HAL_DMA_Init>
 80034fc:	4603      	mov	r3, r0
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d001      	beq.n	8003506 <HAL_UART_MspInit+0x2f2>
      Error_Handler();
 8003502:	f7ff f857 	bl	80025b4 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart6_rx);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	4a0b      	ldr	r2, [pc, #44]	; (8003538 <HAL_UART_MspInit+0x324>)
 800350a:	639a      	str	r2, [r3, #56]	; 0x38
 800350c:	4a0a      	ldr	r2, [pc, #40]	; (8003538 <HAL_UART_MspInit+0x324>)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 8003512:	2200      	movs	r2, #0
 8003514:	2105      	movs	r1, #5
 8003516:	2047      	movs	r0, #71	; 0x47
 8003518:	f005 fa0a 	bl	8008930 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 800351c:	2047      	movs	r0, #71	; 0x47
 800351e:	f005 fa23 	bl	8008968 <HAL_NVIC_EnableIRQ>
}
 8003522:	bf00      	nop
 8003524:	3738      	adds	r7, #56	; 0x38
 8003526:	46bd      	mov	sp, r7
 8003528:	bd80      	pop	{r7, pc}
 800352a:	bf00      	nop
 800352c:	40011400 	.word	0x40011400
 8003530:	40023800 	.word	0x40023800
 8003534:	40021800 	.word	0x40021800
 8003538:	20000ed0 	.word	0x20000ed0
 800353c:	40026428 	.word	0x40026428

08003540 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003540:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003578 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003544:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003546:	e003      	b.n	8003550 <LoopCopyDataInit>

08003548 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003548:	4b0c      	ldr	r3, [pc, #48]	; (800357c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800354a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800354c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800354e:	3104      	adds	r1, #4

08003550 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003550:	480b      	ldr	r0, [pc, #44]	; (8003580 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8003552:	4b0c      	ldr	r3, [pc, #48]	; (8003584 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003554:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003556:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003558:	d3f6      	bcc.n	8003548 <CopyDataInit>
  ldr  r2, =_sbss
 800355a:	4a0b      	ldr	r2, [pc, #44]	; (8003588 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800355c:	e002      	b.n	8003564 <LoopFillZerobss>

0800355e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800355e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003560:	f842 3b04 	str.w	r3, [r2], #4

08003564 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003564:	4b09      	ldr	r3, [pc, #36]	; (800358c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8003566:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003568:	d3f9      	bcc.n	800355e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800356a:	f7ff fab1 	bl	8002ad0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800356e:	f011 fb57 	bl	8014c20 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003572:	f7fe ff79 	bl	8002468 <main>
  bx  lr    
 8003576:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003578:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 800357c:	08016fc8 	.word	0x08016fc8
  ldr  r0, =_sdata
 8003580:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003584:	20000218 	.word	0x20000218
  ldr  r2, =_sbss
 8003588:	20000218 	.word	0x20000218
  ldr  r3, = _ebss
 800358c:	20007c84 	.word	0x20007c84

08003590 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003590:	e7fe      	b.n	8003590 <ADC_IRQHandler>
 8003592:	0000      	movs	r0, r0
 8003594:	0000      	movs	r0, r0
	...

08003598 <buzzing_task>:
 4, 3, 1, 8
 };
 */

//fun
void buzzing_task(void *argument) {
 8003598:	b580      	push	{r7, lr}
 800359a:	b086      	sub	sp, #24
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
	uint8_t buzzing_type;
	TickType_t last_wake_time;
	uint16_t note_time;
	float semiquaver_time = 60000 / (4 * TEMPO);
 80035a0:	4b8b      	ldr	r3, [pc, #556]	; (80037d0 <buzzing_task+0x238>)
 80035a2:	613b      	str	r3, [r7, #16]
	while (1) {
		xQueueReceive(buzzing_task_msg, &buzzing_type, portMAX_DELAY);
 80035a4:	4b8b      	ldr	r3, [pc, #556]	; (80037d4 <buzzing_task+0x23c>)
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f107 010d 	add.w	r1, r7, #13
 80035ac:	f04f 32ff 	mov.w	r2, #4294967295
 80035b0:	4618      	mov	r0, r3
 80035b2:	f00e fa7b 	bl	8011aac <xQueueReceive>
		switch (buzzing_type) {
 80035b6:	7b7b      	ldrb	r3, [r7, #13]
 80035b8:	2b04      	cmp	r3, #4
 80035ba:	d8f3      	bhi.n	80035a4 <buzzing_task+0xc>
 80035bc:	a201      	add	r2, pc, #4	; (adr r2, 80035c4 <buzzing_task+0x2c>)
 80035be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035c2:	bf00      	nop
 80035c4:	080035d9 	.word	0x080035d9
 80035c8:	0800367f 	.word	0x0800367f
 80035cc:	080036cd 	.word	0x080036cd
 80035d0:	08003769 	.word	0x08003769
 80035d4:	0800371b 	.word	0x0800371b
		case song:

			for (uint16_t i = 0; i < sizeof(melody) / sizeof(uint16_t); i++) {
 80035d8:	2300      	movs	r3, #0
 80035da:	82fb      	strh	r3, [r7, #22]
 80035dc:	e04b      	b.n	8003676 <buzzing_task+0xde>
				last_wake_time = xTaskGetTickCount();
 80035de:	f00f f82f 	bl	8012640 <xTaskGetTickCount>
 80035e2:	4603      	mov	r3, r0
 80035e4:	60bb      	str	r3, [r7, #8]
				buzzer(melody[i]);
 80035e6:	8afb      	ldrh	r3, [r7, #22]
 80035e8:	4a7b      	ldr	r2, [pc, #492]	; (80037d8 <buzzing_task+0x240>)
 80035ea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80035ee:	4618      	mov	r0, r3
 80035f0:	f7fd fcc6 	bl	8000f80 <buzzer>
				note_time = (semiquaver_time * note_length[i]);
 80035f4:	8afb      	ldrh	r3, [r7, #22]
 80035f6:	4a79      	ldr	r2, [pc, #484]	; (80037dc <buzzing_task+0x244>)
 80035f8:	009b      	lsls	r3, r3, #2
 80035fa:	4413      	add	r3, r2
 80035fc:	ed93 7a00 	vldr	s14, [r3]
 8003600:	edd7 7a04 	vldr	s15, [r7, #16]
 8003604:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003608:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800360c:	ee17 3a90 	vmov	r3, s15
 8003610:	81fb      	strh	r3, [r7, #14]
				vTaskDelayUntil(&last_wake_time, note_time * 0.95);
 8003612:	89fb      	ldrh	r3, [r7, #14]
 8003614:	4618      	mov	r0, r3
 8003616:	f7fc ff3d 	bl	8000494 <__aeabi_i2d>
 800361a:	a369      	add	r3, pc, #420	; (adr r3, 80037c0 <buzzing_task+0x228>)
 800361c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003620:	f7fc ffa2 	bl	8000568 <__aeabi_dmul>
 8003624:	4602      	mov	r2, r0
 8003626:	460b      	mov	r3, r1
 8003628:	4610      	mov	r0, r2
 800362a:	4619      	mov	r1, r3
 800362c:	f7fd fa74 	bl	8000b18 <__aeabi_d2uiz>
 8003630:	4602      	mov	r2, r0
 8003632:	f107 0308 	add.w	r3, r7, #8
 8003636:	4611      	mov	r1, r2
 8003638:	4618      	mov	r0, r3
 800363a:	f00e fe33 	bl	80122a4 <vTaskDelayUntil>
				buzzer(0);
 800363e:	2000      	movs	r0, #0
 8003640:	f7fd fc9e 	bl	8000f80 <buzzer>
				vTaskDelayUntil(&last_wake_time, note_time * 0.05);
 8003644:	89fb      	ldrh	r3, [r7, #14]
 8003646:	4618      	mov	r0, r3
 8003648:	f7fc ff24 	bl	8000494 <__aeabi_i2d>
 800364c:	a35e      	add	r3, pc, #376	; (adr r3, 80037c8 <buzzing_task+0x230>)
 800364e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003652:	f7fc ff89 	bl	8000568 <__aeabi_dmul>
 8003656:	4602      	mov	r2, r0
 8003658:	460b      	mov	r3, r1
 800365a:	4610      	mov	r0, r2
 800365c:	4619      	mov	r1, r3
 800365e:	f7fd fa5b 	bl	8000b18 <__aeabi_d2uiz>
 8003662:	4602      	mov	r2, r0
 8003664:	f107 0308 	add.w	r3, r7, #8
 8003668:	4611      	mov	r1, r2
 800366a:	4618      	mov	r0, r3
 800366c:	f00e fe1a 	bl	80122a4 <vTaskDelayUntil>
			for (uint16_t i = 0; i < sizeof(melody) / sizeof(uint16_t); i++) {
 8003670:	8afb      	ldrh	r3, [r7, #22]
 8003672:	3301      	adds	r3, #1
 8003674:	82fb      	strh	r3, [r7, #22]
 8003676:	8afb      	ldrh	r3, [r7, #22]
 8003678:	2b7c      	cmp	r3, #124	; 0x7c
 800367a:	d9b0      	bls.n	80035de <buzzing_task+0x46>

			}
			break;
 800367c:	e09c      	b.n	80037b8 <buzzing_task+0x220>
		case ok:
			last_wake_time = xTaskGetTickCount();
 800367e:	f00e ffdf 	bl	8012640 <xTaskGetTickCount>
 8003682:	4603      	mov	r3, r0
 8003684:	60bb      	str	r3, [r7, #8]
			buzzer(BUZZER_HIGH);
 8003686:	f44f 705c 	mov.w	r0, #880	; 0x370
 800368a:	f7fd fc79 	bl	8000f80 <buzzer>
			vTaskDelayUntil(&last_wake_time, 400);
 800368e:	f107 0308 	add.w	r3, r7, #8
 8003692:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8003696:	4618      	mov	r0, r3
 8003698:	f00e fe04 	bl	80122a4 <vTaskDelayUntil>
			buzzer(0);
 800369c:	2000      	movs	r0, #0
 800369e:	f7fd fc6f 	bl	8000f80 <buzzer>
			vTaskDelayUntil(&last_wake_time, 100);
 80036a2:	f107 0308 	add.w	r3, r7, #8
 80036a6:	2164      	movs	r1, #100	; 0x64
 80036a8:	4618      	mov	r0, r3
 80036aa:	f00e fdfb 	bl	80122a4 <vTaskDelayUntil>
			buzzer(BUZZER_LOW);
 80036ae:	f44f 70dc 	mov.w	r0, #440	; 0x1b8
 80036b2:	f7fd fc65 	bl	8000f80 <buzzer>
			vTaskDelayUntil(&last_wake_time, 400);
 80036b6:	f107 0308 	add.w	r3, r7, #8
 80036ba:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80036be:	4618      	mov	r0, r3
 80036c0:	f00e fdf0 	bl	80122a4 <vTaskDelayUntil>
			buzzer(0);
 80036c4:	2000      	movs	r0, #0
 80036c6:	f7fd fc5b 	bl	8000f80 <buzzer>
			break;
 80036ca:	e075      	b.n	80037b8 <buzzing_task+0x220>
		case not_ok:
			last_wake_time = xTaskGetTickCount();
 80036cc:	f00e ffb8 	bl	8012640 <xTaskGetTickCount>
 80036d0:	4603      	mov	r3, r0
 80036d2:	60bb      	str	r3, [r7, #8]
			buzzer(BUZZER_LOW);
 80036d4:	f44f 70dc 	mov.w	r0, #440	; 0x1b8
 80036d8:	f7fd fc52 	bl	8000f80 <buzzer>
			vTaskDelayUntil(&last_wake_time, 400);
 80036dc:	f107 0308 	add.w	r3, r7, #8
 80036e0:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80036e4:	4618      	mov	r0, r3
 80036e6:	f00e fddd 	bl	80122a4 <vTaskDelayUntil>
			buzzer(0);
 80036ea:	2000      	movs	r0, #0
 80036ec:	f7fd fc48 	bl	8000f80 <buzzer>
			vTaskDelayUntil(&last_wake_time, 100);
 80036f0:	f107 0308 	add.w	r3, r7, #8
 80036f4:	2164      	movs	r1, #100	; 0x64
 80036f6:	4618      	mov	r0, r3
 80036f8:	f00e fdd4 	bl	80122a4 <vTaskDelayUntil>
			buzzer(BUZZER_HIGH);
 80036fc:	f44f 705c 	mov.w	r0, #880	; 0x370
 8003700:	f7fd fc3e 	bl	8000f80 <buzzer>
			vTaskDelayUntil(&last_wake_time, 400);
 8003704:	f107 0308 	add.w	r3, r7, #8
 8003708:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800370c:	4618      	mov	r0, r3
 800370e:	f00e fdc9 	bl	80122a4 <vTaskDelayUntil>
			buzzer(0);
 8003712:	2000      	movs	r0, #0
 8003714:	f7fd fc34 	bl	8000f80 <buzzer>
			break;
 8003718:	e04e      	b.n	80037b8 <buzzing_task+0x220>
		case control_control:
			last_wake_time = xTaskGetTickCount();
 800371a:	f00e ff91 	bl	8012640 <xTaskGetTickCount>
 800371e:	4603      	mov	r3, r0
 8003720:	60bb      	str	r3, [r7, #8]
			buzzer(BUZZER_LOW);
 8003722:	f44f 70dc 	mov.w	r0, #440	; 0x1b8
 8003726:	f7fd fc2b 	bl	8000f80 <buzzer>
			vTaskDelayUntil(&last_wake_time, 300);
 800372a:	f107 0308 	add.w	r3, r7, #8
 800372e:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8003732:	4618      	mov	r0, r3
 8003734:	f00e fdb6 	bl	80122a4 <vTaskDelayUntil>
			buzzer(0);
 8003738:	2000      	movs	r0, #0
 800373a:	f7fd fc21 	bl	8000f80 <buzzer>
			vTaskDelayUntil(&last_wake_time, 100);
 800373e:	f107 0308 	add.w	r3, r7, #8
 8003742:	2164      	movs	r1, #100	; 0x64
 8003744:	4618      	mov	r0, r3
 8003746:	f00e fdad 	bl	80122a4 <vTaskDelayUntil>
			buzzer(BUZZER_LOW);
 800374a:	f44f 70dc 	mov.w	r0, #440	; 0x1b8
 800374e:	f7fd fc17 	bl	8000f80 <buzzer>
			vTaskDelayUntil(&last_wake_time, 300);
 8003752:	f107 0308 	add.w	r3, r7, #8
 8003756:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800375a:	4618      	mov	r0, r3
 800375c:	f00e fda2 	bl	80122a4 <vTaskDelayUntil>
			buzzer(0);
 8003760:	2000      	movs	r0, #0
 8003762:	f7fd fc0d 	bl	8000f80 <buzzer>
			break;
 8003766:	e027      	b.n	80037b8 <buzzing_task+0x220>
		case control_keyboard:
			last_wake_time = xTaskGetTickCount();
 8003768:	f00e ff6a 	bl	8012640 <xTaskGetTickCount>
 800376c:	4603      	mov	r3, r0
 800376e:	60bb      	str	r3, [r7, #8]
			buzzer(BUZZER_HIGH);
 8003770:	f44f 705c 	mov.w	r0, #880	; 0x370
 8003774:	f7fd fc04 	bl	8000f80 <buzzer>
			vTaskDelayUntil(&last_wake_time, 300);
 8003778:	f107 0308 	add.w	r3, r7, #8
 800377c:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8003780:	4618      	mov	r0, r3
 8003782:	f00e fd8f 	bl	80122a4 <vTaskDelayUntil>
			buzzer(0);
 8003786:	2000      	movs	r0, #0
 8003788:	f7fd fbfa 	bl	8000f80 <buzzer>
			vTaskDelayUntil(&last_wake_time, 100);
 800378c:	f107 0308 	add.w	r3, r7, #8
 8003790:	2164      	movs	r1, #100	; 0x64
 8003792:	4618      	mov	r0, r3
 8003794:	f00e fd86 	bl	80122a4 <vTaskDelayUntil>
			buzzer(BUZZER_HIGH);
 8003798:	f44f 705c 	mov.w	r0, #880	; 0x370
 800379c:	f7fd fbf0 	bl	8000f80 <buzzer>
			vTaskDelayUntil(&last_wake_time, 300);
 80037a0:	f107 0308 	add.w	r3, r7, #8
 80037a4:	f44f 7196 	mov.w	r1, #300	; 0x12c
 80037a8:	4618      	mov	r0, r3
 80037aa:	f00e fd7b 	bl	80122a4 <vTaskDelayUntil>
			buzzer(0);
 80037ae:	2000      	movs	r0, #0
 80037b0:	f7fd fbe6 	bl	8000f80 <buzzer>
			break;
 80037b4:	bf00      	nop
 80037b6:	e6f5      	b.n	80035a4 <buzzing_task+0xc>
		xQueueReceive(buzzing_task_msg, &buzzing_type, portMAX_DELAY);
 80037b8:	e6f4      	b.n	80035a4 <buzzing_task+0xc>
 80037ba:	bf00      	nop
 80037bc:	f3af 8000 	nop.w
 80037c0:	66666666 	.word	0x66666666
 80037c4:	3fee6666 	.word	0x3fee6666
 80037c8:	9999999a 	.word	0x9999999a
 80037cc:	3fa99999 	.word	0x3fa99999
 80037d0:	42fa0000 	.word	0x42fa0000
 80037d4:	2000032c 	.word	0x2000032c
 80037d8:	08016a74 	.word	0x08016a74
 80037dc:	08016b70 	.word	0x08016b70

080037e0 <can_ISR>:

/**
 * CAN ISR function, triggered upon RX_FIFO0_MSG_PENDING
 * converts the raw can data to the motor_data struct form as well
 */
void can_ISR(CAN_HandleTypeDef *hcan) {
 80037e0:	b580      	push	{r7, lr}
 80037e2:	b08c      	sub	sp, #48	; 0x30
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]

	CAN_RxHeaderTypeDef rx_msg_header;
	uint8_t rx_buffer[CAN_BUFFER_SIZE];
	if (hcan->Instance == CAN1) {
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	4a1f      	ldr	r2, [pc, #124]	; (800386c <can_ISR+0x8c>)
 80037ee:	4293      	cmp	r3, r2
 80037f0:	d118      	bne.n	8003824 <can_ISR+0x44>
		HAL_CAN_DeactivateNotification(hcan,
 80037f2:	210e      	movs	r1, #14
 80037f4:	6878      	ldr	r0, [r7, #4]
 80037f6:	f004 fd96 	bl	8008326 <HAL_CAN_DeactivateNotification>
				CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_RX_FIFO0_FULL | CAN_IT_RX_FIFO0_OVERRUN);
		can1_get_msg(&hcan1, &rx_msg_header, rx_buffer);
 80037fa:	f107 020c 	add.w	r2, r7, #12
 80037fe:	f107 0314 	add.w	r3, r7, #20
 8003802:	4619      	mov	r1, r3
 8003804:	481a      	ldr	r0, [pc, #104]	; (8003870 <can_ISR+0x90>)
 8003806:	f7fd fc01 	bl	800100c <can1_get_msg>
		convert_raw_can_data(can_motors, rx_msg_header.StdId, rx_buffer);
 800380a:	697b      	ldr	r3, [r7, #20]
 800380c:	b29b      	uxth	r3, r3
 800380e:	f107 020c 	add.w	r2, r7, #12
 8003812:	4619      	mov	r1, r3
 8003814:	4817      	ldr	r0, [pc, #92]	; (8003874 <can_ISR+0x94>)
 8003816:	f000 f833 	bl	8003880 <convert_raw_can_data>
		HAL_CAN_ActivateNotification(hcan,
 800381a:	210e      	movs	r1, #14
 800381c:	6878      	ldr	r0, [r7, #4]
 800381e:	f004 fd5c 	bl	80082da <HAL_CAN_ActivateNotification>
		can_get_msg(&hcan2, &rx_msg_header, rx_buffer);
		process_chassis_can_msg(rx_msg_header.StdId, rx_buffer);
		HAL_CAN_ActivateNotification(&hcan2, CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_RX_FIFO0_FULL	| CAN_IT_RX_FIFO0_OVERRUN);
	}
#endif
}
 8003822:	e01e      	b.n	8003862 <can_ISR+0x82>
	else if (hcan->Instance == CAN2) {
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	4a13      	ldr	r2, [pc, #76]	; (8003878 <can_ISR+0x98>)
 800382a:	4293      	cmp	r3, r2
 800382c:	d119      	bne.n	8003862 <can_ISR+0x82>
		HAL_CAN_DeactivateNotification(hcan,
 800382e:	2170      	movs	r1, #112	; 0x70
 8003830:	6878      	ldr	r0, [r7, #4]
 8003832:	f004 fd78 	bl	8008326 <HAL_CAN_DeactivateNotification>
		can2_get_msg(&hcan2, &rx_msg_header, rx_buffer);
 8003836:	f107 020c 	add.w	r2, r7, #12
 800383a:	f107 0314 	add.w	r3, r7, #20
 800383e:	4619      	mov	r1, r3
 8003840:	480e      	ldr	r0, [pc, #56]	; (800387c <can_ISR+0x9c>)
 8003842:	f7fd fbf4 	bl	800102e <can2_get_msg>
		convert_raw_can_data(can_motors, rx_msg_header.StdId + 12, rx_buffer);
 8003846:	697b      	ldr	r3, [r7, #20]
 8003848:	b29b      	uxth	r3, r3
 800384a:	330c      	adds	r3, #12
 800384c:	b29b      	uxth	r3, r3
 800384e:	f107 020c 	add.w	r2, r7, #12
 8003852:	4619      	mov	r1, r3
 8003854:	4807      	ldr	r0, [pc, #28]	; (8003874 <can_ISR+0x94>)
 8003856:	f000 f813 	bl	8003880 <convert_raw_can_data>
		HAL_CAN_ActivateNotification(hcan,
 800385a:	2170      	movs	r1, #112	; 0x70
 800385c:	6878      	ldr	r0, [r7, #4]
 800385e:	f004 fd3c 	bl	80082da <HAL_CAN_ActivateNotification>
}
 8003862:	bf00      	nop
 8003864:	3730      	adds	r7, #48	; 0x30
 8003866:	46bd      	mov	sp, r7
 8003868:	bd80      	pop	{r7, pc}
 800386a:	bf00      	nop
 800386c:	40006400 	.word	0x40006400
 8003870:	200002a4 	.word	0x200002a4
 8003874:	20000f30 	.word	0x20000f30
 8003878:	40006800 	.word	0x40006800
 800387c:	200002cc 	.word	0x200002cc

08003880 <convert_raw_can_data>:
 * in the struct for the motor.
 *
 * For GM6020 motors, it recenters the motor angle data and converts it to radians.
 */

void convert_raw_can_data(motor_data_t *can_motor_data, uint16_t motor_id, uint8_t *rx_buffer) {
 8003880:	b590      	push	{r4, r7, lr}
 8003882:	b089      	sub	sp, #36	; 0x24
 8003884:	af00      	add	r7, sp, #0
 8003886:	60f8      	str	r0, [r7, #12]
 8003888:	460b      	mov	r3, r1
 800388a:	607a      	str	r2, [r7, #4]
 800388c:	817b      	strh	r3, [r7, #10]
	BaseType_t xHigherPriorityTaskWoken, xResult;
	xHigherPriorityTaskWoken = pdFALSE;
 800388e:	2300      	movs	r3, #0
 8003890:	617b      	str	r3, [r7, #20]
	uint16_t idnum = motor_id - 0x201;
 8003892:	897b      	ldrh	r3, [r7, #10]
 8003894:	f2a3 2301 	subw	r3, r3, #513	; 0x201
 8003898:	837b      	strh	r3, [r7, #26]
	if (idnum > 24)
 800389a:	8b7b      	ldrh	r3, [r7, #26]
 800389c:	2b18      	cmp	r3, #24
 800389e:	f200 815f 	bhi.w	8003b60 <convert_raw_can_data+0x2e0>
	{
		return;
	}
	if (can_motor_data[idnum].motor_type > 0) {
 80038a2:	8b7b      	ldrh	r3, [r7, #26]
 80038a4:	22a8      	movs	r2, #168	; 0xa8
 80038a6:	fb02 f303 	mul.w	r3, r2, r3
 80038aa:	68fa      	ldr	r2, [r7, #12]
 80038ac:	4413      	add	r3, r2
 80038ae:	789b      	ldrb	r3, [r3, #2]
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	f000 8156 	beq.w	8003b62 <convert_raw_can_data+0x2e2>
		can_motor_data[idnum].id = motor_id;
 80038b6:	8b7b      	ldrh	r3, [r7, #26]
 80038b8:	22a8      	movs	r2, #168	; 0xa8
 80038ba:	fb02 f303 	mul.w	r3, r2, r3
 80038be:	68fa      	ldr	r2, [r7, #12]
 80038c0:	4413      	add	r3, r2
 80038c2:	897a      	ldrh	r2, [r7, #10]
 80038c4:	801a      	strh	r2, [r3, #0]
		can_motor_data[idnum].raw_data.angle[0] = (rx_buffer[0] << 8) | rx_buffer[1];
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	781b      	ldrb	r3, [r3, #0]
 80038ca:	021b      	lsls	r3, r3, #8
 80038cc:	b219      	sxth	r1, r3
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	3301      	adds	r3, #1
 80038d2:	781b      	ldrb	r3, [r3, #0]
 80038d4:	b21a      	sxth	r2, r3
 80038d6:	8b7b      	ldrh	r3, [r7, #26]
 80038d8:	20a8      	movs	r0, #168	; 0xa8
 80038da:	fb00 f303 	mul.w	r3, r0, r3
 80038de:	68f8      	ldr	r0, [r7, #12]
 80038e0:	4403      	add	r3, r0
 80038e2:	430a      	orrs	r2, r1
 80038e4:	b212      	sxth	r2, r2
 80038e6:	809a      	strh	r2, [r3, #4]
		int16_t temp_rpm					=(rx_buffer[2] << 8) | rx_buffer[3];
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	3302      	adds	r3, #2
 80038ec:	781b      	ldrb	r3, [r3, #0]
 80038ee:	021b      	lsls	r3, r3, #8
 80038f0:	b21a      	sxth	r2, r3
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	3303      	adds	r3, #3
 80038f6:	781b      	ldrb	r3, [r3, #0]
 80038f8:	b21b      	sxth	r3, r3
 80038fa:	4313      	orrs	r3, r2
 80038fc:	833b      	strh	r3, [r7, #24]
		can_motor_data[idnum].raw_data.rpm = can_motor_data[idnum].raw_data.rpm * SPEED_LPF + temp_rpm * (1-SPEED_LPF);
 80038fe:	8b7b      	ldrh	r3, [r7, #26]
 8003900:	22a8      	movs	r2, #168	; 0xa8
 8003902:	fb02 f303 	mul.w	r3, r2, r3
 8003906:	68fa      	ldr	r2, [r7, #12]
 8003908:	4413      	add	r3, r2
 800390a:	8b3a      	ldrh	r2, [r7, #24]
 800390c:	811a      	strh	r2, [r3, #8]
		can_motor_data[idnum].raw_data.torque = (rx_buffer[4] << 8) | rx_buffer[5];
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	3304      	adds	r3, #4
 8003912:	781b      	ldrb	r3, [r3, #0]
 8003914:	021b      	lsls	r3, r3, #8
 8003916:	b219      	sxth	r1, r3
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	3305      	adds	r3, #5
 800391c:	781b      	ldrb	r3, [r3, #0]
 800391e:	b21a      	sxth	r2, r3
 8003920:	8b7b      	ldrh	r3, [r7, #26]
 8003922:	20a8      	movs	r0, #168	; 0xa8
 8003924:	fb00 f303 	mul.w	r3, r0, r3
 8003928:	68f8      	ldr	r0, [r7, #12]
 800392a:	4403      	add	r3, r0
 800392c:	430a      	orrs	r2, r1
 800392e:	b212      	sxth	r2, r2
 8003930:	815a      	strh	r2, [r3, #10]
		can_motor_data[idnum].raw_data.temp = (rx_buffer[6]);
 8003932:	8b7b      	ldrh	r3, [r7, #26]
 8003934:	22a8      	movs	r2, #168	; 0xa8
 8003936:	fb02 f303 	mul.w	r3, r2, r3
 800393a:	68fa      	ldr	r2, [r7, #12]
 800393c:	4413      	add	r3, r2
 800393e:	687a      	ldr	r2, [r7, #4]
 8003940:	7992      	ldrb	r2, [r2, #6]
 8003942:	731a      	strb	r2, [r3, #12]
		can_motor_data[idnum].last_time[1] = can_motor_data[idnum].last_time[0];
 8003944:	8b7b      	ldrh	r3, [r7, #26]
 8003946:	22a8      	movs	r2, #168	; 0xa8
 8003948:	fb02 f303 	mul.w	r3, r2, r3
 800394c:	68fa      	ldr	r2, [r7, #12]
 800394e:	441a      	add	r2, r3
 8003950:	8b7b      	ldrh	r3, [r7, #26]
 8003952:	21a8      	movs	r1, #168	; 0xa8
 8003954:	fb01 f303 	mul.w	r3, r1, r3
 8003958:	68f9      	ldr	r1, [r7, #12]
 800395a:	440b      	add	r3, r1
 800395c:	f8d2 20a0 	ldr.w	r2, [r2, #160]	; 0xa0
 8003960:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
		can_motor_data[idnum].last_time[0] = get_microseconds();
 8003964:	8b7b      	ldrh	r3, [r7, #26]
 8003966:	22a8      	movs	r2, #168	; 0xa8
 8003968:	fb02 f303 	mul.w	r3, r2, r3
 800396c:	68fa      	ldr	r2, [r7, #12]
 800396e:	18d4      	adds	r4, r2, r3
 8003970:	f7fe f936 	bl	8001be0 <get_microseconds>
 8003974:	4603      	mov	r3, r0
 8003976:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
		switch (can_motor_data[idnum].motor_type) {
 800397a:	8b7b      	ldrh	r3, [r7, #26]
 800397c:	22a8      	movs	r2, #168	; 0xa8
 800397e:	fb02 f303 	mul.w	r3, r2, r3
 8003982:	68fa      	ldr	r2, [r7, #12]
 8003984:	4413      	add	r3, r2
 8003986:	789b      	ldrb	r3, [r3, #2]
 8003988:	3b01      	subs	r3, #1
 800398a:	2b07      	cmp	r3, #7
 800398c:	d84f      	bhi.n	8003a2e <convert_raw_can_data+0x1ae>
 800398e:	a201      	add	r2, pc, #4	; (adr r2, 8003994 <convert_raw_can_data+0x114>)
 8003990:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003994:	080039b5 	.word	0x080039b5
 8003998:	08003a2f 	.word	0x08003a2f
 800399c:	08003a2f 	.word	0x08003a2f
 80039a0:	08003a2f 	.word	0x08003a2f
 80039a4:	08003a2f 	.word	0x08003a2f
 80039a8:	080039d9 	.word	0x080039d9
 80039ac:	080039d9 	.word	0x080039d9
 80039b0:	080039d9 	.word	0x080039d9
		case TYPE_GM6020:
			angle_offset(&can_motor_data[idnum].raw_data, &can_motor_data[idnum].angle_data);
 80039b4:	8b7b      	ldrh	r3, [r7, #26]
 80039b6:	22a8      	movs	r2, #168	; 0xa8
 80039b8:	fb02 f303 	mul.w	r3, r2, r3
 80039bc:	68fa      	ldr	r2, [r7, #12]
 80039be:	4413      	add	r3, r2
 80039c0:	1d18      	adds	r0, r3, #4
 80039c2:	8b7b      	ldrh	r3, [r7, #26]
 80039c4:	22a8      	movs	r2, #168	; 0xa8
 80039c6:	fb02 f303 	mul.w	r3, r2, r3
 80039ca:	68fa      	ldr	r2, [r7, #12]
 80039cc:	4413      	add	r3, r2
 80039ce:	3378      	adds	r3, #120	; 0x78
 80039d0:	4619      	mov	r1, r3
 80039d2:	f000 f8d3 	bl	8003b7c <angle_offset>
			break;
 80039d6:	e02b      	b.n	8003a30 <convert_raw_can_data+0x1b0>
//					can_motor_data[idnum].last_time);
			break;
		case TYPE_M2006_ANGLE:
		case TYPE_M3508_ANGLE:
		case TYPE_GM6020_720:
			motor_calc_odometry(&can_motor_data[idnum].raw_data, &can_motor_data[idnum].angle_data,
 80039d8:	8b7b      	ldrh	r3, [r7, #26]
 80039da:	22a8      	movs	r2, #168	; 0xa8
 80039dc:	fb02 f303 	mul.w	r3, r2, r3
 80039e0:	68fa      	ldr	r2, [r7, #12]
 80039e2:	4413      	add	r3, r2
 80039e4:	1d18      	adds	r0, r3, #4
 80039e6:	8b7b      	ldrh	r3, [r7, #26]
 80039e8:	22a8      	movs	r2, #168	; 0xa8
 80039ea:	fb02 f303 	mul.w	r3, r2, r3
 80039ee:	68fa      	ldr	r2, [r7, #12]
 80039f0:	4413      	add	r3, r2
 80039f2:	f103 0178 	add.w	r1, r3, #120	; 0x78
					can_motor_data[idnum].last_time);
 80039f6:	8b7b      	ldrh	r3, [r7, #26]
 80039f8:	22a8      	movs	r2, #168	; 0xa8
 80039fa:	fb02 f303 	mul.w	r3, r2, r3
 80039fe:	68fa      	ldr	r2, [r7, #12]
 8003a00:	4413      	add	r3, r2
 8003a02:	33a0      	adds	r3, #160	; 0xa0
			motor_calc_odometry(&can_motor_data[idnum].raw_data, &can_motor_data[idnum].angle_data,
 8003a04:	461a      	mov	r2, r3
 8003a06:	f000 f96f 	bl	8003ce8 <motor_calc_odometry>
			angle_offset(&can_motor_data[idnum].raw_data, &can_motor_data[idnum].angle_data);
 8003a0a:	8b7b      	ldrh	r3, [r7, #26]
 8003a0c:	22a8      	movs	r2, #168	; 0xa8
 8003a0e:	fb02 f303 	mul.w	r3, r2, r3
 8003a12:	68fa      	ldr	r2, [r7, #12]
 8003a14:	4413      	add	r3, r2
 8003a16:	1d18      	adds	r0, r3, #4
 8003a18:	8b7b      	ldrh	r3, [r7, #26]
 8003a1a:	22a8      	movs	r2, #168	; 0xa8
 8003a1c:	fb02 f303 	mul.w	r3, r2, r3
 8003a20:	68fa      	ldr	r2, [r7, #12]
 8003a22:	4413      	add	r3, r2
 8003a24:	3378      	adds	r3, #120	; 0x78
 8003a26:	4619      	mov	r1, r3
 8003a28:	f000 f8a8 	bl	8003b7c <angle_offset>
			break;
 8003a2c:	e000      	b.n	8003a30 <convert_raw_can_data+0x1b0>
		default:
			break;
 8003a2e:	bf00      	nop

		}

		switch (idnum + 1) {
 8003a30:	8b7b      	ldrh	r3, [r7, #26]
 8003a32:	3301      	adds	r3, #1
 8003a34:	3b05      	subs	r3, #5
 8003a36:	2b11      	cmp	r3, #17
 8003a38:	f200 8082 	bhi.w	8003b40 <convert_raw_can_data+0x2c0>
 8003a3c:	a201      	add	r2, pc, #4	; (adr r2, 8003a44 <convert_raw_can_data+0x1c4>)
 8003a3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a42:	bf00      	nop
 8003a44:	08003add 	.word	0x08003add
 8003a48:	08003af1 	.word	0x08003af1
 8003a4c:	08003b05 	.word	0x08003b05
 8003a50:	08003b41 	.word	0x08003b41
 8003a54:	08003b19 	.word	0x08003b19
 8003a58:	08003b41 	.word	0x08003b41
 8003a5c:	08003b41 	.word	0x08003b41
 8003a60:	08003b41 	.word	0x08003b41
 8003a64:	08003a8d 	.word	0x08003a8d
 8003a68:	08003aa1 	.word	0x08003aa1
 8003a6c:	08003ab5 	.word	0x08003ab5
 8003a70:	08003ac9 	.word	0x08003ac9
 8003a74:	08003b41 	.word	0x08003b41
 8003a78:	08003b41 	.word	0x08003b41
 8003a7c:	08003b41 	.word	0x08003b41
 8003a80:	08003b41 	.word	0x08003b41
 8003a84:	08003b41 	.word	0x08003b41
 8003a88:	08003b2d 	.word	0x08003b2d
				#ifndef CHASSIS_MCU
						case FR_MOTOR_ID:
							xResult = xEventGroupSetBitsFromISR(chassis_event_group, 0b1000,
 8003a8c:	4b36      	ldr	r3, [pc, #216]	; (8003b68 <convert_raw_can_data+0x2e8>)
 8003a8e:	6819      	ldr	r1, [r3, #0]
 8003a90:	f107 0314 	add.w	r3, r7, #20
 8003a94:	2208      	movs	r2, #8
 8003a96:	4835      	ldr	r0, [pc, #212]	; (8003b6c <convert_raw_can_data+0x2ec>)
 8003a98:	f00f ff16 	bl	80138c8 <xTimerPendFunctionCallFromISR>
 8003a9c:	61f8      	str	r0, [r7, #28]
									&xHigherPriorityTaskWoken);
							break;
 8003a9e:	e050      	b.n	8003b42 <convert_raw_can_data+0x2c2>
						case FL_MOTOR_ID:
							xResult = xEventGroupSetBitsFromISR(chassis_event_group, 0b0100,
 8003aa0:	4b31      	ldr	r3, [pc, #196]	; (8003b68 <convert_raw_can_data+0x2e8>)
 8003aa2:	6819      	ldr	r1, [r3, #0]
 8003aa4:	f107 0314 	add.w	r3, r7, #20
 8003aa8:	2204      	movs	r2, #4
 8003aaa:	4830      	ldr	r0, [pc, #192]	; (8003b6c <convert_raw_can_data+0x2ec>)
 8003aac:	f00f ff0c 	bl	80138c8 <xTimerPendFunctionCallFromISR>
 8003ab0:	61f8      	str	r0, [r7, #28]
									&xHigherPriorityTaskWoken);
							break;
 8003ab2:	e046      	b.n	8003b42 <convert_raw_can_data+0x2c2>
						case BL_MOTOR_ID:
							xResult = xEventGroupSetBitsFromISR(chassis_event_group, 0b0010,
 8003ab4:	4b2c      	ldr	r3, [pc, #176]	; (8003b68 <convert_raw_can_data+0x2e8>)
 8003ab6:	6819      	ldr	r1, [r3, #0]
 8003ab8:	f107 0314 	add.w	r3, r7, #20
 8003abc:	2202      	movs	r2, #2
 8003abe:	482b      	ldr	r0, [pc, #172]	; (8003b6c <convert_raw_can_data+0x2ec>)
 8003ac0:	f00f ff02 	bl	80138c8 <xTimerPendFunctionCallFromISR>
 8003ac4:	61f8      	str	r0, [r7, #28]
									&xHigherPriorityTaskWoken);
							break;
 8003ac6:	e03c      	b.n	8003b42 <convert_raw_can_data+0x2c2>
						case BR_MOTOR_ID:
							xResult = xEventGroupSetBitsFromISR(chassis_event_group, 0b0001,
 8003ac8:	4b27      	ldr	r3, [pc, #156]	; (8003b68 <convert_raw_can_data+0x2e8>)
 8003aca:	6819      	ldr	r1, [r3, #0]
 8003acc:	f107 0314 	add.w	r3, r7, #20
 8003ad0:	2201      	movs	r2, #1
 8003ad2:	4826      	ldr	r0, [pc, #152]	; (8003b6c <convert_raw_can_data+0x2ec>)
 8003ad4:	f00f fef8 	bl	80138c8 <xTimerPendFunctionCallFromISR>
 8003ad8:	61f8      	str	r0, [r7, #28]
									&xHigherPriorityTaskWoken);
							break;
 8003ada:	e032      	b.n	8003b42 <convert_raw_can_data+0x2c2>
				#endif
						case LFRICTION_MOTOR_ID:
							xResult = xEventGroupSetBitsFromISR(launcher_event_group, 0b010,
 8003adc:	4b24      	ldr	r3, [pc, #144]	; (8003b70 <convert_raw_can_data+0x2f0>)
 8003ade:	6819      	ldr	r1, [r3, #0]
 8003ae0:	f107 0314 	add.w	r3, r7, #20
 8003ae4:	2202      	movs	r2, #2
 8003ae6:	4821      	ldr	r0, [pc, #132]	; (8003b6c <convert_raw_can_data+0x2ec>)
 8003ae8:	f00f feee 	bl	80138c8 <xTimerPendFunctionCallFromISR>
 8003aec:	61f8      	str	r0, [r7, #28]
									&xHigherPriorityTaskWoken);
							break;
 8003aee:	e028      	b.n	8003b42 <convert_raw_can_data+0x2c2>
						case RFRICTION_MOTOR_ID:
							xResult = xEventGroupSetBitsFromISR(launcher_event_group, 0b001,
 8003af0:	4b1f      	ldr	r3, [pc, #124]	; (8003b70 <convert_raw_can_data+0x2f0>)
 8003af2:	6819      	ldr	r1, [r3, #0]
 8003af4:	f107 0314 	add.w	r3, r7, #20
 8003af8:	2201      	movs	r2, #1
 8003afa:	481c      	ldr	r0, [pc, #112]	; (8003b6c <convert_raw_can_data+0x2ec>)
 8003afc:	f00f fee4 	bl	80138c8 <xTimerPendFunctionCallFromISR>
 8003b00:	61f8      	str	r0, [r7, #28]
									&xHigherPriorityTaskWoken);
							break;
 8003b02:	e01e      	b.n	8003b42 <convert_raw_can_data+0x2c2>
						case FEEDER_MOTOR_ID:
							xResult = xEventGroupSetBitsFromISR(launcher_event_group, 0b100,
 8003b04:	4b1a      	ldr	r3, [pc, #104]	; (8003b70 <convert_raw_can_data+0x2f0>)
 8003b06:	6819      	ldr	r1, [r3, #0]
 8003b08:	f107 0314 	add.w	r3, r7, #20
 8003b0c:	2204      	movs	r2, #4
 8003b0e:	4817      	ldr	r0, [pc, #92]	; (8003b6c <convert_raw_can_data+0x2ec>)
 8003b10:	f00f feda 	bl	80138c8 <xTimerPendFunctionCallFromISR>
 8003b14:	61f8      	str	r0, [r7, #28]
									&xHigherPriorityTaskWoken);
							break;
 8003b16:	e014      	b.n	8003b42 <convert_raw_can_data+0x2c2>
						case PITCH_MOTOR_ID:
							xResult = xEventGroupSetBitsFromISR(gimbal_event_group, 0b01,
 8003b18:	4b16      	ldr	r3, [pc, #88]	; (8003b74 <convert_raw_can_data+0x2f4>)
 8003b1a:	6819      	ldr	r1, [r3, #0]
 8003b1c:	f107 0314 	add.w	r3, r7, #20
 8003b20:	2201      	movs	r2, #1
 8003b22:	4812      	ldr	r0, [pc, #72]	; (8003b6c <convert_raw_can_data+0x2ec>)
 8003b24:	f00f fed0 	bl	80138c8 <xTimerPendFunctionCallFromISR>
 8003b28:	61f8      	str	r0, [r7, #28]
									&xHigherPriorityTaskWoken);
							break;
 8003b2a:	e00a      	b.n	8003b42 <convert_raw_can_data+0x2c2>
						case YAW_MOTOR_ID:
							xResult = xEventGroupSetBitsFromISR(gimbal_event_group, 0b10,
 8003b2c:	4b11      	ldr	r3, [pc, #68]	; (8003b74 <convert_raw_can_data+0x2f4>)
 8003b2e:	6819      	ldr	r1, [r3, #0]
 8003b30:	f107 0314 	add.w	r3, r7, #20
 8003b34:	2202      	movs	r2, #2
 8003b36:	480d      	ldr	r0, [pc, #52]	; (8003b6c <convert_raw_can_data+0x2ec>)
 8003b38:	f00f fec6 	bl	80138c8 <xTimerPendFunctionCallFromISR>
 8003b3c:	61f8      	str	r0, [r7, #28]
									&xHigherPriorityTaskWoken);
							break;
 8003b3e:	e000      	b.n	8003b42 <convert_raw_can_data+0x2c2>
						default:
							//error handler
							break;
 8003b40:	bf00      	nop
						}
						if (xResult != pdFAIL) {
 8003b42:	69fb      	ldr	r3, [r7, #28]
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d00c      	beq.n	8003b62 <convert_raw_can_data+0x2e2>
							portYIELD_FROM_ISR(xHigherPriorityTaskWoken); //forces current task to yield if higher priority task is called
 8003b48:	697b      	ldr	r3, [r7, #20]
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d009      	beq.n	8003b62 <convert_raw_can_data+0x2e2>
 8003b4e:	4b0a      	ldr	r3, [pc, #40]	; (8003b78 <convert_raw_can_data+0x2f8>)
 8003b50:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b54:	601a      	str	r2, [r3, #0]
 8003b56:	f3bf 8f4f 	dsb	sy
 8003b5a:	f3bf 8f6f 	isb	sy
 8003b5e:	e000      	b.n	8003b62 <convert_raw_can_data+0x2e2>
		return;
 8003b60:	bf00      	nop
						}
					} else {
						//error handler
					}

}
 8003b62:	3724      	adds	r7, #36	; 0x24
 8003b64:	46bd      	mov	sp, r7
 8003b66:	bd90      	pop	{r4, r7, pc}
 8003b68:	20000314 	.word	0x20000314
 8003b6c:	0801133f 	.word	0x0801133f
 8003b70:	20000318 	.word	0x20000318
 8003b74:	20000310 	.word	0x20000310
 8003b78:	e000ed04 	.word	0xe000ed04

08003b7c <angle_offset>:
}

/**
 * Centers the raw motor angle to between -Pi to +Pi
 */
void angle_offset(raw_data_t *motor_data, angle_data_t *angle_data) {
 8003b7c:	b480      	push	{r7}
 8003b7e:	b085      	sub	sp, #20
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]
 8003b84:	6039      	str	r1, [r7, #0]
	int32_t temp_ang = 0;
 8003b86:	2300      	movs	r3, #0
 8003b88:	60fb      	str	r3, [r7, #12]

	if (angle_data->gearbox_ratio > 0) {
 8003b8a:	683b      	ldr	r3, [r7, #0]
 8003b8c:	edd3 7a06 	vldr	s15, [r3, #24]
 8003b90:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003b94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b98:	dd64      	ble.n	8003c64 <angle_offset+0xe8>
		temp_ang = angle_data->ticks - angle_data->center_ang;
 8003b9a:	683b      	ldr	r3, [r7, #0]
 8003b9c:	681a      	ldr	r2, [r3, #0]
 8003b9e:	683b      	ldr	r3, [r7, #0]
 8003ba0:	685b      	ldr	r3, [r3, #4]
 8003ba2:	1ad3      	subs	r3, r2, r3
 8003ba4:	60fb      	str	r3, [r7, #12]
		if (temp_ang > (4096 * angle_data->gearbox_ratio)) {
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	ee07 3a90 	vmov	s15, r3
 8003bac:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003bb0:	683b      	ldr	r3, [r7, #0]
 8003bb2:	edd3 7a06 	vldr	s15, [r3, #24]
 8003bb6:	eddf 6a47 	vldr	s13, [pc, #284]	; 8003cd4 <angle_offset+0x158>
 8003bba:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003bbe:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003bc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003bc6:	dd13      	ble.n	8003bf0 <angle_offset+0x74>
			temp_ang -= (8192 * angle_data->gearbox_ratio);
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	ee07 3a90 	vmov	s15, r3
 8003bce:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003bd2:	683b      	ldr	r3, [r7, #0]
 8003bd4:	edd3 7a06 	vldr	s15, [r3, #24]
 8003bd8:	eddf 6a3f 	vldr	s13, [pc, #252]	; 8003cd8 <angle_offset+0x15c>
 8003bdc:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003be0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003be4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003be8:	ee17 3a90 	vmov	r3, s15
 8003bec:	60fb      	str	r3, [r7, #12]
 8003bee:	e023      	b.n	8003c38 <angle_offset+0xbc>
		} else if (temp_ang < (-4096 * angle_data->gearbox_ratio)) {
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	ee07 3a90 	vmov	s15, r3
 8003bf6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003bfa:	683b      	ldr	r3, [r7, #0]
 8003bfc:	edd3 7a06 	vldr	s15, [r3, #24]
 8003c00:	eddf 6a36 	vldr	s13, [pc, #216]	; 8003cdc <angle_offset+0x160>
 8003c04:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003c08:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003c0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c10:	d512      	bpl.n	8003c38 <angle_offset+0xbc>
			temp_ang += 8192 * angle_data->gearbox_ratio;
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	ee07 3a90 	vmov	s15, r3
 8003c18:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003c1c:	683b      	ldr	r3, [r7, #0]
 8003c1e:	edd3 7a06 	vldr	s15, [r3, #24]
 8003c22:	eddf 6a2d 	vldr	s13, [pc, #180]	; 8003cd8 <angle_offset+0x15c>
 8003c26:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003c2a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003c2e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003c32:	ee17 3a90 	vmov	r3, s15
 8003c36:	60fb      	str	r3, [r7, #12]
		}
		angle_data->adj_ang = (float) temp_ang * PI / (8192 * angle_data->gearbox_ratio);
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	ee07 3a90 	vmov	s15, r3
 8003c3e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003c42:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8003ce0 <angle_offset+0x164>
 8003c46:	ee67 6a87 	vmul.f32	s13, s15, s14
 8003c4a:	683b      	ldr	r3, [r7, #0]
 8003c4c:	edd3 7a06 	vldr	s15, [r3, #24]
 8003c50:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8003cd8 <angle_offset+0x15c>
 8003c54:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003c58:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003c5c:	683b      	ldr	r3, [r7, #0]
 8003c5e:	edc3 7a07 	vstr	s15, [r3, #28]
		} else if (temp_ang < -4096) {
			temp_ang += 8192;
		}
		angle_data->adj_ang = (angle_data->adj_ang * ANGLE_LPF) + (float) (temp_ang * PI / 4096) * (1 - ANGLE_LPF); // convert to radians
	}
}
 8003c62:	e031      	b.n	8003cc8 <angle_offset+0x14c>
		temp_ang = (int32_t) (motor_data->angle[0]) - angle_data->center_ang;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003c6a:	461a      	mov	r2, r3
 8003c6c:	683b      	ldr	r3, [r7, #0]
 8003c6e:	685b      	ldr	r3, [r3, #4]
 8003c70:	1ad3      	subs	r3, r2, r3
 8003c72:	60fb      	str	r3, [r7, #12]
		if (temp_ang > 4096) {
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c7a:	dd04      	ble.n	8003c86 <angle_offset+0x10a>
			temp_ang -= 8192;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	f5a3 5300 	sub.w	r3, r3, #8192	; 0x2000
 8003c82:	60fb      	str	r3, [r7, #12]
 8003c84:	e007      	b.n	8003c96 <angle_offset+0x11a>
		} else if (temp_ang < -4096) {
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	f513 5f80 	cmn.w	r3, #4096	; 0x1000
 8003c8c:	da03      	bge.n	8003c96 <angle_offset+0x11a>
			temp_ang += 8192;
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003c94:	60fb      	str	r3, [r7, #12]
		angle_data->adj_ang = (angle_data->adj_ang * ANGLE_LPF) + (float) (temp_ang * PI / 4096) * (1 - ANGLE_LPF); // convert to radians
 8003c96:	683b      	ldr	r3, [r7, #0]
 8003c98:	edd3 7a07 	vldr	s15, [r3, #28]
 8003c9c:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8003ce4 <angle_offset+0x168>
 8003ca0:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	ee07 3a90 	vmov	s15, r3
 8003caa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003cae:	eddf 6a0c 	vldr	s13, [pc, #48]	; 8003ce0 <angle_offset+0x164>
 8003cb2:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8003cb6:	ed9f 6a07 	vldr	s12, [pc, #28]	; 8003cd4 <angle_offset+0x158>
 8003cba:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8003cbe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003cc2:	683b      	ldr	r3, [r7, #0]
 8003cc4:	edc3 7a07 	vstr	s15, [r3, #28]
}
 8003cc8:	bf00      	nop
 8003cca:	3714      	adds	r7, #20
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd2:	4770      	bx	lr
 8003cd4:	45800000 	.word	0x45800000
 8003cd8:	46000000 	.word	0x46000000
 8003cdc:	c5800000 	.word	0xc5800000
 8003ce0:	40490fdb 	.word	0x40490fdb
 8003ce4:	00000000 	.word	0x00000000

08003ce8 <motor_calc_odometry>:

void motor_calc_odometry(raw_data_t *motor_data,
		angle_data_t *angle_data,
		uint32_t feedback_times[]) {
 8003ce8:	b480      	push	{r7}
 8003cea:	b089      	sub	sp, #36	; 0x24
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	60f8      	str	r0, [r7, #12]
 8003cf0:	60b9      	str	r1, [r7, #8]
 8003cf2:	607a      	str	r2, [r7, #4]
	int8_t int_round_passed = 0;
 8003cf4:	2300      	movs	r3, #0
 8003cf6:	77fb      	strb	r3, [r7, #31]
	if (feedback_times[0] - feedback_times[1] >= 1) {
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681a      	ldr	r2, [r3, #0]
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	3304      	adds	r3, #4
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	429a      	cmp	r2, r3
 8003d04:	d02e      	beq.n	8003d64 <motor_calc_odometry+0x7c>
		float rounds_passed = (((float)(feedback_times[0] - feedback_times[1]) * motor_data->rpm)/(60 * TIMER_FREQ));
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681a      	ldr	r2, [r3, #0]
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	3304      	adds	r3, #4
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	1ad3      	subs	r3, r2, r3
 8003d12:	ee07 3a90 	vmov	s15, r3
 8003d16:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003d20:	ee07 3a90 	vmov	s15, r3
 8003d24:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003d28:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003d2c:	eddf 6a5c 	vldr	s13, [pc, #368]	; 8003ea0 <motor_calc_odometry+0x1b8>
 8003d30:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003d34:	edc7 7a06 	vstr	s15, [r7, #24]
		if (fabs(rounds_passed) >= 1) {
 8003d38:	edd7 7a06 	vldr	s15, [r7, #24]
 8003d3c:	eef0 7ae7 	vabs.f32	s15, s15
 8003d40:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003d44:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003d48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d4c:	db08      	blt.n	8003d60 <motor_calc_odometry+0x78>
			int_round_passed = rounds_passed;
 8003d4e:	edd7 7a06 	vldr	s15, [r7, #24]
 8003d52:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003d56:	edc7 7a00 	vstr	s15, [r7]
 8003d5a:	783b      	ldrb	r3, [r7, #0]
 8003d5c:	77fb      	strb	r3, [r7, #31]
 8003d5e:	e001      	b.n	8003d64 <motor_calc_odometry+0x7c>
		} else {
			int_round_passed = 0;
 8003d60:	2300      	movs	r3, #0
 8003d62:	77fb      	strb	r3, [r7, #31]
		}
	}
	int16_t abs_angle_diff;
	abs_angle_diff = motor_data->angle[0] - motor_data->angle[1];
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003d6a:	b29a      	uxth	r2, r3
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003d72:	b29b      	uxth	r3, r3
 8003d74:	1ad3      	subs	r3, r2, r3
 8003d76:	b29b      	uxth	r3, r3
 8003d78:	83bb      	strh	r3, [r7, #28]
	if (abs_angle_diff > 4096) {
 8003d7a:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8003d7e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d82:	dd05      	ble.n	8003d90 <motor_calc_odometry+0xa8>
		abs_angle_diff -= 8192;
 8003d84:	8bbb      	ldrh	r3, [r7, #28]
 8003d86:	f5a3 5300 	sub.w	r3, r3, #8192	; 0x2000
 8003d8a:	b29b      	uxth	r3, r3
 8003d8c:	83bb      	strh	r3, [r7, #28]
 8003d8e:	e009      	b.n	8003da4 <motor_calc_odometry+0xbc>
	} else if (abs_angle_diff < -4096) {
 8003d90:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8003d94:	f513 5f80 	cmn.w	r3, #4096	; 0x1000
 8003d98:	da04      	bge.n	8003da4 <motor_calc_odometry+0xbc>
		abs_angle_diff += 8192;
 8003d9a:	8bbb      	ldrh	r3, [r7, #28]
 8003d9c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003da0:	b29b      	uxth	r3, r3
 8003da2:	83bb      	strh	r3, [r7, #28]
	 } else {
	 abs_angle_diff = (8192-motor_data->angle[0]) - motor_data->angle[1];
	 }
	 }
	 */
	uint16_t gear_ticks = 8192 * angle_data->gearbox_ratio;
 8003da4:	68bb      	ldr	r3, [r7, #8]
 8003da6:	edd3 7a06 	vldr	s15, [r3, #24]
 8003daa:	ed9f 7a3e 	vldr	s14, [pc, #248]	; 8003ea4 <motor_calc_odometry+0x1bc>
 8003dae:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003db2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003db6:	ee17 3a90 	vmov	r3, s15
 8003dba:	82fb      	strh	r3, [r7, #22]
	angle_data->ticks += (int_round_passed * 8192) + abs_angle_diff;
 8003dbc:	68bb      	ldr	r3, [r7, #8]
 8003dbe:	681a      	ldr	r2, [r3, #0]
 8003dc0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003dc4:	0359      	lsls	r1, r3, #13
 8003dc6:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8003dca:	440b      	add	r3, r1
 8003dcc:	441a      	add	r2, r3
 8003dce:	68bb      	ldr	r3, [r7, #8]
 8003dd0:	601a      	str	r2, [r3, #0]
	angle_data->dist = angle_data->ticks * angle_data->wheel_circ / gear_ticks;
 8003dd2:	68bb      	ldr	r3, [r7, #8]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	ee07 3a90 	vmov	s15, r3
 8003dda:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003dde:	68bb      	ldr	r3, [r7, #8]
 8003de0:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8003de4:	ee67 6a27 	vmul.f32	s13, s14, s15
 8003de8:	8afb      	ldrh	r3, [r7, #22]
 8003dea:	ee07 3a90 	vmov	s15, r3
 8003dee:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003df2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003df6:	68bb      	ldr	r3, [r7, #8]
 8003df8:	edc3 7a08 	vstr	s15, [r3, #32]
	angle_data->adj_ang = (float) (angle_data->ticks % gear_ticks ) * 2*PI/gear_ticks;
 8003dfc:	68bb      	ldr	r3, [r7, #8]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	8afa      	ldrh	r2, [r7, #22]
 8003e02:	fb93 f1f2 	sdiv	r1, r3, r2
 8003e06:	fb01 f202 	mul.w	r2, r1, r2
 8003e0a:	1a9b      	subs	r3, r3, r2
 8003e0c:	ee07 3a90 	vmov	s15, r3
 8003e10:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003e14:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8003e18:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8003ea8 <motor_calc_odometry+0x1c0>
 8003e1c:	ee67 6a87 	vmul.f32	s13, s15, s14
 8003e20:	8afb      	ldrh	r3, [r7, #22]
 8003e22:	ee07 3a90 	vmov	s15, r3
 8003e26:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003e2a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003e2e:	68bb      	ldr	r3, [r7, #8]
 8003e30:	edc3 7a07 	vstr	s15, [r3, #28]
	angle_data->adj_ang = (angle_data->adj_ang > PI) ? (angle_data->adj_ang - 2*PI) : (angle_data->adj_ang < -PI) ? angle_data->adj_ang+2*PI : angle_data->adj_ang;
 8003e34:	68bb      	ldr	r3, [r7, #8]
 8003e36:	edd3 7a07 	vldr	s15, [r3, #28]
 8003e3a:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8003ea8 <motor_calc_odometry+0x1c0>
 8003e3e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003e42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e46:	dd07      	ble.n	8003e58 <motor_calc_odometry+0x170>
 8003e48:	68bb      	ldr	r3, [r7, #8]
 8003e4a:	edd3 7a07 	vldr	s15, [r3, #28]
 8003e4e:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8003eac <motor_calc_odometry+0x1c4>
 8003e52:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003e56:	e014      	b.n	8003e82 <motor_calc_odometry+0x19a>
 8003e58:	68bb      	ldr	r3, [r7, #8]
 8003e5a:	edd3 7a07 	vldr	s15, [r3, #28]
 8003e5e:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8003eb0 <motor_calc_odometry+0x1c8>
 8003e62:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003e66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e6a:	d507      	bpl.n	8003e7c <motor_calc_odometry+0x194>
 8003e6c:	68bb      	ldr	r3, [r7, #8]
 8003e6e:	edd3 7a07 	vldr	s15, [r3, #28]
 8003e72:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8003eac <motor_calc_odometry+0x1c4>
 8003e76:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003e7a:	e002      	b.n	8003e82 <motor_calc_odometry+0x19a>
 8003e7c:	68bb      	ldr	r3, [r7, #8]
 8003e7e:	edd3 7a07 	vldr	s15, [r3, #28]
 8003e82:	68bb      	ldr	r3, [r7, #8]
 8003e84:	edc3 7a07 	vstr	s15, [r3, #28]
	motor_data->angle[1] = motor_data->angle[0];
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	f9b3 2000 	ldrsh.w	r2, [r3]
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	805a      	strh	r2, [r3, #2]
}
 8003e92:	bf00      	nop
 8003e94:	3724      	adds	r7, #36	; 0x24
 8003e96:	46bd      	mov	sp, r7
 8003e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9c:	4770      	bx	lr
 8003e9e:	bf00      	nop
 8003ea0:	49127c00 	.word	0x49127c00
 8003ea4:	46000000 	.word	0x46000000
 8003ea8:	40490fdb 	.word	0x40490fdb
 8003eac:	40c90fdb 	.word	0x40c90fdb
 8003eb0:	c0490fdb 	.word	0xc0490fdb

08003eb4 <aimbot_hlf_ISR>:
uint8_t aimbot_start_frame;
/**
 * ISR function for receiving Xavier data
 *
 */
void aimbot_hlf_ISR(DMA_HandleTypeDef *hdma) {
 8003eb4:	b580      	push	{r7, lr}
 8003eb6:	b084      	sub	sp, #16
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	6078      	str	r0, [r7, #4]
	uint8_t time_gap = (HAL_GetTick() - aimbot_buffer.last_time > XAVIER_MSG_DELAY) ? 1 : 0;
 8003ebc:	f003 fdd0 	bl	8007a60 <HAL_GetTick>
 8003ec0:	4602      	mov	r2, r0
 8003ec2:	4b18      	ldr	r3, [pc, #96]	; (8003f24 <aimbot_hlf_ISR+0x70>)
 8003ec4:	69db      	ldr	r3, [r3, #28]
 8003ec6:	1ad3      	subs	r3, r2, r3
 8003ec8:	2b1e      	cmp	r3, #30
 8003eca:	bf8c      	ite	hi
 8003ecc:	2301      	movhi	r3, #1
 8003ece:	2300      	movls	r3, #0
 8003ed0:	b2db      	uxtb	r3, r3
 8003ed2:	73fb      	strb	r3, [r7, #15]
	append_buffer(&aimbot_buffer, aimbot_dma_buffer[0]);
 8003ed4:	4b14      	ldr	r3, [pc, #80]	; (8003f28 <aimbot_hlf_ISR+0x74>)
 8003ed6:	781b      	ldrb	r3, [r3, #0]
 8003ed8:	4619      	mov	r1, r3
 8003eda:	4812      	ldr	r0, [pc, #72]	; (8003f24 <aimbot_hlf_ISR+0x70>)
 8003edc:	f7fd f80a 	bl	8000ef4 <append_buffer>
	if (time_gap) {
 8003ee0:	7bfb      	ldrb	r3, [r7, #15]
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d005      	beq.n	8003ef2 <aimbot_hlf_ISR+0x3e>
		aimbot_start_frame = 255;
 8003ee6:	4b11      	ldr	r3, [pc, #68]	; (8003f2c <aimbot_hlf_ISR+0x78>)
 8003ee8:	22ff      	movs	r2, #255	; 0xff
 8003eea:	701a      	strb	r2, [r3, #0]
		aimbot_buffer.stored_bytes = 0;
 8003eec:	4b0d      	ldr	r3, [pc, #52]	; (8003f24 <aimbot_hlf_ISR+0x70>)
 8003eee:	2200      	movs	r2, #0
 8003ef0:	765a      	strb	r2, [r3, #25]
	}
	if (aimbot_dma_buffer[0] == AIMBOT_FRAME_HEADER) {
 8003ef2:	4b0d      	ldr	r3, [pc, #52]	; (8003f28 <aimbot_hlf_ISR+0x74>)
 8003ef4:	781b      	ldrb	r3, [r3, #0]
 8003ef6:	2b5a      	cmp	r3, #90	; 0x5a
 8003ef8:	d108      	bne.n	8003f0c <aimbot_hlf_ISR+0x58>
		aimbot_start_frame = aimbot_buffer.curr_byte-1;
 8003efa:	4b0a      	ldr	r3, [pc, #40]	; (8003f24 <aimbot_hlf_ISR+0x70>)
 8003efc:	7e1b      	ldrb	r3, [r3, #24]
 8003efe:	3b01      	subs	r3, #1
 8003f00:	b2da      	uxtb	r2, r3
 8003f02:	4b0a      	ldr	r3, [pc, #40]	; (8003f2c <aimbot_hlf_ISR+0x78>)
 8003f04:	701a      	strb	r2, [r3, #0]
		aimbot_buffer.stored_bytes = 1;
 8003f06:	4b07      	ldr	r3, [pc, #28]	; (8003f24 <aimbot_hlf_ISR+0x70>)
 8003f08:	2201      	movs	r2, #1
 8003f0a:	765a      	strb	r2, [r3, #25]
	}
	if (aimbot_buffer.stored_bytes >= AIMBOT_MSG_SIZE) {
 8003f0c:	4b05      	ldr	r3, [pc, #20]	; (8003f24 <aimbot_hlf_ISR+0x70>)
 8003f0e:	7e5b      	ldrb	r3, [r3, #25]
 8003f10:	2b07      	cmp	r3, #7
 8003f12:	d902      	bls.n	8003f1a <aimbot_hlf_ISR+0x66>
		process_aimbot_data(aimbot_proc_buffer);
 8003f14:	4806      	ldr	r0, [pc, #24]	; (8003f30 <aimbot_hlf_ISR+0x7c>)
 8003f16:	f000 f84d 	bl	8003fb4 <process_aimbot_data>
	}
}
 8003f1a:	bf00      	nop
 8003f1c:	3710      	adds	r7, #16
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	bd80      	pop	{r7, pc}
 8003f22:	bf00      	nop
 8003f24:	20001fc0 	.word	0x20001fc0
 8003f28:	20001fb4 	.word	0x20001fb4
 8003f2c:	20001fe4 	.word	0x20001fe4
 8003f30:	20001fb8 	.word	0x20001fb8

08003f34 <aimbot_ISR>:

void aimbot_ISR(DMA_HandleTypeDef *hdma) {
 8003f34:	b580      	push	{r7, lr}
 8003f36:	b084      	sub	sp, #16
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
	uint8_t time_gap = (HAL_GetTick() - aimbot_buffer.last_time > XAVIER_MSG_DELAY) ? 1 : 0;
 8003f3c:	f003 fd90 	bl	8007a60 <HAL_GetTick>
 8003f40:	4602      	mov	r2, r0
 8003f42:	4b18      	ldr	r3, [pc, #96]	; (8003fa4 <aimbot_ISR+0x70>)
 8003f44:	69db      	ldr	r3, [r3, #28]
 8003f46:	1ad3      	subs	r3, r2, r3
 8003f48:	2b1e      	cmp	r3, #30
 8003f4a:	bf8c      	ite	hi
 8003f4c:	2301      	movhi	r3, #1
 8003f4e:	2300      	movls	r3, #0
 8003f50:	b2db      	uxtb	r3, r3
 8003f52:	73fb      	strb	r3, [r7, #15]
	append_buffer(&aimbot_buffer, aimbot_dma_buffer[1]);
 8003f54:	4b14      	ldr	r3, [pc, #80]	; (8003fa8 <aimbot_ISR+0x74>)
 8003f56:	785b      	ldrb	r3, [r3, #1]
 8003f58:	4619      	mov	r1, r3
 8003f5a:	4812      	ldr	r0, [pc, #72]	; (8003fa4 <aimbot_ISR+0x70>)
 8003f5c:	f7fc ffca 	bl	8000ef4 <append_buffer>
	if (time_gap) {
 8003f60:	7bfb      	ldrb	r3, [r7, #15]
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d005      	beq.n	8003f72 <aimbot_ISR+0x3e>
		aimbot_start_frame = 255;
 8003f66:	4b11      	ldr	r3, [pc, #68]	; (8003fac <aimbot_ISR+0x78>)
 8003f68:	22ff      	movs	r2, #255	; 0xff
 8003f6a:	701a      	strb	r2, [r3, #0]
		aimbot_buffer.stored_bytes = 0;
 8003f6c:	4b0d      	ldr	r3, [pc, #52]	; (8003fa4 <aimbot_ISR+0x70>)
 8003f6e:	2200      	movs	r2, #0
 8003f70:	765a      	strb	r2, [r3, #25]
	}
	if (aimbot_dma_buffer[1] == AIMBOT_FRAME_HEADER) {
 8003f72:	4b0d      	ldr	r3, [pc, #52]	; (8003fa8 <aimbot_ISR+0x74>)
 8003f74:	785b      	ldrb	r3, [r3, #1]
 8003f76:	2b5a      	cmp	r3, #90	; 0x5a
 8003f78:	d108      	bne.n	8003f8c <aimbot_ISR+0x58>
			aimbot_start_frame = aimbot_buffer.curr_byte-1;
 8003f7a:	4b0a      	ldr	r3, [pc, #40]	; (8003fa4 <aimbot_ISR+0x70>)
 8003f7c:	7e1b      	ldrb	r3, [r3, #24]
 8003f7e:	3b01      	subs	r3, #1
 8003f80:	b2da      	uxtb	r2, r3
 8003f82:	4b0a      	ldr	r3, [pc, #40]	; (8003fac <aimbot_ISR+0x78>)
 8003f84:	701a      	strb	r2, [r3, #0]
			aimbot_buffer.stored_bytes = 1;
 8003f86:	4b07      	ldr	r3, [pc, #28]	; (8003fa4 <aimbot_ISR+0x70>)
 8003f88:	2201      	movs	r2, #1
 8003f8a:	765a      	strb	r2, [r3, #25]
		}
	if (aimbot_buffer.stored_bytes >= AIMBOT_MSG_SIZE) {
 8003f8c:	4b05      	ldr	r3, [pc, #20]	; (8003fa4 <aimbot_ISR+0x70>)
 8003f8e:	7e5b      	ldrb	r3, [r3, #25]
 8003f90:	2b07      	cmp	r3, #7
 8003f92:	d902      	bls.n	8003f9a <aimbot_ISR+0x66>
		process_aimbot_data(aimbot_proc_buffer);
 8003f94:	4806      	ldr	r0, [pc, #24]	; (8003fb0 <aimbot_ISR+0x7c>)
 8003f96:	f000 f80d 	bl	8003fb4 <process_aimbot_data>
	}
}
 8003f9a:	bf00      	nop
 8003f9c:	3710      	adds	r7, #16
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	bd80      	pop	{r7, pc}
 8003fa2:	bf00      	nop
 8003fa4:	20001fc0 	.word	0x20001fc0
 8003fa8:	20001fb4 	.word	0x20001fb4
 8003fac:	20001fe4 	.word	0x20001fe4
 8003fb0:	20001fb8 	.word	0x20001fb8

08003fb4 <process_aimbot_data>:
//


void process_aimbot_data()
{
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	b082      	sub	sp, #8
 8003fb8:	af00      	add	r7, sp, #0
	if (aimbot_buffer.stored_bytes >= AIMBOT_MSG_SIZE) {
 8003fba:	4b4b      	ldr	r3, [pc, #300]	; (80040e8 <process_aimbot_data+0x134>)
 8003fbc:	7e5b      	ldrb	r3, [r3, #25]
 8003fbe:	2b07      	cmp	r3, #7
 8003fc0:	d93c      	bls.n	800403c <process_aimbot_data+0x88>
		if (aimbot_buffer.curr_byte > aimbot_start_frame) {
 8003fc2:	4b49      	ldr	r3, [pc, #292]	; (80040e8 <process_aimbot_data+0x134>)
 8003fc4:	7e1a      	ldrb	r2, [r3, #24]
 8003fc6:	4b49      	ldr	r3, [pc, #292]	; (80040ec <process_aimbot_data+0x138>)
 8003fc8:	781b      	ldrb	r3, [r3, #0]
 8003fca:	429a      	cmp	r2, r3
 8003fcc:	d915      	bls.n	8003ffa <process_aimbot_data+0x46>
			if(aimbot_buffer.curr_byte - aimbot_start_frame >= AIMBOT_MSG_SIZE) {
 8003fce:	4b46      	ldr	r3, [pc, #280]	; (80040e8 <process_aimbot_data+0x134>)
 8003fd0:	7e1b      	ldrb	r3, [r3, #24]
 8003fd2:	461a      	mov	r2, r3
 8003fd4:	4b45      	ldr	r3, [pc, #276]	; (80040ec <process_aimbot_data+0x138>)
 8003fd6:	781b      	ldrb	r3, [r3, #0]
 8003fd8:	1ad3      	subs	r3, r2, r3
 8003fda:	2b07      	cmp	r3, #7
 8003fdc:	dd09      	ble.n	8003ff2 <process_aimbot_data+0x3e>
			memcpy(aimbot_proc_buffer, aimbot_buffer.buffer + aimbot_start_frame, AIMBOT_MSG_SIZE);
 8003fde:	4b43      	ldr	r3, [pc, #268]	; (80040ec <process_aimbot_data+0x138>)
 8003fe0:	781b      	ldrb	r3, [r3, #0]
 8003fe2:	461a      	mov	r2, r3
 8003fe4:	4b40      	ldr	r3, [pc, #256]	; (80040e8 <process_aimbot_data+0x134>)
 8003fe6:	441a      	add	r2, r3
 8003fe8:	4b41      	ldr	r3, [pc, #260]	; (80040f0 <process_aimbot_data+0x13c>)
 8003fea:	6810      	ldr	r0, [r2, #0]
 8003fec:	6851      	ldr	r1, [r2, #4]
 8003fee:	c303      	stmia	r3!, {r0, r1}
 8003ff0:	e028      	b.n	8004044 <process_aimbot_data+0x90>
			} else {
				aimbot_buffer.stored_bytes = 0;
 8003ff2:	4b3d      	ldr	r3, [pc, #244]	; (80040e8 <process_aimbot_data+0x134>)
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	765a      	strb	r2, [r3, #25]
				return;
 8003ff8:	e072      	b.n	80040e0 <process_aimbot_data+0x12c>
			}
		} else {
			uint8_t data_offset = BUFFER_SIZE - aimbot_start_frame;
 8003ffa:	4b3c      	ldr	r3, [pc, #240]	; (80040ec <process_aimbot_data+0x138>)
 8003ffc:	781b      	ldrb	r3, [r3, #0]
 8003ffe:	f1c3 0318 	rsb	r3, r3, #24
 8004002:	71fb      	strb	r3, [r7, #7]
			if (data_offset >= AIMBOT_MSG_SIZE) {
 8004004:	79fb      	ldrb	r3, [r7, #7]
 8004006:	2b07      	cmp	r3, #7
 8004008:	d903      	bls.n	8004012 <process_aimbot_data+0x5e>
				aimbot_buffer.stored_bytes = 0;
 800400a:	4b37      	ldr	r3, [pc, #220]	; (80040e8 <process_aimbot_data+0x134>)
 800400c:	2200      	movs	r2, #0
 800400e:	765a      	strb	r2, [r3, #25]
				return;
 8004010:	e066      	b.n	80040e0 <process_aimbot_data+0x12c>
			}
			memcpy(aimbot_proc_buffer, aimbot_buffer.buffer+aimbot_start_frame, data_offset);
 8004012:	4b36      	ldr	r3, [pc, #216]	; (80040ec <process_aimbot_data+0x138>)
 8004014:	781b      	ldrb	r3, [r3, #0]
 8004016:	461a      	mov	r2, r3
 8004018:	4b33      	ldr	r3, [pc, #204]	; (80040e8 <process_aimbot_data+0x134>)
 800401a:	4413      	add	r3, r2
 800401c:	79fa      	ldrb	r2, [r7, #7]
 800401e:	4619      	mov	r1, r3
 8004020:	4833      	ldr	r0, [pc, #204]	; (80040f0 <process_aimbot_data+0x13c>)
 8004022:	f010 fe23 	bl	8014c6c <memcpy>
			memcpy(aimbot_proc_buffer + data_offset, aimbot_buffer.buffer, AIMBOT_MSG_SIZE - data_offset);
 8004026:	79fb      	ldrb	r3, [r7, #7]
 8004028:	4a31      	ldr	r2, [pc, #196]	; (80040f0 <process_aimbot_data+0x13c>)
 800402a:	1898      	adds	r0, r3, r2
 800402c:	79fb      	ldrb	r3, [r7, #7]
 800402e:	f1c3 0308 	rsb	r3, r3, #8
 8004032:	461a      	mov	r2, r3
 8004034:	492c      	ldr	r1, [pc, #176]	; (80040e8 <process_aimbot_data+0x134>)
 8004036:	f010 fe19 	bl	8014c6c <memcpy>
 800403a:	e003      	b.n	8004044 <process_aimbot_data+0x90>
		}
	} else {
		aimbot_buffer.stored_bytes = 0;
 800403c:	4b2a      	ldr	r3, [pc, #168]	; (80040e8 <process_aimbot_data+0x134>)
 800403e:	2200      	movs	r2, #0
 8004040:	765a      	strb	r2, [r3, #25]
		return;
 8004042:	e04d      	b.n	80040e0 <process_aimbot_data+0x12c>
	}
	aimbot_data.frame_header = aimbot_proc_buffer[0];
 8004044:	4b2a      	ldr	r3, [pc, #168]	; (80040f0 <process_aimbot_data+0x13c>)
 8004046:	781a      	ldrb	r2, [r3, #0]
 8004048:	4b2a      	ldr	r3, [pc, #168]	; (80040f4 <process_aimbot_data+0x140>)
 800404a:	701a      	strb	r2, [r3, #0]
	aimbot_data.x_pos = ((aimbot_proc_buffer[2] << 8) | aimbot_proc_buffer[3]);
 800404c:	4b28      	ldr	r3, [pc, #160]	; (80040f0 <process_aimbot_data+0x13c>)
 800404e:	789b      	ldrb	r3, [r3, #2]
 8004050:	021b      	lsls	r3, r3, #8
 8004052:	b21a      	sxth	r2, r3
 8004054:	4b26      	ldr	r3, [pc, #152]	; (80040f0 <process_aimbot_data+0x13c>)
 8004056:	78db      	ldrb	r3, [r3, #3]
 8004058:	b21b      	sxth	r3, r3
 800405a:	4313      	orrs	r3, r2
 800405c:	b21a      	sxth	r2, r3
 800405e:	4b25      	ldr	r3, [pc, #148]	; (80040f4 <process_aimbot_data+0x140>)
 8004060:	809a      	strh	r2, [r3, #4]
	aimbot_data.y_pos = (aimbot_proc_buffer[4] << 8) | aimbot_proc_buffer[5];
 8004062:	4b23      	ldr	r3, [pc, #140]	; (80040f0 <process_aimbot_data+0x13c>)
 8004064:	791b      	ldrb	r3, [r3, #4]
 8004066:	021b      	lsls	r3, r3, #8
 8004068:	b21a      	sxth	r2, r3
 800406a:	4b21      	ldr	r3, [pc, #132]	; (80040f0 <process_aimbot_data+0x13c>)
 800406c:	795b      	ldrb	r3, [r3, #5]
 800406e:	b21b      	sxth	r3, r3
 8004070:	4313      	orrs	r3, r2
 8004072:	b21a      	sxth	r2, r3
 8004074:	4b1f      	ldr	r3, [pc, #124]	; (80040f4 <process_aimbot_data+0x140>)
 8004076:	805a      	strh	r2, [r3, #2]
	aimbot_data.end_check = aimbot_proc_buffer[7];
 8004078:	4b1d      	ldr	r3, [pc, #116]	; (80040f0 <process_aimbot_data+0x13c>)
 800407a:	79da      	ldrb	r2, [r3, #7]
 800407c:	4b1d      	ldr	r3, [pc, #116]	; (80040f4 <process_aimbot_data+0x140>)
 800407e:	741a      	strb	r2, [r3, #16]
	aimbot_buffer.stored_bytes = 0;
 8004080:	4b19      	ldr	r3, [pc, #100]	; (80040e8 <process_aimbot_data+0x134>)
 8004082:	2200      	movs	r2, #0
 8004084:	765a      	strb	r2, [r3, #25]
	if (aimbot_data.frame_header != AIMBOT_FRAME_HEADER || aimbot_data.end_check != AIMBOT_FRAME_END) {
 8004086:	4b1b      	ldr	r3, [pc, #108]	; (80040f4 <process_aimbot_data+0x140>)
 8004088:	781b      	ldrb	r3, [r3, #0]
 800408a:	2b5a      	cmp	r3, #90	; 0x5a
 800408c:	d103      	bne.n	8004096 <process_aimbot_data+0xe2>
 800408e:	4b19      	ldr	r3, [pc, #100]	; (80040f4 <process_aimbot_data+0x140>)
 8004090:	7c1b      	ldrb	r3, [r3, #16]
 8004092:	2b69      	cmp	r3, #105	; 0x69
 8004094:	d006      	beq.n	80040a4 <process_aimbot_data+0xf0>
		aimbot_data.y_pos = 0;
 8004096:	4b17      	ldr	r3, [pc, #92]	; (80040f4 <process_aimbot_data+0x140>)
 8004098:	2200      	movs	r2, #0
 800409a:	805a      	strh	r2, [r3, #2]
		aimbot_data.x_pos = 0;
 800409c:	4b15      	ldr	r3, [pc, #84]	; (80040f4 <process_aimbot_data+0x140>)
 800409e:	2200      	movs	r2, #0
 80040a0:	809a      	strh	r2, [r3, #4]
 80040a2:	e019      	b.n	80040d8 <process_aimbot_data+0x124>
	} else {
		aimbot_data.y_pos -= 500;
 80040a4:	4b13      	ldr	r3, [pc, #76]	; (80040f4 <process_aimbot_data+0x140>)
 80040a6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80040aa:	b29b      	uxth	r3, r3
 80040ac:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 80040b0:	b29b      	uxth	r3, r3
 80040b2:	b21a      	sxth	r2, r3
 80040b4:	4b0f      	ldr	r3, [pc, #60]	; (80040f4 <process_aimbot_data+0x140>)
 80040b6:	805a      	strh	r2, [r3, #2]
		aimbot_data.x_pos -= 500;
 80040b8:	4b0e      	ldr	r3, [pc, #56]	; (80040f4 <process_aimbot_data+0x140>)
 80040ba:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80040be:	b29b      	uxth	r3, r3
 80040c0:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 80040c4:	b29b      	uxth	r3, r3
 80040c6:	b21a      	sxth	r2, r3
 80040c8:	4b0a      	ldr	r3, [pc, #40]	; (80040f4 <process_aimbot_data+0x140>)
 80040ca:	809a      	strh	r2, [r3, #4]
		aimbot_data.last_time = HAL_GetTick();
 80040cc:	f003 fcc8 	bl	8007a60 <HAL_GetTick>
 80040d0:	4603      	mov	r3, r0
 80040d2:	4a08      	ldr	r2, [pc, #32]	; (80040f4 <process_aimbot_data+0x140>)
 80040d4:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
	}
	status_led(1, on_led);
 80040d8:	2100      	movs	r1, #0
 80040da:	2001      	movs	r0, #1
 80040dc:	f7fd fcea 	bl	8001ab4 <status_led>
}
 80040e0:	3708      	adds	r7, #8
 80040e2:	46bd      	mov	sp, r7
 80040e4:	bd80      	pop	{r7, pc}
 80040e6:	bf00      	nop
 80040e8:	20001fc0 	.word	0x20001fc0
 80040ec:	20001fe4 	.word	0x20001fe4
 80040f0:	20001fb8 	.word	0x20001fb8
 80040f4:	20001f24 	.word	0x20001f24

080040f8 <dbus_remote_ISR>:


void dbus_remote_ISR(DMA_HandleTypeDef *hdma) {
 80040f8:	b580      	push	{r7, lr}
 80040fa:	b084      	sub	sp, #16
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]
	remote_cmd.right_x = (remote_raw_data[0] | remote_raw_data[1] << 8) & 0x07FF;
 8004100:	4b7e      	ldr	r3, [pc, #504]	; (80042fc <dbus_remote_ISR+0x204>)
 8004102:	781b      	ldrb	r3, [r3, #0]
 8004104:	b21a      	sxth	r2, r3
 8004106:	4b7d      	ldr	r3, [pc, #500]	; (80042fc <dbus_remote_ISR+0x204>)
 8004108:	785b      	ldrb	r3, [r3, #1]
 800410a:	021b      	lsls	r3, r3, #8
 800410c:	b21b      	sxth	r3, r3
 800410e:	4313      	orrs	r3, r2
 8004110:	b21b      	sxth	r3, r3
 8004112:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004116:	b21a      	sxth	r2, r3
 8004118:	4b79      	ldr	r3, [pc, #484]	; (8004300 <dbus_remote_ISR+0x208>)
 800411a:	801a      	strh	r2, [r3, #0]
	remote_cmd.right_x -= JOYSTICK_OFFSET;
 800411c:	4b78      	ldr	r3, [pc, #480]	; (8004300 <dbus_remote_ISR+0x208>)
 800411e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004122:	b29b      	uxth	r3, r3
 8004124:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8004128:	b29b      	uxth	r3, r3
 800412a:	b21a      	sxth	r2, r3
 800412c:	4b74      	ldr	r3, [pc, #464]	; (8004300 <dbus_remote_ISR+0x208>)
 800412e:	801a      	strh	r2, [r3, #0]
	remote_cmd.right_y = (remote_raw_data[1] >> 3 | remote_raw_data[2] << 5) & 0x07FF;
 8004130:	4b72      	ldr	r3, [pc, #456]	; (80042fc <dbus_remote_ISR+0x204>)
 8004132:	785b      	ldrb	r3, [r3, #1]
 8004134:	08db      	lsrs	r3, r3, #3
 8004136:	b2db      	uxtb	r3, r3
 8004138:	b21a      	sxth	r2, r3
 800413a:	4b70      	ldr	r3, [pc, #448]	; (80042fc <dbus_remote_ISR+0x204>)
 800413c:	789b      	ldrb	r3, [r3, #2]
 800413e:	015b      	lsls	r3, r3, #5
 8004140:	b21b      	sxth	r3, r3
 8004142:	4313      	orrs	r3, r2
 8004144:	b21b      	sxth	r3, r3
 8004146:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800414a:	b21a      	sxth	r2, r3
 800414c:	4b6c      	ldr	r3, [pc, #432]	; (8004300 <dbus_remote_ISR+0x208>)
 800414e:	805a      	strh	r2, [r3, #2]
	remote_cmd.right_y -= JOYSTICK_OFFSET;
 8004150:	4b6b      	ldr	r3, [pc, #428]	; (8004300 <dbus_remote_ISR+0x208>)
 8004152:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004156:	b29b      	uxth	r3, r3
 8004158:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 800415c:	b29b      	uxth	r3, r3
 800415e:	b21a      	sxth	r2, r3
 8004160:	4b67      	ldr	r3, [pc, #412]	; (8004300 <dbus_remote_ISR+0x208>)
 8004162:	805a      	strh	r2, [r3, #2]
	remote_cmd.left_x = (remote_raw_data[2] >> 6 | remote_raw_data[3] << 2
 8004164:	4b65      	ldr	r3, [pc, #404]	; (80042fc <dbus_remote_ISR+0x204>)
 8004166:	789b      	ldrb	r3, [r3, #2]
 8004168:	099b      	lsrs	r3, r3, #6
 800416a:	b2db      	uxtb	r3, r3
 800416c:	b21a      	sxth	r2, r3
 800416e:	4b63      	ldr	r3, [pc, #396]	; (80042fc <dbus_remote_ISR+0x204>)
 8004170:	78db      	ldrb	r3, [r3, #3]
 8004172:	009b      	lsls	r3, r3, #2
 8004174:	b21b      	sxth	r3, r3
 8004176:	4313      	orrs	r3, r2
 8004178:	b21a      	sxth	r2, r3
			| remote_raw_data[4] << 10) & 0x07FF;
 800417a:	4b60      	ldr	r3, [pc, #384]	; (80042fc <dbus_remote_ISR+0x204>)
 800417c:	791b      	ldrb	r3, [r3, #4]
 800417e:	029b      	lsls	r3, r3, #10
 8004180:	b21b      	sxth	r3, r3
 8004182:	4313      	orrs	r3, r2
 8004184:	b21b      	sxth	r3, r3
 8004186:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800418a:	b21a      	sxth	r2, r3
	remote_cmd.left_x = (remote_raw_data[2] >> 6 | remote_raw_data[3] << 2
 800418c:	4b5c      	ldr	r3, [pc, #368]	; (8004300 <dbus_remote_ISR+0x208>)
 800418e:	809a      	strh	r2, [r3, #4]
	remote_cmd.left_x -= JOYSTICK_OFFSET;
 8004190:	4b5b      	ldr	r3, [pc, #364]	; (8004300 <dbus_remote_ISR+0x208>)
 8004192:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8004196:	b29b      	uxth	r3, r3
 8004198:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 800419c:	b29b      	uxth	r3, r3
 800419e:	b21a      	sxth	r2, r3
 80041a0:	4b57      	ldr	r3, [pc, #348]	; (8004300 <dbus_remote_ISR+0x208>)
 80041a2:	809a      	strh	r2, [r3, #4]
	remote_cmd.left_y = (remote_raw_data[4] >> 1 | remote_raw_data[5] << 7) & 0x07FF;
 80041a4:	4b55      	ldr	r3, [pc, #340]	; (80042fc <dbus_remote_ISR+0x204>)
 80041a6:	791b      	ldrb	r3, [r3, #4]
 80041a8:	085b      	lsrs	r3, r3, #1
 80041aa:	b2db      	uxtb	r3, r3
 80041ac:	b21a      	sxth	r2, r3
 80041ae:	4b53      	ldr	r3, [pc, #332]	; (80042fc <dbus_remote_ISR+0x204>)
 80041b0:	795b      	ldrb	r3, [r3, #5]
 80041b2:	01db      	lsls	r3, r3, #7
 80041b4:	b21b      	sxth	r3, r3
 80041b6:	4313      	orrs	r3, r2
 80041b8:	b21b      	sxth	r3, r3
 80041ba:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80041be:	b21a      	sxth	r2, r3
 80041c0:	4b4f      	ldr	r3, [pc, #316]	; (8004300 <dbus_remote_ISR+0x208>)
 80041c2:	80da      	strh	r2, [r3, #6]
	remote_cmd.left_y -= JOYSTICK_OFFSET;
 80041c4:	4b4e      	ldr	r3, [pc, #312]	; (8004300 <dbus_remote_ISR+0x208>)
 80041c6:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80041ca:	b29b      	uxth	r3, r3
 80041cc:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 80041d0:	b29b      	uxth	r3, r3
 80041d2:	b21a      	sxth	r2, r3
 80041d4:	4b4a      	ldr	r3, [pc, #296]	; (8004300 <dbus_remote_ISR+0x208>)
 80041d6:	80da      	strh	r2, [r3, #6]
	//Left switch position
	remote_cmd.left_switch = ((remote_raw_data[5] >> 4) & 0x000C) >> 2;
 80041d8:	4b48      	ldr	r3, [pc, #288]	; (80042fc <dbus_remote_ISR+0x204>)
 80041da:	795b      	ldrb	r3, [r3, #5]
 80041dc:	091b      	lsrs	r3, r3, #4
 80041de:	b2db      	uxtb	r3, r3
 80041e0:	109b      	asrs	r3, r3, #2
 80041e2:	b25b      	sxtb	r3, r3
 80041e4:	f003 0303 	and.w	r3, r3, #3
 80041e8:	b25a      	sxtb	r2, r3
 80041ea:	4b45      	ldr	r3, [pc, #276]	; (8004300 <dbus_remote_ISR+0x208>)
 80041ec:	721a      	strb	r2, [r3, #8]
	remote_cmd.right_switch = (remote_raw_data[5] >> 4) & 0x0003;
 80041ee:	4b43      	ldr	r3, [pc, #268]	; (80042fc <dbus_remote_ISR+0x204>)
 80041f0:	795b      	ldrb	r3, [r3, #5]
 80041f2:	091b      	lsrs	r3, r3, #4
 80041f4:	b2db      	uxtb	r3, r3
 80041f6:	b25b      	sxtb	r3, r3
 80041f8:	f003 0303 	and.w	r3, r3, #3
 80041fc:	b25a      	sxtb	r2, r3
 80041fe:	4b40      	ldr	r3, [pc, #256]	; (8004300 <dbus_remote_ISR+0x208>)
 8004200:	725a      	strb	r2, [r3, #9]
	remote_cmd.mouse_x = ((int16_t) remote_raw_data[6] | ((int16_t) remote_raw_data[7] << 8));
 8004202:	4b3e      	ldr	r3, [pc, #248]	; (80042fc <dbus_remote_ISR+0x204>)
 8004204:	799b      	ldrb	r3, [r3, #6]
 8004206:	b21a      	sxth	r2, r3
 8004208:	4b3c      	ldr	r3, [pc, #240]	; (80042fc <dbus_remote_ISR+0x204>)
 800420a:	79db      	ldrb	r3, [r3, #7]
 800420c:	021b      	lsls	r3, r3, #8
 800420e:	b21b      	sxth	r3, r3
 8004210:	4313      	orrs	r3, r2
 8004212:	b21a      	sxth	r2, r3
 8004214:	4b3a      	ldr	r3, [pc, #232]	; (8004300 <dbus_remote_ISR+0x208>)
 8004216:	815a      	strh	r2, [r3, #10]
	remote_cmd.mouse_y = ((int16_t) remote_raw_data[8] | ((int16_t) remote_raw_data[9] << 8));
 8004218:	4b38      	ldr	r3, [pc, #224]	; (80042fc <dbus_remote_ISR+0x204>)
 800421a:	7a1b      	ldrb	r3, [r3, #8]
 800421c:	b21a      	sxth	r2, r3
 800421e:	4b37      	ldr	r3, [pc, #220]	; (80042fc <dbus_remote_ISR+0x204>)
 8004220:	7a5b      	ldrb	r3, [r3, #9]
 8004222:	021b      	lsls	r3, r3, #8
 8004224:	b21b      	sxth	r3, r3
 8004226:	4313      	orrs	r3, r2
 8004228:	b21a      	sxth	r2, r3
 800422a:	4b35      	ldr	r3, [pc, #212]	; (8004300 <dbus_remote_ISR+0x208>)
 800422c:	819a      	strh	r2, [r3, #12]
	remote_cmd.mouse_z = ((int16_t) remote_raw_data[10] | ((int16_t) remote_raw_data[11] << 8));
 800422e:	4b33      	ldr	r3, [pc, #204]	; (80042fc <dbus_remote_ISR+0x204>)
 8004230:	7a9b      	ldrb	r3, [r3, #10]
 8004232:	b21a      	sxth	r2, r3
 8004234:	4b31      	ldr	r3, [pc, #196]	; (80042fc <dbus_remote_ISR+0x204>)
 8004236:	7adb      	ldrb	r3, [r3, #11]
 8004238:	021b      	lsls	r3, r3, #8
 800423a:	b21b      	sxth	r3, r3
 800423c:	4313      	orrs	r3, r2
 800423e:	b21a      	sxth	r2, r3
 8004240:	4b2f      	ldr	r3, [pc, #188]	; (8004300 <dbus_remote_ISR+0x208>)
 8004242:	81da      	strh	r2, [r3, #14]
	remote_cmd.mouse_left = (remote_raw_data[12]);
 8004244:	4b2d      	ldr	r3, [pc, #180]	; (80042fc <dbus_remote_ISR+0x204>)
 8004246:	7b1b      	ldrb	r3, [r3, #12]
 8004248:	b25a      	sxtb	r2, r3
 800424a:	4b2d      	ldr	r3, [pc, #180]	; (8004300 <dbus_remote_ISR+0x208>)
 800424c:	761a      	strb	r2, [r3, #24]
	remote_cmd.mouse_right = (remote_raw_data[13]);
 800424e:	4b2b      	ldr	r3, [pc, #172]	; (80042fc <dbus_remote_ISR+0x204>)
 8004250:	7b5b      	ldrb	r3, [r3, #13]
 8004252:	b25a      	sxtb	r2, r3
 8004254:	4b2a      	ldr	r3, [pc, #168]	; (8004300 <dbus_remote_ISR+0x208>)
 8004256:	765a      	strb	r2, [r3, #25]
	remote_cmd.keyboard_keys = (remote_raw_data[14]);
 8004258:	4b28      	ldr	r3, [pc, #160]	; (80042fc <dbus_remote_ISR+0x204>)
 800425a:	7b9b      	ldrb	r3, [r3, #14]
 800425c:	b29a      	uxth	r2, r3
 800425e:	4b28      	ldr	r3, [pc, #160]	; (8004300 <dbus_remote_ISR+0x208>)
 8004260:	835a      	strh	r2, [r3, #26]
	remote_cmd.side_dial = ((int16_t) remote_raw_data[16]) | ((int16_t) remote_raw_data[17] << 8);
 8004262:	4b26      	ldr	r3, [pc, #152]	; (80042fc <dbus_remote_ISR+0x204>)
 8004264:	7c1b      	ldrb	r3, [r3, #16]
 8004266:	b21a      	sxth	r2, r3
 8004268:	4b24      	ldr	r3, [pc, #144]	; (80042fc <dbus_remote_ISR+0x204>)
 800426a:	7c5b      	ldrb	r3, [r3, #17]
 800426c:	021b      	lsls	r3, r3, #8
 800426e:	b21b      	sxth	r3, r3
 8004270:	4313      	orrs	r3, r2
 8004272:	b21a      	sxth	r2, r3
 8004274:	4b22      	ldr	r3, [pc, #136]	; (8004300 <dbus_remote_ISR+0x208>)
 8004276:	839a      	strh	r2, [r3, #28]
	remote_cmd.side_dial -= JOYSTICK_OFFSET;
 8004278:	4b21      	ldr	r3, [pc, #132]	; (8004300 <dbus_remote_ISR+0x208>)
 800427a:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 800427e:	b29b      	uxth	r3, r3
 8004280:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8004284:	b29b      	uxth	r3, r3
 8004286:	b21a      	sxth	r2, r3
 8004288:	4b1d      	ldr	r3, [pc, #116]	; (8004300 <dbus_remote_ISR+0x208>)
 800428a:	839a      	strh	r2, [r3, #28]
	remote_cmd.last_time = HAL_GetTick();
 800428c:	f003 fbe8 	bl	8007a60 <HAL_GetTick>
 8004290:	4603      	mov	r3, r0
 8004292:	4a1b      	ldr	r2, [pc, #108]	; (8004300 <dbus_remote_ISR+0x208>)
 8004294:	6213      	str	r3, [r2, #32]
	if ((remote_cmd.keyboard_keys & KEY_OFFSET_Q) && (remote_cmd.keyboard_keys & KEY_OFFSET_SHIFT)
 8004296:	4b1a      	ldr	r3, [pc, #104]	; (8004300 <dbus_remote_ISR+0x208>)
 8004298:	8b5b      	ldrh	r3, [r3, #26]
 800429a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d012      	beq.n	80042c8 <dbus_remote_ISR+0x1d0>
 80042a2:	4b17      	ldr	r3, [pc, #92]	; (8004300 <dbus_remote_ISR+0x208>)
 80042a4:	8b5b      	ldrh	r3, [r3, #26]
 80042a6:	f003 0310 	and.w	r3, r3, #16
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d00c      	beq.n	80042c8 <dbus_remote_ISR+0x1d0>
			&& (remote_cmd.keyboard_keys & KEY_OFFSET_CTRL)) {
 80042ae:	4b14      	ldr	r3, [pc, #80]	; (8004300 <dbus_remote_ISR+0x208>)
 80042b0:	8b5b      	ldrh	r3, [r3, #26]
 80042b2:	f003 0320 	and.w	r3, r3, #32
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d006      	beq.n	80042c8 <dbus_remote_ISR+0x1d0>
		control_mode = 1 - control_mode;
 80042ba:	4b12      	ldr	r3, [pc, #72]	; (8004304 <dbus_remote_ISR+0x20c>)
 80042bc:	781b      	ldrb	r3, [r3, #0]
 80042be:	f1c3 0301 	rsb	r3, r3, #1
 80042c2:	b2da      	uxtb	r2, r3
 80042c4:	4b0f      	ldr	r3, [pc, #60]	; (8004304 <dbus_remote_ISR+0x20c>)
 80042c6:	701a      	strb	r2, [r3, #0]
	}

	BaseType_t xHigherPriorityTaskWoken;
	xHigherPriorityTaskWoken = pdFALSE;
 80042c8:	2300      	movs	r3, #0
 80042ca:	60fb      	str	r3, [r7, #12]
	vTaskNotifyGiveFromISR(control_input_task_handle, &xHigherPriorityTaskWoken);
 80042cc:	4b0e      	ldr	r3, [pc, #56]	; (8004308 <dbus_remote_ISR+0x210>)
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f107 020c 	add.w	r2, r7, #12
 80042d4:	4611      	mov	r1, r2
 80042d6:	4618      	mov	r0, r3
 80042d8:	f00e feae 	bl	8013038 <vTaskNotifyGiveFromISR>
	portYIELD_FROM_ISR(xHigherPriorityTaskWoken)
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d007      	beq.n	80042f2 <dbus_remote_ISR+0x1fa>
 80042e2:	4b0a      	ldr	r3, [pc, #40]	; (800430c <dbus_remote_ISR+0x214>)
 80042e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80042e8:	601a      	str	r2, [r3, #0]
 80042ea:	f3bf 8f4f 	dsb	sy
 80042ee:	f3bf 8f6f 	isb	sy
}
 80042f2:	bf00      	nop
 80042f4:	3710      	adds	r7, #16
 80042f6:	46bd      	mov	sp, r7
 80042f8:	bd80      	pop	{r7, pc}
 80042fa:	bf00      	nop
 80042fc:	20000234 	.word	0x20000234
 8004300:	20001ef0 	.word	0x20001ef0
 8004304:	20001fac 	.word	0x20001fac
 8004308:	200002fc 	.word	0x200002fc
 800430c:	e000ed04 	.word	0xe000ed04

08004310 <control_input_task>:

void control_input_task(void *argument) {
 8004310:	b580      	push	{r7, lr}
 8004312:	b084      	sub	sp, #16
 8004314:	af00      	add	r7, sp, #0
 8004316:	6078      	str	r0, [r7, #4]
	TickType_t start_time;
	control_reset();
 8004318:	f000 f84e 	bl	80043b8 <control_reset>
	buffer_init(&aimbot_buffer);
 800431c:	4821      	ldr	r0, [pc, #132]	; (80043a4 <control_input_task+0x94>)
 800431e:	f7fc fe17 	bl	8000f50 <buffer_init>
	xavier_usart_start(aimbot_dma_buffer, 2);
 8004322:	2102      	movs	r1, #2
 8004324:	4820      	ldr	r0, [pc, #128]	; (80043a8 <control_input_task+0x98>)
 8004326:	f7fd fc67 	bl	8001bf8 <xavier_usart_start>

	dbus_remote_start(remote_raw_data);
 800432a:	4820      	ldr	r0, [pc, #128]	; (80043ac <control_input_task+0x9c>)
 800432c:	f7fc fee6 	bl	80010fc <dbus_remote_start>
	while (1) {
		uint8_t rc_check = ulTaskNotifyTake(pdTRUE, 500);
 8004330:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8004334:	2001      	movs	r0, #1
 8004336:	f00e fe33 	bl	8012fa0 <ulTaskNotifyTake>
 800433a:	4603      	mov	r3, r0
 800433c:	73fb      	strb	r3, [r7, #15]
		if (rc_check) {
 800433e:	7bfb      	ldrb	r3, [r7, #15]
 8004340:	2b00      	cmp	r3, #0
 8004342:	d023      	beq.n	800438c <control_input_task+0x7c>
			status_led(1, on_led);
 8004344:	2100      	movs	r1, #0
 8004346:	2001      	movs	r0, #1
 8004348:	f7fd fbb4 	bl	8001ab4 <status_led>
			start_time = xTaskGetTickCount();
 800434c:	f00e f978 	bl	8012640 <xTaskGetTickCount>
 8004350:	4603      	mov	r3, r0
 8004352:	60bb      	str	r3, [r7, #8]
			if (remote_cmd.right_switch == all_off) {
 8004354:	4b16      	ldr	r3, [pc, #88]	; (80043b0 <control_input_task+0xa0>)
 8004356:	f993 3009 	ldrsb.w	r3, [r3, #9]
 800435a:	2b01      	cmp	r3, #1
 800435c:	d10d      	bne.n	800437a <control_input_task+0x6a>
				kill_can();
 800435e:	f002 fdb1 	bl	8006ec4 <kill_can>
				control_reset();
 8004362:	f000 f829 	bl	80043b8 <control_reset>
				safety_toggle = 0;
 8004366:	4b13      	ldr	r3, [pc, #76]	; (80043b4 <control_input_task+0xa4>)
 8004368:	2200      	movs	r2, #0
 800436a:	701a      	strb	r2, [r3, #0]
				control_mode_change(remote_cmd.side_dial);
 800436c:	4b10      	ldr	r3, [pc, #64]	; (80043b0 <control_input_task+0xa0>)
 800436e:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8004372:	4618      	mov	r0, r3
 8004374:	f000 f848 	bl	8004408 <control_mode_change>
 8004378:	e003      	b.n	8004382 <control_input_task+0x72>
			} else {
				laser_on();
 800437a:	f7fc ff2f 	bl	80011dc <laser_on>
				//			referee_compensation();
				chassis_control_input();
 800437e:	f000 f8b1 	bl	80044e4 <chassis_control_input>
			}
			status_led(1, off_led);
 8004382:	2101      	movs	r1, #1
 8004384:	2001      	movs	r0, #1
 8004386:	f7fd fb95 	bl	8001ab4 <status_led>
 800438a:	e003      	b.n	8004394 <control_input_task+0x84>
			if (remote_cmd.left_switch == aimbot_enable) {
			} else {

			}
		} else {
			kill_can();
 800438c:	f002 fd9a 	bl	8006ec4 <kill_can>
			control_reset();
 8004390:	f000 f812 	bl	80043b8 <control_reset>

		}
		vTaskDelayUntil(&start_time, CONTROL_DELAY);
 8004394:	f107 0308 	add.w	r3, r7, #8
 8004398:	2102      	movs	r1, #2
 800439a:	4618      	mov	r0, r3
 800439c:	f00d ff82 	bl	80122a4 <vTaskDelayUntil>
	while (1) {
 80043a0:	e7c6      	b.n	8004330 <control_input_task+0x20>
 80043a2:	bf00      	nop
 80043a4:	20001fc0 	.word	0x20001fc0
 80043a8:	20001fb4 	.word	0x20001fb4
 80043ac:	20000234 	.word	0x20000234
 80043b0:	20001ef0 	.word	0x20001ef0
 80043b4:	20000004 	.word	0x20000004

080043b8 <control_reset>:
	}
	osThreadTerminate(NULL);
}

void control_reset() {
 80043b8:	b580      	push	{r7, lr}
 80043ba:	af00      	add	r7, sp, #0
	chassis_ctrl_data.forward = 0;
 80043bc:	4b0f      	ldr	r3, [pc, #60]	; (80043fc <control_reset+0x44>)
 80043be:	f04f 0200 	mov.w	r2, #0
 80043c2:	601a      	str	r2, [r3, #0]
	chassis_ctrl_data.horizontal = 0;
 80043c4:	4b0d      	ldr	r3, [pc, #52]	; (80043fc <control_reset+0x44>)
 80043c6:	f04f 0200 	mov.w	r2, #0
 80043ca:	605a      	str	r2, [r3, #4]
	chassis_ctrl_data.yaw = 0;
 80043cc:	4b0b      	ldr	r3, [pc, #44]	; (80043fc <control_reset+0x44>)
 80043ce:	f04f 0200 	mov.w	r2, #0
 80043d2:	609a      	str	r2, [r3, #8]
	chassis_ctrl_data.enabled = 0;
 80043d4:	4b09      	ldr	r3, [pc, #36]	; (80043fc <control_reset+0x44>)
 80043d6:	2200      	movs	r2, #0
 80043d8:	731a      	strb	r2, [r3, #12]
	laser_off();
 80043da:	f7fc ff0b 	bl	80011f4 <laser_off>
	aimbot_data.x_offset = 0;
 80043de:	4b08      	ldr	r3, [pc, #32]	; (8004400 <control_reset+0x48>)
 80043e0:	f04f 0200 	mov.w	r2, #0
 80043e4:	67da      	str	r2, [r3, #124]	; 0x7c
	aimbot_data.y_offset = 0;
 80043e6:	4b06      	ldr	r3, [pc, #24]	; (8004400 <control_reset+0x48>)
 80043e8:	f04f 0200 	mov.w	r2, #0
 80043ec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	spinspin_mode = 0;
 80043f0:	4b04      	ldr	r3, [pc, #16]	; (8004404 <control_reset+0x4c>)
 80043f2:	2200      	movs	r2, #0
 80043f4:	601a      	str	r2, [r3, #0]
}
 80043f6:	bf00      	nop
 80043f8:	bd80      	pop	{r7, pc}
 80043fa:	bf00      	nop
 80043fc:	20001f14 	.word	0x20001f14
 8004400:	20001f24 	.word	0x20001f24
 8004404:	20001fb0 	.word	0x20001fb0

08004408 <control_mode_change>:

void control_mode_change(int16_t left_dial_input) {
 8004408:	b580      	push	{r7, lr}
 800440a:	b084      	sub	sp, #16
 800440c:	af00      	add	r7, sp, #0
 800440e:	4603      	mov	r3, r0
 8004410:	80fb      	strh	r3, [r7, #6]
	static uint8_t mode_change_status;
	static uint32_t last_trig_time;
	uint8_t temp_msg;
	if (control_mode != 1) {
 8004412:	4b30      	ldr	r3, [pc, #192]	; (80044d4 <control_mode_change+0xcc>)
 8004414:	781b      	ldrb	r3, [r3, #0]
 8004416:	2b01      	cmp	r3, #1
 8004418:	d028      	beq.n	800446c <control_mode_change+0x64>
		if (left_dial_input > 330) {
 800441a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800441e:	f5b3 7fa5 	cmp.w	r3, #330	; 0x14a
 8004422:	dd1a      	ble.n	800445a <control_mode_change+0x52>
			if (mode_change_status == 2) {
 8004424:	4b2c      	ldr	r3, [pc, #176]	; (80044d8 <control_mode_change+0xd0>)
 8004426:	781b      	ldrb	r3, [r3, #0]
 8004428:	2b02      	cmp	r3, #2
 800442a:	d14f      	bne.n	80044cc <control_mode_change+0xc4>
				if (HAL_GetTick() - last_trig_time > 1000) {
 800442c:	f003 fb18 	bl	8007a60 <HAL_GetTick>
 8004430:	4602      	mov	r2, r0
 8004432:	4b2a      	ldr	r3, [pc, #168]	; (80044dc <control_mode_change+0xd4>)
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	1ad3      	subs	r3, r2, r3
 8004438:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800443c:	d946      	bls.n	80044cc <control_mode_change+0xc4>
					control_mode = 1;
 800443e:	4b25      	ldr	r3, [pc, #148]	; (80044d4 <control_mode_change+0xcc>)
 8004440:	2201      	movs	r2, #1
 8004442:	701a      	strb	r2, [r3, #0]
					temp_msg = control_keyboard;
 8004444:	2303      	movs	r3, #3
 8004446:	73fb      	strb	r3, [r7, #15]
					xQueueSendToBack(buzzing_task_msg, &temp_msg, 0);
 8004448:	4b25      	ldr	r3, [pc, #148]	; (80044e0 <control_mode_change+0xd8>)
 800444a:	6818      	ldr	r0, [r3, #0]
 800444c:	f107 010f 	add.w	r1, r7, #15
 8004450:	2300      	movs	r3, #0
 8004452:	2200      	movs	r2, #0
 8004454:	f00d f990 	bl	8011778 <xQueueGenericSend>
			}
		}
	} else {
		mode_change_status = 0;
	}
}
 8004458:	e038      	b.n	80044cc <control_mode_change+0xc4>
			mode_change_status = 2;
 800445a:	4b1f      	ldr	r3, [pc, #124]	; (80044d8 <control_mode_change+0xd0>)
 800445c:	2202      	movs	r2, #2
 800445e:	701a      	strb	r2, [r3, #0]
			last_trig_time = HAL_GetTick();
 8004460:	f003 fafe 	bl	8007a60 <HAL_GetTick>
 8004464:	4603      	mov	r3, r0
 8004466:	4a1d      	ldr	r2, [pc, #116]	; (80044dc <control_mode_change+0xd4>)
 8004468:	6013      	str	r3, [r2, #0]
}
 800446a:	e02f      	b.n	80044cc <control_mode_change+0xc4>
	} else if (control_mode != 0) {
 800446c:	4b19      	ldr	r3, [pc, #100]	; (80044d4 <control_mode_change+0xcc>)
 800446e:	781b      	ldrb	r3, [r3, #0]
 8004470:	2b00      	cmp	r3, #0
 8004472:	d028      	beq.n	80044c6 <control_mode_change+0xbe>
		if (left_dial_input < -330) {
 8004474:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004478:	f513 7fa5 	cmn.w	r3, #330	; 0x14a
 800447c:	da26      	bge.n	80044cc <control_mode_change+0xc4>
			if (mode_change_status == 1) {
 800447e:	4b16      	ldr	r3, [pc, #88]	; (80044d8 <control_mode_change+0xd0>)
 8004480:	781b      	ldrb	r3, [r3, #0]
 8004482:	2b01      	cmp	r3, #1
 8004484:	d116      	bne.n	80044b4 <control_mode_change+0xac>
				if (HAL_GetTick() - last_trig_time > 1000) {
 8004486:	f003 faeb 	bl	8007a60 <HAL_GetTick>
 800448a:	4602      	mov	r2, r0
 800448c:	4b13      	ldr	r3, [pc, #76]	; (80044dc <control_mode_change+0xd4>)
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	1ad3      	subs	r3, r2, r3
 8004492:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004496:	d919      	bls.n	80044cc <control_mode_change+0xc4>
					control_mode = 0;
 8004498:	4b0e      	ldr	r3, [pc, #56]	; (80044d4 <control_mode_change+0xcc>)
 800449a:	2200      	movs	r2, #0
 800449c:	701a      	strb	r2, [r3, #0]
					temp_msg = control_control;
 800449e:	2304      	movs	r3, #4
 80044a0:	73fb      	strb	r3, [r7, #15]
					xQueueSendToBack(buzzing_task_msg, &temp_msg, 0);
 80044a2:	4b0f      	ldr	r3, [pc, #60]	; (80044e0 <control_mode_change+0xd8>)
 80044a4:	6818      	ldr	r0, [r3, #0]
 80044a6:	f107 010f 	add.w	r1, r7, #15
 80044aa:	2300      	movs	r3, #0
 80044ac:	2200      	movs	r2, #0
 80044ae:	f00d f963 	bl	8011778 <xQueueGenericSend>
}
 80044b2:	e00b      	b.n	80044cc <control_mode_change+0xc4>
				mode_change_status = 1;
 80044b4:	4b08      	ldr	r3, [pc, #32]	; (80044d8 <control_mode_change+0xd0>)
 80044b6:	2201      	movs	r2, #1
 80044b8:	701a      	strb	r2, [r3, #0]
				last_trig_time = HAL_GetTick();
 80044ba:	f003 fad1 	bl	8007a60 <HAL_GetTick>
 80044be:	4603      	mov	r3, r0
 80044c0:	4a06      	ldr	r2, [pc, #24]	; (80044dc <control_mode_change+0xd4>)
 80044c2:	6013      	str	r3, [r2, #0]
}
 80044c4:	e002      	b.n	80044cc <control_mode_change+0xc4>
		mode_change_status = 0;
 80044c6:	4b04      	ldr	r3, [pc, #16]	; (80044d8 <control_mode_change+0xd0>)
 80044c8:	2200      	movs	r2, #0
 80044ca:	701a      	strb	r2, [r3, #0]
}
 80044cc:	bf00      	nop
 80044ce:	3710      	adds	r7, #16
 80044d0:	46bd      	mov	sp, r7
 80044d2:	bd80      	pop	{r7, pc}
 80044d4:	20001fac 	.word	0x20001fac
 80044d8:	20001fe5 	.word	0x20001fe5
 80044dc:	20001fe8 	.word	0x20001fe8
 80044e0:	2000032c 	.word	0x2000032c

080044e4 <chassis_control_input>:


void chassis_control_input() {
 80044e4:	b480      	push	{r7}
 80044e6:	b083      	sub	sp, #12
 80044e8:	af00      	add	r7, sp, #0
	float forward_input =0;
 80044ea:	f04f 0300 	mov.w	r3, #0
 80044ee:	607b      	str	r3, [r7, #4]
	float yaw_input = 0;
 80044f0:	f04f 0300 	mov.w	r3, #0
 80044f4:	603b      	str	r3, [r7, #0]
	if (safety_toggle || remote_cmd.right_switch != all_on) {
 80044f6:	4b1f      	ldr	r3, [pc, #124]	; (8004574 <chassis_control_input+0x90>)
 80044f8:	781b      	ldrb	r3, [r3, #0]
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d104      	bne.n	8004508 <chassis_control_input+0x24>
 80044fe:	4b1e      	ldr	r3, [pc, #120]	; (8004578 <chassis_control_input+0x94>)
 8004500:	f993 3009 	ldrsb.w	r3, [r3, #9]
 8004504:	2b02      	cmp	r3, #2
 8004506:	d003      	beq.n	8004510 <chassis_control_input+0x2c>
		chassis_ctrl_data.enabled = 0;
 8004508:	4b1c      	ldr	r3, [pc, #112]	; (800457c <chassis_control_input+0x98>)
 800450a:	2200      	movs	r2, #0
 800450c:	731a      	strb	r2, [r3, #12]
			//rotation matrix of the initial vectorrrr wow MA1513 is relevant?!
			chassis_ctrl_data.forward =forward_input;
			chassis_ctrl_data.yaw = yaw_input;
		}
	}
}
 800450e:	e02b      	b.n	8004568 <chassis_control_input+0x84>
		chassis_ctrl_data.enabled = 1;
 8004510:	4b1a      	ldr	r3, [pc, #104]	; (800457c <chassis_control_input+0x98>)
 8004512:	2201      	movs	r2, #1
 8004514:	731a      	strb	r2, [r3, #12]
		if (remote_cmd.right_switch == all_on) {
 8004516:	4b18      	ldr	r3, [pc, #96]	; (8004578 <chassis_control_input+0x94>)
 8004518:	f993 3009 	ldrsb.w	r3, [r3, #9]
 800451c:	2b02      	cmp	r3, #2
 800451e:	d123      	bne.n	8004568 <chassis_control_input+0x84>
			if (control_mode == 1) {
 8004520:	4b17      	ldr	r3, [pc, #92]	; (8004580 <chassis_control_input+0x9c>)
 8004522:	781b      	ldrb	r3, [r3, #0]
 8004524:	2b01      	cmp	r3, #1
 8004526:	d019      	beq.n	800455c <chassis_control_input+0x78>
				forward_input = (float) remote_cmd.left_y / RC_LIMITS;
 8004528:	4b13      	ldr	r3, [pc, #76]	; (8004578 <chassis_control_input+0x94>)
 800452a:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800452e:	ee07 3a90 	vmov	s15, r3
 8004532:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004536:	eddf 6a13 	vldr	s13, [pc, #76]	; 8004584 <chassis_control_input+0xa0>
 800453a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800453e:	edc7 7a01 	vstr	s15, [r7, #4]
				yaw_input = (float) remote_cmd.left_x / RC_LIMITS;
 8004542:	4b0d      	ldr	r3, [pc, #52]	; (8004578 <chassis_control_input+0x94>)
 8004544:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8004548:	ee07 3a90 	vmov	s15, r3
 800454c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004550:	eddf 6a0c 	vldr	s13, [pc, #48]	; 8004584 <chassis_control_input+0xa0>
 8004554:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004558:	edc7 7a00 	vstr	s15, [r7]
			chassis_ctrl_data.forward =forward_input;
 800455c:	4a07      	ldr	r2, [pc, #28]	; (800457c <chassis_control_input+0x98>)
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	6013      	str	r3, [r2, #0]
			chassis_ctrl_data.yaw = yaw_input;
 8004562:	4a06      	ldr	r2, [pc, #24]	; (800457c <chassis_control_input+0x98>)
 8004564:	683b      	ldr	r3, [r7, #0]
 8004566:	6093      	str	r3, [r2, #8]
}
 8004568:	bf00      	nop
 800456a:	370c      	adds	r7, #12
 800456c:	46bd      	mov	sp, r7
 800456e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004572:	4770      	bx	lr
 8004574:	20000004 	.word	0x20000004
 8004578:	20001ef0 	.word	0x20001ef0
 800457c:	20001f14 	.word	0x20001f14
 8004580:	20001fac 	.word	0x20001fac
 8004584:	44250000 	.word	0x44250000

08004588 <imu_proc_task_notif>:
static uint32_t last_proc_times[2];
static uint8_t update_flag = 0;
static uint8_t rtos_started = 0;


void imu_proc_task_notif() {
 8004588:	b580      	push	{r7, lr}
 800458a:	b082      	sub	sp, #8
 800458c:	af00      	add	r7, sp, #0
	//resets the flags
	update_flag = 0b000;
 800458e:	4b0d      	ldr	r3, [pc, #52]	; (80045c4 <imu_proc_task_notif+0x3c>)
 8004590:	2200      	movs	r2, #0
 8004592:	701a      	strb	r2, [r3, #0]
	BaseType_t xHigherPriorityTaskWoken;
	xHigherPriorityTaskWoken = pdFALSE;
 8004594:	2300      	movs	r3, #0
 8004596:	607b      	str	r3, [r7, #4]
	vTaskNotifyGiveFromISR(imu_processing_task_handle, &xHigherPriorityTaskWoken);
 8004598:	4b0b      	ldr	r3, [pc, #44]	; (80045c8 <imu_proc_task_notif+0x40>)
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	1d3a      	adds	r2, r7, #4
 800459e:	4611      	mov	r1, r2
 80045a0:	4618      	mov	r0, r3
 80045a2:	f00e fd49 	bl	8013038 <vTaskNotifyGiveFromISR>
	portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d007      	beq.n	80045bc <imu_proc_task_notif+0x34>
 80045ac:	4b07      	ldr	r3, [pc, #28]	; (80045cc <imu_proc_task_notif+0x44>)
 80045ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80045b2:	601a      	str	r2, [r3, #0]
 80045b4:	f3bf 8f4f 	dsb	sy
 80045b8:	f3bf 8f6f 	isb	sy
}
 80045bc:	bf00      	nop
 80045be:	3708      	adds	r7, #8
 80045c0:	46bd      	mov	sp, r7
 80045c2:	bd80      	pop	{r7, pc}
 80045c4:	2000206c 	.word	0x2000206c
 80045c8:	20000308 	.word	0x20000308
 80045cc:	e000ed04 	.word	0xe000ed04

080045d0 <gyro_data_ready>:

void gyro_data_ready(gyro_data_t gyro_data) {
 80045d0:	b590      	push	{r4, r7, lr}
 80045d2:	b085      	sub	sp, #20
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	463c      	mov	r4, r7
 80045d8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	gyro_proc_data.gx = gyro_data.gx;
 80045dc:	683b      	ldr	r3, [r7, #0]
 80045de:	4a12      	ldr	r2, [pc, #72]	; (8004628 <gyro_data_ready+0x58>)
 80045e0:	6013      	str	r3, [r2, #0]
	gyro_proc_data.gy = gyro_data.gy;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	4a10      	ldr	r2, [pc, #64]	; (8004628 <gyro_data_ready+0x58>)
 80045e6:	6053      	str	r3, [r2, #4]
	gyro_proc_data.gz = gyro_data.gz;
 80045e8:	68bb      	ldr	r3, [r7, #8]
 80045ea:	4a0f      	ldr	r2, [pc, #60]	; (8004628 <gyro_data_ready+0x58>)
 80045ec:	6093      	str	r3, [r2, #8]
	gyro_proc_data.last_gyro_update = gyro_data.last_gyro_update;
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	4a0d      	ldr	r2, [pc, #52]	; (8004628 <gyro_data_ready+0x58>)
 80045f2:	60d3      	str	r3, [r2, #12]

	update_flag |= 1; //sets bit 0 to true
 80045f4:	4b0d      	ldr	r3, [pc, #52]	; (800462c <gyro_data_ready+0x5c>)
 80045f6:	781b      	ldrb	r3, [r3, #0]
 80045f8:	f043 0301 	orr.w	r3, r3, #1
 80045fc:	b2da      	uxtb	r2, r3
 80045fe:	4b0b      	ldr	r3, [pc, #44]	; (800462c <gyro_data_ready+0x5c>)
 8004600:	701a      	strb	r2, [r3, #0]
	//only allows task to be run when all the data is new
	if ((update_flag == 0b111|| update_flag == 0b011) && (rtos_started == 1)) {
 8004602:	4b0a      	ldr	r3, [pc, #40]	; (800462c <gyro_data_ready+0x5c>)
 8004604:	781b      	ldrb	r3, [r3, #0]
 8004606:	2b07      	cmp	r3, #7
 8004608:	d003      	beq.n	8004612 <gyro_data_ready+0x42>
 800460a:	4b08      	ldr	r3, [pc, #32]	; (800462c <gyro_data_ready+0x5c>)
 800460c:	781b      	ldrb	r3, [r3, #0]
 800460e:	2b03      	cmp	r3, #3
 8004610:	d105      	bne.n	800461e <gyro_data_ready+0x4e>
 8004612:	4b07      	ldr	r3, [pc, #28]	; (8004630 <gyro_data_ready+0x60>)
 8004614:	781b      	ldrb	r3, [r3, #0]
 8004616:	2b01      	cmp	r3, #1
 8004618:	d101      	bne.n	800461e <gyro_data_ready+0x4e>
		imu_proc_task_notif();
 800461a:	f7ff ffb5 	bl	8004588 <imu_proc_task_notif>
	}
}
 800461e:	bf00      	nop
 8004620:	3714      	adds	r7, #20
 8004622:	46bd      	mov	sp, r7
 8004624:	bd90      	pop	{r4, r7, pc}
 8004626:	bf00      	nop
 8004628:	20002048 	.word	0x20002048
 800462c:	2000206c 	.word	0x2000206c
 8004630:	2000206d 	.word	0x2000206d

08004634 <accel_data_ready>:

void accel_data_ready(accel_data_t accel_data) {
 8004634:	b590      	push	{r4, r7, lr}
 8004636:	b085      	sub	sp, #20
 8004638:	af00      	add	r7, sp, #0
 800463a:	463c      	mov	r4, r7
 800463c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	accel_proc_data.ax = accel_data.ax;
 8004640:	683b      	ldr	r3, [r7, #0]
 8004642:	4a12      	ldr	r2, [pc, #72]	; (800468c <accel_data_ready+0x58>)
 8004644:	6013      	str	r3, [r2, #0]
	accel_proc_data.ay = accel_data.ay;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	4a10      	ldr	r2, [pc, #64]	; (800468c <accel_data_ready+0x58>)
 800464a:	6053      	str	r3, [r2, #4]
	accel_proc_data.az = accel_data.az;
 800464c:	68bb      	ldr	r3, [r7, #8]
 800464e:	4a0f      	ldr	r2, [pc, #60]	; (800468c <accel_data_ready+0x58>)
 8004650:	6093      	str	r3, [r2, #8]
	accel_proc_data.last_accel_update = accel_data.last_accel_update;
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	4a0d      	ldr	r2, [pc, #52]	; (800468c <accel_data_ready+0x58>)
 8004656:	60d3      	str	r3, [r2, #12]

	update_flag |= 1 << 1; //sets bit 1 to true
 8004658:	4b0d      	ldr	r3, [pc, #52]	; (8004690 <accel_data_ready+0x5c>)
 800465a:	781b      	ldrb	r3, [r3, #0]
 800465c:	f043 0302 	orr.w	r3, r3, #2
 8004660:	b2da      	uxtb	r2, r3
 8004662:	4b0b      	ldr	r3, [pc, #44]	; (8004690 <accel_data_ready+0x5c>)
 8004664:	701a      	strb	r2, [r3, #0]
	//only allows task to be run when accel and gyro data are new
	if ((update_flag == 0b111 || update_flag == 0b011) && (rtos_started == 1)) {
 8004666:	4b0a      	ldr	r3, [pc, #40]	; (8004690 <accel_data_ready+0x5c>)
 8004668:	781b      	ldrb	r3, [r3, #0]
 800466a:	2b07      	cmp	r3, #7
 800466c:	d003      	beq.n	8004676 <accel_data_ready+0x42>
 800466e:	4b08      	ldr	r3, [pc, #32]	; (8004690 <accel_data_ready+0x5c>)
 8004670:	781b      	ldrb	r3, [r3, #0]
 8004672:	2b03      	cmp	r3, #3
 8004674:	d105      	bne.n	8004682 <accel_data_ready+0x4e>
 8004676:	4b07      	ldr	r3, [pc, #28]	; (8004694 <accel_data_ready+0x60>)
 8004678:	781b      	ldrb	r3, [r3, #0]
 800467a:	2b01      	cmp	r3, #1
 800467c:	d101      	bne.n	8004682 <accel_data_ready+0x4e>
		imu_proc_task_notif();
 800467e:	f7ff ff83 	bl	8004588 <imu_proc_task_notif>
	}
}
 8004682:	bf00      	nop
 8004684:	3714      	adds	r7, #20
 8004686:	46bd      	mov	sp, r7
 8004688:	bd90      	pop	{r4, r7, pc}
 800468a:	bf00      	nop
 800468c:	20002038 	.word	0x20002038
 8004690:	2000206c 	.word	0x2000206c
 8004694:	2000206d 	.word	0x2000206d

08004698 <imu_processing_task>:
		//disabled as magnetometer data is not used
		//imu_proc_task_notif();
	}
}

void imu_processing_task(void *argument) {
 8004698:	b580      	push	{r7, lr}
 800469a:	b082      	sub	sp, #8
 800469c:	af00      	add	r7, sp, #0
 800469e:	6078      	str	r0, [r7, #4]
	//imu_start_ints();
	rtos_started = 1;
 80046a0:	4b0a      	ldr	r3, [pc, #40]	; (80046cc <imu_processing_task+0x34>)
 80046a2:	2201      	movs	r2, #1
 80046a4:	701a      	strb	r2, [r3, #0]
	ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 80046a6:	f04f 31ff 	mov.w	r1, #4294967295
 80046aa:	2001      	movs	r0, #1
 80046ac:	f00e fc78 	bl	8012fa0 <ulTaskNotifyTake>
	init_quaternion();
 80046b0:	f000 f80e 	bl	80046d0 <init_quaternion>
	quat_startup();
 80046b4:	f000 f948 	bl	8004948 <quat_startup>
	while (1) {
		ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 80046b8:	f04f 31ff 	mov.w	r1, #4294967295
 80046bc:	2001      	movs	r0, #1
 80046be:	f00e fc6f 	bl	8012fa0 <ulTaskNotifyTake>
		imu_ahrs_update();
 80046c2:	f000 fb53 	bl	8004d6c <imu_ahrs_update>
		imu_attitude_update();
 80046c6:	f000 ffa7 	bl	8005618 <imu_attitude_update>
		ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 80046ca:	e7f5      	b.n	80046b8 <imu_processing_task+0x20>
 80046cc:	2000206d 	.word	0x2000206d

080046d0 <init_quaternion>:
	}
}

void init_quaternion(void) {
 80046d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80046d4:	b084      	sub	sp, #16
 80046d6:	af00      	add	r7, sp, #0
	int16_t hx, hy; //hz;

	hx = mag_proc_data.mx;
 80046d8:	4b79      	ldr	r3, [pc, #484]	; (80048c0 <init_quaternion+0x1f0>)
 80046da:	881b      	ldrh	r3, [r3, #0]
 80046dc:	81fb      	strh	r3, [r7, #14]
	hy = mag_proc_data.my;
 80046de:	4b78      	ldr	r3, [pc, #480]	; (80048c0 <init_quaternion+0x1f0>)
 80046e0:	885b      	ldrh	r3, [r3, #2]
 80046e2:	81bb      	strh	r3, [r7, #12]
			q2 = -0.56;
			q3 = 0.0045;
		}
	}
	#else
	if (hx < 0 && hy < 0) {
 80046e4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	da36      	bge.n	800475a <init_quaternion+0x8a>
 80046ec:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	da32      	bge.n	800475a <init_quaternion+0x8a>
		if (fabs(hx / hy) >= 1) {
 80046f4:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80046f8:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80046fc:	fb92 f3f3 	sdiv	r3, r2, r3
 8004700:	4618      	mov	r0, r3
 8004702:	f7fb fec7 	bl	8000494 <__aeabi_i2d>
 8004706:	4602      	mov	r2, r0
 8004708:	460b      	mov	r3, r1
 800470a:	603a      	str	r2, [r7, #0]
 800470c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004710:	607b      	str	r3, [r7, #4]
 8004712:	f04f 0200 	mov.w	r2, #0
 8004716:	4b6b      	ldr	r3, [pc, #428]	; (80048c4 <init_quaternion+0x1f4>)
 8004718:	e9d7 0100 	ldrd	r0, r1, [r7]
 800471c:	f7fc f9aa 	bl	8000a74 <__aeabi_dcmpge>
 8004720:	4603      	mov	r3, r0
 8004722:	2b00      	cmp	r3, #0
 8004724:	d00c      	beq.n	8004740 <init_quaternion+0x70>
			q0 = 0.195;
 8004726:	4b68      	ldr	r3, [pc, #416]	; (80048c8 <init_quaternion+0x1f8>)
 8004728:	4a68      	ldr	r2, [pc, #416]	; (80048cc <init_quaternion+0x1fc>)
 800472a:	601a      	str	r2, [r3, #0]
			q1 = -0.015;
 800472c:	4b68      	ldr	r3, [pc, #416]	; (80048d0 <init_quaternion+0x200>)
 800472e:	4a69      	ldr	r2, [pc, #420]	; (80048d4 <init_quaternion+0x204>)
 8004730:	601a      	str	r2, [r3, #0]
			q2 = 0.0043;
 8004732:	4b69      	ldr	r3, [pc, #420]	; (80048d8 <init_quaternion+0x208>)
 8004734:	4a69      	ldr	r2, [pc, #420]	; (80048dc <init_quaternion+0x20c>)
 8004736:	601a      	str	r2, [r3, #0]
			q3 = 0.979;
 8004738:	4b69      	ldr	r3, [pc, #420]	; (80048e0 <init_quaternion+0x210>)
 800473a:	4a6a      	ldr	r2, [pc, #424]	; (80048e4 <init_quaternion+0x214>)
 800473c:	601a      	str	r2, [r3, #0]
		if (fabs(hx / hy) >= 1) {
 800473e:	e0ba      	b.n	80048b6 <init_quaternion+0x1e6>
		} else {
			q0 = 0.555;
 8004740:	4b61      	ldr	r3, [pc, #388]	; (80048c8 <init_quaternion+0x1f8>)
 8004742:	4a69      	ldr	r2, [pc, #420]	; (80048e8 <init_quaternion+0x218>)
 8004744:	601a      	str	r2, [r3, #0]
			q1 = -0.015;
 8004746:	4b62      	ldr	r3, [pc, #392]	; (80048d0 <init_quaternion+0x200>)
 8004748:	4a62      	ldr	r2, [pc, #392]	; (80048d4 <init_quaternion+0x204>)
 800474a:	601a      	str	r2, [r3, #0]
			q2 = 0.006;
 800474c:	4b62      	ldr	r3, [pc, #392]	; (80048d8 <init_quaternion+0x208>)
 800474e:	4a67      	ldr	r2, [pc, #412]	; (80048ec <init_quaternion+0x21c>)
 8004750:	601a      	str	r2, [r3, #0]
			q3 = 0.829;
 8004752:	4b63      	ldr	r3, [pc, #396]	; (80048e0 <init_quaternion+0x210>)
 8004754:	4a66      	ldr	r2, [pc, #408]	; (80048f0 <init_quaternion+0x220>)
 8004756:	601a      	str	r2, [r3, #0]
		if (fabs(hx / hy) >= 1) {
 8004758:	e0ad      	b.n	80048b6 <init_quaternion+0x1e6>
		}

	} else if (hx < 0 && hy > 0) {
 800475a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800475e:	2b00      	cmp	r3, #0
 8004760:	da35      	bge.n	80047ce <init_quaternion+0xfe>
 8004762:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8004766:	2b00      	cmp	r3, #0
 8004768:	dd31      	ble.n	80047ce <init_quaternion+0xfe>
		if (fabs(hx / hy) >= 1) {
 800476a:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800476e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8004772:	fb92 f3f3 	sdiv	r3, r2, r3
 8004776:	4618      	mov	r0, r3
 8004778:	f7fb fe8c 	bl	8000494 <__aeabi_i2d>
 800477c:	4602      	mov	r2, r0
 800477e:	460b      	mov	r3, r1
 8004780:	4692      	mov	sl, r2
 8004782:	f023 4b00 	bic.w	fp, r3, #2147483648	; 0x80000000
 8004786:	f04f 0200 	mov.w	r2, #0
 800478a:	4b4e      	ldr	r3, [pc, #312]	; (80048c4 <init_quaternion+0x1f4>)
 800478c:	4650      	mov	r0, sl
 800478e:	4659      	mov	r1, fp
 8004790:	f7fc f970 	bl	8000a74 <__aeabi_dcmpge>
 8004794:	4603      	mov	r3, r0
 8004796:	2b00      	cmp	r3, #0
 8004798:	d00c      	beq.n	80047b4 <init_quaternion+0xe4>
			q0 = -0.193;
 800479a:	4b4b      	ldr	r3, [pc, #300]	; (80048c8 <init_quaternion+0x1f8>)
 800479c:	4a55      	ldr	r2, [pc, #340]	; (80048f4 <init_quaternion+0x224>)
 800479e:	601a      	str	r2, [r3, #0]
			q1 = -0.009;
 80047a0:	4b4b      	ldr	r3, [pc, #300]	; (80048d0 <init_quaternion+0x200>)
 80047a2:	4a55      	ldr	r2, [pc, #340]	; (80048f8 <init_quaternion+0x228>)
 80047a4:	601a      	str	r2, [r3, #0]
			q2 = -0.006;
 80047a6:	4b4c      	ldr	r3, [pc, #304]	; (80048d8 <init_quaternion+0x208>)
 80047a8:	4a54      	ldr	r2, [pc, #336]	; (80048fc <init_quaternion+0x22c>)
 80047aa:	601a      	str	r2, [r3, #0]
			q3 = 0.979;
 80047ac:	4b4c      	ldr	r3, [pc, #304]	; (80048e0 <init_quaternion+0x210>)
 80047ae:	4a4d      	ldr	r2, [pc, #308]	; (80048e4 <init_quaternion+0x214>)
 80047b0:	601a      	str	r2, [r3, #0]
		if (fabs(hx / hy) >= 1) {
 80047b2:	e080      	b.n	80048b6 <init_quaternion+0x1e6>
		} else {
			q0 = -0.552;
 80047b4:	4b44      	ldr	r3, [pc, #272]	; (80048c8 <init_quaternion+0x1f8>)
 80047b6:	4a52      	ldr	r2, [pc, #328]	; (8004900 <init_quaternion+0x230>)
 80047b8:	601a      	str	r2, [r3, #0]
			q1 = -0.0048;
 80047ba:	4b45      	ldr	r3, [pc, #276]	; (80048d0 <init_quaternion+0x200>)
 80047bc:	4a51      	ldr	r2, [pc, #324]	; (8004904 <init_quaternion+0x234>)
 80047be:	601a      	str	r2, [r3, #0]
			q2 = -0.0115;
 80047c0:	4b45      	ldr	r3, [pc, #276]	; (80048d8 <init_quaternion+0x208>)
 80047c2:	4a51      	ldr	r2, [pc, #324]	; (8004908 <init_quaternion+0x238>)
 80047c4:	601a      	str	r2, [r3, #0]
			q3 = 0.8313;
 80047c6:	4b46      	ldr	r3, [pc, #280]	; (80048e0 <init_quaternion+0x210>)
 80047c8:	4a50      	ldr	r2, [pc, #320]	; (800490c <init_quaternion+0x23c>)
 80047ca:	601a      	str	r2, [r3, #0]
		if (fabs(hx / hy) >= 1) {
 80047cc:	e073      	b.n	80048b6 <init_quaternion+0x1e6>
		}

	} else if (hx > 0 && hy > 0) {
 80047ce:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	dd35      	ble.n	8004842 <init_quaternion+0x172>
 80047d6:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80047da:	2b00      	cmp	r3, #0
 80047dc:	dd31      	ble.n	8004842 <init_quaternion+0x172>
		if (fabs(hx / hy) >= 1) {
 80047de:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80047e2:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80047e6:	fb92 f3f3 	sdiv	r3, r2, r3
 80047ea:	4618      	mov	r0, r3
 80047ec:	f7fb fe52 	bl	8000494 <__aeabi_i2d>
 80047f0:	4602      	mov	r2, r0
 80047f2:	460b      	mov	r3, r1
 80047f4:	4690      	mov	r8, r2
 80047f6:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 80047fa:	f04f 0200 	mov.w	r2, #0
 80047fe:	4b31      	ldr	r3, [pc, #196]	; (80048c4 <init_quaternion+0x1f4>)
 8004800:	4640      	mov	r0, r8
 8004802:	4649      	mov	r1, r9
 8004804:	f7fc f936 	bl	8000a74 <__aeabi_dcmpge>
 8004808:	4603      	mov	r3, r0
 800480a:	2b00      	cmp	r3, #0
 800480c:	d00c      	beq.n	8004828 <init_quaternion+0x158>
			q0 = -0.9785;
 800480e:	4b2e      	ldr	r3, [pc, #184]	; (80048c8 <init_quaternion+0x1f8>)
 8004810:	4a3f      	ldr	r2, [pc, #252]	; (8004910 <init_quaternion+0x240>)
 8004812:	601a      	str	r2, [r3, #0]
			q1 = 0.008;
 8004814:	4b2e      	ldr	r3, [pc, #184]	; (80048d0 <init_quaternion+0x200>)
 8004816:	4a3f      	ldr	r2, [pc, #252]	; (8004914 <init_quaternion+0x244>)
 8004818:	601a      	str	r2, [r3, #0]
			q2 = -0.02;
 800481a:	4b2f      	ldr	r3, [pc, #188]	; (80048d8 <init_quaternion+0x208>)
 800481c:	4a3e      	ldr	r2, [pc, #248]	; (8004918 <init_quaternion+0x248>)
 800481e:	601a      	str	r2, [r3, #0]
			q3 = 0.195;
 8004820:	4b2f      	ldr	r3, [pc, #188]	; (80048e0 <init_quaternion+0x210>)
 8004822:	4a2a      	ldr	r2, [pc, #168]	; (80048cc <init_quaternion+0x1fc>)
 8004824:	601a      	str	r2, [r3, #0]
		if (fabs(hx / hy) >= 1) {
 8004826:	e046      	b.n	80048b6 <init_quaternion+0x1e6>
		} else {
			q0 = -0.9828;
 8004828:	4b27      	ldr	r3, [pc, #156]	; (80048c8 <init_quaternion+0x1f8>)
 800482a:	4a3c      	ldr	r2, [pc, #240]	; (800491c <init_quaternion+0x24c>)
 800482c:	601a      	str	r2, [r3, #0]
			q1 = 0.002;
 800482e:	4b28      	ldr	r3, [pc, #160]	; (80048d0 <init_quaternion+0x200>)
 8004830:	4a3b      	ldr	r2, [pc, #236]	; (8004920 <init_quaternion+0x250>)
 8004832:	601a      	str	r2, [r3, #0]
			q2 = -0.0167;
 8004834:	4b28      	ldr	r3, [pc, #160]	; (80048d8 <init_quaternion+0x208>)
 8004836:	4a3b      	ldr	r2, [pc, #236]	; (8004924 <init_quaternion+0x254>)
 8004838:	601a      	str	r2, [r3, #0]
			q3 = 0.5557;
 800483a:	4b29      	ldr	r3, [pc, #164]	; (80048e0 <init_quaternion+0x210>)
 800483c:	4a3a      	ldr	r2, [pc, #232]	; (8004928 <init_quaternion+0x258>)
 800483e:	601a      	str	r2, [r3, #0]
		if (fabs(hx / hy) >= 1) {
 8004840:	e039      	b.n	80048b6 <init_quaternion+0x1e6>
		}

	} else if (hx > 0 && hy < 0) {
 8004842:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004846:	2b00      	cmp	r3, #0
 8004848:	dd35      	ble.n	80048b6 <init_quaternion+0x1e6>
 800484a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800484e:	2b00      	cmp	r3, #0
 8004850:	da31      	bge.n	80048b6 <init_quaternion+0x1e6>
		if (fabs(hx / hy) >= 1) {
 8004852:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8004856:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800485a:	fb92 f3f3 	sdiv	r3, r2, r3
 800485e:	4618      	mov	r0, r3
 8004860:	f7fb fe18 	bl	8000494 <__aeabi_i2d>
 8004864:	4602      	mov	r2, r0
 8004866:	460b      	mov	r3, r1
 8004868:	4614      	mov	r4, r2
 800486a:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 800486e:	f04f 0200 	mov.w	r2, #0
 8004872:	4b14      	ldr	r3, [pc, #80]	; (80048c4 <init_quaternion+0x1f4>)
 8004874:	4620      	mov	r0, r4
 8004876:	4629      	mov	r1, r5
 8004878:	f7fc f8fc 	bl	8000a74 <__aeabi_dcmpge>
 800487c:	4603      	mov	r3, r0
 800487e:	2b00      	cmp	r3, #0
 8004880:	d00c      	beq.n	800489c <init_quaternion+0x1cc>
			q0 = -0.979;
 8004882:	4b11      	ldr	r3, [pc, #68]	; (80048c8 <init_quaternion+0x1f8>)
 8004884:	4a29      	ldr	r2, [pc, #164]	; (800492c <init_quaternion+0x25c>)
 8004886:	601a      	str	r2, [r3, #0]
			q1 = 0.0116;
 8004888:	4b11      	ldr	r3, [pc, #68]	; (80048d0 <init_quaternion+0x200>)
 800488a:	4a29      	ldr	r2, [pc, #164]	; (8004930 <init_quaternion+0x260>)
 800488c:	601a      	str	r2, [r3, #0]
			q2 = -0.0167;
 800488e:	4b12      	ldr	r3, [pc, #72]	; (80048d8 <init_quaternion+0x208>)
 8004890:	4a24      	ldr	r2, [pc, #144]	; (8004924 <init_quaternion+0x254>)
 8004892:	601a      	str	r2, [r3, #0]
			q3 = -0.195;
 8004894:	4b12      	ldr	r3, [pc, #72]	; (80048e0 <init_quaternion+0x210>)
 8004896:	4a27      	ldr	r2, [pc, #156]	; (8004934 <init_quaternion+0x264>)
 8004898:	601a      	str	r2, [r3, #0]
		}
	}
#endif


}
 800489a:	e00c      	b.n	80048b6 <init_quaternion+0x1e6>
			q0 = -0.83;
 800489c:	4b0a      	ldr	r3, [pc, #40]	; (80048c8 <init_quaternion+0x1f8>)
 800489e:	4a26      	ldr	r2, [pc, #152]	; (8004938 <init_quaternion+0x268>)
 80048a0:	601a      	str	r2, [r3, #0]
			q1 = 0.014;
 80048a2:	4b0b      	ldr	r3, [pc, #44]	; (80048d0 <init_quaternion+0x200>)
 80048a4:	4a25      	ldr	r2, [pc, #148]	; (800493c <init_quaternion+0x26c>)
 80048a6:	601a      	str	r2, [r3, #0]
			q2 = -0.012;
 80048a8:	4b0b      	ldr	r3, [pc, #44]	; (80048d8 <init_quaternion+0x208>)
 80048aa:	4a25      	ldr	r2, [pc, #148]	; (8004940 <init_quaternion+0x270>)
 80048ac:	601a      	str	r2, [r3, #0]
			q3 = -0.556;
 80048ae:	4b0c      	ldr	r3, [pc, #48]	; (80048e0 <init_quaternion+0x210>)
 80048b0:	4a24      	ldr	r2, [pc, #144]	; (8004944 <init_quaternion+0x274>)
 80048b2:	601a      	str	r2, [r3, #0]
}
 80048b4:	e7ff      	b.n	80048b6 <init_quaternion+0x1e6>
 80048b6:	bf00      	nop
 80048b8:	3710      	adds	r7, #16
 80048ba:	46bd      	mov	sp, r7
 80048bc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80048c0:	20002058 	.word	0x20002058
 80048c4:	3ff00000 	.word	0x3ff00000
 80048c8:	20000008 	.word	0x20000008
 80048cc:	3e47ae14 	.word	0x3e47ae14
 80048d0:	20001fec 	.word	0x20001fec
 80048d4:	bc75c28f 	.word	0xbc75c28f
 80048d8:	20001ff0 	.word	0x20001ff0
 80048dc:	3b8ce704 	.word	0x3b8ce704
 80048e0:	20001ff4 	.word	0x20001ff4
 80048e4:	3f7a9fbe 	.word	0x3f7a9fbe
 80048e8:	3f0e147b 	.word	0x3f0e147b
 80048ec:	3bc49ba6 	.word	0x3bc49ba6
 80048f0:	3f543958 	.word	0x3f543958
 80048f4:	be45a1cb 	.word	0xbe45a1cb
 80048f8:	bc1374bc 	.word	0xbc1374bc
 80048fc:	bbc49ba6 	.word	0xbbc49ba6
 8004900:	bf0d4fdf 	.word	0xbf0d4fdf
 8004904:	bb9d4952 	.word	0xbb9d4952
 8004908:	bc3c6a7f 	.word	0xbc3c6a7f
 800490c:	3f54d014 	.word	0x3f54d014
 8004910:	bf7a7efa 	.word	0xbf7a7efa
 8004914:	3c03126f 	.word	0x3c03126f
 8004918:	bca3d70a 	.word	0xbca3d70a
 800491c:	bf7b98c8 	.word	0xbf7b98c8
 8004920:	3b03126f 	.word	0x3b03126f
 8004924:	bc88ce70 	.word	0xbc88ce70
 8004928:	3f0e425b 	.word	0x3f0e425b
 800492c:	bf7a9fbe 	.word	0xbf7a9fbe
 8004930:	3c3e0ded 	.word	0x3c3e0ded
 8004934:	be47ae14 	.word	0xbe47ae14
 8004938:	bf547ae1 	.word	0xbf547ae1
 800493c:	3c656042 	.word	0x3c656042
 8004940:	bc449ba6 	.word	0xbc449ba6
 8004944:	bf0e5604 	.word	0xbf0e5604

08004948 <quat_startup>:
//	q0 = tempq0 * norm;
//	q1 = tempq1 * norm;
//	q2 = tempq2 * norm;
//	q3 = tempq3 * norm;
//}
void quat_startup(void) { // new
 8004948:	b580      	push	{r7, lr}
 800494a:	b094      	sub	sp, #80	; 0x50
 800494c:	af00      	add	r7, sp, #0
//to figure out how to use quaternions
  float norm;
  float vx, vy, vz, wx, wy, wz;
  float tempq0, tempq1, tempq2, tempq3;

  float q0q0 = q0 * q0;
 800494e:	4bd6      	ldr	r3, [pc, #856]	; (8004ca8 <quat_startup+0x360>)
 8004950:	ed93 7a00 	vldr	s14, [r3]
 8004954:	4bd4      	ldr	r3, [pc, #848]	; (8004ca8 <quat_startup+0x360>)
 8004956:	edd3 7a00 	vldr	s15, [r3]
 800495a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800495e:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
  float q0q1 = q0 * q1;
 8004962:	4bd1      	ldr	r3, [pc, #836]	; (8004ca8 <quat_startup+0x360>)
 8004964:	ed93 7a00 	vldr	s14, [r3]
 8004968:	4bd0      	ldr	r3, [pc, #832]	; (8004cac <quat_startup+0x364>)
 800496a:	edd3 7a00 	vldr	s15, [r3]
 800496e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004972:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
  float q0q2 = q0 * q2;
 8004976:	4bcc      	ldr	r3, [pc, #816]	; (8004ca8 <quat_startup+0x360>)
 8004978:	ed93 7a00 	vldr	s14, [r3]
 800497c:	4bcc      	ldr	r3, [pc, #816]	; (8004cb0 <quat_startup+0x368>)
 800497e:	edd3 7a00 	vldr	s15, [r3]
 8004982:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004986:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
  float q1q1 = q1 * q1;
 800498a:	4bc8      	ldr	r3, [pc, #800]	; (8004cac <quat_startup+0x364>)
 800498c:	ed93 7a00 	vldr	s14, [r3]
 8004990:	4bc6      	ldr	r3, [pc, #792]	; (8004cac <quat_startup+0x364>)
 8004992:	edd3 7a00 	vldr	s15, [r3]
 8004996:	ee67 7a27 	vmul.f32	s15, s14, s15
 800499a:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
  float q1q3 = q1 * q3;
 800499e:	4bc3      	ldr	r3, [pc, #780]	; (8004cac <quat_startup+0x364>)
 80049a0:	ed93 7a00 	vldr	s14, [r3]
 80049a4:	4bc3      	ldr	r3, [pc, #780]	; (8004cb4 <quat_startup+0x36c>)
 80049a6:	edd3 7a00 	vldr	s15, [r3]
 80049aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80049ae:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
  float q2q2 = q2 * q2;
 80049b2:	4bbf      	ldr	r3, [pc, #764]	; (8004cb0 <quat_startup+0x368>)
 80049b4:	ed93 7a00 	vldr	s14, [r3]
 80049b8:	4bbd      	ldr	r3, [pc, #756]	; (8004cb0 <quat_startup+0x368>)
 80049ba:	edd3 7a00 	vldr	s15, [r3]
 80049be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80049c2:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
  float q2q3 = q2 * q3;
 80049c6:	4bba      	ldr	r3, [pc, #744]	; (8004cb0 <quat_startup+0x368>)
 80049c8:	ed93 7a00 	vldr	s14, [r3]
 80049cc:	4bb9      	ldr	r3, [pc, #740]	; (8004cb4 <quat_startup+0x36c>)
 80049ce:	edd3 7a00 	vldr	s15, [r3]
 80049d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80049d6:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
  float q3q3 = q3 * q3;
 80049da:	4bb6      	ldr	r3, [pc, #728]	; (8004cb4 <quat_startup+0x36c>)
 80049dc:	ed93 7a00 	vldr	s14, [r3]
 80049e0:	4bb4      	ldr	r3, [pc, #720]	; (8004cb4 <quat_startup+0x36c>)
 80049e2:	edd3 7a00 	vldr	s15, [r3]
 80049e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80049ea:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30

  gx = gyro_proc_data.gx;
 80049ee:	4bb2      	ldr	r3, [pc, #712]	; (8004cb8 <quat_startup+0x370>)
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	4ab2      	ldr	r2, [pc, #712]	; (8004cbc <quat_startup+0x374>)
 80049f4:	6013      	str	r3, [r2, #0]
  gy = gyro_proc_data.gy;
 80049f6:	4bb0      	ldr	r3, [pc, #704]	; (8004cb8 <quat_startup+0x370>)
 80049f8:	685b      	ldr	r3, [r3, #4]
 80049fa:	4ab1      	ldr	r2, [pc, #708]	; (8004cc0 <quat_startup+0x378>)
 80049fc:	6013      	str	r3, [r2, #0]
  gz = gyro_proc_data.gz;
 80049fe:	4bae      	ldr	r3, [pc, #696]	; (8004cb8 <quat_startup+0x370>)
 8004a00:	689b      	ldr	r3, [r3, #8]
 8004a02:	4ab0      	ldr	r2, [pc, #704]	; (8004cc4 <quat_startup+0x37c>)
 8004a04:	6013      	str	r3, [r2, #0]
  ax = accel_proc_data.ax;
 8004a06:	4bb0      	ldr	r3, [pc, #704]	; (8004cc8 <quat_startup+0x380>)
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	4ab0      	ldr	r2, [pc, #704]	; (8004ccc <quat_startup+0x384>)
 8004a0c:	6013      	str	r3, [r2, #0]
  ay = accel_proc_data.ay;
 8004a0e:	4bae      	ldr	r3, [pc, #696]	; (8004cc8 <quat_startup+0x380>)
 8004a10:	685b      	ldr	r3, [r3, #4]
 8004a12:	4aaf      	ldr	r2, [pc, #700]	; (8004cd0 <quat_startup+0x388>)
 8004a14:	6013      	str	r3, [r2, #0]
  az = accel_proc_data.az;
 8004a16:	4bac      	ldr	r3, [pc, #688]	; (8004cc8 <quat_startup+0x380>)
 8004a18:	689b      	ldr	r3, [r3, #8]
 8004a1a:	4aae      	ldr	r2, [pc, #696]	; (8004cd4 <quat_startup+0x38c>)
 8004a1c:	6013      	str	r3, [r2, #0]
  mx = mag_proc_data.mx;
 8004a1e:	4bae      	ldr	r3, [pc, #696]	; (8004cd8 <quat_startup+0x390>)
 8004a20:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004a24:	ee07 3a90 	vmov	s15, r3
 8004a28:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004a2c:	4bab      	ldr	r3, [pc, #684]	; (8004cdc <quat_startup+0x394>)
 8004a2e:	edc3 7a00 	vstr	s15, [r3]
  my = mag_proc_data.my;
 8004a32:	4ba9      	ldr	r3, [pc, #676]	; (8004cd8 <quat_startup+0x390>)
 8004a34:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004a38:	ee07 3a90 	vmov	s15, r3
 8004a3c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004a40:	4ba7      	ldr	r3, [pc, #668]	; (8004ce0 <quat_startup+0x398>)
 8004a42:	edc3 7a00 	vstr	s15, [r3]
  mz = mag_proc_data.mz;
 8004a46:	4ba4      	ldr	r3, [pc, #656]	; (8004cd8 <quat_startup+0x390>)
 8004a48:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8004a4c:	ee07 3a90 	vmov	s15, r3
 8004a50:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004a54:	4ba3      	ldr	r3, [pc, #652]	; (8004ce4 <quat_startup+0x39c>)
 8004a56:	edc3 7a00 	vstr	s15, [r3]

  /* Fast inverse square-root */
  norm = inv_sqrt(ax * ax + ay * ay + az * az);
 8004a5a:	4b9c      	ldr	r3, [pc, #624]	; (8004ccc <quat_startup+0x384>)
 8004a5c:	ed93 7a00 	vldr	s14, [r3]
 8004a60:	4b9a      	ldr	r3, [pc, #616]	; (8004ccc <quat_startup+0x384>)
 8004a62:	edd3 7a00 	vldr	s15, [r3]
 8004a66:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004a6a:	4b99      	ldr	r3, [pc, #612]	; (8004cd0 <quat_startup+0x388>)
 8004a6c:	edd3 6a00 	vldr	s13, [r3]
 8004a70:	4b97      	ldr	r3, [pc, #604]	; (8004cd0 <quat_startup+0x388>)
 8004a72:	edd3 7a00 	vldr	s15, [r3]
 8004a76:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004a7a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004a7e:	4b95      	ldr	r3, [pc, #596]	; (8004cd4 <quat_startup+0x38c>)
 8004a80:	edd3 6a00 	vldr	s13, [r3]
 8004a84:	4b93      	ldr	r3, [pc, #588]	; (8004cd4 <quat_startup+0x38c>)
 8004a86:	edd3 7a00 	vldr	s15, [r3]
 8004a8a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004a8e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004a92:	eeb0 0a67 	vmov.f32	s0, s15
 8004a96:	f7fc fbb9 	bl	800120c <inv_sqrt>
 8004a9a:	ed87 0a0b 	vstr	s0, [r7, #44]	; 0x2c
  ax = ax * norm;
 8004a9e:	4b8b      	ldr	r3, [pc, #556]	; (8004ccc <quat_startup+0x384>)
 8004aa0:	ed93 7a00 	vldr	s14, [r3]
 8004aa4:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8004aa8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004aac:	4b87      	ldr	r3, [pc, #540]	; (8004ccc <quat_startup+0x384>)
 8004aae:	edc3 7a00 	vstr	s15, [r3]
  ay = ay * norm;
 8004ab2:	4b87      	ldr	r3, [pc, #540]	; (8004cd0 <quat_startup+0x388>)
 8004ab4:	ed93 7a00 	vldr	s14, [r3]
 8004ab8:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8004abc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ac0:	4b83      	ldr	r3, [pc, #524]	; (8004cd0 <quat_startup+0x388>)
 8004ac2:	edc3 7a00 	vstr	s15, [r3]
  az = az * norm;
 8004ac6:	4b83      	ldr	r3, [pc, #524]	; (8004cd4 <quat_startup+0x38c>)
 8004ac8:	ed93 7a00 	vldr	s14, [r3]
 8004acc:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8004ad0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ad4:	4b7f      	ldr	r3, [pc, #508]	; (8004cd4 <quat_startup+0x38c>)
 8004ad6:	edc3 7a00 	vstr	s15, [r3]

  /* estimated direction of gravity  (v) */
  vx = 2.0f * (q1q3 - q0q2);
 8004ada:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8004ade:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8004ae2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004ae6:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8004aea:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
  vy = 2.0f * (q0q1 + q2q3);
 8004aee:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8004af2:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8004af6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004afa:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8004afe:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
  vz = q0q0 - q1q1 - q2q2 + q3q3;
 8004b02:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8004b06:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8004b0a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004b0e:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8004b12:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004b16:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8004b1a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004b1e:	edc7 7a08 	vstr	s15, [r7, #32]
  wx = (ay * vz - az * vy);
 8004b22:	4b6b      	ldr	r3, [pc, #428]	; (8004cd0 <quat_startup+0x388>)
 8004b24:	ed93 7a00 	vldr	s14, [r3]
 8004b28:	edd7 7a08 	vldr	s15, [r7, #32]
 8004b2c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004b30:	4b68      	ldr	r3, [pc, #416]	; (8004cd4 <quat_startup+0x38c>)
 8004b32:	edd3 6a00 	vldr	s13, [r3]
 8004b36:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8004b3a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004b3e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004b42:	edc7 7a07 	vstr	s15, [r7, #28]
  wy = (az * vx - ax * vz);
 8004b46:	4b63      	ldr	r3, [pc, #396]	; (8004cd4 <quat_startup+0x38c>)
 8004b48:	ed93 7a00 	vldr	s14, [r3]
 8004b4c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8004b50:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004b54:	4b5d      	ldr	r3, [pc, #372]	; (8004ccc <quat_startup+0x384>)
 8004b56:	edd3 6a00 	vldr	s13, [r3]
 8004b5a:	edd7 7a08 	vldr	s15, [r7, #32]
 8004b5e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004b62:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004b66:	edc7 7a06 	vstr	s15, [r7, #24]
  wz = (ax * vy - ay * vx);
 8004b6a:	4b58      	ldr	r3, [pc, #352]	; (8004ccc <quat_startup+0x384>)
 8004b6c:	ed93 7a00 	vldr	s14, [r3]
 8004b70:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8004b74:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004b78:	4b55      	ldr	r3, [pc, #340]	; (8004cd0 <quat_startup+0x388>)
 8004b7a:	edd3 6a00 	vldr	s13, [r3]
 8004b7e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8004b82:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004b86:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004b8a:	edc7 7a05 	vstr	s15, [r7, #20]
  /* PI */
  tempq0 =  q0 + (-q1 * wx - q2 * wy - q3 * wz);
 8004b8e:	4b47      	ldr	r3, [pc, #284]	; (8004cac <quat_startup+0x364>)
 8004b90:	edd3 7a00 	vldr	s15, [r3]
 8004b94:	eeb1 7a67 	vneg.f32	s14, s15
 8004b98:	edd7 7a07 	vldr	s15, [r7, #28]
 8004b9c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004ba0:	4b43      	ldr	r3, [pc, #268]	; (8004cb0 <quat_startup+0x368>)
 8004ba2:	edd3 6a00 	vldr	s13, [r3]
 8004ba6:	edd7 7a06 	vldr	s15, [r7, #24]
 8004baa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004bae:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004bb2:	4b40      	ldr	r3, [pc, #256]	; (8004cb4 <quat_startup+0x36c>)
 8004bb4:	edd3 6a00 	vldr	s13, [r3]
 8004bb8:	edd7 7a05 	vldr	s15, [r7, #20]
 8004bbc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004bc0:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004bc4:	4b38      	ldr	r3, [pc, #224]	; (8004ca8 <quat_startup+0x360>)
 8004bc6:	edd3 7a00 	vldr	s15, [r3]
 8004bca:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004bce:	edc7 7a04 	vstr	s15, [r7, #16]
  tempq1 =  q1 +(q0 * wx + q2 * wz - q3 * wy);
 8004bd2:	4b35      	ldr	r3, [pc, #212]	; (8004ca8 <quat_startup+0x360>)
 8004bd4:	ed93 7a00 	vldr	s14, [r3]
 8004bd8:	edd7 7a07 	vldr	s15, [r7, #28]
 8004bdc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004be0:	4b33      	ldr	r3, [pc, #204]	; (8004cb0 <quat_startup+0x368>)
 8004be2:	edd3 6a00 	vldr	s13, [r3]
 8004be6:	edd7 7a05 	vldr	s15, [r7, #20]
 8004bea:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004bee:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004bf2:	4b30      	ldr	r3, [pc, #192]	; (8004cb4 <quat_startup+0x36c>)
 8004bf4:	edd3 6a00 	vldr	s13, [r3]
 8004bf8:	edd7 7a06 	vldr	s15, [r7, #24]
 8004bfc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004c00:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004c04:	4b29      	ldr	r3, [pc, #164]	; (8004cac <quat_startup+0x364>)
 8004c06:	edd3 7a00 	vldr	s15, [r3]
 8004c0a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004c0e:	edc7 7a03 	vstr	s15, [r7, #12]
  tempq2 =  q2 +(q0 * wy - q1 * wz + q3 * wx);
 8004c12:	4b25      	ldr	r3, [pc, #148]	; (8004ca8 <quat_startup+0x360>)
 8004c14:	ed93 7a00 	vldr	s14, [r3]
 8004c18:	edd7 7a06 	vldr	s15, [r7, #24]
 8004c1c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004c20:	4b22      	ldr	r3, [pc, #136]	; (8004cac <quat_startup+0x364>)
 8004c22:	edd3 6a00 	vldr	s13, [r3]
 8004c26:	edd7 7a05 	vldr	s15, [r7, #20]
 8004c2a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004c2e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004c32:	4b20      	ldr	r3, [pc, #128]	; (8004cb4 <quat_startup+0x36c>)
 8004c34:	edd3 6a00 	vldr	s13, [r3]
 8004c38:	edd7 7a07 	vldr	s15, [r7, #28]
 8004c3c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004c40:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004c44:	4b1a      	ldr	r3, [pc, #104]	; (8004cb0 <quat_startup+0x368>)
 8004c46:	edd3 7a00 	vldr	s15, [r3]
 8004c4a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004c4e:	edc7 7a02 	vstr	s15, [r7, #8]
  tempq3 =  q3 +(q0 * wz + q1 * wy - q2 * wx);
 8004c52:	4b15      	ldr	r3, [pc, #84]	; (8004ca8 <quat_startup+0x360>)
 8004c54:	ed93 7a00 	vldr	s14, [r3]
 8004c58:	edd7 7a05 	vldr	s15, [r7, #20]
 8004c5c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004c60:	4b12      	ldr	r3, [pc, #72]	; (8004cac <quat_startup+0x364>)
 8004c62:	edd3 6a00 	vldr	s13, [r3]
 8004c66:	edd7 7a06 	vldr	s15, [r7, #24]
 8004c6a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004c6e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004c72:	4b0f      	ldr	r3, [pc, #60]	; (8004cb0 <quat_startup+0x368>)
 8004c74:	edd3 6a00 	vldr	s13, [r3]
 8004c78:	edd7 7a07 	vldr	s15, [r7, #28]
 8004c7c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004c80:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004c84:	4b0b      	ldr	r3, [pc, #44]	; (8004cb4 <quat_startup+0x36c>)
 8004c86:	edd3 7a00 	vldr	s15, [r3]
 8004c8a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004c8e:	edc7 7a01 	vstr	s15, [r7, #4]

  /* normalise quaternion */
  norm = inv_sqrt(tempq0 * tempq0 + tempq1 * tempq1 + tempq2 * tempq2 + tempq3 * tempq3);
 8004c92:	edd7 7a04 	vldr	s15, [r7, #16]
 8004c96:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8004c9a:	edd7 7a03 	vldr	s15, [r7, #12]
 8004c9e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8004ca2:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004ca6:	e01f      	b.n	8004ce8 <quat_startup+0x3a0>
 8004ca8:	20000008 	.word	0x20000008
 8004cac:	20001fec 	.word	0x20001fec
 8004cb0:	20001ff0 	.word	0x20001ff0
 8004cb4:	20001ff4 	.word	0x20001ff4
 8004cb8:	20002048 	.word	0x20002048
 8004cbc:	20002004 	.word	0x20002004
 8004cc0:	20002008 	.word	0x20002008
 8004cc4:	2000200c 	.word	0x2000200c
 8004cc8:	20002038 	.word	0x20002038
 8004ccc:	20002010 	.word	0x20002010
 8004cd0:	20002014 	.word	0x20002014
 8004cd4:	20002018 	.word	0x20002018
 8004cd8:	20002058 	.word	0x20002058
 8004cdc:	2000201c 	.word	0x2000201c
 8004ce0:	20002020 	.word	0x20002020
 8004ce4:	20002024 	.word	0x20002024
 8004ce8:	edd7 7a02 	vldr	s15, [r7, #8]
 8004cec:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8004cf0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004cf4:	edd7 7a01 	vldr	s15, [r7, #4]
 8004cf8:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8004cfc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004d00:	eeb0 0a67 	vmov.f32	s0, s15
 8004d04:	f7fc fa82 	bl	800120c <inv_sqrt>
 8004d08:	ed87 0a0b 	vstr	s0, [r7, #44]	; 0x2c
  q0 = tempq0 * norm;
 8004d0c:	ed97 7a04 	vldr	s14, [r7, #16]
 8004d10:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8004d14:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d18:	4b10      	ldr	r3, [pc, #64]	; (8004d5c <quat_startup+0x414>)
 8004d1a:	edc3 7a00 	vstr	s15, [r3]
  q1 = tempq1 * norm;
 8004d1e:	ed97 7a03 	vldr	s14, [r7, #12]
 8004d22:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8004d26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d2a:	4b0d      	ldr	r3, [pc, #52]	; (8004d60 <quat_startup+0x418>)
 8004d2c:	edc3 7a00 	vstr	s15, [r3]
  q2 = tempq2 * norm;
 8004d30:	ed97 7a02 	vldr	s14, [r7, #8]
 8004d34:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8004d38:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d3c:	4b09      	ldr	r3, [pc, #36]	; (8004d64 <quat_startup+0x41c>)
 8004d3e:	edc3 7a00 	vstr	s15, [r3]
  q3 = tempq3 * norm;
 8004d42:	ed97 7a01 	vldr	s14, [r7, #4]
 8004d46:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8004d4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d4e:	4b06      	ldr	r3, [pc, #24]	; (8004d68 <quat_startup+0x420>)
 8004d50:	edc3 7a00 	vstr	s15, [r3]
}
 8004d54:	bf00      	nop
 8004d56:	3750      	adds	r7, #80	; 0x50
 8004d58:	46bd      	mov	sp, r7
 8004d5a:	bd80      	pop	{r7, pc}
 8004d5c:	20000008 	.word	0x20000008
 8004d60:	20001fec 	.word	0x20001fec
 8004d64:	20001ff0 	.word	0x20001ff0
 8004d68:	20001ff4 	.word	0x20001ff4

08004d6c <imu_ahrs_update>:

void imu_ahrs_update(void) {
 8004d6c:	b580      	push	{r7, lr}
 8004d6e:	b09e      	sub	sp, #120	; 0x78
 8004d70:	af00      	add	r7, sp, #0
	float hx, hy, hz, bx, bz;
	float vx, vy, vz, wx, wy, wz;
	float ex, ey, ez, halfT;
	float tempq0, tempq1, tempq2, tempq3;

	float q0q0 = q0 * q0;
 8004d72:	4bd3      	ldr	r3, [pc, #844]	; (80050c0 <imu_ahrs_update+0x354>)
 8004d74:	ed93 7a00 	vldr	s14, [r3]
 8004d78:	4bd1      	ldr	r3, [pc, #836]	; (80050c0 <imu_ahrs_update+0x354>)
 8004d7a:	edd3 7a00 	vldr	s15, [r3]
 8004d7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d82:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
	float q0q1 = q0 * q1;
 8004d86:	4bce      	ldr	r3, [pc, #824]	; (80050c0 <imu_ahrs_update+0x354>)
 8004d88:	ed93 7a00 	vldr	s14, [r3]
 8004d8c:	4bcd      	ldr	r3, [pc, #820]	; (80050c4 <imu_ahrs_update+0x358>)
 8004d8e:	edd3 7a00 	vldr	s15, [r3]
 8004d92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d96:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70
	float q0q2 = q0 * q2;
 8004d9a:	4bc9      	ldr	r3, [pc, #804]	; (80050c0 <imu_ahrs_update+0x354>)
 8004d9c:	ed93 7a00 	vldr	s14, [r3]
 8004da0:	4bc9      	ldr	r3, [pc, #804]	; (80050c8 <imu_ahrs_update+0x35c>)
 8004da2:	edd3 7a00 	vldr	s15, [r3]
 8004da6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004daa:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
	float q0q3 = q0 * q3;
 8004dae:	4bc4      	ldr	r3, [pc, #784]	; (80050c0 <imu_ahrs_update+0x354>)
 8004db0:	ed93 7a00 	vldr	s14, [r3]
 8004db4:	4bc5      	ldr	r3, [pc, #788]	; (80050cc <imu_ahrs_update+0x360>)
 8004db6:	edd3 7a00 	vldr	s15, [r3]
 8004dba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004dbe:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68
	float q1q1 = q1 * q1;
 8004dc2:	4bc0      	ldr	r3, [pc, #768]	; (80050c4 <imu_ahrs_update+0x358>)
 8004dc4:	ed93 7a00 	vldr	s14, [r3]
 8004dc8:	4bbe      	ldr	r3, [pc, #760]	; (80050c4 <imu_ahrs_update+0x358>)
 8004dca:	edd3 7a00 	vldr	s15, [r3]
 8004dce:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004dd2:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
	float q1q2 = q1 * q2;
 8004dd6:	4bbb      	ldr	r3, [pc, #748]	; (80050c4 <imu_ahrs_update+0x358>)
 8004dd8:	ed93 7a00 	vldr	s14, [r3]
 8004ddc:	4bba      	ldr	r3, [pc, #744]	; (80050c8 <imu_ahrs_update+0x35c>)
 8004dde:	edd3 7a00 	vldr	s15, [r3]
 8004de2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004de6:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
	float q1q3 = q1 * q3;
 8004dea:	4bb6      	ldr	r3, [pc, #728]	; (80050c4 <imu_ahrs_update+0x358>)
 8004dec:	ed93 7a00 	vldr	s14, [r3]
 8004df0:	4bb6      	ldr	r3, [pc, #728]	; (80050cc <imu_ahrs_update+0x360>)
 8004df2:	edd3 7a00 	vldr	s15, [r3]
 8004df6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004dfa:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
	float q2q2 = q2 * q2;
 8004dfe:	4bb2      	ldr	r3, [pc, #712]	; (80050c8 <imu_ahrs_update+0x35c>)
 8004e00:	ed93 7a00 	vldr	s14, [r3]
 8004e04:	4bb0      	ldr	r3, [pc, #704]	; (80050c8 <imu_ahrs_update+0x35c>)
 8004e06:	edd3 7a00 	vldr	s15, [r3]
 8004e0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e0e:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
	float q2q3 = q2 * q3;
 8004e12:	4bad      	ldr	r3, [pc, #692]	; (80050c8 <imu_ahrs_update+0x35c>)
 8004e14:	ed93 7a00 	vldr	s14, [r3]
 8004e18:	4bac      	ldr	r3, [pc, #688]	; (80050cc <imu_ahrs_update+0x360>)
 8004e1a:	edd3 7a00 	vldr	s15, [r3]
 8004e1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e22:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
	float q3q3 = q3 * q3;
 8004e26:	4ba9      	ldr	r3, [pc, #676]	; (80050cc <imu_ahrs_update+0x360>)
 8004e28:	ed93 7a00 	vldr	s14, [r3]
 8004e2c:	4ba7      	ldr	r3, [pc, #668]	; (80050cc <imu_ahrs_update+0x360>)
 8004e2e:	edd3 7a00 	vldr	s15, [r3]
 8004e32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e36:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50

	gx = gyro_proc_data.gx;
 8004e3a:	4ba5      	ldr	r3, [pc, #660]	; (80050d0 <imu_ahrs_update+0x364>)
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	4aa5      	ldr	r2, [pc, #660]	; (80050d4 <imu_ahrs_update+0x368>)
 8004e40:	6013      	str	r3, [r2, #0]
	gy = gyro_proc_data.gy;
 8004e42:	4ba3      	ldr	r3, [pc, #652]	; (80050d0 <imu_ahrs_update+0x364>)
 8004e44:	685b      	ldr	r3, [r3, #4]
 8004e46:	4aa4      	ldr	r2, [pc, #656]	; (80050d8 <imu_ahrs_update+0x36c>)
 8004e48:	6013      	str	r3, [r2, #0]
	gz = gyro_proc_data.gz;
 8004e4a:	4ba1      	ldr	r3, [pc, #644]	; (80050d0 <imu_ahrs_update+0x364>)
 8004e4c:	689b      	ldr	r3, [r3, #8]
 8004e4e:	4aa3      	ldr	r2, [pc, #652]	; (80050dc <imu_ahrs_update+0x370>)
 8004e50:	6013      	str	r3, [r2, #0]
	ax = accel_proc_data.ax;
 8004e52:	4ba3      	ldr	r3, [pc, #652]	; (80050e0 <imu_ahrs_update+0x374>)
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	4aa3      	ldr	r2, [pc, #652]	; (80050e4 <imu_ahrs_update+0x378>)
 8004e58:	6013      	str	r3, [r2, #0]
	ay = accel_proc_data.ay;
 8004e5a:	4ba1      	ldr	r3, [pc, #644]	; (80050e0 <imu_ahrs_update+0x374>)
 8004e5c:	685b      	ldr	r3, [r3, #4]
 8004e5e:	4aa2      	ldr	r2, [pc, #648]	; (80050e8 <imu_ahrs_update+0x37c>)
 8004e60:	6013      	str	r3, [r2, #0]
	az = accel_proc_data.az;
 8004e62:	4b9f      	ldr	r3, [pc, #636]	; (80050e0 <imu_ahrs_update+0x374>)
 8004e64:	689b      	ldr	r3, [r3, #8]
 8004e66:	4aa1      	ldr	r2, [pc, #644]	; (80050ec <imu_ahrs_update+0x380>)
 8004e68:	6013      	str	r3, [r2, #0]
	mx = mag_proc_data.mx;
 8004e6a:	4ba1      	ldr	r3, [pc, #644]	; (80050f0 <imu_ahrs_update+0x384>)
 8004e6c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004e70:	ee07 3a90 	vmov	s15, r3
 8004e74:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004e78:	4b9e      	ldr	r3, [pc, #632]	; (80050f4 <imu_ahrs_update+0x388>)
 8004e7a:	edc3 7a00 	vstr	s15, [r3]
	my = mag_proc_data.my;
 8004e7e:	4b9c      	ldr	r3, [pc, #624]	; (80050f0 <imu_ahrs_update+0x384>)
 8004e80:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004e84:	ee07 3a90 	vmov	s15, r3
 8004e88:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004e8c:	4b9a      	ldr	r3, [pc, #616]	; (80050f8 <imu_ahrs_update+0x38c>)
 8004e8e:	edc3 7a00 	vstr	s15, [r3]
	mz = mag_proc_data.mz;
 8004e92:	4b97      	ldr	r3, [pc, #604]	; (80050f0 <imu_ahrs_update+0x384>)
 8004e94:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8004e98:	ee07 3a90 	vmov	s15, r3
 8004e9c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004ea0:	4b96      	ldr	r3, [pc, #600]	; (80050fc <imu_ahrs_update+0x390>)
 8004ea2:	edc3 7a00 	vstr	s15, [r3]

	last_proc_times[0] = HAL_GetTick(); //ms
 8004ea6:	f002 fddb 	bl	8007a60 <HAL_GetTick>
 8004eaa:	4603      	mov	r3, r0
 8004eac:	4a94      	ldr	r2, [pc, #592]	; (8005100 <imu_ahrs_update+0x394>)
 8004eae:	6013      	str	r3, [r2, #0]
	halfT = ((float) (last_proc_times[0] - last_proc_times[1]) / 2000.0f);
 8004eb0:	4b93      	ldr	r3, [pc, #588]	; (8005100 <imu_ahrs_update+0x394>)
 8004eb2:	681a      	ldr	r2, [r3, #0]
 8004eb4:	4b92      	ldr	r3, [pc, #584]	; (8005100 <imu_ahrs_update+0x394>)
 8004eb6:	685b      	ldr	r3, [r3, #4]
 8004eb8:	1ad3      	subs	r3, r2, r3
 8004eba:	ee07 3a90 	vmov	s15, r3
 8004ebe:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004ec2:	eddf 6a90 	vldr	s13, [pc, #576]	; 8005104 <imu_ahrs_update+0x398>
 8004ec6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004eca:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
	last_proc_times[1] = last_proc_times[0];
 8004ece:	4b8c      	ldr	r3, [pc, #560]	; (8005100 <imu_ahrs_update+0x394>)
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	4a8b      	ldr	r2, [pc, #556]	; (8005100 <imu_ahrs_update+0x394>)
 8004ed4:	6053      	str	r3, [r2, #4]

	/* Fast inverse square-root */
	norm = inv_sqrt(ax * ax + ay * ay + az * az);
 8004ed6:	4b83      	ldr	r3, [pc, #524]	; (80050e4 <imu_ahrs_update+0x378>)
 8004ed8:	ed93 7a00 	vldr	s14, [r3]
 8004edc:	4b81      	ldr	r3, [pc, #516]	; (80050e4 <imu_ahrs_update+0x378>)
 8004ede:	edd3 7a00 	vldr	s15, [r3]
 8004ee2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004ee6:	4b80      	ldr	r3, [pc, #512]	; (80050e8 <imu_ahrs_update+0x37c>)
 8004ee8:	edd3 6a00 	vldr	s13, [r3]
 8004eec:	4b7e      	ldr	r3, [pc, #504]	; (80050e8 <imu_ahrs_update+0x37c>)
 8004eee:	edd3 7a00 	vldr	s15, [r3]
 8004ef2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004ef6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004efa:	4b7c      	ldr	r3, [pc, #496]	; (80050ec <imu_ahrs_update+0x380>)
 8004efc:	edd3 6a00 	vldr	s13, [r3]
 8004f00:	4b7a      	ldr	r3, [pc, #488]	; (80050ec <imu_ahrs_update+0x380>)
 8004f02:	edd3 7a00 	vldr	s15, [r3]
 8004f06:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004f0a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004f0e:	eeb0 0a67 	vmov.f32	s0, s15
 8004f12:	f7fc f97b 	bl	800120c <inv_sqrt>
 8004f16:	ed87 0a12 	vstr	s0, [r7, #72]	; 0x48
	ax = ax * norm;
 8004f1a:	4b72      	ldr	r3, [pc, #456]	; (80050e4 <imu_ahrs_update+0x378>)
 8004f1c:	ed93 7a00 	vldr	s14, [r3]
 8004f20:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8004f24:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f28:	4b6e      	ldr	r3, [pc, #440]	; (80050e4 <imu_ahrs_update+0x378>)
 8004f2a:	edc3 7a00 	vstr	s15, [r3]
	ay = ay * norm;
 8004f2e:	4b6e      	ldr	r3, [pc, #440]	; (80050e8 <imu_ahrs_update+0x37c>)
 8004f30:	ed93 7a00 	vldr	s14, [r3]
 8004f34:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8004f38:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f3c:	4b6a      	ldr	r3, [pc, #424]	; (80050e8 <imu_ahrs_update+0x37c>)
 8004f3e:	edc3 7a00 	vstr	s15, [r3]
	az = az * norm;
 8004f42:	4b6a      	ldr	r3, [pc, #424]	; (80050ec <imu_ahrs_update+0x380>)
 8004f44:	ed93 7a00 	vldr	s14, [r3]
 8004f48:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8004f4c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f50:	4b66      	ldr	r3, [pc, #408]	; (80050ec <imu_ahrs_update+0x380>)
 8004f52:	edc3 7a00 	vstr	s15, [r3]
		norm = inv_sqrt(mx*mx + my*my + mz*mz);
		mx = mx * norm;
		my = my * norm;
		mz = mz * norm;
	#else
	mx = 0;
 8004f56:	4b67      	ldr	r3, [pc, #412]	; (80050f4 <imu_ahrs_update+0x388>)
 8004f58:	f04f 0200 	mov.w	r2, #0
 8004f5c:	601a      	str	r2, [r3, #0]
	my = 0;
 8004f5e:	4b66      	ldr	r3, [pc, #408]	; (80050f8 <imu_ahrs_update+0x38c>)
 8004f60:	f04f 0200 	mov.w	r2, #0
 8004f64:	601a      	str	r2, [r3, #0]
	mz = 0;
 8004f66:	4b65      	ldr	r3, [pc, #404]	; (80050fc <imu_ahrs_update+0x390>)
 8004f68:	f04f 0200 	mov.w	r2, #0
 8004f6c:	601a      	str	r2, [r3, #0]
#endif
	/* compute reference direction of flux */
	hx = 2.0f * mx * (0.5f - q2q2 - q3q3) + 2.0f * my * (q1q2 - q0q3) + 2.0f * mz * (q1q3 + q0q2);
 8004f6e:	4b61      	ldr	r3, [pc, #388]	; (80050f4 <imu_ahrs_update+0x388>)
 8004f70:	edd3 7a00 	vldr	s15, [r3]
 8004f74:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8004f78:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8004f7c:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8004f80:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8004f84:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8004f88:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8004f8c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004f90:	4b59      	ldr	r3, [pc, #356]	; (80050f8 <imu_ahrs_update+0x38c>)
 8004f92:	edd3 7a00 	vldr	s15, [r3]
 8004f96:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8004f9a:	ed97 6a18 	vldr	s12, [r7, #96]	; 0x60
 8004f9e:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8004fa2:	ee76 7a67 	vsub.f32	s15, s12, s15
 8004fa6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004faa:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004fae:	4b53      	ldr	r3, [pc, #332]	; (80050fc <imu_ahrs_update+0x390>)
 8004fb0:	edd3 7a00 	vldr	s15, [r3]
 8004fb4:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8004fb8:	ed97 6a17 	vldr	s12, [r7, #92]	; 0x5c
 8004fbc:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8004fc0:	ee76 7a27 	vadd.f32	s15, s12, s15
 8004fc4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004fc8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004fcc:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
	hy = 2.0f * mx * (q1q2 + q0q3) + 2.0f * my * (0.5f - q1q1 - q3q3) + 2.0f * mz * (q2q3 - q0q1);
 8004fd0:	4b48      	ldr	r3, [pc, #288]	; (80050f4 <imu_ahrs_update+0x388>)
 8004fd2:	edd3 7a00 	vldr	s15, [r3]
 8004fd6:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8004fda:	edd7 6a18 	vldr	s13, [r7, #96]	; 0x60
 8004fde:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8004fe2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004fe6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004fea:	4b43      	ldr	r3, [pc, #268]	; (80050f8 <imu_ahrs_update+0x38c>)
 8004fec:	edd3 7a00 	vldr	s15, [r3]
 8004ff0:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8004ff4:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8004ff8:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8004ffc:	ee36 6a67 	vsub.f32	s12, s12, s15
 8005000:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8005004:	ee76 7a67 	vsub.f32	s15, s12, s15
 8005008:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800500c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005010:	4b3a      	ldr	r3, [pc, #232]	; (80050fc <imu_ahrs_update+0x390>)
 8005012:	edd3 7a00 	vldr	s15, [r3]
 8005016:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800501a:	ed97 6a15 	vldr	s12, [r7, #84]	; 0x54
 800501e:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8005022:	ee76 7a67 	vsub.f32	s15, s12, s15
 8005026:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800502a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800502e:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
	hz = 2.0f * mx * (q1q3 - q0q2) + 2.0f * my * (q2q3 + q0q1) + 2.0f * mz * (0.5f - q1q1 - q2q2);
 8005032:	4b30      	ldr	r3, [pc, #192]	; (80050f4 <imu_ahrs_update+0x388>)
 8005034:	edd3 7a00 	vldr	s15, [r3]
 8005038:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800503c:	edd7 6a17 	vldr	s13, [r7, #92]	; 0x5c
 8005040:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8005044:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8005048:	ee27 7a27 	vmul.f32	s14, s14, s15
 800504c:	4b2a      	ldr	r3, [pc, #168]	; (80050f8 <imu_ahrs_update+0x38c>)
 800504e:	edd3 7a00 	vldr	s15, [r3]
 8005052:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8005056:	ed97 6a15 	vldr	s12, [r7, #84]	; 0x54
 800505a:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 800505e:	ee76 7a27 	vadd.f32	s15, s12, s15
 8005062:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005066:	ee37 7a27 	vadd.f32	s14, s14, s15
 800506a:	4b24      	ldr	r3, [pc, #144]	; (80050fc <imu_ahrs_update+0x390>)
 800506c:	edd3 7a00 	vldr	s15, [r3]
 8005070:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8005074:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8005078:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 800507c:	ee36 6a67 	vsub.f32	s12, s12, s15
 8005080:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8005084:	ee76 7a67 	vsub.f32	s15, s12, s15
 8005088:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800508c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005090:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
	bx = sqrt((hx * hx) + (hy * hy));
 8005094:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8005098:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800509c:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 80050a0:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80050a4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80050a8:	ee17 0a90 	vmov	r0, s15
 80050ac:	f7fb fa04 	bl	80004b8 <__aeabi_f2d>
 80050b0:	4602      	mov	r2, r0
 80050b2:	460b      	mov	r3, r1
 80050b4:	ec43 2b10 	vmov	d0, r2, r3
 80050b8:	f00f fe74 	bl	8014da4 <sqrt>
 80050bc:	e024      	b.n	8005108 <imu_ahrs_update+0x39c>
 80050be:	bf00      	nop
 80050c0:	20000008 	.word	0x20000008
 80050c4:	20001fec 	.word	0x20001fec
 80050c8:	20001ff0 	.word	0x20001ff0
 80050cc:	20001ff4 	.word	0x20001ff4
 80050d0:	20002048 	.word	0x20002048
 80050d4:	20002004 	.word	0x20002004
 80050d8:	20002008 	.word	0x20002008
 80050dc:	2000200c 	.word	0x2000200c
 80050e0:	20002038 	.word	0x20002038
 80050e4:	20002010 	.word	0x20002010
 80050e8:	20002014 	.word	0x20002014
 80050ec:	20002018 	.word	0x20002018
 80050f0:	20002058 	.word	0x20002058
 80050f4:	2000201c 	.word	0x2000201c
 80050f8:	20002020 	.word	0x20002020
 80050fc:	20002024 	.word	0x20002024
 8005100:	20002064 	.word	0x20002064
 8005104:	44fa0000 	.word	0x44fa0000
 8005108:	ec53 2b10 	vmov	r2, r3, d0
 800510c:	4610      	mov	r0, r2
 800510e:	4619      	mov	r1, r3
 8005110:	f7fb fd22 	bl	8000b58 <__aeabi_d2f>
 8005114:	4603      	mov	r3, r0
 8005116:	63bb      	str	r3, [r7, #56]	; 0x38
	bz = hz;
 8005118:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800511a:	637b      	str	r3, [r7, #52]	; 0x34

	/* estimated direction of gravity and flux (v and w) */
	vx = 2.0f * (q1q3 - q0q2);
 800511c:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8005120:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8005124:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005128:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800512c:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
	vy = 2.0f * (q0q1 + q2q3);
 8005130:	ed97 7a1c 	vldr	s14, [r7, #112]	; 0x70
 8005134:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8005138:	ee77 7a27 	vadd.f32	s15, s14, s15
 800513c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8005140:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	vz = q0q0 - q1q1 - q2q2 + q3q3;
 8005144:	ed97 7a1d 	vldr	s14, [r7, #116]	; 0x74
 8005148:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 800514c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005150:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8005154:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005158:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 800515c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005160:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
	wx = 2.0f * bx * (0.5f - q2q2 - q3q3) + 2.0f * bz * (q1q3 - q0q2);
 8005164:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8005168:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800516c:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8005170:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8005174:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8005178:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 800517c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8005180:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005184:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8005188:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800518c:	ed97 6a17 	vldr	s12, [r7, #92]	; 0x5c
 8005190:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8005194:	ee76 7a67 	vsub.f32	s15, s12, s15
 8005198:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800519c:	ee77 7a27 	vadd.f32	s15, s14, s15
 80051a0:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	wy = 2.0f * bx * (q1q2 - q0q3) + 2.0f * bz * (q0q1 + q2q3);
 80051a4:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80051a8:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80051ac:	edd7 6a18 	vldr	s13, [r7, #96]	; 0x60
 80051b0:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 80051b4:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80051b8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80051bc:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80051c0:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80051c4:	ed97 6a1c 	vldr	s12, [r7, #112]	; 0x70
 80051c8:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80051cc:	ee76 7a27 	vadd.f32	s15, s12, s15
 80051d0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80051d4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80051d8:	edc7 7a08 	vstr	s15, [r7, #32]
	wz = 2.0f * bx * (q0q2 + q1q3) + 2.0f * bz * (0.5f - q1q1 - q2q2);
 80051dc:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80051e0:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80051e4:	edd7 6a1b 	vldr	s13, [r7, #108]	; 0x6c
 80051e8:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80051ec:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80051f0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80051f4:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80051f8:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80051fc:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8005200:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8005204:	ee36 6a67 	vsub.f32	s12, s12, s15
 8005208:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 800520c:	ee76 7a67 	vsub.f32	s15, s12, s15
 8005210:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005214:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005218:	edc7 7a07 	vstr	s15, [r7, #28]

	/*
	 * error is sum of cross product between reference direction
	 * of fields and direction measured by sensors
	 */
	ex = (ay * vz - az * vy) + (my * wz - mz * wy);
 800521c:	4bde      	ldr	r3, [pc, #888]	; (8005598 <imu_ahrs_update+0x82c>)
 800521e:	ed93 7a00 	vldr	s14, [r3]
 8005222:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8005226:	ee27 7a27 	vmul.f32	s14, s14, s15
 800522a:	4bdc      	ldr	r3, [pc, #880]	; (800559c <imu_ahrs_update+0x830>)
 800522c:	edd3 6a00 	vldr	s13, [r3]
 8005230:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8005234:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005238:	ee37 7a67 	vsub.f32	s14, s14, s15
 800523c:	4bd8      	ldr	r3, [pc, #864]	; (80055a0 <imu_ahrs_update+0x834>)
 800523e:	edd3 6a00 	vldr	s13, [r3]
 8005242:	edd7 7a07 	vldr	s15, [r7, #28]
 8005246:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800524a:	4bd6      	ldr	r3, [pc, #856]	; (80055a4 <imu_ahrs_update+0x838>)
 800524c:	ed93 6a00 	vldr	s12, [r3]
 8005250:	edd7 7a08 	vldr	s15, [r7, #32]
 8005254:	ee66 7a27 	vmul.f32	s15, s12, s15
 8005258:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800525c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005260:	edc7 7a06 	vstr	s15, [r7, #24]
	ey = (az * vx - ax * vz) + (mz * wx - mx * wz);
 8005264:	4bcd      	ldr	r3, [pc, #820]	; (800559c <imu_ahrs_update+0x830>)
 8005266:	ed93 7a00 	vldr	s14, [r3]
 800526a:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800526e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005272:	4bcd      	ldr	r3, [pc, #820]	; (80055a8 <imu_ahrs_update+0x83c>)
 8005274:	edd3 6a00 	vldr	s13, [r3]
 8005278:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800527c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005280:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005284:	4bc7      	ldr	r3, [pc, #796]	; (80055a4 <imu_ahrs_update+0x838>)
 8005286:	edd3 6a00 	vldr	s13, [r3]
 800528a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800528e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005292:	4bc6      	ldr	r3, [pc, #792]	; (80055ac <imu_ahrs_update+0x840>)
 8005294:	ed93 6a00 	vldr	s12, [r3]
 8005298:	edd7 7a07 	vldr	s15, [r7, #28]
 800529c:	ee66 7a27 	vmul.f32	s15, s12, s15
 80052a0:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80052a4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80052a8:	edc7 7a05 	vstr	s15, [r7, #20]
	ez = (ax * vy - ay * vx) + (mx * wy - my * wx);
 80052ac:	4bbe      	ldr	r3, [pc, #760]	; (80055a8 <imu_ahrs_update+0x83c>)
 80052ae:	ed93 7a00 	vldr	s14, [r3]
 80052b2:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80052b6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80052ba:	4bb7      	ldr	r3, [pc, #732]	; (8005598 <imu_ahrs_update+0x82c>)
 80052bc:	edd3 6a00 	vldr	s13, [r3]
 80052c0:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80052c4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80052c8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80052cc:	4bb7      	ldr	r3, [pc, #732]	; (80055ac <imu_ahrs_update+0x840>)
 80052ce:	edd3 6a00 	vldr	s13, [r3]
 80052d2:	edd7 7a08 	vldr	s15, [r7, #32]
 80052d6:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80052da:	4bb1      	ldr	r3, [pc, #708]	; (80055a0 <imu_ahrs_update+0x834>)
 80052dc:	ed93 6a00 	vldr	s12, [r3]
 80052e0:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80052e4:	ee66 7a27 	vmul.f32	s15, s12, s15
 80052e8:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80052ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 80052f0:	edc7 7a04 	vstr	s15, [r7, #16]

	/* PI */
	if (ex != 0.0f && ey != 0.0f && ez != 0.0f) {
 80052f4:	edd7 7a06 	vldr	s15, [r7, #24]
 80052f8:	eef5 7a40 	vcmp.f32	s15, #0.0
 80052fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005300:	d07c      	beq.n	80053fc <imu_ahrs_update+0x690>
 8005302:	edd7 7a05 	vldr	s15, [r7, #20]
 8005306:	eef5 7a40 	vcmp.f32	s15, #0.0
 800530a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800530e:	d075      	beq.n	80053fc <imu_ahrs_update+0x690>
 8005310:	edd7 7a04 	vldr	s15, [r7, #16]
 8005314:	eef5 7a40 	vcmp.f32	s15, #0.0
 8005318:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800531c:	d06e      	beq.n	80053fc <imu_ahrs_update+0x690>
		exInt = exInt + ex * AHRSKi * halfT;
 800531e:	edd7 7a06 	vldr	s15, [r7, #24]
 8005322:	ed9f 7aa3 	vldr	s14, [pc, #652]	; 80055b0 <imu_ahrs_update+0x844>
 8005326:	ee27 7a87 	vmul.f32	s14, s15, s14
 800532a:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 800532e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005332:	4ba0      	ldr	r3, [pc, #640]	; (80055b4 <imu_ahrs_update+0x848>)
 8005334:	edd3 7a00 	vldr	s15, [r3]
 8005338:	ee77 7a27 	vadd.f32	s15, s14, s15
 800533c:	4b9d      	ldr	r3, [pc, #628]	; (80055b4 <imu_ahrs_update+0x848>)
 800533e:	edc3 7a00 	vstr	s15, [r3]
		eyInt = eyInt + ey * AHRSKi * halfT;
 8005342:	edd7 7a05 	vldr	s15, [r7, #20]
 8005346:	ed9f 7a9a 	vldr	s14, [pc, #616]	; 80055b0 <imu_ahrs_update+0x844>
 800534a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800534e:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8005352:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005356:	4b98      	ldr	r3, [pc, #608]	; (80055b8 <imu_ahrs_update+0x84c>)
 8005358:	edd3 7a00 	vldr	s15, [r3]
 800535c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005360:	4b95      	ldr	r3, [pc, #596]	; (80055b8 <imu_ahrs_update+0x84c>)
 8005362:	edc3 7a00 	vstr	s15, [r3]
		ezInt = ezInt + ez * AHRSKi * halfT;
 8005366:	edd7 7a04 	vldr	s15, [r7, #16]
 800536a:	ed9f 7a91 	vldr	s14, [pc, #580]	; 80055b0 <imu_ahrs_update+0x844>
 800536e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8005372:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8005376:	ee27 7a27 	vmul.f32	s14, s14, s15
 800537a:	4b90      	ldr	r3, [pc, #576]	; (80055bc <imu_ahrs_update+0x850>)
 800537c:	edd3 7a00 	vldr	s15, [r3]
 8005380:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005384:	4b8d      	ldr	r3, [pc, #564]	; (80055bc <imu_ahrs_update+0x850>)
 8005386:	edc3 7a00 	vstr	s15, [r3]

		gx = gx + AHRSKp * ex + exInt;
 800538a:	edd7 7a06 	vldr	s15, [r7, #24]
 800538e:	ed9f 7a8c 	vldr	s14, [pc, #560]	; 80055c0 <imu_ahrs_update+0x854>
 8005392:	ee27 7a87 	vmul.f32	s14, s15, s14
 8005396:	4b8b      	ldr	r3, [pc, #556]	; (80055c4 <imu_ahrs_update+0x858>)
 8005398:	edd3 7a00 	vldr	s15, [r3]
 800539c:	ee37 7a27 	vadd.f32	s14, s14, s15
 80053a0:	4b84      	ldr	r3, [pc, #528]	; (80055b4 <imu_ahrs_update+0x848>)
 80053a2:	edd3 7a00 	vldr	s15, [r3]
 80053a6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80053aa:	4b86      	ldr	r3, [pc, #536]	; (80055c4 <imu_ahrs_update+0x858>)
 80053ac:	edc3 7a00 	vstr	s15, [r3]
		gy = gy + AHRSKp * ey + eyInt;
 80053b0:	edd7 7a05 	vldr	s15, [r7, #20]
 80053b4:	ed9f 7a82 	vldr	s14, [pc, #520]	; 80055c0 <imu_ahrs_update+0x854>
 80053b8:	ee27 7a87 	vmul.f32	s14, s15, s14
 80053bc:	4b82      	ldr	r3, [pc, #520]	; (80055c8 <imu_ahrs_update+0x85c>)
 80053be:	edd3 7a00 	vldr	s15, [r3]
 80053c2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80053c6:	4b7c      	ldr	r3, [pc, #496]	; (80055b8 <imu_ahrs_update+0x84c>)
 80053c8:	edd3 7a00 	vldr	s15, [r3]
 80053cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80053d0:	4b7d      	ldr	r3, [pc, #500]	; (80055c8 <imu_ahrs_update+0x85c>)
 80053d2:	edc3 7a00 	vstr	s15, [r3]
		gz = gz + AHRSKp * ez + ezInt;
 80053d6:	edd7 7a04 	vldr	s15, [r7, #16]
 80053da:	ed9f 7a79 	vldr	s14, [pc, #484]	; 80055c0 <imu_ahrs_update+0x854>
 80053de:	ee27 7a87 	vmul.f32	s14, s15, s14
 80053e2:	4b7a      	ldr	r3, [pc, #488]	; (80055cc <imu_ahrs_update+0x860>)
 80053e4:	edd3 7a00 	vldr	s15, [r3]
 80053e8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80053ec:	4b73      	ldr	r3, [pc, #460]	; (80055bc <imu_ahrs_update+0x850>)
 80053ee:	edd3 7a00 	vldr	s15, [r3]
 80053f2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80053f6:	4b75      	ldr	r3, [pc, #468]	; (80055cc <imu_ahrs_update+0x860>)
 80053f8:	edc3 7a00 	vstr	s15, [r3]
	}

	tempq0 = q0 + (-q1 * gx - q2 * gy - q3 * gz) * halfT;
 80053fc:	4b74      	ldr	r3, [pc, #464]	; (80055d0 <imu_ahrs_update+0x864>)
 80053fe:	edd3 7a00 	vldr	s15, [r3]
 8005402:	eeb1 7a67 	vneg.f32	s14, s15
 8005406:	4b6f      	ldr	r3, [pc, #444]	; (80055c4 <imu_ahrs_update+0x858>)
 8005408:	edd3 7a00 	vldr	s15, [r3]
 800540c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005410:	4b70      	ldr	r3, [pc, #448]	; (80055d4 <imu_ahrs_update+0x868>)
 8005412:	edd3 6a00 	vldr	s13, [r3]
 8005416:	4b6c      	ldr	r3, [pc, #432]	; (80055c8 <imu_ahrs_update+0x85c>)
 8005418:	edd3 7a00 	vldr	s15, [r3]
 800541c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005420:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005424:	4b6c      	ldr	r3, [pc, #432]	; (80055d8 <imu_ahrs_update+0x86c>)
 8005426:	edd3 6a00 	vldr	s13, [r3]
 800542a:	4b68      	ldr	r3, [pc, #416]	; (80055cc <imu_ahrs_update+0x860>)
 800542c:	edd3 7a00 	vldr	s15, [r3]
 8005430:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005434:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005438:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 800543c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005440:	4b66      	ldr	r3, [pc, #408]	; (80055dc <imu_ahrs_update+0x870>)
 8005442:	edd3 7a00 	vldr	s15, [r3]
 8005446:	ee77 7a27 	vadd.f32	s15, s14, s15
 800544a:	edc7 7a03 	vstr	s15, [r7, #12]
	tempq1 = q1 + (q0 * gx + q2 * gz - q3 * gy) * halfT;
 800544e:	4b63      	ldr	r3, [pc, #396]	; (80055dc <imu_ahrs_update+0x870>)
 8005450:	ed93 7a00 	vldr	s14, [r3]
 8005454:	4b5b      	ldr	r3, [pc, #364]	; (80055c4 <imu_ahrs_update+0x858>)
 8005456:	edd3 7a00 	vldr	s15, [r3]
 800545a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800545e:	4b5d      	ldr	r3, [pc, #372]	; (80055d4 <imu_ahrs_update+0x868>)
 8005460:	edd3 6a00 	vldr	s13, [r3]
 8005464:	4b59      	ldr	r3, [pc, #356]	; (80055cc <imu_ahrs_update+0x860>)
 8005466:	edd3 7a00 	vldr	s15, [r3]
 800546a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800546e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005472:	4b59      	ldr	r3, [pc, #356]	; (80055d8 <imu_ahrs_update+0x86c>)
 8005474:	edd3 6a00 	vldr	s13, [r3]
 8005478:	4b53      	ldr	r3, [pc, #332]	; (80055c8 <imu_ahrs_update+0x85c>)
 800547a:	edd3 7a00 	vldr	s15, [r3]
 800547e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005482:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005486:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 800548a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800548e:	4b50      	ldr	r3, [pc, #320]	; (80055d0 <imu_ahrs_update+0x864>)
 8005490:	edd3 7a00 	vldr	s15, [r3]
 8005494:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005498:	edc7 7a02 	vstr	s15, [r7, #8]
	tempq2 = q2 + (q0 * gy - q1 * gz + q3 * gx) * halfT;
 800549c:	4b4f      	ldr	r3, [pc, #316]	; (80055dc <imu_ahrs_update+0x870>)
 800549e:	ed93 7a00 	vldr	s14, [r3]
 80054a2:	4b49      	ldr	r3, [pc, #292]	; (80055c8 <imu_ahrs_update+0x85c>)
 80054a4:	edd3 7a00 	vldr	s15, [r3]
 80054a8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80054ac:	4b48      	ldr	r3, [pc, #288]	; (80055d0 <imu_ahrs_update+0x864>)
 80054ae:	edd3 6a00 	vldr	s13, [r3]
 80054b2:	4b46      	ldr	r3, [pc, #280]	; (80055cc <imu_ahrs_update+0x860>)
 80054b4:	edd3 7a00 	vldr	s15, [r3]
 80054b8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80054bc:	ee37 7a67 	vsub.f32	s14, s14, s15
 80054c0:	4b45      	ldr	r3, [pc, #276]	; (80055d8 <imu_ahrs_update+0x86c>)
 80054c2:	edd3 6a00 	vldr	s13, [r3]
 80054c6:	4b3f      	ldr	r3, [pc, #252]	; (80055c4 <imu_ahrs_update+0x858>)
 80054c8:	edd3 7a00 	vldr	s15, [r3]
 80054cc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80054d0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80054d4:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 80054d8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80054dc:	4b3d      	ldr	r3, [pc, #244]	; (80055d4 <imu_ahrs_update+0x868>)
 80054de:	edd3 7a00 	vldr	s15, [r3]
 80054e2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80054e6:	edc7 7a01 	vstr	s15, [r7, #4]
	tempq3 = q3 + (q0 * gz + q1 * gy - q2 * gx) * halfT;
 80054ea:	4b3c      	ldr	r3, [pc, #240]	; (80055dc <imu_ahrs_update+0x870>)
 80054ec:	ed93 7a00 	vldr	s14, [r3]
 80054f0:	4b36      	ldr	r3, [pc, #216]	; (80055cc <imu_ahrs_update+0x860>)
 80054f2:	edd3 7a00 	vldr	s15, [r3]
 80054f6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80054fa:	4b35      	ldr	r3, [pc, #212]	; (80055d0 <imu_ahrs_update+0x864>)
 80054fc:	edd3 6a00 	vldr	s13, [r3]
 8005500:	4b31      	ldr	r3, [pc, #196]	; (80055c8 <imu_ahrs_update+0x85c>)
 8005502:	edd3 7a00 	vldr	s15, [r3]
 8005506:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800550a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800550e:	4b31      	ldr	r3, [pc, #196]	; (80055d4 <imu_ahrs_update+0x868>)
 8005510:	edd3 6a00 	vldr	s13, [r3]
 8005514:	4b2b      	ldr	r3, [pc, #172]	; (80055c4 <imu_ahrs_update+0x858>)
 8005516:	edd3 7a00 	vldr	s15, [r3]
 800551a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800551e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005522:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8005526:	ee27 7a27 	vmul.f32	s14, s14, s15
 800552a:	4b2b      	ldr	r3, [pc, #172]	; (80055d8 <imu_ahrs_update+0x86c>)
 800552c:	edd3 7a00 	vldr	s15, [r3]
 8005530:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005534:	edc7 7a00 	vstr	s15, [r7]

	/* normalise quaternion */
	norm = inv_sqrt(tempq0 * tempq0 + tempq1 * tempq1 + tempq2 * tempq2 + tempq3 * tempq3);
 8005538:	edd7 7a03 	vldr	s15, [r7, #12]
 800553c:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8005540:	edd7 7a02 	vldr	s15, [r7, #8]
 8005544:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8005548:	ee37 7a27 	vadd.f32	s14, s14, s15
 800554c:	edd7 7a01 	vldr	s15, [r7, #4]
 8005550:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8005554:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005558:	edd7 7a00 	vldr	s15, [r7]
 800555c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8005560:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005564:	eeb0 0a67 	vmov.f32	s0, s15
 8005568:	f7fb fe50 	bl	800120c <inv_sqrt>
 800556c:	ed87 0a12 	vstr	s0, [r7, #72]	; 0x48
	q0 = tempq0 * norm;
 8005570:	ed97 7a03 	vldr	s14, [r7, #12]
 8005574:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8005578:	ee67 7a27 	vmul.f32	s15, s14, s15
 800557c:	4b17      	ldr	r3, [pc, #92]	; (80055dc <imu_ahrs_update+0x870>)
 800557e:	edc3 7a00 	vstr	s15, [r3]
	q1 = tempq1 * norm;
 8005582:	ed97 7a02 	vldr	s14, [r7, #8]
 8005586:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800558a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800558e:	4b10      	ldr	r3, [pc, #64]	; (80055d0 <imu_ahrs_update+0x864>)
 8005590:	edc3 7a00 	vstr	s15, [r3]
 8005594:	e024      	b.n	80055e0 <imu_ahrs_update+0x874>
 8005596:	bf00      	nop
 8005598:	20002014 	.word	0x20002014
 800559c:	20002018 	.word	0x20002018
 80055a0:	20002020 	.word	0x20002020
 80055a4:	20002024 	.word	0x20002024
 80055a8:	20002010 	.word	0x20002010
 80055ac:	2000201c 	.word	0x2000201c
 80055b0:	00000000 	.word	0x00000000
 80055b4:	20001ff8 	.word	0x20001ff8
 80055b8:	20001ffc 	.word	0x20001ffc
 80055bc:	20002000 	.word	0x20002000
 80055c0:	3e4ccccd 	.word	0x3e4ccccd
 80055c4:	20002004 	.word	0x20002004
 80055c8:	20002008 	.word	0x20002008
 80055cc:	2000200c 	.word	0x2000200c
 80055d0:	20001fec 	.word	0x20001fec
 80055d4:	20001ff0 	.word	0x20001ff0
 80055d8:	20001ff4 	.word	0x20001ff4
 80055dc:	20000008 	.word	0x20000008
	q2 = tempq2 * norm;
 80055e0:	ed97 7a01 	vldr	s14, [r7, #4]
 80055e4:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80055e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80055ec:	4b07      	ldr	r3, [pc, #28]	; (800560c <imu_ahrs_update+0x8a0>)
 80055ee:	edc3 7a00 	vstr	s15, [r3]
	q3 = tempq3 * norm;
 80055f2:	ed97 7a00 	vldr	s14, [r7]
 80055f6:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80055fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80055fe:	4b04      	ldr	r3, [pc, #16]	; (8005610 <imu_ahrs_update+0x8a4>)
 8005600:	edc3 7a00 	vstr	s15, [r3]
}
 8005604:	bf00      	nop
 8005606:	3778      	adds	r7, #120	; 0x78
 8005608:	46bd      	mov	sp, r7
 800560a:	bd80      	pop	{r7, pc}
 800560c:	20001ff0 	.word	0x20001ff0
 8005610:	20001ff4 	.word	0x20001ff4
 8005614:	00000000 	.word	0x00000000

08005618 <imu_attitude_update>:

void imu_attitude_update(void) {
 8005618:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800561c:	af00      	add	r7, sp, #0
		/* roll   -pi----pi  */
		imu_heading.rol = atan2(2 * q2 * q3 + 2 * q0 * q1,
				-2 * q1 * q1 - 2 * q2 * q2 + 1) * IMU_ROLL_INVERT;
	} else if (IMU_ORIENTATION == 1) {
		/* yaw    -pi----pi */
		imu_heading.yaw = -atan2(2 * q1 * q2 + 2 * q0 * q3,
 800561e:	4b7c      	ldr	r3, [pc, #496]	; (8005810 <imu_attitude_update+0x1f8>)
 8005620:	edd3 7a00 	vldr	s15, [r3]
 8005624:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8005628:	4b7a      	ldr	r3, [pc, #488]	; (8005814 <imu_attitude_update+0x1fc>)
 800562a:	edd3 7a00 	vldr	s15, [r3]
 800562e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005632:	4b79      	ldr	r3, [pc, #484]	; (8005818 <imu_attitude_update+0x200>)
 8005634:	edd3 7a00 	vldr	s15, [r3]
 8005638:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800563c:	4b77      	ldr	r3, [pc, #476]	; (800581c <imu_attitude_update+0x204>)
 800563e:	edd3 7a00 	vldr	s15, [r3]
 8005642:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005646:	ee77 7a27 	vadd.f32	s15, s14, s15
				-2 * q2 * q2 - 2 * q3 * q3 + 1) * IMU_YAW_INVERT * 57.2958;
 800564a:	ee17 0a90 	vmov	r0, s15
 800564e:	f7fa ff33 	bl	80004b8 <__aeabi_f2d>
 8005652:	4680      	mov	r8, r0
 8005654:	4689      	mov	r9, r1
 8005656:	4b6f      	ldr	r3, [pc, #444]	; (8005814 <imu_attitude_update+0x1fc>)
 8005658:	edd3 7a00 	vldr	s15, [r3]
 800565c:	eeb8 7a00 	vmov.f32	s14, #128	; 0xc0000000 -2.0
 8005660:	ee27 7a87 	vmul.f32	s14, s15, s14
 8005664:	4b6b      	ldr	r3, [pc, #428]	; (8005814 <imu_attitude_update+0x1fc>)
 8005666:	edd3 7a00 	vldr	s15, [r3]
 800566a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800566e:	4b6b      	ldr	r3, [pc, #428]	; (800581c <imu_attitude_update+0x204>)
 8005670:	edd3 7a00 	vldr	s15, [r3]
 8005674:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8005678:	4b68      	ldr	r3, [pc, #416]	; (800581c <imu_attitude_update+0x204>)
 800567a:	edd3 7a00 	vldr	s15, [r3]
 800567e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005682:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005686:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800568a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800568e:	ee17 0a90 	vmov	r0, s15
 8005692:	f7fa ff11 	bl	80004b8 <__aeabi_f2d>
 8005696:	4602      	mov	r2, r0
 8005698:	460b      	mov	r3, r1
 800569a:	ec43 2b11 	vmov	d1, r2, r3
 800569e:	ec49 8b10 	vmov	d0, r8, r9
 80056a2:	f00f fb7d 	bl	8014da0 <atan2>
 80056a6:	ec51 0b10 	vmov	r0, r1, d0
 80056aa:	a357      	add	r3, pc, #348	; (adr r3, 8005808 <imu_attitude_update+0x1f0>)
 80056ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056b0:	f7fa ff5a 	bl	8000568 <__aeabi_dmul>
 80056b4:	4602      	mov	r2, r0
 80056b6:	460b      	mov	r3, r1
 80056b8:	4610      	mov	r0, r2
 80056ba:	4619      	mov	r1, r3
 80056bc:	f7fb fa4c 	bl	8000b58 <__aeabi_d2f>
 80056c0:	4603      	mov	r3, r0
		imu_heading.yaw = -atan2(2 * q1 * q2 + 2 * q0 * q3,
 80056c2:	4a57      	ldr	r2, [pc, #348]	; (8005820 <imu_attitude_update+0x208>)
 80056c4:	6093      	str	r3, [r2, #8]
		/* pitch  -pi/2----pi/2 */
		imu_heading.rol = -asin(-2 * q1 * q3 + 2 * q0 * q2) * IMU_ROLL_INVERT * 57.2958;
 80056c6:	4b52      	ldr	r3, [pc, #328]	; (8005810 <imu_attitude_update+0x1f8>)
 80056c8:	edd3 7a00 	vldr	s15, [r3]
 80056cc:	eeb8 7a00 	vmov.f32	s14, #128	; 0xc0000000 -2.0
 80056d0:	ee27 7a87 	vmul.f32	s14, s15, s14
 80056d4:	4b51      	ldr	r3, [pc, #324]	; (800581c <imu_attitude_update+0x204>)
 80056d6:	edd3 7a00 	vldr	s15, [r3]
 80056da:	ee27 7a27 	vmul.f32	s14, s14, s15
 80056de:	4b4e      	ldr	r3, [pc, #312]	; (8005818 <imu_attitude_update+0x200>)
 80056e0:	edd3 7a00 	vldr	s15, [r3]
 80056e4:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80056e8:	4b4a      	ldr	r3, [pc, #296]	; (8005814 <imu_attitude_update+0x1fc>)
 80056ea:	edd3 7a00 	vldr	s15, [r3]
 80056ee:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80056f2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80056f6:	ee17 0a90 	vmov	r0, s15
 80056fa:	f7fa fedd 	bl	80004b8 <__aeabi_f2d>
 80056fe:	4602      	mov	r2, r0
 8005700:	460b      	mov	r3, r1
 8005702:	ec43 2b10 	vmov	d0, r2, r3
 8005706:	f00f fb17 	bl	8014d38 <asin>
 800570a:	ec53 2b10 	vmov	r2, r3, d0
 800570e:	4614      	mov	r4, r2
 8005710:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8005714:	a33c      	add	r3, pc, #240	; (adr r3, 8005808 <imu_attitude_update+0x1f0>)
 8005716:	e9d3 2300 	ldrd	r2, r3, [r3]
 800571a:	4620      	mov	r0, r4
 800571c:	4629      	mov	r1, r5
 800571e:	f7fa ff23 	bl	8000568 <__aeabi_dmul>
 8005722:	4602      	mov	r2, r0
 8005724:	460b      	mov	r3, r1
 8005726:	4610      	mov	r0, r2
 8005728:	4619      	mov	r1, r3
 800572a:	f7fb fa15 	bl	8000b58 <__aeabi_d2f>
 800572e:	4603      	mov	r3, r0
 8005730:	4a3b      	ldr	r2, [pc, #236]	; (8005820 <imu_attitude_update+0x208>)
 8005732:	6053      	str	r3, [r2, #4]
		/* roll   -pi----pi  */
		imu_heading.pit = atan2(2 * q2 * q3 + 2 * q0 * q1,
 8005734:	4b37      	ldr	r3, [pc, #220]	; (8005814 <imu_attitude_update+0x1fc>)
 8005736:	edd3 7a00 	vldr	s15, [r3]
 800573a:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800573e:	4b37      	ldr	r3, [pc, #220]	; (800581c <imu_attitude_update+0x204>)
 8005740:	edd3 7a00 	vldr	s15, [r3]
 8005744:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005748:	4b33      	ldr	r3, [pc, #204]	; (8005818 <imu_attitude_update+0x200>)
 800574a:	edd3 7a00 	vldr	s15, [r3]
 800574e:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8005752:	4b2f      	ldr	r3, [pc, #188]	; (8005810 <imu_attitude_update+0x1f8>)
 8005754:	edd3 7a00 	vldr	s15, [r3]
 8005758:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800575c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005760:	ee17 0a90 	vmov	r0, s15
 8005764:	f7fa fea8 	bl	80004b8 <__aeabi_f2d>
 8005768:	4604      	mov	r4, r0
 800576a:	460d      	mov	r5, r1
				-2 * q1 * q1 - 2 * q2 * q2 + 1) * IMU_PITCH_INVERT;
 800576c:	4b28      	ldr	r3, [pc, #160]	; (8005810 <imu_attitude_update+0x1f8>)
 800576e:	edd3 7a00 	vldr	s15, [r3]
 8005772:	eeb8 7a00 	vmov.f32	s14, #128	; 0xc0000000 -2.0
 8005776:	ee27 7a87 	vmul.f32	s14, s15, s14
 800577a:	4b25      	ldr	r3, [pc, #148]	; (8005810 <imu_attitude_update+0x1f8>)
 800577c:	edd3 7a00 	vldr	s15, [r3]
 8005780:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005784:	4b23      	ldr	r3, [pc, #140]	; (8005814 <imu_attitude_update+0x1fc>)
 8005786:	edd3 7a00 	vldr	s15, [r3]
 800578a:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800578e:	4b21      	ldr	r3, [pc, #132]	; (8005814 <imu_attitude_update+0x1fc>)
 8005790:	edd3 7a00 	vldr	s15, [r3]
 8005794:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005798:	ee77 7a67 	vsub.f32	s15, s14, s15
 800579c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80057a0:	ee77 7a87 	vadd.f32	s15, s15, s14
		imu_heading.pit = atan2(2 * q2 * q3 + 2 * q0 * q1,
 80057a4:	ee17 0a90 	vmov	r0, s15
 80057a8:	f7fa fe86 	bl	80004b8 <__aeabi_f2d>
 80057ac:	4602      	mov	r2, r0
 80057ae:	460b      	mov	r3, r1
 80057b0:	ec43 2b11 	vmov	d1, r2, r3
 80057b4:	ec45 4b10 	vmov	d0, r4, r5
 80057b8:	f00f faf2 	bl	8014da0 <atan2>
 80057bc:	ec53 2b10 	vmov	r2, r3, d0
 80057c0:	4610      	mov	r0, r2
 80057c2:	4619      	mov	r1, r3
 80057c4:	f7fb f9c8 	bl	8000b58 <__aeabi_d2f>
 80057c8:	4603      	mov	r3, r0
 80057ca:	ee07 3a90 	vmov	s15, r3
 80057ce:	eef1 7a67 	vneg.f32	s15, s15
 80057d2:	4b13      	ldr	r3, [pc, #76]	; (8005820 <imu_attitude_update+0x208>)
 80057d4:	edc3 7a00 	vstr	s15, [r3]

		debugangle = imu_heading.pit* 57.2958;
 80057d8:	4b11      	ldr	r3, [pc, #68]	; (8005820 <imu_attitude_update+0x208>)
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	4618      	mov	r0, r3
 80057de:	f7fa fe6b 	bl	80004b8 <__aeabi_f2d>
 80057e2:	a309      	add	r3, pc, #36	; (adr r3, 8005808 <imu_attitude_update+0x1f0>)
 80057e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057e8:	f7fa febe 	bl	8000568 <__aeabi_dmul>
 80057ec:	4602      	mov	r2, r0
 80057ee:	460b      	mov	r3, r1
 80057f0:	4610      	mov	r0, r2
 80057f2:	4619      	mov	r1, r3
 80057f4:	f7fb f9b0 	bl	8000b58 <__aeabi_d2f>
 80057f8:	4603      	mov	r3, r0
 80057fa:	4a0a      	ldr	r2, [pc, #40]	; (8005824 <imu_attitude_update+0x20c>)
 80057fc:	6013      	str	r3, [r2, #0]
//		compAngleX = (0.98 * gyrAngleX + 0.02 * accAngleX )* 57.2958;
//		last_time[1] = last_time[0];

	}

}
 80057fe:	bf00      	nop
 8005800:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8005804:	f3af 8000 	nop.w
 8005808:	c63f1412 	.word	0xc63f1412
 800580c:	404ca5dc 	.word	0x404ca5dc
 8005810:	20001fec 	.word	0x20001fec
 8005814:	20001ff0 	.word	0x20001ff0
 8005818:	20000008 	.word	0x20000008
 800581c:	20001ff4 	.word	0x20001ff4
 8005820:	2000202c 	.word	0x2000202c
 8005824:	20002028 	.word	0x20002028

08005828 <config_motors>:


extern motor_data_t can_motors[24];

void config_motors()
{
 8005828:	b480      	push	{r7}
 800582a:	b083      	sub	sp, #12
 800582c:	af00      	add	r7, sp, #0
	for (uint8_t i = 0; i < 24; i++)
 800582e:	2300      	movs	r3, #0
 8005830:	71fb      	strb	r3, [r7, #7]
 8005832:	e03c      	b.n	80058ae <config_motors+0x86>
	{
		can_motors[i].motor_type = 0;
 8005834:	79fb      	ldrb	r3, [r7, #7]
 8005836:	4abf      	ldr	r2, [pc, #764]	; (8005b34 <config_motors+0x30c>)
 8005838:	21a8      	movs	r1, #168	; 0xa8
 800583a:	fb01 f303 	mul.w	r3, r1, r3
 800583e:	4413      	add	r3, r2
 8005840:	3302      	adds	r3, #2
 8005842:	2200      	movs	r2, #0
 8005844:	701a      	strb	r2, [r3, #0]
		can_motors[i].rpm_pid.output 	= 0;
 8005846:	79fb      	ldrb	r3, [r7, #7]
 8005848:	4aba      	ldr	r2, [pc, #744]	; (8005b34 <config_motors+0x30c>)
 800584a:	21a8      	movs	r1, #168	; 0xa8
 800584c:	fb01 f303 	mul.w	r3, r1, r3
 8005850:	4413      	add	r3, r2
 8005852:	3334      	adds	r3, #52	; 0x34
 8005854:	f04f 0200 	mov.w	r2, #0
 8005858:	601a      	str	r2, [r3, #0]
		can_motors[i].rpm_pid.integral 	= 0;
 800585a:	79fb      	ldrb	r3, [r7, #7]
 800585c:	4ab5      	ldr	r2, [pc, #724]	; (8005b34 <config_motors+0x30c>)
 800585e:	21a8      	movs	r1, #168	; 0xa8
 8005860:	fb01 f303 	mul.w	r3, r1, r3
 8005864:	4413      	add	r3, r2
 8005866:	3324      	adds	r3, #36	; 0x24
 8005868:	f04f 0200 	mov.w	r2, #0
 800586c:	601a      	str	r2, [r3, #0]
		can_motors[i].angle_pid.output 	= 0;
 800586e:	79fb      	ldrb	r3, [r7, #7]
 8005870:	4ab0      	ldr	r2, [pc, #704]	; (8005b34 <config_motors+0x30c>)
 8005872:	21a8      	movs	r1, #168	; 0xa8
 8005874:	fb01 f303 	mul.w	r3, r1, r3
 8005878:	4413      	add	r3, r2
 800587a:	3368      	adds	r3, #104	; 0x68
 800587c:	f04f 0200 	mov.w	r2, #0
 8005880:	601a      	str	r2, [r3, #0]
		can_motors[i].angle_pid.integral = 0;
 8005882:	79fb      	ldrb	r3, [r7, #7]
 8005884:	4aab      	ldr	r2, [pc, #684]	; (8005b34 <config_motors+0x30c>)
 8005886:	21a8      	movs	r1, #168	; 0xa8
 8005888:	fb01 f303 	mul.w	r3, r1, r3
 800588c:	4413      	add	r3, r2
 800588e:	3358      	adds	r3, #88	; 0x58
 8005890:	f04f 0200 	mov.w	r2, #0
 8005894:	601a      	str	r2, [r3, #0]
		can_motors[i].angle_data.ticks 	= 0;
 8005896:	79fb      	ldrb	r3, [r7, #7]
 8005898:	4aa6      	ldr	r2, [pc, #664]	; (8005b34 <config_motors+0x30c>)
 800589a:	21a8      	movs	r1, #168	; 0xa8
 800589c:	fb01 f303 	mul.w	r3, r1, r3
 80058a0:	4413      	add	r3, r2
 80058a2:	3378      	adds	r3, #120	; 0x78
 80058a4:	2200      	movs	r2, #0
 80058a6:	601a      	str	r2, [r3, #0]
	for (uint8_t i = 0; i < 24; i++)
 80058a8:	79fb      	ldrb	r3, [r7, #7]
 80058aa:	3301      	adds	r3, #1
 80058ac:	71fb      	strb	r3, [r7, #7]
 80058ae:	79fb      	ldrb	r3, [r7, #7]
 80058b0:	2b17      	cmp	r3, #23
 80058b2:	d9bf      	bls.n	8005834 <config_motors+0xc>
	}

#ifdef FR_MOTOR_ID
	uint8_t motor_id = FR_MOTOR_ID -1;
 80058b4:	230c      	movs	r3, #12
 80058b6:	71bb      	strb	r3, [r7, #6]
	can_motors[motor_id].motor_type = TYPE_M3508_STEPS;
 80058b8:	79bb      	ldrb	r3, [r7, #6]
 80058ba:	4a9e      	ldr	r2, [pc, #632]	; (8005b34 <config_motors+0x30c>)
 80058bc:	21a8      	movs	r1, #168	; 0xa8
 80058be:	fb01 f303 	mul.w	r3, r1, r3
 80058c2:	4413      	add	r3, r2
 80058c4:	3302      	adds	r3, #2
 80058c6:	2204      	movs	r2, #4
 80058c8:	701a      	strb	r2, [r3, #0]
	can_motors[motor_id].angle_data.gearbox_ratio = M3508_GEARBOX_RATIO;
 80058ca:	79bb      	ldrb	r3, [r7, #6]
 80058cc:	4a99      	ldr	r2, [pc, #612]	; (8005b34 <config_motors+0x30c>)
 80058ce:	21a8      	movs	r1, #168	; 0xa8
 80058d0:	fb01 f303 	mul.w	r3, r1, r3
 80058d4:	4413      	add	r3, r2
 80058d6:	3390      	adds	r3, #144	; 0x90
 80058d8:	4a97      	ldr	r2, [pc, #604]	; (8005b38 <config_motors+0x310>)
 80058da:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_data.center_ang 	= 0;
 80058dc:	79bb      	ldrb	r3, [r7, #6]
 80058de:	4a95      	ldr	r2, [pc, #596]	; (8005b34 <config_motors+0x30c>)
 80058e0:	21a8      	movs	r1, #168	; 0xa8
 80058e2:	fb01 f303 	mul.w	r3, r1, r3
 80058e6:	4413      	add	r3, r2
 80058e8:	337c      	adds	r3, #124	; 0x7c
 80058ea:	2200      	movs	r2, #0
 80058ec:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_data.max_ang 	= 0;
 80058ee:	79bb      	ldrb	r3, [r7, #6]
 80058f0:	4a90      	ldr	r2, [pc, #576]	; (8005b34 <config_motors+0x30c>)
 80058f2:	21a8      	movs	r1, #168	; 0xa8
 80058f4:	fb01 f303 	mul.w	r3, r1, r3
 80058f8:	4413      	add	r3, r2
 80058fa:	3384      	adds	r3, #132	; 0x84
 80058fc:	f04f 0200 	mov.w	r2, #0
 8005900:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_data.min_ang 	= 0;
 8005902:	79bb      	ldrb	r3, [r7, #6]
 8005904:	4a8b      	ldr	r2, [pc, #556]	; (8005b34 <config_motors+0x30c>)
 8005906:	21a8      	movs	r1, #168	; 0xa8
 8005908:	fb01 f303 	mul.w	r3, r1, r3
 800590c:	4413      	add	r3, r2
 800590e:	3380      	adds	r3, #128	; 0x80
 8005910:	f04f 0200 	mov.w	r2, #0
 8005914:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_data.phy_max_ang =  2 * PI;
 8005916:	79bb      	ldrb	r3, [r7, #6]
 8005918:	4a86      	ldr	r2, [pc, #536]	; (8005b34 <config_motors+0x30c>)
 800591a:	21a8      	movs	r1, #168	; 0xa8
 800591c:	fb01 f303 	mul.w	r3, r1, r3
 8005920:	4413      	add	r3, r2
 8005922:	338c      	adds	r3, #140	; 0x8c
 8005924:	4a85      	ldr	r2, [pc, #532]	; (8005b3c <config_motors+0x314>)
 8005926:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_data.phy_min_ang = -2 * PI;
 8005928:	79bb      	ldrb	r3, [r7, #6]
 800592a:	4a82      	ldr	r2, [pc, #520]	; (8005b34 <config_motors+0x30c>)
 800592c:	21a8      	movs	r1, #168	; 0xa8
 800592e:	fb01 f303 	mul.w	r3, r1, r3
 8005932:	4413      	add	r3, r2
 8005934:	3388      	adds	r3, #136	; 0x88
 8005936:	4a82      	ldr	r2, [pc, #520]	; (8005b40 <config_motors+0x318>)
 8005938:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_pid.kp 			= 0;
 800593a:	79bb      	ldrb	r3, [r7, #6]
 800593c:	4a7d      	ldr	r2, [pc, #500]	; (8005b34 <config_motors+0x30c>)
 800593e:	21a8      	movs	r1, #168	; 0xa8
 8005940:	fb01 f303 	mul.w	r3, r1, r3
 8005944:	4413      	add	r3, r2
 8005946:	3344      	adds	r3, #68	; 0x44
 8005948:	f04f 0200 	mov.w	r2, #0
 800594c:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_pid.ki			= 0;
 800594e:	79bb      	ldrb	r3, [r7, #6]
 8005950:	4a78      	ldr	r2, [pc, #480]	; (8005b34 <config_motors+0x30c>)
 8005952:	21a8      	movs	r1, #168	; 0xa8
 8005954:	fb01 f303 	mul.w	r3, r1, r3
 8005958:	4413      	add	r3, r2
 800595a:	3348      	adds	r3, #72	; 0x48
 800595c:	f04f 0200 	mov.w	r2, #0
 8005960:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_pid.kd			= 0;
 8005962:	79bb      	ldrb	r3, [r7, #6]
 8005964:	4a73      	ldr	r2, [pc, #460]	; (8005b34 <config_motors+0x30c>)
 8005966:	21a8      	movs	r1, #168	; 0xa8
 8005968:	fb01 f303 	mul.w	r3, r1, r3
 800596c:	4413      	add	r3, r2
 800596e:	334c      	adds	r3, #76	; 0x4c
 8005970:	f04f 0200 	mov.w	r2, #0
 8005974:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_pid.int_max		= 0;
 8005976:	79bb      	ldrb	r3, [r7, #6]
 8005978:	4a6e      	ldr	r2, [pc, #440]	; (8005b34 <config_motors+0x30c>)
 800597a:	21a8      	movs	r1, #168	; 0xa8
 800597c:	fb01 f303 	mul.w	r3, r1, r3
 8005980:	4413      	add	r3, r2
 8005982:	335c      	adds	r3, #92	; 0x5c
 8005984:	f04f 0200 	mov.w	r2, #0
 8005988:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_pid.max_out		= 0;
 800598a:	79bb      	ldrb	r3, [r7, #6]
 800598c:	4a69      	ldr	r2, [pc, #420]	; (8005b34 <config_motors+0x30c>)
 800598e:	21a8      	movs	r1, #168	; 0xa8
 8005990:	fb01 f303 	mul.w	r3, r1, r3
 8005994:	4413      	add	r3, r2
 8005996:	3360      	adds	r3, #96	; 0x60
 8005998:	f04f 0200 	mov.w	r2, #0
 800599c:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_pid.min_out		= 0;
 800599e:	79bb      	ldrb	r3, [r7, #6]
 80059a0:	4a64      	ldr	r2, [pc, #400]	; (8005b34 <config_motors+0x30c>)
 80059a2:	21a8      	movs	r1, #168	; 0xa8
 80059a4:	fb01 f303 	mul.w	r3, r1, r3
 80059a8:	4413      	add	r3, r2
 80059aa:	3364      	adds	r3, #100	; 0x64
 80059ac:	f04f 0200 	mov.w	r2, #0
 80059b0:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_pid.physical_max	= M3508_MAX_RPM;
 80059b2:	79bb      	ldrb	r3, [r7, #6]
 80059b4:	4a5f      	ldr	r2, [pc, #380]	; (8005b34 <config_motors+0x30c>)
 80059b6:	21a8      	movs	r1, #168	; 0xa8
 80059b8:	fb01 f303 	mul.w	r3, r1, r3
 80059bc:	4413      	add	r3, r2
 80059be:	336c      	adds	r3, #108	; 0x6c
 80059c0:	4a60      	ldr	r2, [pc, #384]	; (8005b44 <config_motors+0x31c>)
 80059c2:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].rpm_pid.kp 			= CHASSIS_KP;
 80059c4:	79bb      	ldrb	r3, [r7, #6]
 80059c6:	4a5b      	ldr	r2, [pc, #364]	; (8005b34 <config_motors+0x30c>)
 80059c8:	21a8      	movs	r1, #168	; 0xa8
 80059ca:	fb01 f303 	mul.w	r3, r1, r3
 80059ce:	4413      	add	r3, r2
 80059d0:	3310      	adds	r3, #16
 80059d2:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80059d6:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].rpm_pid.ki				= CHASSIS_KI;
 80059d8:	79bb      	ldrb	r3, [r7, #6]
 80059da:	4a56      	ldr	r2, [pc, #344]	; (8005b34 <config_motors+0x30c>)
 80059dc:	21a8      	movs	r1, #168	; 0xa8
 80059de:	fb01 f303 	mul.w	r3, r1, r3
 80059e2:	4413      	add	r3, r2
 80059e4:	3314      	adds	r3, #20
 80059e6:	f04f 0200 	mov.w	r2, #0
 80059ea:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].rpm_pid.kd				= CHASSIS_KD;
 80059ec:	79bb      	ldrb	r3, [r7, #6]
 80059ee:	4a51      	ldr	r2, [pc, #324]	; (8005b34 <config_motors+0x30c>)
 80059f0:	21a8      	movs	r1, #168	; 0xa8
 80059f2:	fb01 f303 	mul.w	r3, r1, r3
 80059f6:	4413      	add	r3, r2
 80059f8:	3318      	adds	r3, #24
 80059fa:	4a53      	ldr	r2, [pc, #332]	; (8005b48 <config_motors+0x320>)
 80059fc:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].rpm_pid.int_max		= CHASSIS_INT_MAX;
 80059fe:	79bb      	ldrb	r3, [r7, #6]
 8005a00:	4a4c      	ldr	r2, [pc, #304]	; (8005b34 <config_motors+0x30c>)
 8005a02:	21a8      	movs	r1, #168	; 0xa8
 8005a04:	fb01 f303 	mul.w	r3, r1, r3
 8005a08:	4413      	add	r3, r2
 8005a0a:	3328      	adds	r3, #40	; 0x28
 8005a0c:	4a4f      	ldr	r2, [pc, #316]	; (8005b4c <config_motors+0x324>)
 8005a0e:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].rpm_pid.max_out		= CHASSIS_MAX_CURRENT;
 8005a10:	79bb      	ldrb	r3, [r7, #6]
 8005a12:	4a48      	ldr	r2, [pc, #288]	; (8005b34 <config_motors+0x30c>)
 8005a14:	21a8      	movs	r1, #168	; 0xa8
 8005a16:	fb01 f303 	mul.w	r3, r1, r3
 8005a1a:	4413      	add	r3, r2
 8005a1c:	332c      	adds	r3, #44	; 0x2c
 8005a1e:	4a4b      	ldr	r2, [pc, #300]	; (8005b4c <config_motors+0x324>)
 8005a20:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].rpm_pid.min_out		= -CHASSIS_MAX_CURRENT;
 8005a22:	79bb      	ldrb	r3, [r7, #6]
 8005a24:	4a43      	ldr	r2, [pc, #268]	; (8005b34 <config_motors+0x30c>)
 8005a26:	21a8      	movs	r1, #168	; 0xa8
 8005a28:	fb01 f303 	mul.w	r3, r1, r3
 8005a2c:	4413      	add	r3, r2
 8005a2e:	3330      	adds	r3, #48	; 0x30
 8005a30:	4a47      	ldr	r2, [pc, #284]	; (8005b50 <config_motors+0x328>)
 8005a32:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].rpm_pid.physical_max	= M3508_MAX_OUTPUT;
 8005a34:	79bb      	ldrb	r3, [r7, #6]
 8005a36:	4a3f      	ldr	r2, [pc, #252]	; (8005b34 <config_motors+0x30c>)
 8005a38:	21a8      	movs	r1, #168	; 0xa8
 8005a3a:	fb01 f303 	mul.w	r3, r1, r3
 8005a3e:	4413      	add	r3, r2
 8005a40:	3338      	adds	r3, #56	; 0x38
 8005a42:	f04f 428d 	mov.w	r2, #1182793728	; 0x46800000
 8005a46:	601a      	str	r2, [r3, #0]
#endif

#ifdef FL_MOTOR_ID
	motor_id = FL_MOTOR_ID -1;
 8005a48:	230d      	movs	r3, #13
 8005a4a:	71bb      	strb	r3, [r7, #6]
	can_motors[motor_id].motor_type = TYPE_M3508;
 8005a4c:	79bb      	ldrb	r3, [r7, #6]
 8005a4e:	4a39      	ldr	r2, [pc, #228]	; (8005b34 <config_motors+0x30c>)
 8005a50:	21a8      	movs	r1, #168	; 0xa8
 8005a52:	fb01 f303 	mul.w	r3, r1, r3
 8005a56:	4413      	add	r3, r2
 8005a58:	3302      	adds	r3, #2
 8005a5a:	2203      	movs	r2, #3
 8005a5c:	701a      	strb	r2, [r3, #0]
	can_motors[motor_id].angle_data.gearbox_ratio = M3508_GEARBOX_RATIO;
 8005a5e:	79bb      	ldrb	r3, [r7, #6]
 8005a60:	4a34      	ldr	r2, [pc, #208]	; (8005b34 <config_motors+0x30c>)
 8005a62:	21a8      	movs	r1, #168	; 0xa8
 8005a64:	fb01 f303 	mul.w	r3, r1, r3
 8005a68:	4413      	add	r3, r2
 8005a6a:	3390      	adds	r3, #144	; 0x90
 8005a6c:	4a32      	ldr	r2, [pc, #200]	; (8005b38 <config_motors+0x310>)
 8005a6e:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_data.center_ang 	= 0;
 8005a70:	79bb      	ldrb	r3, [r7, #6]
 8005a72:	4a30      	ldr	r2, [pc, #192]	; (8005b34 <config_motors+0x30c>)
 8005a74:	21a8      	movs	r1, #168	; 0xa8
 8005a76:	fb01 f303 	mul.w	r3, r1, r3
 8005a7a:	4413      	add	r3, r2
 8005a7c:	337c      	adds	r3, #124	; 0x7c
 8005a7e:	2200      	movs	r2, #0
 8005a80:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_data.max_ang 	= 0;
 8005a82:	79bb      	ldrb	r3, [r7, #6]
 8005a84:	4a2b      	ldr	r2, [pc, #172]	; (8005b34 <config_motors+0x30c>)
 8005a86:	21a8      	movs	r1, #168	; 0xa8
 8005a88:	fb01 f303 	mul.w	r3, r1, r3
 8005a8c:	4413      	add	r3, r2
 8005a8e:	3384      	adds	r3, #132	; 0x84
 8005a90:	f04f 0200 	mov.w	r2, #0
 8005a94:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_data.min_ang 	= 0;
 8005a96:	79bb      	ldrb	r3, [r7, #6]
 8005a98:	4a26      	ldr	r2, [pc, #152]	; (8005b34 <config_motors+0x30c>)
 8005a9a:	21a8      	movs	r1, #168	; 0xa8
 8005a9c:	fb01 f303 	mul.w	r3, r1, r3
 8005aa0:	4413      	add	r3, r2
 8005aa2:	3380      	adds	r3, #128	; 0x80
 8005aa4:	f04f 0200 	mov.w	r2, #0
 8005aa8:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_data.phy_max_ang =  2 * PI;
 8005aaa:	79bb      	ldrb	r3, [r7, #6]
 8005aac:	4a21      	ldr	r2, [pc, #132]	; (8005b34 <config_motors+0x30c>)
 8005aae:	21a8      	movs	r1, #168	; 0xa8
 8005ab0:	fb01 f303 	mul.w	r3, r1, r3
 8005ab4:	4413      	add	r3, r2
 8005ab6:	338c      	adds	r3, #140	; 0x8c
 8005ab8:	4a20      	ldr	r2, [pc, #128]	; (8005b3c <config_motors+0x314>)
 8005aba:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_data.phy_min_ang = -2 * PI;
 8005abc:	79bb      	ldrb	r3, [r7, #6]
 8005abe:	4a1d      	ldr	r2, [pc, #116]	; (8005b34 <config_motors+0x30c>)
 8005ac0:	21a8      	movs	r1, #168	; 0xa8
 8005ac2:	fb01 f303 	mul.w	r3, r1, r3
 8005ac6:	4413      	add	r3, r2
 8005ac8:	3388      	adds	r3, #136	; 0x88
 8005aca:	4a1d      	ldr	r2, [pc, #116]	; (8005b40 <config_motors+0x318>)
 8005acc:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_pid.kp 			= 0;
 8005ace:	79bb      	ldrb	r3, [r7, #6]
 8005ad0:	4a18      	ldr	r2, [pc, #96]	; (8005b34 <config_motors+0x30c>)
 8005ad2:	21a8      	movs	r1, #168	; 0xa8
 8005ad4:	fb01 f303 	mul.w	r3, r1, r3
 8005ad8:	4413      	add	r3, r2
 8005ada:	3344      	adds	r3, #68	; 0x44
 8005adc:	f04f 0200 	mov.w	r2, #0
 8005ae0:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_pid.ki			= 0;
 8005ae2:	79bb      	ldrb	r3, [r7, #6]
 8005ae4:	4a13      	ldr	r2, [pc, #76]	; (8005b34 <config_motors+0x30c>)
 8005ae6:	21a8      	movs	r1, #168	; 0xa8
 8005ae8:	fb01 f303 	mul.w	r3, r1, r3
 8005aec:	4413      	add	r3, r2
 8005aee:	3348      	adds	r3, #72	; 0x48
 8005af0:	f04f 0200 	mov.w	r2, #0
 8005af4:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_pid.kd			= 0;
 8005af6:	79bb      	ldrb	r3, [r7, #6]
 8005af8:	4a0e      	ldr	r2, [pc, #56]	; (8005b34 <config_motors+0x30c>)
 8005afa:	21a8      	movs	r1, #168	; 0xa8
 8005afc:	fb01 f303 	mul.w	r3, r1, r3
 8005b00:	4413      	add	r3, r2
 8005b02:	334c      	adds	r3, #76	; 0x4c
 8005b04:	f04f 0200 	mov.w	r2, #0
 8005b08:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_pid.int_max		= 0;
 8005b0a:	79bb      	ldrb	r3, [r7, #6]
 8005b0c:	4a09      	ldr	r2, [pc, #36]	; (8005b34 <config_motors+0x30c>)
 8005b0e:	21a8      	movs	r1, #168	; 0xa8
 8005b10:	fb01 f303 	mul.w	r3, r1, r3
 8005b14:	4413      	add	r3, r2
 8005b16:	335c      	adds	r3, #92	; 0x5c
 8005b18:	f04f 0200 	mov.w	r2, #0
 8005b1c:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_pid.max_out		= 0;
 8005b1e:	79bb      	ldrb	r3, [r7, #6]
 8005b20:	4a04      	ldr	r2, [pc, #16]	; (8005b34 <config_motors+0x30c>)
 8005b22:	21a8      	movs	r1, #168	; 0xa8
 8005b24:	fb01 f303 	mul.w	r3, r1, r3
 8005b28:	4413      	add	r3, r2
 8005b2a:	3360      	adds	r3, #96	; 0x60
 8005b2c:	f04f 0200 	mov.w	r2, #0
 8005b30:	e010      	b.n	8005b54 <config_motors+0x32c>
 8005b32:	bf00      	nop
 8005b34:	20000f30 	.word	0x20000f30
 8005b38:	4199999a 	.word	0x4199999a
 8005b3c:	40c90fdb 	.word	0x40c90fdb
 8005b40:	c0c90fdb 	.word	0xc0c90fdb
 8005b44:	460ca000 	.word	0x460ca000
 8005b48:	3dcccccd 	.word	0x3dcccccd
 8005b4c:	461c4000 	.word	0x461c4000
 8005b50:	c61c4000 	.word	0xc61c4000
 8005b54:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_pid.min_out		= 0;
 8005b56:	79bb      	ldrb	r3, [r7, #6]
 8005b58:	4abb      	ldr	r2, [pc, #748]	; (8005e48 <config_motors+0x620>)
 8005b5a:	21a8      	movs	r1, #168	; 0xa8
 8005b5c:	fb01 f303 	mul.w	r3, r1, r3
 8005b60:	4413      	add	r3, r2
 8005b62:	3364      	adds	r3, #100	; 0x64
 8005b64:	f04f 0200 	mov.w	r2, #0
 8005b68:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_pid.physical_max	= M3508_MAX_RPM;
 8005b6a:	79bb      	ldrb	r3, [r7, #6]
 8005b6c:	4ab6      	ldr	r2, [pc, #728]	; (8005e48 <config_motors+0x620>)
 8005b6e:	21a8      	movs	r1, #168	; 0xa8
 8005b70:	fb01 f303 	mul.w	r3, r1, r3
 8005b74:	4413      	add	r3, r2
 8005b76:	336c      	adds	r3, #108	; 0x6c
 8005b78:	4ab4      	ldr	r2, [pc, #720]	; (8005e4c <config_motors+0x624>)
 8005b7a:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].rpm_pid.kp 			= CHASSIS_KP;
 8005b7c:	79bb      	ldrb	r3, [r7, #6]
 8005b7e:	4ab2      	ldr	r2, [pc, #712]	; (8005e48 <config_motors+0x620>)
 8005b80:	21a8      	movs	r1, #168	; 0xa8
 8005b82:	fb01 f303 	mul.w	r3, r1, r3
 8005b86:	4413      	add	r3, r2
 8005b88:	3310      	adds	r3, #16
 8005b8a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8005b8e:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].rpm_pid.ki				= CHASSIS_KI;
 8005b90:	79bb      	ldrb	r3, [r7, #6]
 8005b92:	4aad      	ldr	r2, [pc, #692]	; (8005e48 <config_motors+0x620>)
 8005b94:	21a8      	movs	r1, #168	; 0xa8
 8005b96:	fb01 f303 	mul.w	r3, r1, r3
 8005b9a:	4413      	add	r3, r2
 8005b9c:	3314      	adds	r3, #20
 8005b9e:	f04f 0200 	mov.w	r2, #0
 8005ba2:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].rpm_pid.kd				= CHASSIS_KD;
 8005ba4:	79bb      	ldrb	r3, [r7, #6]
 8005ba6:	4aa8      	ldr	r2, [pc, #672]	; (8005e48 <config_motors+0x620>)
 8005ba8:	21a8      	movs	r1, #168	; 0xa8
 8005baa:	fb01 f303 	mul.w	r3, r1, r3
 8005bae:	4413      	add	r3, r2
 8005bb0:	3318      	adds	r3, #24
 8005bb2:	4aa7      	ldr	r2, [pc, #668]	; (8005e50 <config_motors+0x628>)
 8005bb4:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].rpm_pid.int_max		= CHASSIS_INT_MAX;
 8005bb6:	79bb      	ldrb	r3, [r7, #6]
 8005bb8:	4aa3      	ldr	r2, [pc, #652]	; (8005e48 <config_motors+0x620>)
 8005bba:	21a8      	movs	r1, #168	; 0xa8
 8005bbc:	fb01 f303 	mul.w	r3, r1, r3
 8005bc0:	4413      	add	r3, r2
 8005bc2:	3328      	adds	r3, #40	; 0x28
 8005bc4:	4aa3      	ldr	r2, [pc, #652]	; (8005e54 <config_motors+0x62c>)
 8005bc6:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].rpm_pid.max_out		= CHASSIS_MAX_CURRENT;
 8005bc8:	79bb      	ldrb	r3, [r7, #6]
 8005bca:	4a9f      	ldr	r2, [pc, #636]	; (8005e48 <config_motors+0x620>)
 8005bcc:	21a8      	movs	r1, #168	; 0xa8
 8005bce:	fb01 f303 	mul.w	r3, r1, r3
 8005bd2:	4413      	add	r3, r2
 8005bd4:	332c      	adds	r3, #44	; 0x2c
 8005bd6:	4a9f      	ldr	r2, [pc, #636]	; (8005e54 <config_motors+0x62c>)
 8005bd8:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].rpm_pid.min_out		= -CHASSIS_MAX_CURRENT;
 8005bda:	79bb      	ldrb	r3, [r7, #6]
 8005bdc:	4a9a      	ldr	r2, [pc, #616]	; (8005e48 <config_motors+0x620>)
 8005bde:	21a8      	movs	r1, #168	; 0xa8
 8005be0:	fb01 f303 	mul.w	r3, r1, r3
 8005be4:	4413      	add	r3, r2
 8005be6:	3330      	adds	r3, #48	; 0x30
 8005be8:	4a9b      	ldr	r2, [pc, #620]	; (8005e58 <config_motors+0x630>)
 8005bea:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].rpm_pid.physical_max	= M3508_MAX_OUTPUT;
 8005bec:	79bb      	ldrb	r3, [r7, #6]
 8005bee:	4a96      	ldr	r2, [pc, #600]	; (8005e48 <config_motors+0x620>)
 8005bf0:	21a8      	movs	r1, #168	; 0xa8
 8005bf2:	fb01 f303 	mul.w	r3, r1, r3
 8005bf6:	4413      	add	r3, r2
 8005bf8:	3338      	adds	r3, #56	; 0x38
 8005bfa:	f04f 428d 	mov.w	r2, #1182793728	; 0x46800000
 8005bfe:	601a      	str	r2, [r3, #0]
#endif

#ifdef BL_MOTOR_ID
	motor_id = BL_MOTOR_ID -1;
 8005c00:	230e      	movs	r3, #14
 8005c02:	71bb      	strb	r3, [r7, #6]
	can_motors[motor_id].motor_type = TYPE_M3508;
 8005c04:	79bb      	ldrb	r3, [r7, #6]
 8005c06:	4a90      	ldr	r2, [pc, #576]	; (8005e48 <config_motors+0x620>)
 8005c08:	21a8      	movs	r1, #168	; 0xa8
 8005c0a:	fb01 f303 	mul.w	r3, r1, r3
 8005c0e:	4413      	add	r3, r2
 8005c10:	3302      	adds	r3, #2
 8005c12:	2203      	movs	r2, #3
 8005c14:	701a      	strb	r2, [r3, #0]
	can_motors[motor_id].angle_data.gearbox_ratio = M3508_GEARBOX_RATIO;
 8005c16:	79bb      	ldrb	r3, [r7, #6]
 8005c18:	4a8b      	ldr	r2, [pc, #556]	; (8005e48 <config_motors+0x620>)
 8005c1a:	21a8      	movs	r1, #168	; 0xa8
 8005c1c:	fb01 f303 	mul.w	r3, r1, r3
 8005c20:	4413      	add	r3, r2
 8005c22:	3390      	adds	r3, #144	; 0x90
 8005c24:	4a8d      	ldr	r2, [pc, #564]	; (8005e5c <config_motors+0x634>)
 8005c26:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_data.center_ang 	= 0;
 8005c28:	79bb      	ldrb	r3, [r7, #6]
 8005c2a:	4a87      	ldr	r2, [pc, #540]	; (8005e48 <config_motors+0x620>)
 8005c2c:	21a8      	movs	r1, #168	; 0xa8
 8005c2e:	fb01 f303 	mul.w	r3, r1, r3
 8005c32:	4413      	add	r3, r2
 8005c34:	337c      	adds	r3, #124	; 0x7c
 8005c36:	2200      	movs	r2, #0
 8005c38:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_data.max_ang 	= 0;
 8005c3a:	79bb      	ldrb	r3, [r7, #6]
 8005c3c:	4a82      	ldr	r2, [pc, #520]	; (8005e48 <config_motors+0x620>)
 8005c3e:	21a8      	movs	r1, #168	; 0xa8
 8005c40:	fb01 f303 	mul.w	r3, r1, r3
 8005c44:	4413      	add	r3, r2
 8005c46:	3384      	adds	r3, #132	; 0x84
 8005c48:	f04f 0200 	mov.w	r2, #0
 8005c4c:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_data.min_ang 	= 0;
 8005c4e:	79bb      	ldrb	r3, [r7, #6]
 8005c50:	4a7d      	ldr	r2, [pc, #500]	; (8005e48 <config_motors+0x620>)
 8005c52:	21a8      	movs	r1, #168	; 0xa8
 8005c54:	fb01 f303 	mul.w	r3, r1, r3
 8005c58:	4413      	add	r3, r2
 8005c5a:	3380      	adds	r3, #128	; 0x80
 8005c5c:	f04f 0200 	mov.w	r2, #0
 8005c60:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_data.phy_max_ang =  2 * PI;
 8005c62:	79bb      	ldrb	r3, [r7, #6]
 8005c64:	4a78      	ldr	r2, [pc, #480]	; (8005e48 <config_motors+0x620>)
 8005c66:	21a8      	movs	r1, #168	; 0xa8
 8005c68:	fb01 f303 	mul.w	r3, r1, r3
 8005c6c:	4413      	add	r3, r2
 8005c6e:	338c      	adds	r3, #140	; 0x8c
 8005c70:	4a7b      	ldr	r2, [pc, #492]	; (8005e60 <config_motors+0x638>)
 8005c72:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_data.phy_min_ang = -2 * PI;
 8005c74:	79bb      	ldrb	r3, [r7, #6]
 8005c76:	4a74      	ldr	r2, [pc, #464]	; (8005e48 <config_motors+0x620>)
 8005c78:	21a8      	movs	r1, #168	; 0xa8
 8005c7a:	fb01 f303 	mul.w	r3, r1, r3
 8005c7e:	4413      	add	r3, r2
 8005c80:	3388      	adds	r3, #136	; 0x88
 8005c82:	4a78      	ldr	r2, [pc, #480]	; (8005e64 <config_motors+0x63c>)
 8005c84:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_pid.kp 			= 0;
 8005c86:	79bb      	ldrb	r3, [r7, #6]
 8005c88:	4a6f      	ldr	r2, [pc, #444]	; (8005e48 <config_motors+0x620>)
 8005c8a:	21a8      	movs	r1, #168	; 0xa8
 8005c8c:	fb01 f303 	mul.w	r3, r1, r3
 8005c90:	4413      	add	r3, r2
 8005c92:	3344      	adds	r3, #68	; 0x44
 8005c94:	f04f 0200 	mov.w	r2, #0
 8005c98:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_pid.ki			= 0;
 8005c9a:	79bb      	ldrb	r3, [r7, #6]
 8005c9c:	4a6a      	ldr	r2, [pc, #424]	; (8005e48 <config_motors+0x620>)
 8005c9e:	21a8      	movs	r1, #168	; 0xa8
 8005ca0:	fb01 f303 	mul.w	r3, r1, r3
 8005ca4:	4413      	add	r3, r2
 8005ca6:	3348      	adds	r3, #72	; 0x48
 8005ca8:	f04f 0200 	mov.w	r2, #0
 8005cac:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_pid.kd			= 0;
 8005cae:	79bb      	ldrb	r3, [r7, #6]
 8005cb0:	4a65      	ldr	r2, [pc, #404]	; (8005e48 <config_motors+0x620>)
 8005cb2:	21a8      	movs	r1, #168	; 0xa8
 8005cb4:	fb01 f303 	mul.w	r3, r1, r3
 8005cb8:	4413      	add	r3, r2
 8005cba:	334c      	adds	r3, #76	; 0x4c
 8005cbc:	f04f 0200 	mov.w	r2, #0
 8005cc0:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_pid.int_max		= 0;
 8005cc2:	79bb      	ldrb	r3, [r7, #6]
 8005cc4:	4a60      	ldr	r2, [pc, #384]	; (8005e48 <config_motors+0x620>)
 8005cc6:	21a8      	movs	r1, #168	; 0xa8
 8005cc8:	fb01 f303 	mul.w	r3, r1, r3
 8005ccc:	4413      	add	r3, r2
 8005cce:	335c      	adds	r3, #92	; 0x5c
 8005cd0:	f04f 0200 	mov.w	r2, #0
 8005cd4:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_pid.max_out		= 0;
 8005cd6:	79bb      	ldrb	r3, [r7, #6]
 8005cd8:	4a5b      	ldr	r2, [pc, #364]	; (8005e48 <config_motors+0x620>)
 8005cda:	21a8      	movs	r1, #168	; 0xa8
 8005cdc:	fb01 f303 	mul.w	r3, r1, r3
 8005ce0:	4413      	add	r3, r2
 8005ce2:	3360      	adds	r3, #96	; 0x60
 8005ce4:	f04f 0200 	mov.w	r2, #0
 8005ce8:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_pid.min_out		= 0;
 8005cea:	79bb      	ldrb	r3, [r7, #6]
 8005cec:	4a56      	ldr	r2, [pc, #344]	; (8005e48 <config_motors+0x620>)
 8005cee:	21a8      	movs	r1, #168	; 0xa8
 8005cf0:	fb01 f303 	mul.w	r3, r1, r3
 8005cf4:	4413      	add	r3, r2
 8005cf6:	3364      	adds	r3, #100	; 0x64
 8005cf8:	f04f 0200 	mov.w	r2, #0
 8005cfc:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_pid.physical_max	= M3508_MAX_RPM;
 8005cfe:	79bb      	ldrb	r3, [r7, #6]
 8005d00:	4a51      	ldr	r2, [pc, #324]	; (8005e48 <config_motors+0x620>)
 8005d02:	21a8      	movs	r1, #168	; 0xa8
 8005d04:	fb01 f303 	mul.w	r3, r1, r3
 8005d08:	4413      	add	r3, r2
 8005d0a:	336c      	adds	r3, #108	; 0x6c
 8005d0c:	4a4f      	ldr	r2, [pc, #316]	; (8005e4c <config_motors+0x624>)
 8005d0e:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].rpm_pid.kp 			= CHASSIS_KP;
 8005d10:	79bb      	ldrb	r3, [r7, #6]
 8005d12:	4a4d      	ldr	r2, [pc, #308]	; (8005e48 <config_motors+0x620>)
 8005d14:	21a8      	movs	r1, #168	; 0xa8
 8005d16:	fb01 f303 	mul.w	r3, r1, r3
 8005d1a:	4413      	add	r3, r2
 8005d1c:	3310      	adds	r3, #16
 8005d1e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8005d22:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].rpm_pid.ki				= CHASSIS_KI;
 8005d24:	79bb      	ldrb	r3, [r7, #6]
 8005d26:	4a48      	ldr	r2, [pc, #288]	; (8005e48 <config_motors+0x620>)
 8005d28:	21a8      	movs	r1, #168	; 0xa8
 8005d2a:	fb01 f303 	mul.w	r3, r1, r3
 8005d2e:	4413      	add	r3, r2
 8005d30:	3314      	adds	r3, #20
 8005d32:	f04f 0200 	mov.w	r2, #0
 8005d36:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].rpm_pid.kd				= CHASSIS_KD;
 8005d38:	79bb      	ldrb	r3, [r7, #6]
 8005d3a:	4a43      	ldr	r2, [pc, #268]	; (8005e48 <config_motors+0x620>)
 8005d3c:	21a8      	movs	r1, #168	; 0xa8
 8005d3e:	fb01 f303 	mul.w	r3, r1, r3
 8005d42:	4413      	add	r3, r2
 8005d44:	3318      	adds	r3, #24
 8005d46:	4a42      	ldr	r2, [pc, #264]	; (8005e50 <config_motors+0x628>)
 8005d48:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].rpm_pid.int_max		= CHASSIS_INT_MAX;
 8005d4a:	79bb      	ldrb	r3, [r7, #6]
 8005d4c:	4a3e      	ldr	r2, [pc, #248]	; (8005e48 <config_motors+0x620>)
 8005d4e:	21a8      	movs	r1, #168	; 0xa8
 8005d50:	fb01 f303 	mul.w	r3, r1, r3
 8005d54:	4413      	add	r3, r2
 8005d56:	3328      	adds	r3, #40	; 0x28
 8005d58:	4a3e      	ldr	r2, [pc, #248]	; (8005e54 <config_motors+0x62c>)
 8005d5a:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].rpm_pid.max_out		= CHASSIS_MAX_CURRENT;
 8005d5c:	79bb      	ldrb	r3, [r7, #6]
 8005d5e:	4a3a      	ldr	r2, [pc, #232]	; (8005e48 <config_motors+0x620>)
 8005d60:	21a8      	movs	r1, #168	; 0xa8
 8005d62:	fb01 f303 	mul.w	r3, r1, r3
 8005d66:	4413      	add	r3, r2
 8005d68:	332c      	adds	r3, #44	; 0x2c
 8005d6a:	4a3a      	ldr	r2, [pc, #232]	; (8005e54 <config_motors+0x62c>)
 8005d6c:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].rpm_pid.min_out		= 0;
 8005d6e:	79bb      	ldrb	r3, [r7, #6]
 8005d70:	4a35      	ldr	r2, [pc, #212]	; (8005e48 <config_motors+0x620>)
 8005d72:	21a8      	movs	r1, #168	; 0xa8
 8005d74:	fb01 f303 	mul.w	r3, r1, r3
 8005d78:	4413      	add	r3, r2
 8005d7a:	3330      	adds	r3, #48	; 0x30
 8005d7c:	f04f 0200 	mov.w	r2, #0
 8005d80:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].rpm_pid.physical_max	= M3508_MAX_OUTPUT;
 8005d82:	79bb      	ldrb	r3, [r7, #6]
 8005d84:	4a30      	ldr	r2, [pc, #192]	; (8005e48 <config_motors+0x620>)
 8005d86:	21a8      	movs	r1, #168	; 0xa8
 8005d88:	fb01 f303 	mul.w	r3, r1, r3
 8005d8c:	4413      	add	r3, r2
 8005d8e:	3338      	adds	r3, #56	; 0x38
 8005d90:	f04f 428d 	mov.w	r2, #1182793728	; 0x46800000
 8005d94:	601a      	str	r2, [r3, #0]
#endif

#ifdef BR_MOTOR_ID

	motor_id = BR_MOTOR_ID -1;
 8005d96:	230f      	movs	r3, #15
 8005d98:	71bb      	strb	r3, [r7, #6]
	can_motors[motor_id].motor_type = TYPE_M3508;
 8005d9a:	79bb      	ldrb	r3, [r7, #6]
 8005d9c:	4a2a      	ldr	r2, [pc, #168]	; (8005e48 <config_motors+0x620>)
 8005d9e:	21a8      	movs	r1, #168	; 0xa8
 8005da0:	fb01 f303 	mul.w	r3, r1, r3
 8005da4:	4413      	add	r3, r2
 8005da6:	3302      	adds	r3, #2
 8005da8:	2203      	movs	r2, #3
 8005daa:	701a      	strb	r2, [r3, #0]
	can_motors[motor_id].angle_data.gearbox_ratio = M3508_GEARBOX_RATIO;
 8005dac:	79bb      	ldrb	r3, [r7, #6]
 8005dae:	4a26      	ldr	r2, [pc, #152]	; (8005e48 <config_motors+0x620>)
 8005db0:	21a8      	movs	r1, #168	; 0xa8
 8005db2:	fb01 f303 	mul.w	r3, r1, r3
 8005db6:	4413      	add	r3, r2
 8005db8:	3390      	adds	r3, #144	; 0x90
 8005dba:	4a28      	ldr	r2, [pc, #160]	; (8005e5c <config_motors+0x634>)
 8005dbc:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_data.center_ang 	= 0;
 8005dbe:	79bb      	ldrb	r3, [r7, #6]
 8005dc0:	4a21      	ldr	r2, [pc, #132]	; (8005e48 <config_motors+0x620>)
 8005dc2:	21a8      	movs	r1, #168	; 0xa8
 8005dc4:	fb01 f303 	mul.w	r3, r1, r3
 8005dc8:	4413      	add	r3, r2
 8005dca:	337c      	adds	r3, #124	; 0x7c
 8005dcc:	2200      	movs	r2, #0
 8005dce:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_data.max_ang 	= 0;
 8005dd0:	79bb      	ldrb	r3, [r7, #6]
 8005dd2:	4a1d      	ldr	r2, [pc, #116]	; (8005e48 <config_motors+0x620>)
 8005dd4:	21a8      	movs	r1, #168	; 0xa8
 8005dd6:	fb01 f303 	mul.w	r3, r1, r3
 8005dda:	4413      	add	r3, r2
 8005ddc:	3384      	adds	r3, #132	; 0x84
 8005dde:	f04f 0200 	mov.w	r2, #0
 8005de2:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_data.min_ang 	= 0;
 8005de4:	79bb      	ldrb	r3, [r7, #6]
 8005de6:	4a18      	ldr	r2, [pc, #96]	; (8005e48 <config_motors+0x620>)
 8005de8:	21a8      	movs	r1, #168	; 0xa8
 8005dea:	fb01 f303 	mul.w	r3, r1, r3
 8005dee:	4413      	add	r3, r2
 8005df0:	3380      	adds	r3, #128	; 0x80
 8005df2:	f04f 0200 	mov.w	r2, #0
 8005df6:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_data.phy_max_ang =  2 * PI;
 8005df8:	79bb      	ldrb	r3, [r7, #6]
 8005dfa:	4a13      	ldr	r2, [pc, #76]	; (8005e48 <config_motors+0x620>)
 8005dfc:	21a8      	movs	r1, #168	; 0xa8
 8005dfe:	fb01 f303 	mul.w	r3, r1, r3
 8005e02:	4413      	add	r3, r2
 8005e04:	338c      	adds	r3, #140	; 0x8c
 8005e06:	4a16      	ldr	r2, [pc, #88]	; (8005e60 <config_motors+0x638>)
 8005e08:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_data.phy_min_ang = -2 * PI;
 8005e0a:	79bb      	ldrb	r3, [r7, #6]
 8005e0c:	4a0e      	ldr	r2, [pc, #56]	; (8005e48 <config_motors+0x620>)
 8005e0e:	21a8      	movs	r1, #168	; 0xa8
 8005e10:	fb01 f303 	mul.w	r3, r1, r3
 8005e14:	4413      	add	r3, r2
 8005e16:	3388      	adds	r3, #136	; 0x88
 8005e18:	4a12      	ldr	r2, [pc, #72]	; (8005e64 <config_motors+0x63c>)
 8005e1a:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_pid.kp 			= 0;
 8005e1c:	79bb      	ldrb	r3, [r7, #6]
 8005e1e:	4a0a      	ldr	r2, [pc, #40]	; (8005e48 <config_motors+0x620>)
 8005e20:	21a8      	movs	r1, #168	; 0xa8
 8005e22:	fb01 f303 	mul.w	r3, r1, r3
 8005e26:	4413      	add	r3, r2
 8005e28:	3344      	adds	r3, #68	; 0x44
 8005e2a:	f04f 0200 	mov.w	r2, #0
 8005e2e:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_pid.ki			= 0;
 8005e30:	79bb      	ldrb	r3, [r7, #6]
 8005e32:	4a05      	ldr	r2, [pc, #20]	; (8005e48 <config_motors+0x620>)
 8005e34:	21a8      	movs	r1, #168	; 0xa8
 8005e36:	fb01 f303 	mul.w	r3, r1, r3
 8005e3a:	4413      	add	r3, r2
 8005e3c:	3348      	adds	r3, #72	; 0x48
 8005e3e:	f04f 0200 	mov.w	r2, #0
 8005e42:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_pid.kd			= 0;
 8005e44:	79bb      	ldrb	r3, [r7, #6]
 8005e46:	e00f      	b.n	8005e68 <config_motors+0x640>
 8005e48:	20000f30 	.word	0x20000f30
 8005e4c:	460ca000 	.word	0x460ca000
 8005e50:	3dcccccd 	.word	0x3dcccccd
 8005e54:	461c4000 	.word	0x461c4000
 8005e58:	c61c4000 	.word	0xc61c4000
 8005e5c:	4199999a 	.word	0x4199999a
 8005e60:	40c90fdb 	.word	0x40c90fdb
 8005e64:	c0c90fdb 	.word	0xc0c90fdb
 8005e68:	4abc      	ldr	r2, [pc, #752]	; (800615c <config_motors+0x934>)
 8005e6a:	21a8      	movs	r1, #168	; 0xa8
 8005e6c:	fb01 f303 	mul.w	r3, r1, r3
 8005e70:	4413      	add	r3, r2
 8005e72:	334c      	adds	r3, #76	; 0x4c
 8005e74:	f04f 0200 	mov.w	r2, #0
 8005e78:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_pid.int_max		= 0;
 8005e7a:	79bb      	ldrb	r3, [r7, #6]
 8005e7c:	4ab7      	ldr	r2, [pc, #732]	; (800615c <config_motors+0x934>)
 8005e7e:	21a8      	movs	r1, #168	; 0xa8
 8005e80:	fb01 f303 	mul.w	r3, r1, r3
 8005e84:	4413      	add	r3, r2
 8005e86:	335c      	adds	r3, #92	; 0x5c
 8005e88:	f04f 0200 	mov.w	r2, #0
 8005e8c:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_pid.max_out		= 0;
 8005e8e:	79bb      	ldrb	r3, [r7, #6]
 8005e90:	4ab2      	ldr	r2, [pc, #712]	; (800615c <config_motors+0x934>)
 8005e92:	21a8      	movs	r1, #168	; 0xa8
 8005e94:	fb01 f303 	mul.w	r3, r1, r3
 8005e98:	4413      	add	r3, r2
 8005e9a:	3360      	adds	r3, #96	; 0x60
 8005e9c:	f04f 0200 	mov.w	r2, #0
 8005ea0:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_pid.min_out		= 0;
 8005ea2:	79bb      	ldrb	r3, [r7, #6]
 8005ea4:	4aad      	ldr	r2, [pc, #692]	; (800615c <config_motors+0x934>)
 8005ea6:	21a8      	movs	r1, #168	; 0xa8
 8005ea8:	fb01 f303 	mul.w	r3, r1, r3
 8005eac:	4413      	add	r3, r2
 8005eae:	3364      	adds	r3, #100	; 0x64
 8005eb0:	f04f 0200 	mov.w	r2, #0
 8005eb4:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_pid.physical_max	= M3508_MAX_RPM;
 8005eb6:	79bb      	ldrb	r3, [r7, #6]
 8005eb8:	4aa8      	ldr	r2, [pc, #672]	; (800615c <config_motors+0x934>)
 8005eba:	21a8      	movs	r1, #168	; 0xa8
 8005ebc:	fb01 f303 	mul.w	r3, r1, r3
 8005ec0:	4413      	add	r3, r2
 8005ec2:	336c      	adds	r3, #108	; 0x6c
 8005ec4:	4aa6      	ldr	r2, [pc, #664]	; (8006160 <config_motors+0x938>)
 8005ec6:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].rpm_pid.kp 			= CHASSIS_KP;
 8005ec8:	79bb      	ldrb	r3, [r7, #6]
 8005eca:	4aa4      	ldr	r2, [pc, #656]	; (800615c <config_motors+0x934>)
 8005ecc:	21a8      	movs	r1, #168	; 0xa8
 8005ece:	fb01 f303 	mul.w	r3, r1, r3
 8005ed2:	4413      	add	r3, r2
 8005ed4:	3310      	adds	r3, #16
 8005ed6:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8005eda:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].rpm_pid.ki				= CHASSIS_KI;
 8005edc:	79bb      	ldrb	r3, [r7, #6]
 8005ede:	4a9f      	ldr	r2, [pc, #636]	; (800615c <config_motors+0x934>)
 8005ee0:	21a8      	movs	r1, #168	; 0xa8
 8005ee2:	fb01 f303 	mul.w	r3, r1, r3
 8005ee6:	4413      	add	r3, r2
 8005ee8:	3314      	adds	r3, #20
 8005eea:	f04f 0200 	mov.w	r2, #0
 8005eee:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].rpm_pid.kd				= CHASSIS_KD;
 8005ef0:	79bb      	ldrb	r3, [r7, #6]
 8005ef2:	4a9a      	ldr	r2, [pc, #616]	; (800615c <config_motors+0x934>)
 8005ef4:	21a8      	movs	r1, #168	; 0xa8
 8005ef6:	fb01 f303 	mul.w	r3, r1, r3
 8005efa:	4413      	add	r3, r2
 8005efc:	3318      	adds	r3, #24
 8005efe:	4a99      	ldr	r2, [pc, #612]	; (8006164 <config_motors+0x93c>)
 8005f00:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].rpm_pid.int_max		= CHASSIS_INT_MAX;
 8005f02:	79bb      	ldrb	r3, [r7, #6]
 8005f04:	4a95      	ldr	r2, [pc, #596]	; (800615c <config_motors+0x934>)
 8005f06:	21a8      	movs	r1, #168	; 0xa8
 8005f08:	fb01 f303 	mul.w	r3, r1, r3
 8005f0c:	4413      	add	r3, r2
 8005f0e:	3328      	adds	r3, #40	; 0x28
 8005f10:	4a95      	ldr	r2, [pc, #596]	; (8006168 <config_motors+0x940>)
 8005f12:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].rpm_pid.max_out		= CHASSIS_MAX_CURRENT;
 8005f14:	79bb      	ldrb	r3, [r7, #6]
 8005f16:	4a91      	ldr	r2, [pc, #580]	; (800615c <config_motors+0x934>)
 8005f18:	21a8      	movs	r1, #168	; 0xa8
 8005f1a:	fb01 f303 	mul.w	r3, r1, r3
 8005f1e:	4413      	add	r3, r2
 8005f20:	332c      	adds	r3, #44	; 0x2c
 8005f22:	4a91      	ldr	r2, [pc, #580]	; (8006168 <config_motors+0x940>)
 8005f24:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].rpm_pid.min_out		= 0;
 8005f26:	79bb      	ldrb	r3, [r7, #6]
 8005f28:	4a8c      	ldr	r2, [pc, #560]	; (800615c <config_motors+0x934>)
 8005f2a:	21a8      	movs	r1, #168	; 0xa8
 8005f2c:	fb01 f303 	mul.w	r3, r1, r3
 8005f30:	4413      	add	r3, r2
 8005f32:	3330      	adds	r3, #48	; 0x30
 8005f34:	f04f 0200 	mov.w	r2, #0
 8005f38:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].rpm_pid.physical_max	= M3508_MAX_OUTPUT;
 8005f3a:	79bb      	ldrb	r3, [r7, #6]
 8005f3c:	4a87      	ldr	r2, [pc, #540]	; (800615c <config_motors+0x934>)
 8005f3e:	21a8      	movs	r1, #168	; 0xa8
 8005f40:	fb01 f303 	mul.w	r3, r1, r3
 8005f44:	4413      	add	r3, r2
 8005f46:	3338      	adds	r3, #56	; 0x38
 8005f48:	f04f 428d 	mov.w	r2, #1182793728	; 0x46800000
 8005f4c:	601a      	str	r2, [r3, #0]
#endif

#ifdef LFRICTION_MOTOR_ID
	motor_id = LFRICTION_MOTOR_ID -1;
 8005f4e:	2304      	movs	r3, #4
 8005f50:	71bb      	strb	r3, [r7, #6]
	can_motors[motor_id].motor_type = TYPE_M3508;
 8005f52:	79bb      	ldrb	r3, [r7, #6]
 8005f54:	4a81      	ldr	r2, [pc, #516]	; (800615c <config_motors+0x934>)
 8005f56:	21a8      	movs	r1, #168	; 0xa8
 8005f58:	fb01 f303 	mul.w	r3, r1, r3
 8005f5c:	4413      	add	r3, r2
 8005f5e:	3302      	adds	r3, #2
 8005f60:	2203      	movs	r2, #3
 8005f62:	701a      	strb	r2, [r3, #0]
	can_motors[motor_id].angle_data.gearbox_ratio = M3508_GEARBOX_RATIO;
 8005f64:	79bb      	ldrb	r3, [r7, #6]
 8005f66:	4a7d      	ldr	r2, [pc, #500]	; (800615c <config_motors+0x934>)
 8005f68:	21a8      	movs	r1, #168	; 0xa8
 8005f6a:	fb01 f303 	mul.w	r3, r1, r3
 8005f6e:	4413      	add	r3, r2
 8005f70:	3390      	adds	r3, #144	; 0x90
 8005f72:	4a7e      	ldr	r2, [pc, #504]	; (800616c <config_motors+0x944>)
 8005f74:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_data.center_ang 	= 0;
 8005f76:	79bb      	ldrb	r3, [r7, #6]
 8005f78:	4a78      	ldr	r2, [pc, #480]	; (800615c <config_motors+0x934>)
 8005f7a:	21a8      	movs	r1, #168	; 0xa8
 8005f7c:	fb01 f303 	mul.w	r3, r1, r3
 8005f80:	4413      	add	r3, r2
 8005f82:	337c      	adds	r3, #124	; 0x7c
 8005f84:	2200      	movs	r2, #0
 8005f86:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_data.max_ang 	= 0;
 8005f88:	79bb      	ldrb	r3, [r7, #6]
 8005f8a:	4a74      	ldr	r2, [pc, #464]	; (800615c <config_motors+0x934>)
 8005f8c:	21a8      	movs	r1, #168	; 0xa8
 8005f8e:	fb01 f303 	mul.w	r3, r1, r3
 8005f92:	4413      	add	r3, r2
 8005f94:	3384      	adds	r3, #132	; 0x84
 8005f96:	f04f 0200 	mov.w	r2, #0
 8005f9a:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_data.min_ang 	= 0;
 8005f9c:	79bb      	ldrb	r3, [r7, #6]
 8005f9e:	4a6f      	ldr	r2, [pc, #444]	; (800615c <config_motors+0x934>)
 8005fa0:	21a8      	movs	r1, #168	; 0xa8
 8005fa2:	fb01 f303 	mul.w	r3, r1, r3
 8005fa6:	4413      	add	r3, r2
 8005fa8:	3380      	adds	r3, #128	; 0x80
 8005faa:	f04f 0200 	mov.w	r2, #0
 8005fae:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_data.phy_max_ang =  2 * PI;
 8005fb0:	79bb      	ldrb	r3, [r7, #6]
 8005fb2:	4a6a      	ldr	r2, [pc, #424]	; (800615c <config_motors+0x934>)
 8005fb4:	21a8      	movs	r1, #168	; 0xa8
 8005fb6:	fb01 f303 	mul.w	r3, r1, r3
 8005fba:	4413      	add	r3, r2
 8005fbc:	338c      	adds	r3, #140	; 0x8c
 8005fbe:	4a6c      	ldr	r2, [pc, #432]	; (8006170 <config_motors+0x948>)
 8005fc0:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_data.phy_min_ang = -2 * PI;
 8005fc2:	79bb      	ldrb	r3, [r7, #6]
 8005fc4:	4a65      	ldr	r2, [pc, #404]	; (800615c <config_motors+0x934>)
 8005fc6:	21a8      	movs	r1, #168	; 0xa8
 8005fc8:	fb01 f303 	mul.w	r3, r1, r3
 8005fcc:	4413      	add	r3, r2
 8005fce:	3388      	adds	r3, #136	; 0x88
 8005fd0:	4a68      	ldr	r2, [pc, #416]	; (8006174 <config_motors+0x94c>)
 8005fd2:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_pid.kp 			= 0;
 8005fd4:	79bb      	ldrb	r3, [r7, #6]
 8005fd6:	4a61      	ldr	r2, [pc, #388]	; (800615c <config_motors+0x934>)
 8005fd8:	21a8      	movs	r1, #168	; 0xa8
 8005fda:	fb01 f303 	mul.w	r3, r1, r3
 8005fde:	4413      	add	r3, r2
 8005fe0:	3344      	adds	r3, #68	; 0x44
 8005fe2:	f04f 0200 	mov.w	r2, #0
 8005fe6:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_pid.ki			= 0;
 8005fe8:	79bb      	ldrb	r3, [r7, #6]
 8005fea:	4a5c      	ldr	r2, [pc, #368]	; (800615c <config_motors+0x934>)
 8005fec:	21a8      	movs	r1, #168	; 0xa8
 8005fee:	fb01 f303 	mul.w	r3, r1, r3
 8005ff2:	4413      	add	r3, r2
 8005ff4:	3348      	adds	r3, #72	; 0x48
 8005ff6:	f04f 0200 	mov.w	r2, #0
 8005ffa:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_pid.kd			= 0;
 8005ffc:	79bb      	ldrb	r3, [r7, #6]
 8005ffe:	4a57      	ldr	r2, [pc, #348]	; (800615c <config_motors+0x934>)
 8006000:	21a8      	movs	r1, #168	; 0xa8
 8006002:	fb01 f303 	mul.w	r3, r1, r3
 8006006:	4413      	add	r3, r2
 8006008:	334c      	adds	r3, #76	; 0x4c
 800600a:	f04f 0200 	mov.w	r2, #0
 800600e:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_pid.int_max		= 0;
 8006010:	79bb      	ldrb	r3, [r7, #6]
 8006012:	4a52      	ldr	r2, [pc, #328]	; (800615c <config_motors+0x934>)
 8006014:	21a8      	movs	r1, #168	; 0xa8
 8006016:	fb01 f303 	mul.w	r3, r1, r3
 800601a:	4413      	add	r3, r2
 800601c:	335c      	adds	r3, #92	; 0x5c
 800601e:	f04f 0200 	mov.w	r2, #0
 8006022:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_pid.max_out		= 0;
 8006024:	79bb      	ldrb	r3, [r7, #6]
 8006026:	4a4d      	ldr	r2, [pc, #308]	; (800615c <config_motors+0x934>)
 8006028:	21a8      	movs	r1, #168	; 0xa8
 800602a:	fb01 f303 	mul.w	r3, r1, r3
 800602e:	4413      	add	r3, r2
 8006030:	3360      	adds	r3, #96	; 0x60
 8006032:	f04f 0200 	mov.w	r2, #0
 8006036:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_pid.min_out		= 0;
 8006038:	79bb      	ldrb	r3, [r7, #6]
 800603a:	4a48      	ldr	r2, [pc, #288]	; (800615c <config_motors+0x934>)
 800603c:	21a8      	movs	r1, #168	; 0xa8
 800603e:	fb01 f303 	mul.w	r3, r1, r3
 8006042:	4413      	add	r3, r2
 8006044:	3364      	adds	r3, #100	; 0x64
 8006046:	f04f 0200 	mov.w	r2, #0
 800604a:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_pid.physical_max	= M3508_MAX_RPM;
 800604c:	79bb      	ldrb	r3, [r7, #6]
 800604e:	4a43      	ldr	r2, [pc, #268]	; (800615c <config_motors+0x934>)
 8006050:	21a8      	movs	r1, #168	; 0xa8
 8006052:	fb01 f303 	mul.w	r3, r1, r3
 8006056:	4413      	add	r3, r2
 8006058:	336c      	adds	r3, #108	; 0x6c
 800605a:	4a41      	ldr	r2, [pc, #260]	; (8006160 <config_motors+0x938>)
 800605c:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].rpm_pid.kp 			= FRICTION_KP;
 800605e:	79bb      	ldrb	r3, [r7, #6]
 8006060:	4a3e      	ldr	r2, [pc, #248]	; (800615c <config_motors+0x934>)
 8006062:	21a8      	movs	r1, #168	; 0xa8
 8006064:	fb01 f303 	mul.w	r3, r1, r3
 8006068:	4413      	add	r3, r2
 800606a:	3310      	adds	r3, #16
 800606c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8006070:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].rpm_pid.ki				= FRICTION_KI;
 8006072:	79bb      	ldrb	r3, [r7, #6]
 8006074:	4a39      	ldr	r2, [pc, #228]	; (800615c <config_motors+0x934>)
 8006076:	21a8      	movs	r1, #168	; 0xa8
 8006078:	fb01 f303 	mul.w	r3, r1, r3
 800607c:	4413      	add	r3, r2
 800607e:	3314      	adds	r3, #20
 8006080:	4a3d      	ldr	r2, [pc, #244]	; (8006178 <config_motors+0x950>)
 8006082:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].rpm_pid.kd				= FRICTION_KD;
 8006084:	79bb      	ldrb	r3, [r7, #6]
 8006086:	4a35      	ldr	r2, [pc, #212]	; (800615c <config_motors+0x934>)
 8006088:	21a8      	movs	r1, #168	; 0xa8
 800608a:	fb01 f303 	mul.w	r3, r1, r3
 800608e:	4413      	add	r3, r2
 8006090:	3318      	adds	r3, #24
 8006092:	4a3a      	ldr	r2, [pc, #232]	; (800617c <config_motors+0x954>)
 8006094:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].rpm_pid.int_max		= FRICTION_MAX_INT;
 8006096:	79bb      	ldrb	r3, [r7, #6]
 8006098:	4a30      	ldr	r2, [pc, #192]	; (800615c <config_motors+0x934>)
 800609a:	21a8      	movs	r1, #168	; 0xa8
 800609c:	fb01 f303 	mul.w	r3, r1, r3
 80060a0:	4413      	add	r3, r2
 80060a2:	3328      	adds	r3, #40	; 0x28
 80060a4:	4a30      	ldr	r2, [pc, #192]	; (8006168 <config_motors+0x940>)
 80060a6:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].rpm_pid.max_out		= FRICTION_MAX_CURRENT;
 80060a8:	79bb      	ldrb	r3, [r7, #6]
 80060aa:	4a2c      	ldr	r2, [pc, #176]	; (800615c <config_motors+0x934>)
 80060ac:	21a8      	movs	r1, #168	; 0xa8
 80060ae:	fb01 f303 	mul.w	r3, r1, r3
 80060b2:	4413      	add	r3, r2
 80060b4:	332c      	adds	r3, #44	; 0x2c
 80060b6:	f04f 428d 	mov.w	r2, #1182793728	; 0x46800000
 80060ba:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].rpm_pid.min_out		= 0;
 80060bc:	79bb      	ldrb	r3, [r7, #6]
 80060be:	4a27      	ldr	r2, [pc, #156]	; (800615c <config_motors+0x934>)
 80060c0:	21a8      	movs	r1, #168	; 0xa8
 80060c2:	fb01 f303 	mul.w	r3, r1, r3
 80060c6:	4413      	add	r3, r2
 80060c8:	3330      	adds	r3, #48	; 0x30
 80060ca:	f04f 0200 	mov.w	r2, #0
 80060ce:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].rpm_pid.physical_max	= M3508_MAX_OUTPUT;
 80060d0:	79bb      	ldrb	r3, [r7, #6]
 80060d2:	4a22      	ldr	r2, [pc, #136]	; (800615c <config_motors+0x934>)
 80060d4:	21a8      	movs	r1, #168	; 0xa8
 80060d6:	fb01 f303 	mul.w	r3, r1, r3
 80060da:	4413      	add	r3, r2
 80060dc:	3338      	adds	r3, #56	; 0x38
 80060de:	f04f 428d 	mov.w	r2, #1182793728	; 0x46800000
 80060e2:	601a      	str	r2, [r3, #0]
#endif

#ifdef RFRICTION_MOTOR_ID
	motor_id = RFRICTION_MOTOR_ID -1;
 80060e4:	2305      	movs	r3, #5
 80060e6:	71bb      	strb	r3, [r7, #6]
	can_motors[motor_id].motor_type = TYPE_M3508;
 80060e8:	79bb      	ldrb	r3, [r7, #6]
 80060ea:	4a1c      	ldr	r2, [pc, #112]	; (800615c <config_motors+0x934>)
 80060ec:	21a8      	movs	r1, #168	; 0xa8
 80060ee:	fb01 f303 	mul.w	r3, r1, r3
 80060f2:	4413      	add	r3, r2
 80060f4:	3302      	adds	r3, #2
 80060f6:	2203      	movs	r2, #3
 80060f8:	701a      	strb	r2, [r3, #0]
	can_motors[motor_id].angle_data.gearbox_ratio = M3508_GEARBOX_RATIO;
 80060fa:	79bb      	ldrb	r3, [r7, #6]
 80060fc:	4a17      	ldr	r2, [pc, #92]	; (800615c <config_motors+0x934>)
 80060fe:	21a8      	movs	r1, #168	; 0xa8
 8006100:	fb01 f303 	mul.w	r3, r1, r3
 8006104:	4413      	add	r3, r2
 8006106:	3390      	adds	r3, #144	; 0x90
 8006108:	4a18      	ldr	r2, [pc, #96]	; (800616c <config_motors+0x944>)
 800610a:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_data.center_ang 	= 0;
 800610c:	79bb      	ldrb	r3, [r7, #6]
 800610e:	4a13      	ldr	r2, [pc, #76]	; (800615c <config_motors+0x934>)
 8006110:	21a8      	movs	r1, #168	; 0xa8
 8006112:	fb01 f303 	mul.w	r3, r1, r3
 8006116:	4413      	add	r3, r2
 8006118:	337c      	adds	r3, #124	; 0x7c
 800611a:	2200      	movs	r2, #0
 800611c:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_data.max_ang 	= 0;
 800611e:	79bb      	ldrb	r3, [r7, #6]
 8006120:	4a0e      	ldr	r2, [pc, #56]	; (800615c <config_motors+0x934>)
 8006122:	21a8      	movs	r1, #168	; 0xa8
 8006124:	fb01 f303 	mul.w	r3, r1, r3
 8006128:	4413      	add	r3, r2
 800612a:	3384      	adds	r3, #132	; 0x84
 800612c:	f04f 0200 	mov.w	r2, #0
 8006130:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_data.min_ang 	= 0;
 8006132:	79bb      	ldrb	r3, [r7, #6]
 8006134:	4a09      	ldr	r2, [pc, #36]	; (800615c <config_motors+0x934>)
 8006136:	21a8      	movs	r1, #168	; 0xa8
 8006138:	fb01 f303 	mul.w	r3, r1, r3
 800613c:	4413      	add	r3, r2
 800613e:	3380      	adds	r3, #128	; 0x80
 8006140:	f04f 0200 	mov.w	r2, #0
 8006144:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_data.phy_max_ang =  2 * PI;
 8006146:	79bb      	ldrb	r3, [r7, #6]
 8006148:	4a04      	ldr	r2, [pc, #16]	; (800615c <config_motors+0x934>)
 800614a:	21a8      	movs	r1, #168	; 0xa8
 800614c:	fb01 f303 	mul.w	r3, r1, r3
 8006150:	4413      	add	r3, r2
 8006152:	338c      	adds	r3, #140	; 0x8c
 8006154:	4a06      	ldr	r2, [pc, #24]	; (8006170 <config_motors+0x948>)
 8006156:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_data.phy_min_ang = -2 * PI;
 8006158:	79bb      	ldrb	r3, [r7, #6]
 800615a:	e011      	b.n	8006180 <config_motors+0x958>
 800615c:	20000f30 	.word	0x20000f30
 8006160:	460ca000 	.word	0x460ca000
 8006164:	3dcccccd 	.word	0x3dcccccd
 8006168:	461c4000 	.word	0x461c4000
 800616c:	4199999a 	.word	0x4199999a
 8006170:	40c90fdb 	.word	0x40c90fdb
 8006174:	c0c90fdb 	.word	0xc0c90fdb
 8006178:	3b03126f 	.word	0x3b03126f
 800617c:	41200000 	.word	0x41200000
 8006180:	4abb      	ldr	r2, [pc, #748]	; (8006470 <config_motors+0xc48>)
 8006182:	21a8      	movs	r1, #168	; 0xa8
 8006184:	fb01 f303 	mul.w	r3, r1, r3
 8006188:	4413      	add	r3, r2
 800618a:	3388      	adds	r3, #136	; 0x88
 800618c:	4ab9      	ldr	r2, [pc, #740]	; (8006474 <config_motors+0xc4c>)
 800618e:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_pid.kp 			= 0;
 8006190:	79bb      	ldrb	r3, [r7, #6]
 8006192:	4ab7      	ldr	r2, [pc, #732]	; (8006470 <config_motors+0xc48>)
 8006194:	21a8      	movs	r1, #168	; 0xa8
 8006196:	fb01 f303 	mul.w	r3, r1, r3
 800619a:	4413      	add	r3, r2
 800619c:	3344      	adds	r3, #68	; 0x44
 800619e:	f04f 0200 	mov.w	r2, #0
 80061a2:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_pid.ki			= 0;
 80061a4:	79bb      	ldrb	r3, [r7, #6]
 80061a6:	4ab2      	ldr	r2, [pc, #712]	; (8006470 <config_motors+0xc48>)
 80061a8:	21a8      	movs	r1, #168	; 0xa8
 80061aa:	fb01 f303 	mul.w	r3, r1, r3
 80061ae:	4413      	add	r3, r2
 80061b0:	3348      	adds	r3, #72	; 0x48
 80061b2:	f04f 0200 	mov.w	r2, #0
 80061b6:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_pid.kd			= 0;
 80061b8:	79bb      	ldrb	r3, [r7, #6]
 80061ba:	4aad      	ldr	r2, [pc, #692]	; (8006470 <config_motors+0xc48>)
 80061bc:	21a8      	movs	r1, #168	; 0xa8
 80061be:	fb01 f303 	mul.w	r3, r1, r3
 80061c2:	4413      	add	r3, r2
 80061c4:	334c      	adds	r3, #76	; 0x4c
 80061c6:	f04f 0200 	mov.w	r2, #0
 80061ca:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_pid.int_max		= 0;
 80061cc:	79bb      	ldrb	r3, [r7, #6]
 80061ce:	4aa8      	ldr	r2, [pc, #672]	; (8006470 <config_motors+0xc48>)
 80061d0:	21a8      	movs	r1, #168	; 0xa8
 80061d2:	fb01 f303 	mul.w	r3, r1, r3
 80061d6:	4413      	add	r3, r2
 80061d8:	335c      	adds	r3, #92	; 0x5c
 80061da:	f04f 0200 	mov.w	r2, #0
 80061de:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_pid.max_out		= 0;
 80061e0:	79bb      	ldrb	r3, [r7, #6]
 80061e2:	4aa3      	ldr	r2, [pc, #652]	; (8006470 <config_motors+0xc48>)
 80061e4:	21a8      	movs	r1, #168	; 0xa8
 80061e6:	fb01 f303 	mul.w	r3, r1, r3
 80061ea:	4413      	add	r3, r2
 80061ec:	3360      	adds	r3, #96	; 0x60
 80061ee:	f04f 0200 	mov.w	r2, #0
 80061f2:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_pid.min_out		= 0;
 80061f4:	79bb      	ldrb	r3, [r7, #6]
 80061f6:	4a9e      	ldr	r2, [pc, #632]	; (8006470 <config_motors+0xc48>)
 80061f8:	21a8      	movs	r1, #168	; 0xa8
 80061fa:	fb01 f303 	mul.w	r3, r1, r3
 80061fe:	4413      	add	r3, r2
 8006200:	3364      	adds	r3, #100	; 0x64
 8006202:	f04f 0200 	mov.w	r2, #0
 8006206:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_pid.physical_max	= M3508_MAX_RPM;
 8006208:	79bb      	ldrb	r3, [r7, #6]
 800620a:	4a99      	ldr	r2, [pc, #612]	; (8006470 <config_motors+0xc48>)
 800620c:	21a8      	movs	r1, #168	; 0xa8
 800620e:	fb01 f303 	mul.w	r3, r1, r3
 8006212:	4413      	add	r3, r2
 8006214:	336c      	adds	r3, #108	; 0x6c
 8006216:	4a98      	ldr	r2, [pc, #608]	; (8006478 <config_motors+0xc50>)
 8006218:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].rpm_pid.kp 			= FRICTION_KP;
 800621a:	79bb      	ldrb	r3, [r7, #6]
 800621c:	4a94      	ldr	r2, [pc, #592]	; (8006470 <config_motors+0xc48>)
 800621e:	21a8      	movs	r1, #168	; 0xa8
 8006220:	fb01 f303 	mul.w	r3, r1, r3
 8006224:	4413      	add	r3, r2
 8006226:	3310      	adds	r3, #16
 8006228:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800622c:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].rpm_pid.ki				= FRICTION_KI;
 800622e:	79bb      	ldrb	r3, [r7, #6]
 8006230:	4a8f      	ldr	r2, [pc, #572]	; (8006470 <config_motors+0xc48>)
 8006232:	21a8      	movs	r1, #168	; 0xa8
 8006234:	fb01 f303 	mul.w	r3, r1, r3
 8006238:	4413      	add	r3, r2
 800623a:	3314      	adds	r3, #20
 800623c:	4a8f      	ldr	r2, [pc, #572]	; (800647c <config_motors+0xc54>)
 800623e:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].rpm_pid.kd				= FRICTION_KD;
 8006240:	79bb      	ldrb	r3, [r7, #6]
 8006242:	4a8b      	ldr	r2, [pc, #556]	; (8006470 <config_motors+0xc48>)
 8006244:	21a8      	movs	r1, #168	; 0xa8
 8006246:	fb01 f303 	mul.w	r3, r1, r3
 800624a:	4413      	add	r3, r2
 800624c:	3318      	adds	r3, #24
 800624e:	4a8c      	ldr	r2, [pc, #560]	; (8006480 <config_motors+0xc58>)
 8006250:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].rpm_pid.int_max		= FRICTION_MAX_INT;
 8006252:	79bb      	ldrb	r3, [r7, #6]
 8006254:	4a86      	ldr	r2, [pc, #536]	; (8006470 <config_motors+0xc48>)
 8006256:	21a8      	movs	r1, #168	; 0xa8
 8006258:	fb01 f303 	mul.w	r3, r1, r3
 800625c:	4413      	add	r3, r2
 800625e:	3328      	adds	r3, #40	; 0x28
 8006260:	4a88      	ldr	r2, [pc, #544]	; (8006484 <config_motors+0xc5c>)
 8006262:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].rpm_pid.max_out		= FRICTION_MAX_CURRENT;
 8006264:	79bb      	ldrb	r3, [r7, #6]
 8006266:	4a82      	ldr	r2, [pc, #520]	; (8006470 <config_motors+0xc48>)
 8006268:	21a8      	movs	r1, #168	; 0xa8
 800626a:	fb01 f303 	mul.w	r3, r1, r3
 800626e:	4413      	add	r3, r2
 8006270:	332c      	adds	r3, #44	; 0x2c
 8006272:	f04f 428d 	mov.w	r2, #1182793728	; 0x46800000
 8006276:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].rpm_pid.min_out		= 0;
 8006278:	79bb      	ldrb	r3, [r7, #6]
 800627a:	4a7d      	ldr	r2, [pc, #500]	; (8006470 <config_motors+0xc48>)
 800627c:	21a8      	movs	r1, #168	; 0xa8
 800627e:	fb01 f303 	mul.w	r3, r1, r3
 8006282:	4413      	add	r3, r2
 8006284:	3330      	adds	r3, #48	; 0x30
 8006286:	f04f 0200 	mov.w	r2, #0
 800628a:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].rpm_pid.physical_max	= M3508_MAX_OUTPUT;
 800628c:	79bb      	ldrb	r3, [r7, #6]
 800628e:	4a78      	ldr	r2, [pc, #480]	; (8006470 <config_motors+0xc48>)
 8006290:	21a8      	movs	r1, #168	; 0xa8
 8006292:	fb01 f303 	mul.w	r3, r1, r3
 8006296:	4413      	add	r3, r2
 8006298:	3338      	adds	r3, #56	; 0x38
 800629a:	f04f 428d 	mov.w	r2, #1182793728	; 0x46800000
 800629e:	601a      	str	r2, [r3, #0]
#endif

#ifdef FEEDER_MOTOR_ID
	motor_id = FEEDER_MOTOR_ID -1;
 80062a0:	2306      	movs	r3, #6
 80062a2:	71bb      	strb	r3, [r7, #6]
	can_motors[motor_id].motor_type = TYPE_M2006;
 80062a4:	79bb      	ldrb	r3, [r7, #6]
 80062a6:	4a72      	ldr	r2, [pc, #456]	; (8006470 <config_motors+0xc48>)
 80062a8:	21a8      	movs	r1, #168	; 0xa8
 80062aa:	fb01 f303 	mul.w	r3, r1, r3
 80062ae:	4413      	add	r3, r2
 80062b0:	3302      	adds	r3, #2
 80062b2:	2202      	movs	r2, #2
 80062b4:	701a      	strb	r2, [r3, #0]
	can_motors[motor_id].angle_data.gearbox_ratio = M2006_GEARBOX_RATIO;
 80062b6:	79bb      	ldrb	r3, [r7, #6]
 80062b8:	4a6d      	ldr	r2, [pc, #436]	; (8006470 <config_motors+0xc48>)
 80062ba:	21a8      	movs	r1, #168	; 0xa8
 80062bc:	fb01 f303 	mul.w	r3, r1, r3
 80062c0:	4413      	add	r3, r2
 80062c2:	3390      	adds	r3, #144	; 0x90
 80062c4:	4a70      	ldr	r2, [pc, #448]	; (8006488 <config_motors+0xc60>)
 80062c6:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_data.center_ang 	= 0;
 80062c8:	79bb      	ldrb	r3, [r7, #6]
 80062ca:	4a69      	ldr	r2, [pc, #420]	; (8006470 <config_motors+0xc48>)
 80062cc:	21a8      	movs	r1, #168	; 0xa8
 80062ce:	fb01 f303 	mul.w	r3, r1, r3
 80062d2:	4413      	add	r3, r2
 80062d4:	337c      	adds	r3, #124	; 0x7c
 80062d6:	2200      	movs	r2, #0
 80062d8:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_data.max_ang 	= PI*5000;	//so it can rotate 5000 times oops
 80062da:	79bb      	ldrb	r3, [r7, #6]
 80062dc:	4a64      	ldr	r2, [pc, #400]	; (8006470 <config_motors+0xc48>)
 80062de:	21a8      	movs	r1, #168	; 0xa8
 80062e0:	fb01 f303 	mul.w	r3, r1, r3
 80062e4:	4413      	add	r3, r2
 80062e6:	3384      	adds	r3, #132	; 0x84
 80062e8:	4a68      	ldr	r2, [pc, #416]	; (800648c <config_motors+0xc64>)
 80062ea:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_data.min_ang 	= -PI*5000;
 80062ec:	79bb      	ldrb	r3, [r7, #6]
 80062ee:	4a60      	ldr	r2, [pc, #384]	; (8006470 <config_motors+0xc48>)
 80062f0:	21a8      	movs	r1, #168	; 0xa8
 80062f2:	fb01 f303 	mul.w	r3, r1, r3
 80062f6:	4413      	add	r3, r2
 80062f8:	3380      	adds	r3, #128	; 0x80
 80062fa:	4a65      	ldr	r2, [pc, #404]	; (8006490 <config_motors+0xc68>)
 80062fc:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_data.phy_max_ang =  2 * PI;
 80062fe:	79bb      	ldrb	r3, [r7, #6]
 8006300:	4a5b      	ldr	r2, [pc, #364]	; (8006470 <config_motors+0xc48>)
 8006302:	21a8      	movs	r1, #168	; 0xa8
 8006304:	fb01 f303 	mul.w	r3, r1, r3
 8006308:	4413      	add	r3, r2
 800630a:	338c      	adds	r3, #140	; 0x8c
 800630c:	4a61      	ldr	r2, [pc, #388]	; (8006494 <config_motors+0xc6c>)
 800630e:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_data.phy_min_ang = -2 * PI;
 8006310:	79bb      	ldrb	r3, [r7, #6]
 8006312:	4a57      	ldr	r2, [pc, #348]	; (8006470 <config_motors+0xc48>)
 8006314:	21a8      	movs	r1, #168	; 0xa8
 8006316:	fb01 f303 	mul.w	r3, r1, r3
 800631a:	4413      	add	r3, r2
 800631c:	3388      	adds	r3, #136	; 0x88
 800631e:	4a55      	ldr	r2, [pc, #340]	; (8006474 <config_motors+0xc4c>)
 8006320:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_pid.kp 			= FEEDER_ANGLE_KP;
 8006322:	79bb      	ldrb	r3, [r7, #6]
 8006324:	4a52      	ldr	r2, [pc, #328]	; (8006470 <config_motors+0xc48>)
 8006326:	21a8      	movs	r1, #168	; 0xa8
 8006328:	fb01 f303 	mul.w	r3, r1, r3
 800632c:	4413      	add	r3, r2
 800632e:	3344      	adds	r3, #68	; 0x44
 8006330:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8006334:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_pid.ki			= FEEDER_ANGLE_KP;
 8006336:	79bb      	ldrb	r3, [r7, #6]
 8006338:	4a4d      	ldr	r2, [pc, #308]	; (8006470 <config_motors+0xc48>)
 800633a:	21a8      	movs	r1, #168	; 0xa8
 800633c:	fb01 f303 	mul.w	r3, r1, r3
 8006340:	4413      	add	r3, r2
 8006342:	3348      	adds	r3, #72	; 0x48
 8006344:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8006348:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_pid.kd			= FEEDER_ANGLE_KP;
 800634a:	79bb      	ldrb	r3, [r7, #6]
 800634c:	4a48      	ldr	r2, [pc, #288]	; (8006470 <config_motors+0xc48>)
 800634e:	21a8      	movs	r1, #168	; 0xa8
 8006350:	fb01 f303 	mul.w	r3, r1, r3
 8006354:	4413      	add	r3, r2
 8006356:	334c      	adds	r3, #76	; 0x4c
 8006358:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800635c:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_pid.int_max		= FEEDER_ANGLE_INT_MAX;
 800635e:	79bb      	ldrb	r3, [r7, #6]
 8006360:	4a43      	ldr	r2, [pc, #268]	; (8006470 <config_motors+0xc48>)
 8006362:	21a8      	movs	r1, #168	; 0xa8
 8006364:	fb01 f303 	mul.w	r3, r1, r3
 8006368:	4413      	add	r3, r2
 800636a:	335c      	adds	r3, #92	; 0x5c
 800636c:	f04f 0200 	mov.w	r2, #0
 8006370:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_pid.max_out		= FEEDER_MAX_RPM;
 8006372:	79bb      	ldrb	r3, [r7, #6]
 8006374:	4a3e      	ldr	r2, [pc, #248]	; (8006470 <config_motors+0xc48>)
 8006376:	21a8      	movs	r1, #168	; 0xa8
 8006378:	fb01 f303 	mul.w	r3, r1, r3
 800637c:	4413      	add	r3, r2
 800637e:	3360      	adds	r3, #96	; 0x60
 8006380:	4a45      	ldr	r2, [pc, #276]	; (8006498 <config_motors+0xc70>)
 8006382:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_pid.min_out		= 0;
 8006384:	79bb      	ldrb	r3, [r7, #6]
 8006386:	4a3a      	ldr	r2, [pc, #232]	; (8006470 <config_motors+0xc48>)
 8006388:	21a8      	movs	r1, #168	; 0xa8
 800638a:	fb01 f303 	mul.w	r3, r1, r3
 800638e:	4413      	add	r3, r2
 8006390:	3364      	adds	r3, #100	; 0x64
 8006392:	f04f 0200 	mov.w	r2, #0
 8006396:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_pid.physical_max	= M2006_MAX_RPM;
 8006398:	79bb      	ldrb	r3, [r7, #6]
 800639a:	4a35      	ldr	r2, [pc, #212]	; (8006470 <config_motors+0xc48>)
 800639c:	21a8      	movs	r1, #168	; 0xa8
 800639e:	fb01 f303 	mul.w	r3, r1, r3
 80063a2:	4413      	add	r3, r2
 80063a4:	336c      	adds	r3, #108	; 0x6c
 80063a6:	4a34      	ldr	r2, [pc, #208]	; (8006478 <config_motors+0xc50>)
 80063a8:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].rpm_pid.kp 			= FEEDER_KP;
 80063aa:	79bb      	ldrb	r3, [r7, #6]
 80063ac:	4a30      	ldr	r2, [pc, #192]	; (8006470 <config_motors+0xc48>)
 80063ae:	21a8      	movs	r1, #168	; 0xa8
 80063b0:	fb01 f303 	mul.w	r3, r1, r3
 80063b4:	4413      	add	r3, r2
 80063b6:	3310      	adds	r3, #16
 80063b8:	4a31      	ldr	r2, [pc, #196]	; (8006480 <config_motors+0xc58>)
 80063ba:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].rpm_pid.ki				= FEEDER_KI;
 80063bc:	79bb      	ldrb	r3, [r7, #6]
 80063be:	4a2c      	ldr	r2, [pc, #176]	; (8006470 <config_motors+0xc48>)
 80063c0:	21a8      	movs	r1, #168	; 0xa8
 80063c2:	fb01 f303 	mul.w	r3, r1, r3
 80063c6:	4413      	add	r3, r2
 80063c8:	3314      	adds	r3, #20
 80063ca:	4a34      	ldr	r2, [pc, #208]	; (800649c <config_motors+0xc74>)
 80063cc:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].rpm_pid.kd				= FEEDER_KD;
 80063ce:	79bb      	ldrb	r3, [r7, #6]
 80063d0:	4a27      	ldr	r2, [pc, #156]	; (8006470 <config_motors+0xc48>)
 80063d2:	21a8      	movs	r1, #168	; 0xa8
 80063d4:	fb01 f303 	mul.w	r3, r1, r3
 80063d8:	4413      	add	r3, r2
 80063da:	3318      	adds	r3, #24
 80063dc:	4a30      	ldr	r2, [pc, #192]	; (80064a0 <config_motors+0xc78>)
 80063de:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].rpm_pid.int_max		= FEEDER_MAX_INT;
 80063e0:	79bb      	ldrb	r3, [r7, #6]
 80063e2:	4a23      	ldr	r2, [pc, #140]	; (8006470 <config_motors+0xc48>)
 80063e4:	21a8      	movs	r1, #168	; 0xa8
 80063e6:	fb01 f303 	mul.w	r3, r1, r3
 80063ea:	4413      	add	r3, r2
 80063ec:	3328      	adds	r3, #40	; 0x28
 80063ee:	4a25      	ldr	r2, [pc, #148]	; (8006484 <config_motors+0xc5c>)
 80063f0:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].rpm_pid.max_out		= FEEDER_MAX_CURRENT;
 80063f2:	79bb      	ldrb	r3, [r7, #6]
 80063f4:	4a1e      	ldr	r2, [pc, #120]	; (8006470 <config_motors+0xc48>)
 80063f6:	21a8      	movs	r1, #168	; 0xa8
 80063f8:	fb01 f303 	mul.w	r3, r1, r3
 80063fc:	4413      	add	r3, r2
 80063fe:	332c      	adds	r3, #44	; 0x2c
 8006400:	4a20      	ldr	r2, [pc, #128]	; (8006484 <config_motors+0xc5c>)
 8006402:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].rpm_pid.min_out		= 0;
 8006404:	79bb      	ldrb	r3, [r7, #6]
 8006406:	4a1a      	ldr	r2, [pc, #104]	; (8006470 <config_motors+0xc48>)
 8006408:	21a8      	movs	r1, #168	; 0xa8
 800640a:	fb01 f303 	mul.w	r3, r1, r3
 800640e:	4413      	add	r3, r2
 8006410:	3330      	adds	r3, #48	; 0x30
 8006412:	f04f 0200 	mov.w	r2, #0
 8006416:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].rpm_pid.physical_max	= M2006_MAX_OUTPUT;
 8006418:	79bb      	ldrb	r3, [r7, #6]
 800641a:	4a15      	ldr	r2, [pc, #84]	; (8006470 <config_motors+0xc48>)
 800641c:	21a8      	movs	r1, #168	; 0xa8
 800641e:	fb01 f303 	mul.w	r3, r1, r3
 8006422:	4413      	add	r3, r2
 8006424:	3338      	adds	r3, #56	; 0x38
 8006426:	f04f 428d 	mov.w	r2, #1182793728	; 0x46800000
 800642a:	601a      	str	r2, [r3, #0]
#endif

#ifdef PITCH_MOTOR_ID
	motor_id = PITCH_MOTOR_ID -1;
 800642c:	2308      	movs	r3, #8
 800642e:	71bb      	strb	r3, [r7, #6]
	can_motors[motor_id].motor_type = TYPE_GM6020;
 8006430:	79bb      	ldrb	r3, [r7, #6]
 8006432:	4a0f      	ldr	r2, [pc, #60]	; (8006470 <config_motors+0xc48>)
 8006434:	21a8      	movs	r1, #168	; 0xa8
 8006436:	fb01 f303 	mul.w	r3, r1, r3
 800643a:	4413      	add	r3, r2
 800643c:	3302      	adds	r3, #2
 800643e:	2201      	movs	r2, #1
 8006440:	701a      	strb	r2, [r3, #0]
	can_motors[motor_id].angle_data.gearbox_ratio = 0;
 8006442:	79bb      	ldrb	r3, [r7, #6]
 8006444:	4a0a      	ldr	r2, [pc, #40]	; (8006470 <config_motors+0xc48>)
 8006446:	21a8      	movs	r1, #168	; 0xa8
 8006448:	fb01 f303 	mul.w	r3, r1, r3
 800644c:	4413      	add	r3, r2
 800644e:	3390      	adds	r3, #144	; 0x90
 8006450:	f04f 0200 	mov.w	r2, #0
 8006454:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_data.center_ang 	= PITCH_CENTER;
 8006456:	79bb      	ldrb	r3, [r7, #6]
 8006458:	4a05      	ldr	r2, [pc, #20]	; (8006470 <config_motors+0xc48>)
 800645a:	21a8      	movs	r1, #168	; 0xa8
 800645c:	fb01 f303 	mul.w	r3, r1, r3
 8006460:	4413      	add	r3, r2
 8006462:	337c      	adds	r3, #124	; 0x7c
 8006464:	f641 524c 	movw	r2, #7500	; 0x1d4c
 8006468:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_data.max_ang 	= PITCH_MAX_ANG;
 800646a:	79bb      	ldrb	r3, [r7, #6]
 800646c:	e01a      	b.n	80064a4 <config_motors+0xc7c>
 800646e:	bf00      	nop
 8006470:	20000f30 	.word	0x20000f30
 8006474:	c0c90fdb 	.word	0xc0c90fdb
 8006478:	460ca000 	.word	0x460ca000
 800647c:	3b03126f 	.word	0x3b03126f
 8006480:	41200000 	.word	0x41200000
 8006484:	461c4000 	.word	0x461c4000
 8006488:	42100000 	.word	0x42100000
 800648c:	46756fdb 	.word	0x46756fdb
 8006490:	c6756fdb 	.word	0xc6756fdb
 8006494:	40c90fdb 	.word	0x40c90fdb
 8006498:	42c80000 	.word	0x42c80000
 800649c:	3ca3d70a 	.word	0x3ca3d70a
 80064a0:	40a00000 	.word	0x40a00000
 80064a4:	4ab8      	ldr	r2, [pc, #736]	; (8006788 <config_motors+0xf60>)
 80064a6:	21a8      	movs	r1, #168	; 0xa8
 80064a8:	fb01 f303 	mul.w	r3, r1, r3
 80064ac:	4413      	add	r3, r2
 80064ae:	3384      	adds	r3, #132	; 0x84
 80064b0:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 80064b4:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_data.min_ang 	= PITCH_MIN_ANG;
 80064b6:	79bb      	ldrb	r3, [r7, #6]
 80064b8:	4ab3      	ldr	r2, [pc, #716]	; (8006788 <config_motors+0xf60>)
 80064ba:	21a8      	movs	r1, #168	; 0xa8
 80064bc:	fb01 f303 	mul.w	r3, r1, r3
 80064c0:	4413      	add	r3, r2
 80064c2:	3380      	adds	r3, #128	; 0x80
 80064c4:	4ab1      	ldr	r2, [pc, #708]	; (800678c <config_motors+0xf64>)
 80064c6:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_data.phy_max_ang =  2 * PI;
 80064c8:	79bb      	ldrb	r3, [r7, #6]
 80064ca:	4aaf      	ldr	r2, [pc, #700]	; (8006788 <config_motors+0xf60>)
 80064cc:	21a8      	movs	r1, #168	; 0xa8
 80064ce:	fb01 f303 	mul.w	r3, r1, r3
 80064d2:	4413      	add	r3, r2
 80064d4:	338c      	adds	r3, #140	; 0x8c
 80064d6:	4aae      	ldr	r2, [pc, #696]	; (8006790 <config_motors+0xf68>)
 80064d8:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_data.phy_min_ang = -2 * PI;
 80064da:	79bb      	ldrb	r3, [r7, #6]
 80064dc:	4aaa      	ldr	r2, [pc, #680]	; (8006788 <config_motors+0xf60>)
 80064de:	21a8      	movs	r1, #168	; 0xa8
 80064e0:	fb01 f303 	mul.w	r3, r1, r3
 80064e4:	4413      	add	r3, r2
 80064e6:	3388      	adds	r3, #136	; 0x88
 80064e8:	4aaa      	ldr	r2, [pc, #680]	; (8006794 <config_motors+0xf6c>)
 80064ea:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_pid.kp 			= PITCH_ANGLE_KP;
 80064ec:	79bb      	ldrb	r3, [r7, #6]
 80064ee:	4aa6      	ldr	r2, [pc, #664]	; (8006788 <config_motors+0xf60>)
 80064f0:	21a8      	movs	r1, #168	; 0xa8
 80064f2:	fb01 f303 	mul.w	r3, r1, r3
 80064f6:	4413      	add	r3, r2
 80064f8:	3344      	adds	r3, #68	; 0x44
 80064fa:	4aa7      	ldr	r2, [pc, #668]	; (8006798 <config_motors+0xf70>)
 80064fc:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_pid.ki			= PITCH_ANGLE_KI;
 80064fe:	79bb      	ldrb	r3, [r7, #6]
 8006500:	4aa1      	ldr	r2, [pc, #644]	; (8006788 <config_motors+0xf60>)
 8006502:	21a8      	movs	r1, #168	; 0xa8
 8006504:	fb01 f303 	mul.w	r3, r1, r3
 8006508:	4413      	add	r3, r2
 800650a:	3348      	adds	r3, #72	; 0x48
 800650c:	f04f 0200 	mov.w	r2, #0
 8006510:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_pid.kd			= PITCH_ANGLE_KD;
 8006512:	79bb      	ldrb	r3, [r7, #6]
 8006514:	4a9c      	ldr	r2, [pc, #624]	; (8006788 <config_motors+0xf60>)
 8006516:	21a8      	movs	r1, #168	; 0xa8
 8006518:	fb01 f303 	mul.w	r3, r1, r3
 800651c:	4413      	add	r3, r2
 800651e:	334c      	adds	r3, #76	; 0x4c
 8006520:	f04f 0200 	mov.w	r2, #0
 8006524:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_pid.int_max		= PITCH_ANGLE_INT_MAX;
 8006526:	79bb      	ldrb	r3, [r7, #6]
 8006528:	4a97      	ldr	r2, [pc, #604]	; (8006788 <config_motors+0xf60>)
 800652a:	21a8      	movs	r1, #168	; 0xa8
 800652c:	fb01 f303 	mul.w	r3, r1, r3
 8006530:	4413      	add	r3, r2
 8006532:	335c      	adds	r3, #92	; 0x5c
 8006534:	4a99      	ldr	r2, [pc, #612]	; (800679c <config_motors+0xf74>)
 8006536:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_pid.max_out		= PITCH_MAX_RPM;
 8006538:	79bb      	ldrb	r3, [r7, #6]
 800653a:	4a93      	ldr	r2, [pc, #588]	; (8006788 <config_motors+0xf60>)
 800653c:	21a8      	movs	r1, #168	; 0xa8
 800653e:	fb01 f303 	mul.w	r3, r1, r3
 8006542:	4413      	add	r3, r2
 8006544:	3360      	adds	r3, #96	; 0x60
 8006546:	4a94      	ldr	r2, [pc, #592]	; (8006798 <config_motors+0xf70>)
 8006548:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_pid.min_out		= 0;
 800654a:	79bb      	ldrb	r3, [r7, #6]
 800654c:	4a8e      	ldr	r2, [pc, #568]	; (8006788 <config_motors+0xf60>)
 800654e:	21a8      	movs	r1, #168	; 0xa8
 8006550:	fb01 f303 	mul.w	r3, r1, r3
 8006554:	4413      	add	r3, r2
 8006556:	3364      	adds	r3, #100	; 0x64
 8006558:	f04f 0200 	mov.w	r2, #0
 800655c:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_pid.physical_max	= GM6020_MAX_RPM;
 800655e:	79bb      	ldrb	r3, [r7, #6]
 8006560:	4a89      	ldr	r2, [pc, #548]	; (8006788 <config_motors+0xf60>)
 8006562:	21a8      	movs	r1, #168	; 0xa8
 8006564:	fb01 f303 	mul.w	r3, r1, r3
 8006568:	4413      	add	r3, r2
 800656a:	336c      	adds	r3, #108	; 0x6c
 800656c:	4a8c      	ldr	r2, [pc, #560]	; (80067a0 <config_motors+0xf78>)
 800656e:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].rpm_pid.kp 			= PITCHRPM_KP;
 8006570:	79bb      	ldrb	r3, [r7, #6]
 8006572:	4a85      	ldr	r2, [pc, #532]	; (8006788 <config_motors+0xf60>)
 8006574:	21a8      	movs	r1, #168	; 0xa8
 8006576:	fb01 f303 	mul.w	r3, r1, r3
 800657a:	4413      	add	r3, r2
 800657c:	3310      	adds	r3, #16
 800657e:	4a89      	ldr	r2, [pc, #548]	; (80067a4 <config_motors+0xf7c>)
 8006580:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].rpm_pid.ki				= PITCHRPM_KI;
 8006582:	79bb      	ldrb	r3, [r7, #6]
 8006584:	4a80      	ldr	r2, [pc, #512]	; (8006788 <config_motors+0xf60>)
 8006586:	21a8      	movs	r1, #168	; 0xa8
 8006588:	fb01 f303 	mul.w	r3, r1, r3
 800658c:	4413      	add	r3, r2
 800658e:	3314      	adds	r3, #20
 8006590:	4a85      	ldr	r2, [pc, #532]	; (80067a8 <config_motors+0xf80>)
 8006592:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].rpm_pid.kd				= PITCHRPM_KD;
 8006594:	79bb      	ldrb	r3, [r7, #6]
 8006596:	4a7c      	ldr	r2, [pc, #496]	; (8006788 <config_motors+0xf60>)
 8006598:	21a8      	movs	r1, #168	; 0xa8
 800659a:	fb01 f303 	mul.w	r3, r1, r3
 800659e:	4413      	add	r3, r2
 80065a0:	3318      	adds	r3, #24
 80065a2:	f04f 0200 	mov.w	r2, #0
 80065a6:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].rpm_pid.int_max		= PITCHRPM_INT_MAX;
 80065a8:	79bb      	ldrb	r3, [r7, #6]
 80065aa:	4a77      	ldr	r2, [pc, #476]	; (8006788 <config_motors+0xf60>)
 80065ac:	21a8      	movs	r1, #168	; 0xa8
 80065ae:	fb01 f303 	mul.w	r3, r1, r3
 80065b2:	4413      	add	r3, r2
 80065b4:	3328      	adds	r3, #40	; 0x28
 80065b6:	4a7d      	ldr	r2, [pc, #500]	; (80067ac <config_motors+0xf84>)
 80065b8:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].rpm_pid.max_out		= PITCH_MAX_CURRENT;
 80065ba:	79bb      	ldrb	r3, [r7, #6]
 80065bc:	4a72      	ldr	r2, [pc, #456]	; (8006788 <config_motors+0xf60>)
 80065be:	21a8      	movs	r1, #168	; 0xa8
 80065c0:	fb01 f303 	mul.w	r3, r1, r3
 80065c4:	4413      	add	r3, r2
 80065c6:	332c      	adds	r3, #44	; 0x2c
 80065c8:	4a79      	ldr	r2, [pc, #484]	; (80067b0 <config_motors+0xf88>)
 80065ca:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].rpm_pid.min_out		= 0;
 80065cc:	79bb      	ldrb	r3, [r7, #6]
 80065ce:	4a6e      	ldr	r2, [pc, #440]	; (8006788 <config_motors+0xf60>)
 80065d0:	21a8      	movs	r1, #168	; 0xa8
 80065d2:	fb01 f303 	mul.w	r3, r1, r3
 80065d6:	4413      	add	r3, r2
 80065d8:	3330      	adds	r3, #48	; 0x30
 80065da:	f04f 0200 	mov.w	r2, #0
 80065de:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].rpm_pid.physical_max	= GM6020_MAX_OUTPUT;
 80065e0:	79bb      	ldrb	r3, [r7, #6]
 80065e2:	4a69      	ldr	r2, [pc, #420]	; (8006788 <config_motors+0xf60>)
 80065e4:	21a8      	movs	r1, #168	; 0xa8
 80065e6:	fb01 f303 	mul.w	r3, r1, r3
 80065ea:	4413      	add	r3, r2
 80065ec:	3338      	adds	r3, #56	; 0x38
 80065ee:	4a70      	ldr	r2, [pc, #448]	; (80067b0 <config_motors+0xf88>)
 80065f0:	601a      	str	r2, [r3, #0]
#endif

#ifdef YAW_MOTOR_ID
	motor_id = YAW_MOTOR_ID -1;
 80065f2:	2315      	movs	r3, #21
 80065f4:	71bb      	strb	r3, [r7, #6]
	can_motors[motor_id].motor_type = TYPE_GM6020;
 80065f6:	79bb      	ldrb	r3, [r7, #6]
 80065f8:	4a63      	ldr	r2, [pc, #396]	; (8006788 <config_motors+0xf60>)
 80065fa:	21a8      	movs	r1, #168	; 0xa8
 80065fc:	fb01 f303 	mul.w	r3, r1, r3
 8006600:	4413      	add	r3, r2
 8006602:	3302      	adds	r3, #2
 8006604:	2201      	movs	r2, #1
 8006606:	701a      	strb	r2, [r3, #0]
	can_motors[motor_id].angle_data.gearbox_ratio = 0;//1;
 8006608:	79bb      	ldrb	r3, [r7, #6]
 800660a:	4a5f      	ldr	r2, [pc, #380]	; (8006788 <config_motors+0xf60>)
 800660c:	21a8      	movs	r1, #168	; 0xa8
 800660e:	fb01 f303 	mul.w	r3, r1, r3
 8006612:	4413      	add	r3, r2
 8006614:	3390      	adds	r3, #144	; 0x90
 8006616:	f04f 0200 	mov.w	r2, #0
 800661a:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_data.center_ang 	= YAW_CENTER;
 800661c:	79bb      	ldrb	r3, [r7, #6]
 800661e:	4a5a      	ldr	r2, [pc, #360]	; (8006788 <config_motors+0xf60>)
 8006620:	21a8      	movs	r1, #168	; 0xa8
 8006622:	fb01 f303 	mul.w	r3, r1, r3
 8006626:	4413      	add	r3, r2
 8006628:	337c      	adds	r3, #124	; 0x7c
 800662a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800662e:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_data.max_ang 	= YAW_MAX_ANG;
 8006630:	79bb      	ldrb	r3, [r7, #6]
 8006632:	4a55      	ldr	r2, [pc, #340]	; (8006788 <config_motors+0xf60>)
 8006634:	21a8      	movs	r1, #168	; 0xa8
 8006636:	fb01 f303 	mul.w	r3, r1, r3
 800663a:	4413      	add	r3, r2
 800663c:	3384      	adds	r3, #132	; 0x84
 800663e:	4a5d      	ldr	r2, [pc, #372]	; (80067b4 <config_motors+0xf8c>)
 8006640:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_data.min_ang 	= YAW_MIN_ANG;
 8006642:	79bb      	ldrb	r3, [r7, #6]
 8006644:	4a50      	ldr	r2, [pc, #320]	; (8006788 <config_motors+0xf60>)
 8006646:	21a8      	movs	r1, #168	; 0xa8
 8006648:	fb01 f303 	mul.w	r3, r1, r3
 800664c:	4413      	add	r3, r2
 800664e:	3380      	adds	r3, #128	; 0x80
 8006650:	4a59      	ldr	r2, [pc, #356]	; (80067b8 <config_motors+0xf90>)
 8006652:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_data.phy_max_ang =  2 * PI;
 8006654:	79bb      	ldrb	r3, [r7, #6]
 8006656:	4a4c      	ldr	r2, [pc, #304]	; (8006788 <config_motors+0xf60>)
 8006658:	21a8      	movs	r1, #168	; 0xa8
 800665a:	fb01 f303 	mul.w	r3, r1, r3
 800665e:	4413      	add	r3, r2
 8006660:	338c      	adds	r3, #140	; 0x8c
 8006662:	4a4b      	ldr	r2, [pc, #300]	; (8006790 <config_motors+0xf68>)
 8006664:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_data.phy_min_ang = -2 * PI; //angle before it overflows
 8006666:	79bb      	ldrb	r3, [r7, #6]
 8006668:	4a47      	ldr	r2, [pc, #284]	; (8006788 <config_motors+0xf60>)
 800666a:	21a8      	movs	r1, #168	; 0xa8
 800666c:	fb01 f303 	mul.w	r3, r1, r3
 8006670:	4413      	add	r3, r2
 8006672:	3388      	adds	r3, #136	; 0x88
 8006674:	4a47      	ldr	r2, [pc, #284]	; (8006794 <config_motors+0xf6c>)
 8006676:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_pid.kp 			= YAW_ANGLE_KP;
 8006678:	79bb      	ldrb	r3, [r7, #6]
 800667a:	4a43      	ldr	r2, [pc, #268]	; (8006788 <config_motors+0xf60>)
 800667c:	21a8      	movs	r1, #168	; 0xa8
 800667e:	fb01 f303 	mul.w	r3, r1, r3
 8006682:	4413      	add	r3, r2
 8006684:	3344      	adds	r3, #68	; 0x44
 8006686:	4a44      	ldr	r2, [pc, #272]	; (8006798 <config_motors+0xf70>)
 8006688:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_pid.ki			= YAW_ANGLE_KI;
 800668a:	79bb      	ldrb	r3, [r7, #6]
 800668c:	4a3e      	ldr	r2, [pc, #248]	; (8006788 <config_motors+0xf60>)
 800668e:	21a8      	movs	r1, #168	; 0xa8
 8006690:	fb01 f303 	mul.w	r3, r1, r3
 8006694:	4413      	add	r3, r2
 8006696:	3348      	adds	r3, #72	; 0x48
 8006698:	f04f 0200 	mov.w	r2, #0
 800669c:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_pid.kd			= YAW_ANGLE_KD;
 800669e:	79bb      	ldrb	r3, [r7, #6]
 80066a0:	4a39      	ldr	r2, [pc, #228]	; (8006788 <config_motors+0xf60>)
 80066a2:	21a8      	movs	r1, #168	; 0xa8
 80066a4:	fb01 f303 	mul.w	r3, r1, r3
 80066a8:	4413      	add	r3, r2
 80066aa:	334c      	adds	r3, #76	; 0x4c
 80066ac:	f04f 0200 	mov.w	r2, #0
 80066b0:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_pid.int_max		= YAW_ANGLE_INT_MAX;
 80066b2:	79bb      	ldrb	r3, [r7, #6]
 80066b4:	4a34      	ldr	r2, [pc, #208]	; (8006788 <config_motors+0xf60>)
 80066b6:	21a8      	movs	r1, #168	; 0xa8
 80066b8:	fb01 f303 	mul.w	r3, r1, r3
 80066bc:	4413      	add	r3, r2
 80066be:	335c      	adds	r3, #92	; 0x5c
 80066c0:	4a3e      	ldr	r2, [pc, #248]	; (80067bc <config_motors+0xf94>)
 80066c2:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_pid.max_out		= YAW_MAX_RPM;
 80066c4:	79bb      	ldrb	r3, [r7, #6]
 80066c6:	4a30      	ldr	r2, [pc, #192]	; (8006788 <config_motors+0xf60>)
 80066c8:	21a8      	movs	r1, #168	; 0xa8
 80066ca:	fb01 f303 	mul.w	r3, r1, r3
 80066ce:	4413      	add	r3, r2
 80066d0:	3360      	adds	r3, #96	; 0x60
 80066d2:	4a33      	ldr	r2, [pc, #204]	; (80067a0 <config_motors+0xf78>)
 80066d4:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_pid.min_out		= 0;
 80066d6:	79bb      	ldrb	r3, [r7, #6]
 80066d8:	4a2b      	ldr	r2, [pc, #172]	; (8006788 <config_motors+0xf60>)
 80066da:	21a8      	movs	r1, #168	; 0xa8
 80066dc:	fb01 f303 	mul.w	r3, r1, r3
 80066e0:	4413      	add	r3, r2
 80066e2:	3364      	adds	r3, #100	; 0x64
 80066e4:	f04f 0200 	mov.w	r2, #0
 80066e8:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].angle_pid.physical_max	= GM6020_MAX_RPM;
 80066ea:	79bb      	ldrb	r3, [r7, #6]
 80066ec:	4a26      	ldr	r2, [pc, #152]	; (8006788 <config_motors+0xf60>)
 80066ee:	21a8      	movs	r1, #168	; 0xa8
 80066f0:	fb01 f303 	mul.w	r3, r1, r3
 80066f4:	4413      	add	r3, r2
 80066f6:	336c      	adds	r3, #108	; 0x6c
 80066f8:	4a29      	ldr	r2, [pc, #164]	; (80067a0 <config_motors+0xf78>)
 80066fa:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].rpm_pid.kp 			= YAWRPM_KP;
 80066fc:	79bb      	ldrb	r3, [r7, #6]
 80066fe:	4a22      	ldr	r2, [pc, #136]	; (8006788 <config_motors+0xf60>)
 8006700:	21a8      	movs	r1, #168	; 0xa8
 8006702:	fb01 f303 	mul.w	r3, r1, r3
 8006706:	4413      	add	r3, r2
 8006708:	3310      	adds	r3, #16
 800670a:	4a25      	ldr	r2, [pc, #148]	; (80067a0 <config_motors+0xf78>)
 800670c:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].rpm_pid.ki				= YAWRPM_KI;
 800670e:	79bb      	ldrb	r3, [r7, #6]
 8006710:	4a1d      	ldr	r2, [pc, #116]	; (8006788 <config_motors+0xf60>)
 8006712:	21a8      	movs	r1, #168	; 0xa8
 8006714:	fb01 f303 	mul.w	r3, r1, r3
 8006718:	4413      	add	r3, r2
 800671a:	3314      	adds	r3, #20
 800671c:	4a28      	ldr	r2, [pc, #160]	; (80067c0 <config_motors+0xf98>)
 800671e:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].rpm_pid.kd				= YAWRPM_KD;
 8006720:	79bb      	ldrb	r3, [r7, #6]
 8006722:	4a19      	ldr	r2, [pc, #100]	; (8006788 <config_motors+0xf60>)
 8006724:	21a8      	movs	r1, #168	; 0xa8
 8006726:	fb01 f303 	mul.w	r3, r1, r3
 800672a:	4413      	add	r3, r2
 800672c:	3318      	adds	r3, #24
 800672e:	f04f 0200 	mov.w	r2, #0
 8006732:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].rpm_pid.int_max		= YAWRPM_INT_MAX;
 8006734:	79bb      	ldrb	r3, [r7, #6]
 8006736:	4a14      	ldr	r2, [pc, #80]	; (8006788 <config_motors+0xf60>)
 8006738:	21a8      	movs	r1, #168	; 0xa8
 800673a:	fb01 f303 	mul.w	r3, r1, r3
 800673e:	4413      	add	r3, r2
 8006740:	3328      	adds	r3, #40	; 0x28
 8006742:	4a20      	ldr	r2, [pc, #128]	; (80067c4 <config_motors+0xf9c>)
 8006744:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].rpm_pid.max_out		= YAW_MAX_CURRENT;
 8006746:	79bb      	ldrb	r3, [r7, #6]
 8006748:	4a0f      	ldr	r2, [pc, #60]	; (8006788 <config_motors+0xf60>)
 800674a:	21a8      	movs	r1, #168	; 0xa8
 800674c:	fb01 f303 	mul.w	r3, r1, r3
 8006750:	4413      	add	r3, r2
 8006752:	332c      	adds	r3, #44	; 0x2c
 8006754:	4a16      	ldr	r2, [pc, #88]	; (80067b0 <config_motors+0xf88>)
 8006756:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].rpm_pid.min_out		= 0;
 8006758:	79bb      	ldrb	r3, [r7, #6]
 800675a:	4a0b      	ldr	r2, [pc, #44]	; (8006788 <config_motors+0xf60>)
 800675c:	21a8      	movs	r1, #168	; 0xa8
 800675e:	fb01 f303 	mul.w	r3, r1, r3
 8006762:	4413      	add	r3, r2
 8006764:	3330      	adds	r3, #48	; 0x30
 8006766:	f04f 0200 	mov.w	r2, #0
 800676a:	601a      	str	r2, [r3, #0]
	can_motors[motor_id].rpm_pid.physical_max	= GM6020_MAX_OUTPUT;
 800676c:	79bb      	ldrb	r3, [r7, #6]
 800676e:	4a06      	ldr	r2, [pc, #24]	; (8006788 <config_motors+0xf60>)
 8006770:	21a8      	movs	r1, #168	; 0xa8
 8006772:	fb01 f303 	mul.w	r3, r1, r3
 8006776:	4413      	add	r3, r2
 8006778:	3338      	adds	r3, #56	; 0x38
 800677a:	4a0d      	ldr	r2, [pc, #52]	; (80067b0 <config_motors+0xf88>)
 800677c:	601a      	str	r2, [r3, #0]
#endif
}
 800677e:	bf00      	nop
 8006780:	370c      	adds	r7, #12
 8006782:	46bd      	mov	sp, r7
 8006784:	e020      	b.n	80067c8 <config_motors+0xfa0>
 8006786:	bf00      	nop
 8006788:	20000f30 	.word	0x20000f30
 800678c:	becccccd 	.word	0xbecccccd
 8006790:	40c90fdb 	.word	0x40c90fdb
 8006794:	c0c90fdb 	.word	0xc0c90fdb
 8006798:	43480000 	.word	0x43480000
 800679c:	447a0000 	.word	0x447a0000
 80067a0:	43c80000 	.word	0x43c80000
 80067a4:	442f0000 	.word	0x442f0000
 80067a8:	3dcccccd 	.word	0x3dcccccd
 80067ac:	461c4000 	.word	0x461c4000
 80067b0:	469c4000 	.word	0x469c4000
 80067b4:	41490fdb 	.word	0x41490fdb
 80067b8:	c1490fdb 	.word	0xc1490fdb
 80067bc:	42c80000 	.word	0x42c80000
 80067c0:	3c23d70a 	.word	0x3c23d70a
 80067c4:	459c4000 	.word	0x459c4000
 80067c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067cc:	4770      	bx	lr
 80067ce:	bf00      	nop

080067d0 <motor_calib_task>:


void motor_calib_task(void* argument)
{
 80067d0:	b580      	push	{r7, lr}
 80067d2:	b082      	sub	sp, #8
 80067d4:	af00      	add	r7, sp, #0
 80067d6:	6078      	str	r0, [r7, #4]
	can_start(&hcan1, 0x00000000, 0x00000000);
 80067d8:	2200      	movs	r2, #0
 80067da:	2100      	movs	r1, #0
 80067dc:	4807      	ldr	r0, [pc, #28]	; (80067fc <motor_calib_task+0x2c>)
 80067de:	f7fa fc37 	bl	8001050 <can_start>
	can_start(&hcan2, 0x00000000, 0x00000000);
 80067e2:	2200      	movs	r2, #0
 80067e4:	2100      	movs	r1, #0
 80067e6:	4806      	ldr	r0, [pc, #24]	; (8006800 <motor_calib_task+0x30>)
 80067e8:	f7fa fc32 	bl	8001050 <can_start>
	config_motors();
 80067ec:	f7ff f81c 	bl	8005828 <config_motors>
	//insert can tester?
	while (1)
	{
		ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 80067f0:	f04f 31ff 	mov.w	r1, #4294967295
 80067f4:	2001      	movs	r0, #1
 80067f6:	f00c fbd3 	bl	8012fa0 <ulTaskNotifyTake>
 80067fa:	e7f9      	b.n	80067f0 <motor_calib_task+0x20>
 80067fc:	200002a4 	.word	0x200002a4
 8006800:	200002cc 	.word	0x200002cc

08006804 <speed_pid>:
 * @param setpoint target RPM
 * @param motor's current RPM
 * @param *pid pointer to the rpm_pid struct within the motor's data struct
 */

void speed_pid(double setpoint, double curr_pt, pid_data_t *pid) {  //edited version
 8006804:	b580      	push	{r7, lr}
 8006806:	b08e      	sub	sp, #56	; 0x38
 8006808:	af00      	add	r7, sp, #0
 800680a:	ed87 0b04 	vstr	d0, [r7, #16]
 800680e:	ed87 1b02 	vstr	d1, [r7, #8]
 8006812:	6078      	str	r0, [r7, #4]
	pid->last_time[1] = pid->last_time[0];
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	631a      	str	r2, [r3, #48]	; 0x30
	pid->last_time[0] = get_microseconds();
 800681c:	f7fb f9e0 	bl	8001be0 <get_microseconds>
 8006820:	4602      	mov	r2, r0
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	62da      	str	r2, [r3, #44]	; 0x2c
	/*
	if (pid->last_time[1]>= pid->last_time[0]) {
		return;
	} */
	uint32_t time_mult = 1;//TIMER_FREQ / (float) (pid->last_time[0] - pid->last_time[1]);
 8006826:	2301      	movs	r3, #1
 8006828:	637b      	str	r3, [r7, #52]	; 0x34
	double Pout = 0;
 800682a:	f04f 0200 	mov.w	r2, #0
 800682e:	f04f 0300 	mov.w	r3, #0
 8006832:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	double Iout = 0;
 8006836:	f04f 0200 	mov.w	r2, #0
 800683a:	f04f 0300 	mov.w	r3, #0
 800683e:	e9c7 2308 	strd	r2, r3, [r7, #32]
	double Dout = 0;
 8006842:	f04f 0200 	mov.w	r2, #0
 8006846:	f04f 0300 	mov.w	r3, #0
 800684a:	e9c7 2306 	strd	r2, r3, [r7, #24]

	pid->error[0] = setpoint - curr_pt;
 800684e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006852:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8006856:	f7f9 fccf 	bl	80001f8 <__aeabi_dsub>
 800685a:	4602      	mov	r2, r0
 800685c:	460b      	mov	r3, r1
 800685e:	4610      	mov	r0, r2
 8006860:	4619      	mov	r1, r3
 8006862:	f7fa f979 	bl	8000b58 <__aeabi_d2f>
 8006866:	4602      	mov	r2, r0
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	60da      	str	r2, [r3, #12]
	Pout = pid->error[0] * pid->kp * time_mult;
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	ed93 7a03 	vldr	s14, [r3, #12]
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	edd3 7a00 	vldr	s15, [r3]
 8006878:	ee27 7a27 	vmul.f32	s14, s14, s15
 800687c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800687e:	ee07 3a90 	vmov	s15, r3
 8006882:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006886:	ee67 7a27 	vmul.f32	s15, s14, s15
 800688a:	ee17 0a90 	vmov	r0, s15
 800688e:	f7f9 fe13 	bl	80004b8 <__aeabi_f2d>
 8006892:	4602      	mov	r2, r0
 8006894:	460b      	mov	r3, r1
 8006896:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

	Dout = (float)(curr_pt - pid->error[1]) * pid->kd * time_mult;  //(input-lastinput) * kd
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	691b      	ldr	r3, [r3, #16]
 800689e:	4618      	mov	r0, r3
 80068a0:	f7f9 fe0a 	bl	80004b8 <__aeabi_f2d>
 80068a4:	4602      	mov	r2, r0
 80068a6:	460b      	mov	r3, r1
 80068a8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80068ac:	f7f9 fca4 	bl	80001f8 <__aeabi_dsub>
 80068b0:	4602      	mov	r2, r0
 80068b2:	460b      	mov	r3, r1
 80068b4:	4610      	mov	r0, r2
 80068b6:	4619      	mov	r1, r3
 80068b8:	f7fa f94e 	bl	8000b58 <__aeabi_d2f>
 80068bc:	ee07 0a10 	vmov	s14, r0
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	edd3 7a02 	vldr	s15, [r3, #8]
 80068c6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80068ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068cc:	ee07 3a90 	vmov	s15, r3
 80068d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80068d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80068d8:	ee17 0a90 	vmov	r0, s15
 80068dc:	f7f9 fdec 	bl	80004b8 <__aeabi_f2d>
 80068e0:	4602      	mov	r2, r0
 80068e2:	460b      	mov	r3, r1
 80068e4:	e9c7 2306 	strd	r2, r3, [r7, #24]

	pid->integral += pid->error[0] * pid->ki * time_mult;
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	ed93 7a05 	vldr	s14, [r3, #20]
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	edd3 6a03 	vldr	s13, [r3, #12]
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	edd3 7a01 	vldr	s15, [r3, #4]
 80068fa:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80068fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006900:	ee07 3a90 	vmov	s15, r3
 8006904:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006908:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800690c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	edc3 7a05 	vstr	s15, [r3, #20]
	float_minmax(&pid->integral, pid->int_max, 0); //constrain integral term
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	f103 0214 	add.w	r2, r3, #20
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	edd3 7a06 	vldr	s15, [r3, #24]
 8006922:	eddf 0a21 	vldr	s1, [pc, #132]	; 80069a8 <speed_pid+0x1a4>
 8006926:	eeb0 0a67 	vmov.f32	s0, s15
 800692a:	4610      	mov	r0, r2
 800692c:	f000 fb22 	bl	8006f74 <float_minmax>
	Iout = pid->integral;
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	695b      	ldr	r3, [r3, #20]
 8006934:	4618      	mov	r0, r3
 8006936:	f7f9 fdbf 	bl	80004b8 <__aeabi_f2d>
 800693a:	4602      	mov	r2, r0
 800693c:	460b      	mov	r3, r1
 800693e:	e9c7 2308 	strd	r2, r3, [r7, #32]
	pid->output = Pout + Iout - Dout;
 8006942:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006946:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800694a:	f7f9 fc57 	bl	80001fc <__adddf3>
 800694e:	4602      	mov	r2, r0
 8006950:	460b      	mov	r3, r1
 8006952:	4610      	mov	r0, r2
 8006954:	4619      	mov	r1, r3
 8006956:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800695a:	f7f9 fc4d 	bl	80001f8 <__aeabi_dsub>
 800695e:	4602      	mov	r2, r0
 8006960:	460b      	mov	r3, r1
 8006962:	4610      	mov	r0, r2
 8006964:	4619      	mov	r1, r3
 8006966:	f7fa f8f7 	bl	8000b58 <__aeabi_d2f>
 800696a:	4602      	mov	r2, r0
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	625a      	str	r2, [r3, #36]	; 0x24
	constrain_value(&pid->output, pid->max_out, pid->min_out); //constrain output term
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	f103 0224 	add.w	r2, r3, #36	; 0x24
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	edd3 7a07 	vldr	s15, [r3, #28]
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	ed93 7a08 	vldr	s14, [r3, #32]
 8006982:	eef0 0a47 	vmov.f32	s1, s14
 8006986:	eeb0 0a67 	vmov.f32	s0, s15
 800698a:	4610      	mov	r0, r2
 800698c:	f000 fb32 	bl	8006ff4 <constrain_value>
	pid->error[1] = curr_pt;  // store lastinput
 8006990:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006994:	f7fa f8e0 	bl	8000b58 <__aeabi_d2f>
 8006998:	4602      	mov	r2, r0
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	611a      	str	r2, [r3, #16]
}
 800699e:	bf00      	nop
 80069a0:	3738      	adds	r7, #56	; 0x38
 80069a2:	46bd      	mov	sp, r7
 80069a4:	bd80      	pop	{r7, pc}
 80069a6:	bf00      	nop
 80069a8:	00000000 	.word	0x00000000

080069ac <motor_send_can>:
 */
void motor_send_can(motor_data_t motor_all[],
		uint8_t id_one,
		uint8_t id_two,
		uint8_t id_three,
		uint8_t id_four) {
 80069ac:	b580      	push	{r7, lr}
 80069ae:	b08e      	sub	sp, #56	; 0x38
 80069b0:	af00      	add	r7, sp, #0
 80069b2:	6078      	str	r0, [r7, #4]
 80069b4:	4608      	mov	r0, r1
 80069b6:	4611      	mov	r1, r2
 80069b8:	461a      	mov	r2, r3
 80069ba:	4603      	mov	r3, r0
 80069bc:	70fb      	strb	r3, [r7, #3]
 80069be:	460b      	mov	r3, r1
 80069c0:	70bb      	strb	r3, [r7, #2]
 80069c2:	4613      	mov	r3, r2
 80069c4:	707b      	strb	r3, [r7, #1]
	CAN_TxHeaderTypeDef CAN_tx_message;
	uint8_t CAN_send_data[8];
	uint32_t send_mail_box;
	uint32_t temp_checker = 0;
 80069c6:	2300      	movs	r3, #0
 80069c8:	637b      	str	r3, [r7, #52]	; 0x34
	int16_t temp_converter;
	CAN_tx_message.IDE = CAN_ID_STD;
 80069ca:	2300      	movs	r3, #0
 80069cc:	623b      	str	r3, [r7, #32]
	CAN_tx_message.RTR = CAN_RTR_DATA;
 80069ce:	2300      	movs	r3, #0
 80069d0:	627b      	str	r3, [r7, #36]	; 0x24
	CAN_tx_message.DLC = 0x08;
 80069d2:	2308      	movs	r3, #8
 80069d4:	62bb      	str	r3, [r7, #40]	; 0x28
	if (id_one < 25 && id_one > 0) {
 80069d6:	78fb      	ldrb	r3, [r7, #3]
 80069d8:	2b18      	cmp	r3, #24
 80069da:	d80b      	bhi.n	80069f4 <motor_send_can+0x48>
 80069dc:	78fb      	ldrb	r3, [r7, #3]
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d008      	beq.n	80069f4 <motor_send_can+0x48>
		temp_checker = temp_checker | 1 << (id_one - 1);
 80069e2:	78fb      	ldrb	r3, [r7, #3]
 80069e4:	3b01      	subs	r3, #1
 80069e6:	2201      	movs	r2, #1
 80069e8:	fa02 f303 	lsl.w	r3, r2, r3
 80069ec:	461a      	mov	r2, r3
 80069ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069f0:	4313      	orrs	r3, r2
 80069f2:	637b      	str	r3, [r7, #52]	; 0x34
	}
	if (id_two < 25 && id_two > 0) {
 80069f4:	78bb      	ldrb	r3, [r7, #2]
 80069f6:	2b18      	cmp	r3, #24
 80069f8:	d80b      	bhi.n	8006a12 <motor_send_can+0x66>
 80069fa:	78bb      	ldrb	r3, [r7, #2]
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d008      	beq.n	8006a12 <motor_send_can+0x66>
		temp_checker = temp_checker | 1 << (id_two - 1);
 8006a00:	78bb      	ldrb	r3, [r7, #2]
 8006a02:	3b01      	subs	r3, #1
 8006a04:	2201      	movs	r2, #1
 8006a06:	fa02 f303 	lsl.w	r3, r2, r3
 8006a0a:	461a      	mov	r2, r3
 8006a0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a0e:	4313      	orrs	r3, r2
 8006a10:	637b      	str	r3, [r7, #52]	; 0x34
	}
	if (id_three < 25 && id_three > 0) {
 8006a12:	787b      	ldrb	r3, [r7, #1]
 8006a14:	2b18      	cmp	r3, #24
 8006a16:	d80b      	bhi.n	8006a30 <motor_send_can+0x84>
 8006a18:	787b      	ldrb	r3, [r7, #1]
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d008      	beq.n	8006a30 <motor_send_can+0x84>
		temp_checker = temp_checker | 1 << (id_three - 1);
 8006a1e:	787b      	ldrb	r3, [r7, #1]
 8006a20:	3b01      	subs	r3, #1
 8006a22:	2201      	movs	r2, #1
 8006a24:	fa02 f303 	lsl.w	r3, r2, r3
 8006a28:	461a      	mov	r2, r3
 8006a2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a2c:	4313      	orrs	r3, r2
 8006a2e:	637b      	str	r3, [r7, #52]	; 0x34
	}
	if (id_four < 25 && id_four > 0) {
 8006a30:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8006a34:	2b18      	cmp	r3, #24
 8006a36:	d80d      	bhi.n	8006a54 <motor_send_can+0xa8>
 8006a38:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d009      	beq.n	8006a54 <motor_send_can+0xa8>
		temp_checker = temp_checker | 1 << (id_four - 1);
 8006a40:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8006a44:	3b01      	subs	r3, #1
 8006a46:	2201      	movs	r2, #1
 8006a48:	fa02 f303 	lsl.w	r3, r2, r3
 8006a4c:	461a      	mov	r2, r3
 8006a4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a50:	4313      	orrs	r3, r2
 8006a52:	637b      	str	r3, [r7, #52]	; 0x34
	}

	if (temp_checker & 0x00000F) {
 8006a54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a56:	f003 030f 	and.w	r3, r3, #15
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d054      	beq.n	8006b08 <motor_send_can+0x15c>
		CAN_tx_message.StdId = 0x200;
 8006a5e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006a62:	61bb      	str	r3, [r7, #24]
		temp_converter = motor_all[0x0].rpm_pid.output;
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8006a6a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006a6e:	ee17 3a90 	vmov	r3, s15
 8006a72:	867b      	strh	r3, [r7, #50]	; 0x32
		CAN_send_data[0] = temp_converter >> 8;
 8006a74:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8006a78:	121b      	asrs	r3, r3, #8
 8006a7a:	b21b      	sxth	r3, r3
 8006a7c:	b2db      	uxtb	r3, r3
 8006a7e:	743b      	strb	r3, [r7, #16]
		CAN_send_data[1] = temp_converter;
 8006a80:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8006a82:	b2db      	uxtb	r3, r3
 8006a84:	747b      	strb	r3, [r7, #17]
		temp_converter = motor_all[0x1].rpm_pid.output;
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	33a8      	adds	r3, #168	; 0xa8
 8006a8a:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8006a8e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006a92:	ee17 3a90 	vmov	r3, s15
 8006a96:	867b      	strh	r3, [r7, #50]	; 0x32
		CAN_send_data[2] = temp_converter >> 8;
 8006a98:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8006a9c:	121b      	asrs	r3, r3, #8
 8006a9e:	b21b      	sxth	r3, r3
 8006aa0:	b2db      	uxtb	r3, r3
 8006aa2:	74bb      	strb	r3, [r7, #18]
		CAN_send_data[3] = temp_converter;
 8006aa4:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8006aa6:	b2db      	uxtb	r3, r3
 8006aa8:	74fb      	strb	r3, [r7, #19]
		temp_converter = motor_all[0x2].rpm_pid.output;
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006ab0:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8006ab4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006ab8:	ee17 3a90 	vmov	r3, s15
 8006abc:	867b      	strh	r3, [r7, #50]	; 0x32
		CAN_send_data[4] = temp_converter >> 8;
 8006abe:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8006ac2:	121b      	asrs	r3, r3, #8
 8006ac4:	b21b      	sxth	r3, r3
 8006ac6:	b2db      	uxtb	r3, r3
 8006ac8:	753b      	strb	r3, [r7, #20]
		CAN_send_data[5] = temp_converter;
 8006aca:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8006acc:	b2db      	uxtb	r3, r3
 8006ace:	757b      	strb	r3, [r7, #21]
		temp_converter = motor_all[0x3].rpm_pid.output;
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8006ad6:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8006ada:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006ade:	ee17 3a90 	vmov	r3, s15
 8006ae2:	867b      	strh	r3, [r7, #50]	; 0x32
		CAN_send_data[6] = temp_converter >> 8;
 8006ae4:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8006ae8:	121b      	asrs	r3, r3, #8
 8006aea:	b21b      	sxth	r3, r3
 8006aec:	b2db      	uxtb	r3, r3
 8006aee:	75bb      	strb	r3, [r7, #22]
		CAN_send_data[7] = temp_converter;
 8006af0:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8006af2:	b2db      	uxtb	r3, r3
 8006af4:	75fb      	strb	r3, [r7, #23]
		HAL_CAN_AddTxMessage(&hcan1, &CAN_tx_message, CAN_send_data, &send_mail_box);
 8006af6:	f107 030c 	add.w	r3, r7, #12
 8006afa:	f107 0210 	add.w	r2, r7, #16
 8006afe:	f107 0118 	add.w	r1, r7, #24
 8006b02:	48bc      	ldr	r0, [pc, #752]	; (8006df4 <motor_send_can+0x448>)
 8006b04:	f001 f9fc 	bl	8007f00 <HAL_CAN_AddTxMessage>
	}
	if (temp_checker & 0x0000F0) {
 8006b08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b0a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d057      	beq.n	8006bc2 <motor_send_can+0x216>
		CAN_tx_message.StdId = 0x1FF;
 8006b12:	f240 13ff 	movw	r3, #511	; 0x1ff
 8006b16:	61bb      	str	r3, [r7, #24]
		temp_converter = motor_all[0x4].rpm_pid.output;
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	f503 7328 	add.w	r3, r3, #672	; 0x2a0
 8006b1e:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8006b22:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006b26:	ee17 3a90 	vmov	r3, s15
 8006b2a:	867b      	strh	r3, [r7, #50]	; 0x32
		CAN_send_data[0] = temp_converter >> 8;
 8006b2c:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8006b30:	121b      	asrs	r3, r3, #8
 8006b32:	b21b      	sxth	r3, r3
 8006b34:	b2db      	uxtb	r3, r3
 8006b36:	743b      	strb	r3, [r7, #16]
		CAN_send_data[1] = temp_converter;
 8006b38:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8006b3a:	b2db      	uxtb	r3, r3
 8006b3c:	747b      	strb	r3, [r7, #17]
		temp_converter = motor_all[0x5].rpm_pid.output;
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	f503 7352 	add.w	r3, r3, #840	; 0x348
 8006b44:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8006b48:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006b4c:	ee17 3a90 	vmov	r3, s15
 8006b50:	867b      	strh	r3, [r7, #50]	; 0x32
		CAN_send_data[2] = temp_converter >> 8;
 8006b52:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8006b56:	121b      	asrs	r3, r3, #8
 8006b58:	b21b      	sxth	r3, r3
 8006b5a:	b2db      	uxtb	r3, r3
 8006b5c:	74bb      	strb	r3, [r7, #18]
		CAN_send_data[3] = temp_converter;
 8006b5e:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8006b60:	b2db      	uxtb	r3, r3
 8006b62:	74fb      	strb	r3, [r7, #19]
		temp_converter = motor_all[0x6].rpm_pid.output;
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	f503 737c 	add.w	r3, r3, #1008	; 0x3f0
 8006b6a:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8006b6e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006b72:	ee17 3a90 	vmov	r3, s15
 8006b76:	867b      	strh	r3, [r7, #50]	; 0x32
		CAN_send_data[4] = temp_converter >> 8;
 8006b78:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8006b7c:	121b      	asrs	r3, r3, #8
 8006b7e:	b21b      	sxth	r3, r3
 8006b80:	b2db      	uxtb	r3, r3
 8006b82:	753b      	strb	r3, [r7, #20]
		CAN_send_data[5] = temp_converter;
 8006b84:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8006b86:	b2db      	uxtb	r3, r3
 8006b88:	757b      	strb	r3, [r7, #21]
		temp_converter = motor_all[0x7].rpm_pid.output;
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	f503 6393 	add.w	r3, r3, #1176	; 0x498
 8006b90:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8006b94:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006b98:	ee17 3a90 	vmov	r3, s15
 8006b9c:	867b      	strh	r3, [r7, #50]	; 0x32
		CAN_send_data[6] = temp_converter >> 8;
 8006b9e:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8006ba2:	121b      	asrs	r3, r3, #8
 8006ba4:	b21b      	sxth	r3, r3
 8006ba6:	b2db      	uxtb	r3, r3
 8006ba8:	75bb      	strb	r3, [r7, #22]
		CAN_send_data[7] = temp_converter;
 8006baa:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8006bac:	b2db      	uxtb	r3, r3
 8006bae:	75fb      	strb	r3, [r7, #23]
		HAL_CAN_AddTxMessage(&hcan1, &CAN_tx_message, CAN_send_data, &send_mail_box);
 8006bb0:	f107 030c 	add.w	r3, r7, #12
 8006bb4:	f107 0210 	add.w	r2, r7, #16
 8006bb8:	f107 0118 	add.w	r1, r7, #24
 8006bbc:	488d      	ldr	r0, [pc, #564]	; (8006df4 <motor_send_can+0x448>)
 8006bbe:	f001 f99f 	bl	8007f00 <HAL_CAN_AddTxMessage>
	}
	if (temp_checker & 0x000F00) {
 8006bc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006bc4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d057      	beq.n	8006c7c <motor_send_can+0x2d0>
		CAN_tx_message.StdId = 0x2FF;
 8006bcc:	f240 23ff 	movw	r3, #767	; 0x2ff
 8006bd0:	61bb      	str	r3, [r7, #24]
		temp_converter = motor_all[0x8].rpm_pid.output;
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	f503 63a8 	add.w	r3, r3, #1344	; 0x540
 8006bd8:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8006bdc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006be0:	ee17 3a90 	vmov	r3, s15
 8006be4:	867b      	strh	r3, [r7, #50]	; 0x32
		CAN_send_data[0] = temp_converter >> 8;
 8006be6:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8006bea:	121b      	asrs	r3, r3, #8
 8006bec:	b21b      	sxth	r3, r3
 8006bee:	b2db      	uxtb	r3, r3
 8006bf0:	743b      	strb	r3, [r7, #16]
		CAN_send_data[1] = temp_converter;
 8006bf2:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8006bf4:	b2db      	uxtb	r3, r3
 8006bf6:	747b      	strb	r3, [r7, #17]
		temp_converter = motor_all[0x9].rpm_pid.output;
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	f503 63bd 	add.w	r3, r3, #1512	; 0x5e8
 8006bfe:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8006c02:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006c06:	ee17 3a90 	vmov	r3, s15
 8006c0a:	867b      	strh	r3, [r7, #50]	; 0x32
		CAN_send_data[2] = temp_converter >> 8;
 8006c0c:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8006c10:	121b      	asrs	r3, r3, #8
 8006c12:	b21b      	sxth	r3, r3
 8006c14:	b2db      	uxtb	r3, r3
 8006c16:	74bb      	strb	r3, [r7, #18]
		CAN_send_data[3] = temp_converter;
 8006c18:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8006c1a:	b2db      	uxtb	r3, r3
 8006c1c:	74fb      	strb	r3, [r7, #19]
		temp_converter = motor_all[0xA].rpm_pid.output;
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	f503 63d2 	add.w	r3, r3, #1680	; 0x690
 8006c24:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8006c28:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006c2c:	ee17 3a90 	vmov	r3, s15
 8006c30:	867b      	strh	r3, [r7, #50]	; 0x32
		CAN_send_data[4] = temp_converter >> 8;
 8006c32:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8006c36:	121b      	asrs	r3, r3, #8
 8006c38:	b21b      	sxth	r3, r3
 8006c3a:	b2db      	uxtb	r3, r3
 8006c3c:	753b      	strb	r3, [r7, #20]
		CAN_send_data[5] = temp_converter;
 8006c3e:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8006c40:	b2db      	uxtb	r3, r3
 8006c42:	757b      	strb	r3, [r7, #21]
		temp_converter = motor_all[0xB].rpm_pid.output;
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	f503 63e7 	add.w	r3, r3, #1848	; 0x738
 8006c4a:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8006c4e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006c52:	ee17 3a90 	vmov	r3, s15
 8006c56:	867b      	strh	r3, [r7, #50]	; 0x32
		CAN_send_data[6] = temp_converter >> 8;
 8006c58:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8006c5c:	121b      	asrs	r3, r3, #8
 8006c5e:	b21b      	sxth	r3, r3
 8006c60:	b2db      	uxtb	r3, r3
 8006c62:	75bb      	strb	r3, [r7, #22]
		CAN_send_data[7] = temp_converter;
 8006c64:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8006c66:	b2db      	uxtb	r3, r3
 8006c68:	75fb      	strb	r3, [r7, #23]
		HAL_CAN_AddTxMessage(&hcan1, &CAN_tx_message, CAN_send_data, &send_mail_box);
 8006c6a:	f107 030c 	add.w	r3, r7, #12
 8006c6e:	f107 0210 	add.w	r2, r7, #16
 8006c72:	f107 0118 	add.w	r1, r7, #24
 8006c76:	485f      	ldr	r0, [pc, #380]	; (8006df4 <motor_send_can+0x448>)
 8006c78:	f001 f942 	bl	8007f00 <HAL_CAN_AddTxMessage>
	}
#ifndef CHASSIS_MCU
	if (temp_checker & 0x00F000) {
 8006c7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c7e:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d057      	beq.n	8006d36 <motor_send_can+0x38a>
		CAN_tx_message.StdId = 0x200;
 8006c86:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006c8a:	61bb      	str	r3, [r7, #24]
		temp_converter = motor_all[0x0 + 12].rpm_pid.output;
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	f503 63fc 	add.w	r3, r3, #2016	; 0x7e0
 8006c92:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8006c96:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006c9a:	ee17 3a90 	vmov	r3, s15
 8006c9e:	867b      	strh	r3, [r7, #50]	; 0x32
		CAN_send_data[0] = temp_converter >> 8;
 8006ca0:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8006ca4:	121b      	asrs	r3, r3, #8
 8006ca6:	b21b      	sxth	r3, r3
 8006ca8:	b2db      	uxtb	r3, r3
 8006caa:	743b      	strb	r3, [r7, #16]
		CAN_send_data[1] = temp_converter;
 8006cac:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8006cae:	b2db      	uxtb	r3, r3
 8006cb0:	747b      	strb	r3, [r7, #17]
		temp_converter = motor_all[0x1 + 12].rpm_pid.output;
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	f603 0388 	addw	r3, r3, #2184	; 0x888
 8006cb8:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8006cbc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006cc0:	ee17 3a90 	vmov	r3, s15
 8006cc4:	867b      	strh	r3, [r7, #50]	; 0x32
		CAN_send_data[2] = temp_converter >> 8;
 8006cc6:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8006cca:	121b      	asrs	r3, r3, #8
 8006ccc:	b21b      	sxth	r3, r3
 8006cce:	b2db      	uxtb	r3, r3
 8006cd0:	74bb      	strb	r3, [r7, #18]
		CAN_send_data[3] = temp_converter;
 8006cd2:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8006cd4:	b2db      	uxtb	r3, r3
 8006cd6:	74fb      	strb	r3, [r7, #19]
		temp_converter = motor_all[0x2 + 12].rpm_pid.output;
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	f503 6313 	add.w	r3, r3, #2352	; 0x930
 8006cde:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8006ce2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006ce6:	ee17 3a90 	vmov	r3, s15
 8006cea:	867b      	strh	r3, [r7, #50]	; 0x32
		CAN_send_data[4] = temp_converter >> 8;
 8006cec:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8006cf0:	121b      	asrs	r3, r3, #8
 8006cf2:	b21b      	sxth	r3, r3
 8006cf4:	b2db      	uxtb	r3, r3
 8006cf6:	753b      	strb	r3, [r7, #20]
		CAN_send_data[5] = temp_converter;
 8006cf8:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8006cfa:	b2db      	uxtb	r3, r3
 8006cfc:	757b      	strb	r3, [r7, #21]
		temp_converter = motor_all[0x3 + 12].rpm_pid.output;
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	f603 13d8 	addw	r3, r3, #2520	; 0x9d8
 8006d04:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8006d08:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006d0c:	ee17 3a90 	vmov	r3, s15
 8006d10:	867b      	strh	r3, [r7, #50]	; 0x32
		CAN_send_data[6] = temp_converter >> 8;
 8006d12:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8006d16:	121b      	asrs	r3, r3, #8
 8006d18:	b21b      	sxth	r3, r3
 8006d1a:	b2db      	uxtb	r3, r3
 8006d1c:	75bb      	strb	r3, [r7, #22]
		CAN_send_data[7] = temp_converter;
 8006d1e:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8006d20:	b2db      	uxtb	r3, r3
 8006d22:	75fb      	strb	r3, [r7, #23]
		HAL_CAN_AddTxMessage(&hcan2, &CAN_tx_message, CAN_send_data, &send_mail_box);
 8006d24:	f107 030c 	add.w	r3, r7, #12
 8006d28:	f107 0210 	add.w	r2, r7, #16
 8006d2c:	f107 0118 	add.w	r1, r7, #24
 8006d30:	4831      	ldr	r0, [pc, #196]	; (8006df8 <motor_send_can+0x44c>)
 8006d32:	f001 f8e5 	bl	8007f00 <HAL_CAN_AddTxMessage>
	}
	if (temp_checker & 0x0F0000) {
 8006d36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d38:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d05d      	beq.n	8006dfc <motor_send_can+0x450>
		CAN_tx_message.StdId = 0x1FF;
 8006d40:	f240 13ff 	movw	r3, #511	; 0x1ff
 8006d44:	61bb      	str	r3, [r7, #24]
		temp_converter = motor_all[0x4 + 12].rpm_pid.output;
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	f503 6328 	add.w	r3, r3, #2688	; 0xa80
 8006d4c:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8006d50:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006d54:	ee17 3a90 	vmov	r3, s15
 8006d58:	867b      	strh	r3, [r7, #50]	; 0x32
		CAN_send_data[0] = temp_converter >> 8;
 8006d5a:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8006d5e:	121b      	asrs	r3, r3, #8
 8006d60:	b21b      	sxth	r3, r3
 8006d62:	b2db      	uxtb	r3, r3
 8006d64:	743b      	strb	r3, [r7, #16]
		CAN_send_data[1] = temp_converter;
 8006d66:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8006d68:	b2db      	uxtb	r3, r3
 8006d6a:	747b      	strb	r3, [r7, #17]
		temp_converter = motor_all[0x5 + 12].rpm_pid.output;
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	f603 3328 	addw	r3, r3, #2856	; 0xb28
 8006d72:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8006d76:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006d7a:	ee17 3a90 	vmov	r3, s15
 8006d7e:	867b      	strh	r3, [r7, #50]	; 0x32
		CAN_send_data[2] = temp_converter >> 8;
 8006d80:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8006d84:	121b      	asrs	r3, r3, #8
 8006d86:	b21b      	sxth	r3, r3
 8006d88:	b2db      	uxtb	r3, r3
 8006d8a:	74bb      	strb	r3, [r7, #18]
		CAN_send_data[3] = temp_converter;
 8006d8c:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8006d8e:	b2db      	uxtb	r3, r3
 8006d90:	74fb      	strb	r3, [r7, #19]
		temp_converter = motor_all[0x6 + 12].rpm_pid.output;
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	f503 633d 	add.w	r3, r3, #3024	; 0xbd0
 8006d98:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8006d9c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006da0:	ee17 3a90 	vmov	r3, s15
 8006da4:	867b      	strh	r3, [r7, #50]	; 0x32
		CAN_send_data[4] = temp_converter >> 8;
 8006da6:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8006daa:	121b      	asrs	r3, r3, #8
 8006dac:	b21b      	sxth	r3, r3
 8006dae:	b2db      	uxtb	r3, r3
 8006db0:	753b      	strb	r3, [r7, #20]
		CAN_send_data[5] = temp_converter;
 8006db2:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8006db4:	b2db      	uxtb	r3, r3
 8006db6:	757b      	strb	r3, [r7, #21]
		temp_converter = motor_all[0x7 + 12].rpm_pid.output;
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	f603 4378 	addw	r3, r3, #3192	; 0xc78
 8006dbe:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8006dc2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006dc6:	ee17 3a90 	vmov	r3, s15
 8006dca:	867b      	strh	r3, [r7, #50]	; 0x32
		CAN_send_data[6] = temp_converter >> 8;
 8006dcc:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8006dd0:	121b      	asrs	r3, r3, #8
 8006dd2:	b21b      	sxth	r3, r3
 8006dd4:	b2db      	uxtb	r3, r3
 8006dd6:	75bb      	strb	r3, [r7, #22]
		CAN_send_data[7] = temp_converter;
 8006dd8:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8006dda:	b2db      	uxtb	r3, r3
 8006ddc:	75fb      	strb	r3, [r7, #23]
		HAL_CAN_AddTxMessage(&hcan2, &CAN_tx_message, CAN_send_data, &send_mail_box);
 8006dde:	f107 030c 	add.w	r3, r7, #12
 8006de2:	f107 0210 	add.w	r2, r7, #16
 8006de6:	f107 0118 	add.w	r1, r7, #24
 8006dea:	4803      	ldr	r0, [pc, #12]	; (8006df8 <motor_send_can+0x44c>)
 8006dec:	f001 f888 	bl	8007f00 <HAL_CAN_AddTxMessage>
 8006df0:	e004      	b.n	8006dfc <motor_send_can+0x450>
 8006df2:	bf00      	nop
 8006df4:	200002a4 	.word	0x200002a4
 8006df8:	200002cc 	.word	0x200002cc
	}
	if (temp_checker & 0xF00000) {
 8006dfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006dfe:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d057      	beq.n	8006eb6 <motor_send_can+0x50a>
		CAN_tx_message.StdId = 0x2FF;
 8006e06:	f240 23ff 	movw	r3, #767	; 0x2ff
 8006e0a:	61bb      	str	r3, [r7, #24]
		temp_converter = motor_all[0x8 + 12].rpm_pid.output;
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	f503 6352 	add.w	r3, r3, #3360	; 0xd20
 8006e12:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8006e16:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006e1a:	ee17 3a90 	vmov	r3, s15
 8006e1e:	867b      	strh	r3, [r7, #50]	; 0x32
		CAN_send_data[0] = temp_converter >> 8;
 8006e20:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8006e24:	121b      	asrs	r3, r3, #8
 8006e26:	b21b      	sxth	r3, r3
 8006e28:	b2db      	uxtb	r3, r3
 8006e2a:	743b      	strb	r3, [r7, #16]
		CAN_send_data[1] = temp_converter;
 8006e2c:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8006e2e:	b2db      	uxtb	r3, r3
 8006e30:	747b      	strb	r3, [r7, #17]
		temp_converter = motor_all[0x9 + 12].rpm_pid.output;
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	f603 53c8 	addw	r3, r3, #3528	; 0xdc8
 8006e38:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8006e3c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006e40:	ee17 3a90 	vmov	r3, s15
 8006e44:	867b      	strh	r3, [r7, #50]	; 0x32
		CAN_send_data[2] = temp_converter >> 8;
 8006e46:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8006e4a:	121b      	asrs	r3, r3, #8
 8006e4c:	b21b      	sxth	r3, r3
 8006e4e:	b2db      	uxtb	r3, r3
 8006e50:	74bb      	strb	r3, [r7, #18]
		CAN_send_data[3] = temp_converter;
 8006e52:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8006e54:	b2db      	uxtb	r3, r3
 8006e56:	74fb      	strb	r3, [r7, #19]
		temp_converter = motor_all[0xA + 12].rpm_pid.output;
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	f503 6367 	add.w	r3, r3, #3696	; 0xe70
 8006e5e:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8006e62:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006e66:	ee17 3a90 	vmov	r3, s15
 8006e6a:	867b      	strh	r3, [r7, #50]	; 0x32
		CAN_send_data[4] = temp_converter >> 8;
 8006e6c:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8006e70:	121b      	asrs	r3, r3, #8
 8006e72:	b21b      	sxth	r3, r3
 8006e74:	b2db      	uxtb	r3, r3
 8006e76:	753b      	strb	r3, [r7, #20]
		CAN_send_data[5] = temp_converter;
 8006e78:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8006e7a:	b2db      	uxtb	r3, r3
 8006e7c:	757b      	strb	r3, [r7, #21]
		temp_converter = motor_all[0xB + 12].rpm_pid.output;
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	f603 7318 	addw	r3, r3, #3864	; 0xf18
 8006e84:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8006e88:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006e8c:	ee17 3a90 	vmov	r3, s15
 8006e90:	867b      	strh	r3, [r7, #50]	; 0x32
		CAN_send_data[6] = temp_converter >> 8;
 8006e92:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8006e96:	121b      	asrs	r3, r3, #8
 8006e98:	b21b      	sxth	r3, r3
 8006e9a:	b2db      	uxtb	r3, r3
 8006e9c:	75bb      	strb	r3, [r7, #22]
		CAN_send_data[7] = temp_converter;
 8006e9e:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8006ea0:	b2db      	uxtb	r3, r3
 8006ea2:	75fb      	strb	r3, [r7, #23]
		HAL_CAN_AddTxMessage(&hcan2, &CAN_tx_message, CAN_send_data, &send_mail_box);
 8006ea4:	f107 030c 	add.w	r3, r7, #12
 8006ea8:	f107 0210 	add.w	r2, r7, #16
 8006eac:	f107 0118 	add.w	r1, r7, #24
 8006eb0:	4803      	ldr	r0, [pc, #12]	; (8006ec0 <motor_send_can+0x514>)
 8006eb2:	f001 f825 	bl	8007f00 <HAL_CAN_AddTxMessage>
	}
#endif
}
 8006eb6:	bf00      	nop
 8006eb8:	3738      	adds	r7, #56	; 0x38
 8006eba:	46bd      	mov	sp, r7
 8006ebc:	bd80      	pop	{r7, pc}
 8006ebe:	bf00      	nop
 8006ec0:	200002cc 	.word	0x200002cc

08006ec4 <kill_can>:

void kill_can() {
 8006ec4:	b580      	push	{r7, lr}
 8006ec6:	b08a      	sub	sp, #40	; 0x28
 8006ec8:	af00      	add	r7, sp, #0

	CAN_TxHeaderTypeDef CAN_tx_message;
	uint8_t CAN_send_data[8] = { 0, };
 8006eca:	2300      	movs	r3, #0
 8006ecc:	60bb      	str	r3, [r7, #8]
 8006ece:	2300      	movs	r3, #0
 8006ed0:	60fb      	str	r3, [r7, #12]
	uint32_t send_mail_box;
	CAN_tx_message.IDE = CAN_ID_STD;
 8006ed2:	2300      	movs	r3, #0
 8006ed4:	61bb      	str	r3, [r7, #24]
	CAN_tx_message.RTR = CAN_RTR_DATA;
 8006ed6:	2300      	movs	r3, #0
 8006ed8:	61fb      	str	r3, [r7, #28]
	CAN_tx_message.DLC = 0x08;
 8006eda:	2308      	movs	r3, #8
 8006edc:	623b      	str	r3, [r7, #32]

	CAN_tx_message.StdId = 0x200;
 8006ede:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006ee2:	613b      	str	r3, [r7, #16]
	HAL_CAN_AddTxMessage(&hcan1, &CAN_tx_message, CAN_send_data, &send_mail_box);
 8006ee4:	1d3b      	adds	r3, r7, #4
 8006ee6:	f107 0208 	add.w	r2, r7, #8
 8006eea:	f107 0110 	add.w	r1, r7, #16
 8006eee:	481f      	ldr	r0, [pc, #124]	; (8006f6c <kill_can+0xa8>)
 8006ef0:	f001 f806 	bl	8007f00 <HAL_CAN_AddTxMessage>
	CAN_tx_message.StdId = 0x1FF;
 8006ef4:	f240 13ff 	movw	r3, #511	; 0x1ff
 8006ef8:	613b      	str	r3, [r7, #16]
	HAL_CAN_AddTxMessage(&hcan1, &CAN_tx_message, CAN_send_data, &send_mail_box);
 8006efa:	1d3b      	adds	r3, r7, #4
 8006efc:	f107 0208 	add.w	r2, r7, #8
 8006f00:	f107 0110 	add.w	r1, r7, #16
 8006f04:	4819      	ldr	r0, [pc, #100]	; (8006f6c <kill_can+0xa8>)
 8006f06:	f000 fffb 	bl	8007f00 <HAL_CAN_AddTxMessage>
	CAN_tx_message.StdId = 0x2FF;
 8006f0a:	f240 23ff 	movw	r3, #767	; 0x2ff
 8006f0e:	613b      	str	r3, [r7, #16]
	HAL_CAN_AddTxMessage(&hcan1, &CAN_tx_message, CAN_send_data, &send_mail_box);
 8006f10:	1d3b      	adds	r3, r7, #4
 8006f12:	f107 0208 	add.w	r2, r7, #8
 8006f16:	f107 0110 	add.w	r1, r7, #16
 8006f1a:	4814      	ldr	r0, [pc, #80]	; (8006f6c <kill_can+0xa8>)
 8006f1c:	f000 fff0 	bl	8007f00 <HAL_CAN_AddTxMessage>
	CAN_tx_message.StdId = 0x200;
 8006f20:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006f24:	613b      	str	r3, [r7, #16]
#ifndef CHASSIS_MCU
	HAL_CAN_AddTxMessage(&hcan2, &CAN_tx_message, CAN_send_data, &send_mail_box);
 8006f26:	1d3b      	adds	r3, r7, #4
 8006f28:	f107 0208 	add.w	r2, r7, #8
 8006f2c:	f107 0110 	add.w	r1, r7, #16
 8006f30:	480f      	ldr	r0, [pc, #60]	; (8006f70 <kill_can+0xac>)
 8006f32:	f000 ffe5 	bl	8007f00 <HAL_CAN_AddTxMessage>
	CAN_tx_message.StdId = 0x1FF;
 8006f36:	f240 13ff 	movw	r3, #511	; 0x1ff
 8006f3a:	613b      	str	r3, [r7, #16]
	HAL_CAN_AddTxMessage(&hcan2, &CAN_tx_message, CAN_send_data, &send_mail_box);
 8006f3c:	1d3b      	adds	r3, r7, #4
 8006f3e:	f107 0208 	add.w	r2, r7, #8
 8006f42:	f107 0110 	add.w	r1, r7, #16
 8006f46:	480a      	ldr	r0, [pc, #40]	; (8006f70 <kill_can+0xac>)
 8006f48:	f000 ffda 	bl	8007f00 <HAL_CAN_AddTxMessage>
	CAN_tx_message.StdId = 0x2FF;
 8006f4c:	f240 23ff 	movw	r3, #767	; 0x2ff
 8006f50:	613b      	str	r3, [r7, #16]
	HAL_CAN_AddTxMessage(&hcan2, &CAN_tx_message, CAN_send_data, &send_mail_box);
 8006f52:	1d3b      	adds	r3, r7, #4
 8006f54:	f107 0208 	add.w	r2, r7, #8
 8006f58:	f107 0110 	add.w	r1, r7, #16
 8006f5c:	4804      	ldr	r0, [pc, #16]	; (8006f70 <kill_can+0xac>)
 8006f5e:	f000 ffcf 	bl	8007f00 <HAL_CAN_AddTxMessage>

#endif
}
 8006f62:	bf00      	nop
 8006f64:	3728      	adds	r7, #40	; 0x28
 8006f66:	46bd      	mov	sp, r7
 8006f68:	bd80      	pop	{r7, pc}
 8006f6a:	bf00      	nop
 8006f6c:	200002a4 	.word	0x200002a4
 8006f70:	200002cc 	.word	0x200002cc

08006f74 <float_minmax>:
 * Limits the input float variable
 * @params motor_in: the pointer to the variable to be limited
 * @params motor_max: the positive maximum value for the variable
 */

void float_minmax(float *motor_in, float motor_max, float motor_min) {
 8006f74:	b480      	push	{r7}
 8006f76:	b085      	sub	sp, #20
 8006f78:	af00      	add	r7, sp, #0
 8006f7a:	60f8      	str	r0, [r7, #12]
 8006f7c:	ed87 0a02 	vstr	s0, [r7, #8]
 8006f80:	edc7 0a01 	vstr	s1, [r7, #4]
	if (*motor_in > motor_max) {
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	edd3 7a00 	vldr	s15, [r3]
 8006f8a:	ed97 7a02 	vldr	s14, [r7, #8]
 8006f8e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006f92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006f96:	d503      	bpl.n	8006fa0 <float_minmax+0x2c>
		*motor_in = motor_max;
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	68ba      	ldr	r2, [r7, #8]
 8006f9c:	601a      	str	r2, [r3, #0]
 8006f9e:	e012      	b.n	8006fc6 <float_minmax+0x52>
	} else if (*motor_in < -motor_max) {
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	ed93 7a00 	vldr	s14, [r3]
 8006fa6:	edd7 7a02 	vldr	s15, [r7, #8]
 8006faa:	eef1 7a67 	vneg.f32	s15, s15
 8006fae:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006fb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006fb6:	d506      	bpl.n	8006fc6 <float_minmax+0x52>
		*motor_in = -motor_max;
 8006fb8:	edd7 7a02 	vldr	s15, [r7, #8]
 8006fbc:	eef1 7a67 	vneg.f32	s15, s15
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	edc3 7a00 	vstr	s15, [r3]
	}

	if (fabs(*motor_in) < motor_min) {
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	edd3 7a00 	vldr	s15, [r3]
 8006fcc:	eef0 7ae7 	vabs.f32	s15, s15
 8006fd0:	ed97 7a01 	vldr	s14, [r7, #4]
 8006fd4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006fd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006fdc:	dc00      	bgt.n	8006fe0 <float_minmax+0x6c>
		*motor_in = 0;
	}

}
 8006fde:	e003      	b.n	8006fe8 <float_minmax+0x74>
		*motor_in = 0;
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	f04f 0200 	mov.w	r2, #0
 8006fe6:	601a      	str	r2, [r3, #0]
}
 8006fe8:	bf00      	nop
 8006fea:	3714      	adds	r7, #20
 8006fec:	46bd      	mov	sp, r7
 8006fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff2:	4770      	bx	lr

08006ff4 <constrain_value>:

void constrain_value(float *motor_in, float motor_max, float motor_min) {
 8006ff4:	b480      	push	{r7}
 8006ff6:	b085      	sub	sp, #20
 8006ff8:	af00      	add	r7, sp, #0
 8006ffa:	60f8      	str	r0, [r7, #12]
 8006ffc:	ed87 0a02 	vstr	s0, [r7, #8]
 8007000:	edc7 0a01 	vstr	s1, [r7, #4]
	if (*motor_in > motor_max) {
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	edd3 7a00 	vldr	s15, [r3]
 800700a:	ed97 7a02 	vldr	s14, [r7, #8]
 800700e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007012:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007016:	d503      	bpl.n	8007020 <constrain_value+0x2c>
		*motor_in = motor_max;
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	68ba      	ldr	r2, [r7, #8]
 800701c:	601a      	str	r2, [r3, #0]

//	if (fabs(*motor_in) < motor_min) {
//		*motor_in = 0;
//	}

}
 800701e:	e00d      	b.n	800703c <constrain_value+0x48>
	} else if (*motor_in < motor_min) {
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	edd3 7a00 	vldr	s15, [r3]
 8007026:	ed97 7a01 	vldr	s14, [r7, #4]
 800702a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800702e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007032:	dc00      	bgt.n	8007036 <constrain_value+0x42>
}
 8007034:	e002      	b.n	800703c <constrain_value+0x48>
		*motor_in = motor_min;
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	687a      	ldr	r2, [r7, #4]
 800703a:	601a      	str	r2, [r3, #0]
}
 800703c:	bf00      	nop
 800703e:	3714      	adds	r7, #20
 8007040:	46bd      	mov	sp, r7
 8007042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007046:	4770      	bx	lr

08007048 <motor_feedback_task>:
extern long current_orient;
long target_orient;
static uint8_t lastturn = 0;


void motor_feedback_task(void *argument) {
 8007048:	b580      	push	{r7, lr}
 800704a:	b086      	sub	sp, #24
 800704c:	af02      	add	r7, sp, #8
 800704e:	6078      	str	r0, [r7, #4]
	TickType_t start_time;
	while (1) {
		start_time = xTaskGetTickCount();
 8007050:	f00b faf6 	bl	8012640 <xTaskGetTickCount>
 8007054:	4603      	mov	r3, r0
 8007056:	60fb      	str	r3, [r7, #12]
		xEventGroupWaitBits(chassis_event_group, 0b1100, pdTRUE, pdTRUE, portMAX_DELAY); //wait for all motors to connect
 8007058:	4b20      	ldr	r3, [pc, #128]	; (80070dc <motor_feedback_task+0x94>)
 800705a:	6818      	ldr	r0, [r3, #0]
 800705c:	f04f 33ff 	mov.w	r3, #4294967295
 8007060:	9300      	str	r3, [sp, #0]
 8007062:	2301      	movs	r3, #1
 8007064:	2201      	movs	r2, #1
 8007066:	210c      	movs	r1, #12
 8007068:	f009 ffd8 	bl	801101c <xEventGroupWaitBits>

		if (chassis_ctrl_data.enabled) {   // RE ENABLE!!!
 800706c:	4b1c      	ldr	r3, [pc, #112]	; (80070e0 <motor_feedback_task+0x98>)
 800706e:	7b1b      	ldrb	r3, [r3, #12]
 8007070:	2b00      	cmp	r3, #0
 8007072:	d006      	beq.n	8007082 <motor_feedback_task+0x3a>
			chassis_feedback_loop(can_motors + FR_MOTOR_ID - 1, can_motors + FL_MOTOR_ID - 1);
 8007074:	4b1b      	ldr	r3, [pc, #108]	; (80070e4 <motor_feedback_task+0x9c>)
 8007076:	4a1c      	ldr	r2, [pc, #112]	; (80070e8 <motor_feedback_task+0xa0>)
 8007078:	4611      	mov	r1, r2
 800707a:	4618      	mov	r0, r3
 800707c:	f000 f83c 	bl	80070f8 <chassis_feedback_loop>
 8007080:	e01b      	b.n	80070ba <motor_feedback_task+0x72>
		} else {
			can_motors[FR_MOTOR_ID - 1].rpm_pid.output = 0;  //can_motors[13-1]
 8007082:	4b1a      	ldr	r3, [pc, #104]	; (80070ec <motor_feedback_task+0xa4>)
 8007084:	f603 0314 	addw	r3, r3, #2068	; 0x814
 8007088:	f04f 0200 	mov.w	r2, #0
 800708c:	601a      	str	r2, [r3, #0]
			can_motors[FL_MOTOR_ID - 1].rpm_pid.output = 0;  //can_motors[14-1]
 800708e:	4b17      	ldr	r3, [pc, #92]	; (80070ec <motor_feedback_task+0xa4>)
 8007090:	f603 03bc 	addw	r3, r3, #2236	; 0x8bc
 8007094:	f04f 0200 	mov.w	r2, #0
 8007098:	601a      	str	r2, [r3, #0]
			fl_speed = 0;
 800709a:	4b15      	ldr	r3, [pc, #84]	; (80070f0 <motor_feedback_task+0xa8>)
 800709c:	f04f 0200 	mov.w	r2, #0
 80070a0:	601a      	str	r2, [r3, #0]
			fr_speed = 0;
 80070a2:	4b14      	ldr	r3, [pc, #80]	; (80070f4 <motor_feedback_task+0xac>)
 80070a4:	f04f 0200 	mov.w	r2, #0
 80070a8:	601a      	str	r2, [r3, #0]
			motor_send_can(can_motors, FR_MOTOR_ID, FL_MOTOR_ID, 0, 0);
 80070aa:	2300      	movs	r3, #0
 80070ac:	9300      	str	r3, [sp, #0]
 80070ae:	2300      	movs	r3, #0
 80070b0:	220e      	movs	r2, #14
 80070b2:	210d      	movs	r1, #13
 80070b4:	480d      	ldr	r0, [pc, #52]	; (80070ec <motor_feedback_task+0xa4>)
 80070b6:	f7ff fc79 	bl	80069ac <motor_send_can>
		}

		//delays task for other tasks to run
		status_led(3, off_led);
 80070ba:	2101      	movs	r1, #1
 80070bc:	2003      	movs	r0, #3
 80070be:	f7fa fcf9 	bl	8001ab4 <status_led>

		xEventGroupClearBits(chassis_event_group, 0b1111);
 80070c2:	4b06      	ldr	r3, [pc, #24]	; (80070dc <motor_feedback_task+0x94>)
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	210f      	movs	r1, #15
 80070c8:	4618      	mov	r0, r3
 80070ca:	f00a f875 	bl	80111b8 <xEventGroupClearBits>
		vTaskDelayUntil(&start_time, CHASSIS_DELAY);
 80070ce:	f107 030c 	add.w	r3, r7, #12
 80070d2:	2102      	movs	r1, #2
 80070d4:	4618      	mov	r0, r3
 80070d6:	f00b f8e5 	bl	80122a4 <vTaskDelayUntil>
		start_time = xTaskGetTickCount();
 80070da:	e7b9      	b.n	8007050 <motor_feedback_task+0x8>
 80070dc:	20000314 	.word	0x20000314
 80070e0:	20001f14 	.word	0x20001f14
 80070e4:	20001710 	.word	0x20001710
 80070e8:	200017b8 	.word	0x200017b8
 80070ec:	20000f30 	.word	0x20000f30
 80070f0:	20002070 	.word	0x20002070
 80070f4:	20002074 	.word	0x20002074

080070f8 <chassis_feedback_loop>:
	}
	osThreadTerminate(NULL);
}

void chassis_feedback_loop(motor_data_t *motorfr,
		motor_data_t *motorfl){
 80070f8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80070fc:	b084      	sub	sp, #16
 80070fe:	af02      	add	r7, sp, #8
 8007100:	6078      	str	r0, [r7, #4]
 8007102:	6039      	str	r1, [r7, #0]
	motor_calc_odometry(&can_motors[13].raw_data, &can_motors[13].angle_data,  //note: is disabled in can_msg_processor.c
 8007104:	4a60      	ldr	r2, [pc, #384]	; (8007288 <chassis_feedback_loop+0x190>)
 8007106:	4961      	ldr	r1, [pc, #388]	; (800728c <chassis_feedback_loop+0x194>)
 8007108:	4861      	ldr	r0, [pc, #388]	; (8007290 <chassis_feedback_loop+0x198>)
 800710a:	f7fc fded 	bl	8003ce8 <motor_calc_odometry>
								can_motors[13].last_time);
	motor_calc_odometry(&can_motors[12].raw_data, &can_motors[12].angle_data,
 800710e:	4a61      	ldr	r2, [pc, #388]	; (8007294 <chassis_feedback_loop+0x19c>)
 8007110:	4961      	ldr	r1, [pc, #388]	; (8007298 <chassis_feedback_loop+0x1a0>)
 8007112:	4862      	ldr	r0, [pc, #392]	; (800729c <chassis_feedback_loop+0x1a4>)
 8007114:	f7fc fde8 	bl	8003ce8 <motor_calc_odometry>
								can_motors[12].last_time);
	if (fabs(chassis_ctrl_data.yaw) >= 0.05) {
 8007118:	4b61      	ldr	r3, [pc, #388]	; (80072a0 <chassis_feedback_loop+0x1a8>)
 800711a:	edd3 7a02 	vldr	s15, [r3, #8]
 800711e:	eef0 7ae7 	vabs.f32	s15, s15
 8007122:	ee17 0a90 	vmov	r0, s15
 8007126:	f7f9 f9c7 	bl	80004b8 <__aeabi_f2d>
 800712a:	a355      	add	r3, pc, #340	; (adr r3, 8007280 <chassis_feedback_loop+0x188>)
 800712c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007130:	f7f9 fca0 	bl	8000a74 <__aeabi_dcmpge>
 8007134:	4603      	mov	r3, r0
 8007136:	2b00      	cmp	r3, #0
 8007138:	d017      	beq.n	800716a <chassis_feedback_loop+0x72>
		lastturn = 1 ;
 800713a:	4b5a      	ldr	r3, [pc, #360]	; (80072a4 <chassis_feedback_loop+0x1ac>)
 800713c:	2201      	movs	r2, #1
 800713e:	701a      	strb	r2, [r3, #0]
		target_orient = current_orient - chassis_ctrl_data.yaw*30000; // 30000
 8007140:	4b59      	ldr	r3, [pc, #356]	; (80072a8 <chassis_feedback_loop+0x1b0>)
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	ee07 3a90 	vmov	s15, r3
 8007148:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800714c:	4b54      	ldr	r3, [pc, #336]	; (80072a0 <chassis_feedback_loop+0x1a8>)
 800714e:	edd3 7a02 	vldr	s15, [r3, #8]
 8007152:	eddf 6a56 	vldr	s13, [pc, #344]	; 80072ac <chassis_feedback_loop+0x1b4>
 8007156:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800715a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800715e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007162:	ee17 2a90 	vmov	r2, s15
 8007166:	4b52      	ldr	r3, [pc, #328]	; (80072b0 <chassis_feedback_loop+0x1b8>)
 8007168:	601a      	str	r2, [r3, #0]
		}

	if (fabs(chassis_ctrl_data.yaw) < 0.05 && lastturn == 1) {
 800716a:	4b4d      	ldr	r3, [pc, #308]	; (80072a0 <chassis_feedback_loop+0x1a8>)
 800716c:	edd3 7a02 	vldr	s15, [r3, #8]
 8007170:	eef0 7ae7 	vabs.f32	s15, s15
 8007174:	ee17 0a90 	vmov	r0, s15
 8007178:	f7f9 f99e 	bl	80004b8 <__aeabi_f2d>
 800717c:	a340      	add	r3, pc, #256	; (adr r3, 8007280 <chassis_feedback_loop+0x188>)
 800717e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007182:	f7f9 fc63 	bl	8000a4c <__aeabi_dcmplt>
 8007186:	4603      	mov	r3, r0
 8007188:	2b00      	cmp	r3, #0
 800718a:	d00a      	beq.n	80071a2 <chassis_feedback_loop+0xaa>
 800718c:	4b45      	ldr	r3, [pc, #276]	; (80072a4 <chassis_feedback_loop+0x1ac>)
 800718e:	781b      	ldrb	r3, [r3, #0]
 8007190:	2b01      	cmp	r3, #1
 8007192:	d106      	bne.n	80071a2 <chassis_feedback_loop+0xaa>
		target_orient = current_orient;
 8007194:	4b44      	ldr	r3, [pc, #272]	; (80072a8 <chassis_feedback_loop+0x1b0>)
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	4a45      	ldr	r2, [pc, #276]	; (80072b0 <chassis_feedback_loop+0x1b8>)
 800719a:	6013      	str	r3, [r2, #0]
		lastturn = 0 ;
 800719c:	4b41      	ldr	r3, [pc, #260]	; (80072a4 <chassis_feedback_loop+0x1ac>)
 800719e:	2200      	movs	r2, #0
 80071a0:	701a      	strb	r2, [r3, #0]
		}
	speed_pid(target_orient, current_orient,&b_orient_pid);
 80071a2:	4b43      	ldr	r3, [pc, #268]	; (80072b0 <chassis_feedback_loop+0x1b8>)
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	4618      	mov	r0, r3
 80071a8:	f7f9 f974 	bl	8000494 <__aeabi_i2d>
 80071ac:	4604      	mov	r4, r0
 80071ae:	460d      	mov	r5, r1
 80071b0:	4b3d      	ldr	r3, [pc, #244]	; (80072a8 <chassis_feedback_loop+0x1b0>)
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	4618      	mov	r0, r3
 80071b6:	f7f9 f96d 	bl	8000494 <__aeabi_i2d>
 80071ba:	4602      	mov	r2, r0
 80071bc:	460b      	mov	r3, r1
 80071be:	483d      	ldr	r0, [pc, #244]	; (80072b4 <chassis_feedback_loop+0x1bc>)
 80071c0:	ec43 2b11 	vmov	d1, r2, r3
 80071c4:	ec45 4b10 	vmov	d0, r4, r5
 80071c8:	f7ff fb1c 	bl	8006804 <speed_pid>


//	rotation = chassis_ctrl_data.yaw * 1000;
	rotation = b_orient_pid.output;
 80071cc:	4b39      	ldr	r3, [pc, #228]	; (80072b4 <chassis_feedback_loop+0x1bc>)
 80071ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071d0:	4a39      	ldr	r2, [pc, #228]	; (80072b8 <chassis_feedback_loop+0x1c0>)
 80071d2:	6013      	str	r3, [r2, #0]
	fl_speed = +b_angle_pid.output - rotation;  // motors run in opp directions
 80071d4:	4b39      	ldr	r3, [pc, #228]	; (80072bc <chassis_feedback_loop+0x1c4>)
 80071d6:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 80071da:	4b37      	ldr	r3, [pc, #220]	; (80072b8 <chassis_feedback_loop+0x1c0>)
 80071dc:	edd3 7a00 	vldr	s15, [r3]
 80071e0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80071e4:	4b36      	ldr	r3, [pc, #216]	; (80072c0 <chassis_feedback_loop+0x1c8>)
 80071e6:	edc3 7a00 	vstr	s15, [r3]
	fr_speed = -b_angle_pid.output - rotation;
 80071ea:	4b34      	ldr	r3, [pc, #208]	; (80072bc <chassis_feedback_loop+0x1c4>)
 80071ec:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80071f0:	eeb1 7a67 	vneg.f32	s14, s15
 80071f4:	4b30      	ldr	r3, [pc, #192]	; (80072b8 <chassis_feedback_loop+0x1c0>)
 80071f6:	edd3 7a00 	vldr	s15, [r3]
 80071fa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80071fe:	4b31      	ldr	r3, [pc, #196]	; (80072c4 <chassis_feedback_loop+0x1cc>)
 8007200:	edc3 7a00 	vstr	s15, [r3]


	speed_pid(fl_speed, motorfl->raw_data.rpm,&motorfl->rpm_pid);
 8007204:	4b2e      	ldr	r3, [pc, #184]	; (80072c0 <chassis_feedback_loop+0x1c8>)
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	4618      	mov	r0, r3
 800720a:	f7f9 f955 	bl	80004b8 <__aeabi_f2d>
 800720e:	4604      	mov	r4, r0
 8007210:	460d      	mov	r5, r1
 8007212:	683b      	ldr	r3, [r7, #0]
 8007214:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8007218:	4618      	mov	r0, r3
 800721a:	f7f9 f93b 	bl	8000494 <__aeabi_i2d>
 800721e:	4680      	mov	r8, r0
 8007220:	4689      	mov	r9, r1
 8007222:	683b      	ldr	r3, [r7, #0]
 8007224:	3310      	adds	r3, #16
 8007226:	4618      	mov	r0, r3
 8007228:	ec49 8b11 	vmov	d1, r8, r9
 800722c:	ec45 4b10 	vmov	d0, r4, r5
 8007230:	f7ff fae8 	bl	8006804 <speed_pid>
	speed_pid(fr_speed, motorfr->raw_data.rpm,&motorfr->rpm_pid);
 8007234:	4b23      	ldr	r3, [pc, #140]	; (80072c4 <chassis_feedback_loop+0x1cc>)
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	4618      	mov	r0, r3
 800723a:	f7f9 f93d 	bl	80004b8 <__aeabi_f2d>
 800723e:	4604      	mov	r4, r0
 8007240:	460d      	mov	r5, r1
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8007248:	4618      	mov	r0, r3
 800724a:	f7f9 f923 	bl	8000494 <__aeabi_i2d>
 800724e:	4680      	mov	r8, r0
 8007250:	4689      	mov	r9, r1
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	3310      	adds	r3, #16
 8007256:	4618      	mov	r0, r3
 8007258:	ec49 8b11 	vmov	d1, r8, r9
 800725c:	ec45 4b10 	vmov	d0, r4, r5
 8007260:	f7ff fad0 	bl	8006804 <speed_pid>

	motor_send_can(can_motors, FR_MOTOR_ID, FL_MOTOR_ID, 0, 0); // 0 0  since only 2 motors
 8007264:	2300      	movs	r3, #0
 8007266:	9300      	str	r3, [sp, #0]
 8007268:	2300      	movs	r3, #0
 800726a:	220e      	movs	r2, #14
 800726c:	210d      	movs	r1, #13
 800726e:	4816      	ldr	r0, [pc, #88]	; (80072c8 <chassis_feedback_loop+0x1d0>)
 8007270:	f7ff fb9c 	bl	80069ac <motor_send_can>
}
 8007274:	bf00      	nop
 8007276:	3708      	adds	r7, #8
 8007278:	46bd      	mov	sp, r7
 800727a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800727e:	bf00      	nop
 8007280:	9999999a 	.word	0x9999999a
 8007284:	3fa99999 	.word	0x3fa99999
 8007288:	20001858 	.word	0x20001858
 800728c:	20001830 	.word	0x20001830
 8007290:	200017bc 	.word	0x200017bc
 8007294:	200017b0 	.word	0x200017b0
 8007298:	20001788 	.word	0x20001788
 800729c:	20001714 	.word	0x20001714
 80072a0:	20001f14 	.word	0x20001f14
 80072a4:	20002080 	.word	0x20002080
 80072a8:	20002160 	.word	0x20002160
 80072ac:	46ea6000 	.word	0x46ea6000
 80072b0:	2000207c 	.word	0x2000207c
 80072b4:	200020b8 	.word	0x200020b8
 80072b8:	20002078 	.word	0x20002078
 80072bc:	20002084 	.word	0x20002084
 80072c0:	20002070 	.word	0x20002070
 80072c4:	20002074 	.word	0x20002074
 80072c8:	20000f30 	.word	0x20000f30

080072cc <movement_control_task>:
//static float k4 = 317;
//static float LQRmat[4][4] = {{0,    1.0000,  0,    0}, {-12.2348,  -14.5780,   88.1321,   25.5993}, {0,         0,         0,    1.0000},{ -18.7578,  -22.3503,  150.1450 ,  39.2476}};
//static float Cmat[4] = {1, 0 , 0, 0};


void movement_control_task(void *argument) {
 80072cc:	b580      	push	{r7, lr}
 80072ce:	b084      	sub	sp, #16
 80072d0:	af00      	add	r7, sp, #0
 80072d2:	6078      	str	r0, [r7, #4]
	TickType_t start_time;
	b_angle_pid.kp 			=	B_ANGLE_KP;
 80072d4:	4b2e      	ldr	r3, [pc, #184]	; (8007390 <movement_control_task+0xc4>)
 80072d6:	4a2f      	ldr	r2, [pc, #188]	; (8007394 <movement_control_task+0xc8>)
 80072d8:	601a      	str	r2, [r3, #0]
	b_angle_pid.ki 			=	B_ANGLE_KI;
 80072da:	4b2d      	ldr	r3, [pc, #180]	; (8007390 <movement_control_task+0xc4>)
 80072dc:	4a2e      	ldr	r2, [pc, #184]	; (8007398 <movement_control_task+0xcc>)
 80072de:	605a      	str	r2, [r3, #4]
	b_angle_pid.kd 			= 	B_ANGLE_KD;
 80072e0:	4b2b      	ldr	r3, [pc, #172]	; (8007390 <movement_control_task+0xc4>)
 80072e2:	4a2e      	ldr	r2, [pc, #184]	; (800739c <movement_control_task+0xd0>)
 80072e4:	609a      	str	r2, [r3, #8]
	b_angle_pid.int_max		= 	B_ANGLE_INT_MAX;
 80072e6:	4b2a      	ldr	r3, [pc, #168]	; (8007390 <movement_control_task+0xc4>)
 80072e8:	4a2d      	ldr	r2, [pc, #180]	; (80073a0 <movement_control_task+0xd4>)
 80072ea:	619a      	str	r2, [r3, #24]
	b_angle_pid.max_out		= 	B_ANGLE_MAX_OUT;
 80072ec:	4b28      	ldr	r3, [pc, #160]	; (8007390 <movement_control_task+0xc4>)
 80072ee:	4a2d      	ldr	r2, [pc, #180]	; (80073a4 <movement_control_task+0xd8>)
 80072f0:	61da      	str	r2, [r3, #28]
	b_angle_pid.min_out		=	-B_ANGLE_MAX_OUT;
 80072f2:	4b27      	ldr	r3, [pc, #156]	; (8007390 <movement_control_task+0xc4>)
 80072f4:	4a2c      	ldr	r2, [pc, #176]	; (80073a8 <movement_control_task+0xdc>)
 80072f6:	621a      	str	r2, [r3, #32]
//	b_angle_pid.physical_max=	1000;

	b_accel_pid.kp 			= 	B_ACCEL_KP;
 80072f8:	4b2c      	ldr	r3, [pc, #176]	; (80073ac <movement_control_task+0xe0>)
 80072fa:	4a2d      	ldr	r2, [pc, #180]	; (80073b0 <movement_control_task+0xe4>)
 80072fc:	601a      	str	r2, [r3, #0]
	b_accel_pid.ki 			= 	B_ACCEL_KI;
 80072fe:	4b2b      	ldr	r3, [pc, #172]	; (80073ac <movement_control_task+0xe0>)
 8007300:	4a2c      	ldr	r2, [pc, #176]	; (80073b4 <movement_control_task+0xe8>)
 8007302:	605a      	str	r2, [r3, #4]
	b_accel_pid.kd 			=	B_ACCEL_KD;
 8007304:	4b29      	ldr	r3, [pc, #164]	; (80073ac <movement_control_task+0xe0>)
 8007306:	4a2c      	ldr	r2, [pc, #176]	; (80073b8 <movement_control_task+0xec>)
 8007308:	609a      	str	r2, [r3, #8]
	b_accel_pid.int_max		=	B_ACCEL_INT_MAX;
 800730a:	4b28      	ldr	r3, [pc, #160]	; (80073ac <movement_control_task+0xe0>)
 800730c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8007310:	619a      	str	r2, [r3, #24]
	b_accel_pid.max_out		= 	B_ACCEL_MAX_OUT;
 8007312:	4b26      	ldr	r3, [pc, #152]	; (80073ac <movement_control_task+0xe0>)
 8007314:	4a29      	ldr	r2, [pc, #164]	; (80073bc <movement_control_task+0xf0>)
 8007316:	61da      	str	r2, [r3, #28]
	b_accel_pid.min_out		= 	-B_ACCEL_MAX_OUT;
 8007318:	4b24      	ldr	r3, [pc, #144]	; (80073ac <movement_control_task+0xe0>)
 800731a:	4a29      	ldr	r2, [pc, #164]	; (80073c0 <movement_control_task+0xf4>)
 800731c:	621a      	str	r2, [r3, #32]

	b_orient_pid.kp 			= 	B_ORIENT_KP;
 800731e:	4b29      	ldr	r3, [pc, #164]	; (80073c4 <movement_control_task+0xf8>)
 8007320:	4a25      	ldr	r2, [pc, #148]	; (80073b8 <movement_control_task+0xec>)
 8007322:	601a      	str	r2, [r3, #0]
	b_orient_pid.ki 			= 	B_ORIENT_KI;
 8007324:	4b27      	ldr	r3, [pc, #156]	; (80073c4 <movement_control_task+0xf8>)
 8007326:	f04f 0200 	mov.w	r2, #0
 800732a:	605a      	str	r2, [r3, #4]
	b_orient_pid.kd 			=	B_ORIENT_KD;
 800732c:	4b25      	ldr	r3, [pc, #148]	; (80073c4 <movement_control_task+0xf8>)
 800732e:	4a26      	ldr	r2, [pc, #152]	; (80073c8 <movement_control_task+0xfc>)
 8007330:	609a      	str	r2, [r3, #8]
	b_orient_pid.int_max		=	B_ORIENT_INT_MAX;
 8007332:	4b24      	ldr	r3, [pc, #144]	; (80073c4 <movement_control_task+0xf8>)
 8007334:	4a25      	ldr	r2, [pc, #148]	; (80073cc <movement_control_task+0x100>)
 8007336:	619a      	str	r2, [r3, #24]
	b_orient_pid.max_out		= 	B_ORIENT_MAX_OUT;
 8007338:	4b22      	ldr	r3, [pc, #136]	; (80073c4 <movement_control_task+0xf8>)
 800733a:	4a24      	ldr	r2, [pc, #144]	; (80073cc <movement_control_task+0x100>)
 800733c:	61da      	str	r2, [r3, #28]
	b_orient_pid.min_out		= 	-B_ORIENT_MAX_OUT;
 800733e:	4b21      	ldr	r3, [pc, #132]	; (80073c4 <movement_control_task+0xf8>)
 8007340:	4a23      	ldr	r2, [pc, #140]	; (80073d0 <movement_control_task+0x104>)
 8007342:	621a      	str	r2, [r3, #32]

	while (1) {
		start_time = xTaskGetTickCount();
 8007344:	f00b f97c 	bl	8012640 <xTaskGetTickCount>
 8007348:	4603      	mov	r3, r0
 800734a:	60fb      	str	r3, [r7, #12]

		if (chassis_ctrl_data.enabled) {   // RE_ENABLE!!!!
 800734c:	4b21      	ldr	r3, [pc, #132]	; (80073d4 <movement_control_task+0x108>)
 800734e:	7b1b      	ldrb	r3, [r3, #12]
 8007350:	2b00      	cmp	r3, #0
 8007352:	d006      	beq.n	8007362 <movement_control_task+0x96>
			chassis_motion_control(can_motors + FR_MOTOR_ID - 1, can_motors + FL_MOTOR_ID - 1);
 8007354:	4b20      	ldr	r3, [pc, #128]	; (80073d8 <movement_control_task+0x10c>)
 8007356:	4a21      	ldr	r2, [pc, #132]	; (80073dc <movement_control_task+0x110>)
 8007358:	4611      	mov	r1, r2
 800735a:	4618      	mov	r0, r3
 800735c:	f000 f844 	bl	80073e8 <chassis_motion_control>
 8007360:	e00b      	b.n	800737a <movement_control_task+0xae>
		} else { //kill motors
			can_motors[FR_MOTOR_ID - 1].rpm_pid.output = 0;
 8007362:	4b1f      	ldr	r3, [pc, #124]	; (80073e0 <movement_control_task+0x114>)
 8007364:	f603 0314 	addw	r3, r3, #2068	; 0x814
 8007368:	f04f 0200 	mov.w	r2, #0
 800736c:	601a      	str	r2, [r3, #0]
			can_motors[FL_MOTOR_ID - 1].rpm_pid.output = 0;
 800736e:	4b1c      	ldr	r3, [pc, #112]	; (80073e0 <movement_control_task+0x114>)
 8007370:	f603 03bc 	addw	r3, r3, #2236	; 0x8bc
 8007374:	f04f 0200 	mov.w	r2, #0
 8007378:	601a      	str	r2, [r3, #0]
		}

		//delays task for other tasks to run
		status_led(3, off_led);
 800737a:	2101      	movs	r1, #1
 800737c:	2003      	movs	r0, #3
 800737e:	f7fa fb99 	bl	8001ab4 <status_led>
		vTaskDelayUntil(&start_time, BALANCE_DELAY);
 8007382:	f107 030c 	add.w	r3, r7, #12
 8007386:	210a      	movs	r1, #10
 8007388:	4618      	mov	r0, r3
 800738a:	f00a ff8b 	bl	80122a4 <vTaskDelayUntil>
		start_time = xTaskGetTickCount();
 800738e:	e7d9      	b.n	8007344 <movement_control_task+0x78>
 8007390:	20002084 	.word	0x20002084
 8007394:	44160000 	.word	0x44160000
 8007398:	42700000 	.word	0x42700000
 800739c:	44960000 	.word	0x44960000
 80073a0:	459c4000 	.word	0x459c4000
 80073a4:	461c4000 	.word	0x461c4000
 80073a8:	c61c4000 	.word	0xc61c4000
 80073ac:	200020ec 	.word	0x200020ec
 80073b0:	40400000 	.word	0x40400000
 80073b4:	3e4ccccd 	.word	0x3e4ccccd
 80073b8:	3dcccccd 	.word	0x3dcccccd
 80073bc:	41700000 	.word	0x41700000
 80073c0:	c1700000 	.word	0xc1700000
 80073c4:	200020b8 	.word	0x200020b8
 80073c8:	38d1b717 	.word	0x38d1b717
 80073cc:	447a0000 	.word	0x447a0000
 80073d0:	c47a0000 	.word	0xc47a0000
 80073d4:	20001f14 	.word	0x20001f14
 80073d8:	20001710 	.word	0x20001710
 80073dc:	200017b8 	.word	0x200017b8
 80073e0:	20000f30 	.word	0x20000f30
 80073e4:	00000000 	.word	0x00000000

080073e8 <chassis_motion_control>:
		HAL_CAN_AddTxMessage(&hcan2, &CAN_tx_message, CAN_send_data, &send_mail_box);
	}
}

void chassis_motion_control(motor_data_t *motorfr,
		motor_data_t *motorfl) {
 80073e8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80073ec:	b084      	sub	sp, #16
 80073ee:	af00      	add	r7, sp, #0
 80073f0:	6078      	str	r0, [r7, #4]
 80073f2:	6039      	str	r1, [r7, #0]

	currentangle = imu_heading.pit* 57.2958 - ANGLE_OFFSET;
 80073f4:	4b40      	ldr	r3, [pc, #256]	; (80074f8 <chassis_motion_control+0x110>)
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	4618      	mov	r0, r3
 80073fa:	f7f9 f85d 	bl	80004b8 <__aeabi_f2d>
 80073fe:	a33a      	add	r3, pc, #232	; (adr r3, 80074e8 <chassis_motion_control+0x100>)
 8007400:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007404:	f7f9 f8b0 	bl	8000568 <__aeabi_dmul>
 8007408:	4602      	mov	r2, r0
 800740a:	460b      	mov	r3, r1
 800740c:	4610      	mov	r0, r2
 800740e:	4619      	mov	r1, r3
 8007410:	f04f 0200 	mov.w	r2, #0
 8007414:	4b39      	ldr	r3, [pc, #228]	; (80074fc <chassis_motion_control+0x114>)
 8007416:	f7f8 fef1 	bl	80001fc <__adddf3>
 800741a:	4602      	mov	r2, r0
 800741c:	460b      	mov	r3, r1
 800741e:	4610      	mov	r0, r2
 8007420:	4619      	mov	r1, r3
 8007422:	f7f9 fb99 	bl	8000b58 <__aeabi_d2f>
 8007426:	4603      	mov	r3, r0
 8007428:	4a35      	ldr	r2, [pc, #212]	; (8007500 <chassis_motion_control+0x118>)
 800742a:	6013      	str	r3, [r2, #0]

	if (first_run==1){  //orientation intialise
 800742c:	4b35      	ldr	r3, [pc, #212]	; (8007504 <chassis_motion_control+0x11c>)
 800742e:	f993 3000 	ldrsb.w	r3, [r3]
 8007432:	2b01      	cmp	r3, #1
 8007434:	d115      	bne.n	8007462 <chassis_motion_control+0x7a>
		zero_orient[1] =motorfl->angle_data.ticks;
 8007436:	683b      	ldr	r3, [r7, #0]
 8007438:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800743a:	4a33      	ldr	r2, [pc, #204]	; (8007508 <chassis_motion_control+0x120>)
 800743c:	6053      	str	r3, [r2, #4]
		zero_orient[2] = motorfr->angle_data.ticks;
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007442:	4a31      	ldr	r2, [pc, #196]	; (8007508 <chassis_motion_control+0x120>)
 8007444:	6093      	str	r3, [r2, #8]
		zero_orient[0] = zero_orient[1]-zero_orient[2];
 8007446:	4b30      	ldr	r3, [pc, #192]	; (8007508 <chassis_motion_control+0x120>)
 8007448:	685a      	ldr	r2, [r3, #4]
 800744a:	4b2f      	ldr	r3, [pc, #188]	; (8007508 <chassis_motion_control+0x120>)
 800744c:	689b      	ldr	r3, [r3, #8]
 800744e:	1ad3      	subs	r3, r2, r3
 8007450:	4a2d      	ldr	r2, [pc, #180]	; (8007508 <chassis_motion_control+0x120>)
 8007452:	6013      	str	r3, [r2, #0]
		target_orient = current_orient;
 8007454:	4b2d      	ldr	r3, [pc, #180]	; (800750c <chassis_motion_control+0x124>)
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	4a2d      	ldr	r2, [pc, #180]	; (8007510 <chassis_motion_control+0x128>)
 800745a:	6013      	str	r3, [r2, #0]
		first_run = 0;
 800745c:	4b29      	ldr	r3, [pc, #164]	; (8007504 <chassis_motion_control+0x11c>)
 800745e:	2200      	movs	r2, #0
 8007460:	701a      	strb	r2, [r3, #0]

	}
	last_ticks[1] = -(motorfl->angle_data.ticks-zero_orient[1]);   //orientation calc
 8007462:	4b29      	ldr	r3, [pc, #164]	; (8007508 <chassis_motion_control+0x120>)
 8007464:	685a      	ldr	r2, [r3, #4]
 8007466:	683b      	ldr	r3, [r7, #0]
 8007468:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800746a:	1ad3      	subs	r3, r2, r3
 800746c:	4a29      	ldr	r2, [pc, #164]	; (8007514 <chassis_motion_control+0x12c>)
 800746e:	6053      	str	r3, [r2, #4]
	last_ticks[2] = motorfr->angle_data.ticks-zero_orient[2];
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8007474:	4b24      	ldr	r3, [pc, #144]	; (8007508 <chassis_motion_control+0x120>)
 8007476:	689b      	ldr	r3, [r3, #8]
 8007478:	1ad3      	subs	r3, r2, r3
 800747a:	4a26      	ldr	r2, [pc, #152]	; (8007514 <chassis_motion_control+0x12c>)
 800747c:	6093      	str	r3, [r2, #8]
	current_orient = last_ticks[1] - last_ticks[2];
 800747e:	4b25      	ldr	r3, [pc, #148]	; (8007514 <chassis_motion_control+0x12c>)
 8007480:	685a      	ldr	r2, [r3, #4]
 8007482:	4b24      	ldr	r3, [pc, #144]	; (8007514 <chassis_motion_control+0x12c>)
 8007484:	689b      	ldr	r3, [r3, #8]
 8007486:	1ad3      	subs	r3, r2, r3
 8007488:	4a20      	ldr	r2, [pc, #128]	; (800750c <chassis_motion_control+0x124>)
 800748a:	6013      	str	r3, [r2, #0]

	if (remote_cmd.left_switch == 2){   // if tipped over, manually toggle to standback up
 800748c:	4b22      	ldr	r3, [pc, #136]	; (8007518 <chassis_motion_control+0x130>)
 800748e:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8007492:	2b02      	cmp	r3, #2
 8007494:	d148      	bne.n	8007528 <chassis_motion_control+0x140>
//		if (first_rebalance == 1){
//		b_angle_pid.integral*=0;
//		first_rebalance = 0;
//		}
		b_angle_pid.kp 			=	B_ANGLE_KP*0.5;
 8007496:	4b21      	ldr	r3, [pc, #132]	; (800751c <chassis_motion_control+0x134>)
 8007498:	4a21      	ldr	r2, [pc, #132]	; (8007520 <chassis_motion_control+0x138>)
 800749a:	601a      	str	r2, [r3, #0]
		b_angle_pid.kd 			=	B_ANGLE_KD *2;
 800749c:	4b1f      	ldr	r3, [pc, #124]	; (800751c <chassis_motion_control+0x134>)
 800749e:	4a21      	ldr	r2, [pc, #132]	; (8007524 <chassis_motion_control+0x13c>)
 80074a0:	609a      	str	r2, [r3, #8]
		speed_pid(0, imu_heading.pit* 57.2958 - ANGLE_OFFSET, &b_angle_pid);
 80074a2:	4b15      	ldr	r3, [pc, #84]	; (80074f8 <chassis_motion_control+0x110>)
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	4618      	mov	r0, r3
 80074a8:	f7f9 f806 	bl	80004b8 <__aeabi_f2d>
 80074ac:	a30e      	add	r3, pc, #56	; (adr r3, 80074e8 <chassis_motion_control+0x100>)
 80074ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074b2:	f7f9 f859 	bl	8000568 <__aeabi_dmul>
 80074b6:	4602      	mov	r2, r0
 80074b8:	460b      	mov	r3, r1
 80074ba:	4610      	mov	r0, r2
 80074bc:	4619      	mov	r1, r3
 80074be:	f04f 0200 	mov.w	r2, #0
 80074c2:	4b0e      	ldr	r3, [pc, #56]	; (80074fc <chassis_motion_control+0x114>)
 80074c4:	f7f8 fe9a 	bl	80001fc <__adddf3>
 80074c8:	4602      	mov	r2, r0
 80074ca:	460b      	mov	r3, r1
 80074cc:	ec43 2b17 	vmov	d7, r2, r3
 80074d0:	4812      	ldr	r0, [pc, #72]	; (800751c <chassis_motion_control+0x134>)
 80074d2:	eeb0 1a47 	vmov.f32	s2, s14
 80074d6:	eef0 1a67 	vmov.f32	s3, s15
 80074da:	ed9f 0b05 	vldr	d0, [pc, #20]	; 80074f0 <chassis_motion_control+0x108>
 80074de:	f7ff f991 	bl	8006804 <speed_pid>



	}

}
 80074e2:	e20a      	b.n	80078fa <chassis_motion_control+0x512>
 80074e4:	f3af 8000 	nop.w
 80074e8:	c63f1412 	.word	0xc63f1412
 80074ec:	404ca5dc 	.word	0x404ca5dc
	...
 80074f8:	2000202c 	.word	0x2000202c
 80074fc:	40140000 	.word	0x40140000
 8007500:	20002150 	.word	0x20002150
 8007504:	2000000c 	.word	0x2000000c
 8007508:	20002154 	.word	0x20002154
 800750c:	20002160 	.word	0x20002160
 8007510:	2000207c 	.word	0x2000207c
 8007514:	20002164 	.word	0x20002164
 8007518:	20001ef0 	.word	0x20001ef0
 800751c:	20002084 	.word	0x20002084
 8007520:	43960000 	.word	0x43960000
 8007524:	45160000 	.word	0x45160000
		target_speed = chassis_ctrl_data.forward * MAX_SPEED;
 8007528:	4ba5      	ldr	r3, [pc, #660]	; (80077c0 <chassis_motion_control+0x3d8>)
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	4aa5      	ldr	r2, [pc, #660]	; (80077c4 <chassis_motion_control+0x3dc>)
 800752e:	6013      	str	r3, [r2, #0]
		avg_wheel_speed = (motorfr->raw_data.rpm - motorfl->raw_data.rpm)/38.4   //motors running in opposite directions, so (L+(-R))/2 / gear ratio 19.2
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8007536:	461a      	mov	r2, r3
 8007538:	683b      	ldr	r3, [r7, #0]
 800753a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800753e:	1ad3      	subs	r3, r2, r3
 8007540:	4618      	mov	r0, r3
 8007542:	f7f8 ffa7 	bl	8000494 <__aeabi_i2d>
 8007546:	a394      	add	r3, pc, #592	; (adr r3, 8007798 <chassis_motion_control+0x3b0>)
 8007548:	e9d3 2300 	ldrd	r2, r3, [r3]
 800754c:	f7f9 f936 	bl	80007bc <__aeabi_ddiv>
 8007550:	4602      	mov	r2, r0
 8007552:	460b      	mov	r3, r1
 8007554:	4610      	mov	r0, r2
 8007556:	4619      	mov	r1, r3
											* WHEEL_CIRC/100 *1/60;		//rpm * wheel circ in cm /100 * 1/60  = m/s
 8007558:	f04f 0200 	mov.w	r2, #0
 800755c:	4b9a      	ldr	r3, [pc, #616]	; (80077c8 <chassis_motion_control+0x3e0>)
 800755e:	f7f9 f803 	bl	8000568 <__aeabi_dmul>
 8007562:	4602      	mov	r2, r0
 8007564:	460b      	mov	r3, r1
 8007566:	4610      	mov	r0, r2
 8007568:	4619      	mov	r1, r3
 800756a:	f04f 0200 	mov.w	r2, #0
 800756e:	4b97      	ldr	r3, [pc, #604]	; (80077cc <chassis_motion_control+0x3e4>)
 8007570:	f7f9 f924 	bl	80007bc <__aeabi_ddiv>
 8007574:	4602      	mov	r2, r0
 8007576:	460b      	mov	r3, r1
 8007578:	4610      	mov	r0, r2
 800757a:	4619      	mov	r1, r3
 800757c:	f04f 0200 	mov.w	r2, #0
 8007580:	4b93      	ldr	r3, [pc, #588]	; (80077d0 <chassis_motion_control+0x3e8>)
 8007582:	f7f9 f91b 	bl	80007bc <__aeabi_ddiv>
 8007586:	4602      	mov	r2, r0
 8007588:	460b      	mov	r3, r1
 800758a:	4610      	mov	r0, r2
 800758c:	4619      	mov	r1, r3
 800758e:	f7f9 fae3 	bl	8000b58 <__aeabi_d2f>
 8007592:	4603      	mov	r3, r0
		avg_wheel_speed = (motorfr->raw_data.rpm - motorfl->raw_data.rpm)/38.4   //motors running in opposite directions, so (L+(-R))/2 / gear ratio 19.2
 8007594:	4a8f      	ldr	r2, [pc, #572]	; (80077d4 <chassis_motion_control+0x3ec>)
 8007596:	6013      	str	r3, [r2, #0]
		last_angle_time[0] = HAL_GetTick(); //ms
 8007598:	f000 fa62 	bl	8007a60 <HAL_GetTick>
 800759c:	4603      	mov	r3, r0
 800759e:	4a8e      	ldr	r2, [pc, #568]	; (80077d8 <chassis_motion_control+0x3f0>)
 80075a0:	6013      	str	r3, [r2, #0]
		last_angles[0] = imu_heading.pit;
 80075a2:	4b8e      	ldr	r3, [pc, #568]	; (80077dc <chassis_motion_control+0x3f4>)
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	4a8e      	ldr	r2, [pc, #568]	; (80077e0 <chassis_motion_control+0x3f8>)
 80075a8:	6013      	str	r3, [r2, #0]
		float dt = ((float) (last_angle_time[0] - last_angle_time[1]) / 1000.0f);
 80075aa:	4b8b      	ldr	r3, [pc, #556]	; (80077d8 <chassis_motion_control+0x3f0>)
 80075ac:	681a      	ldr	r2, [r3, #0]
 80075ae:	4b8a      	ldr	r3, [pc, #552]	; (80077d8 <chassis_motion_control+0x3f0>)
 80075b0:	685b      	ldr	r3, [r3, #4]
 80075b2:	1ad3      	subs	r3, r2, r3
 80075b4:	ee07 3a90 	vmov	s15, r3
 80075b8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80075bc:	eddf 6a89 	vldr	s13, [pc, #548]	; 80077e4 <chassis_motion_control+0x3fc>
 80075c0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80075c4:	edc7 7a03 	vstr	s15, [r7, #12]
		angular_vel = (last_angles[0] - last_angles[1]) / dt;
 80075c8:	4b85      	ldr	r3, [pc, #532]	; (80077e0 <chassis_motion_control+0x3f8>)
 80075ca:	ed93 7a00 	vldr	s14, [r3]
 80075ce:	4b84      	ldr	r3, [pc, #528]	; (80077e0 <chassis_motion_control+0x3f8>)
 80075d0:	edd3 7a01 	vldr	s15, [r3, #4]
 80075d4:	ee77 6a67 	vsub.f32	s13, s14, s15
 80075d8:	ed97 7a03 	vldr	s14, [r7, #12]
 80075dc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80075e0:	4b81      	ldr	r3, [pc, #516]	; (80077e8 <chassis_motion_control+0x400>)
 80075e2:	edc3 7a00 	vstr	s15, [r3]
		velocity = avg_wheel_speed - CG_radius * angular_vel * cos(last_angles[0]);   // v = wheel vel - r* w* cos( theta )
 80075e6:	4b7b      	ldr	r3, [pc, #492]	; (80077d4 <chassis_motion_control+0x3ec>)
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	4618      	mov	r0, r3
 80075ec:	f7f8 ff64 	bl	80004b8 <__aeabi_f2d>
 80075f0:	4604      	mov	r4, r0
 80075f2:	460d      	mov	r5, r1
 80075f4:	4b7c      	ldr	r3, [pc, #496]	; (80077e8 <chassis_motion_control+0x400>)
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	4618      	mov	r0, r3
 80075fa:	f7f8 ff5d 	bl	80004b8 <__aeabi_f2d>
 80075fe:	a368      	add	r3, pc, #416	; (adr r3, 80077a0 <chassis_motion_control+0x3b8>)
 8007600:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007604:	f7f8 ffb0 	bl	8000568 <__aeabi_dmul>
 8007608:	4602      	mov	r2, r0
 800760a:	460b      	mov	r3, r1
 800760c:	4690      	mov	r8, r2
 800760e:	4699      	mov	r9, r3
 8007610:	4b73      	ldr	r3, [pc, #460]	; (80077e0 <chassis_motion_control+0x3f8>)
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	4618      	mov	r0, r3
 8007616:	f7f8 ff4f 	bl	80004b8 <__aeabi_f2d>
 800761a:	4602      	mov	r2, r0
 800761c:	460b      	mov	r3, r1
 800761e:	ec43 2b10 	vmov	d0, r2, r3
 8007622:	f00d fbed 	bl	8014e00 <cos>
 8007626:	ec53 2b10 	vmov	r2, r3, d0
 800762a:	4640      	mov	r0, r8
 800762c:	4649      	mov	r1, r9
 800762e:	f7f8 ff9b 	bl	8000568 <__aeabi_dmul>
 8007632:	4602      	mov	r2, r0
 8007634:	460b      	mov	r3, r1
 8007636:	4620      	mov	r0, r4
 8007638:	4629      	mov	r1, r5
 800763a:	f7f8 fddd 	bl	80001f8 <__aeabi_dsub>
 800763e:	4602      	mov	r2, r0
 8007640:	460b      	mov	r3, r1
 8007642:	4610      	mov	r0, r2
 8007644:	4619      	mov	r1, r3
 8007646:	f7f9 fa87 	bl	8000b58 <__aeabi_d2f>
 800764a:	4603      	mov	r3, r0
 800764c:	4a67      	ldr	r2, [pc, #412]	; (80077ec <chassis_motion_control+0x404>)
 800764e:	6013      	str	r3, [r2, #0]
		last_vel[0] = velocity;
 8007650:	4b66      	ldr	r3, [pc, #408]	; (80077ec <chassis_motion_control+0x404>)
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	4a66      	ldr	r2, [pc, #408]	; (80077f0 <chassis_motion_control+0x408>)
 8007656:	6013      	str	r3, [r2, #0]
		accel = ((float) (last_vel[0] - last_vel[1]) / 1000.0f);
 8007658:	4b65      	ldr	r3, [pc, #404]	; (80077f0 <chassis_motion_control+0x408>)
 800765a:	ed93 7a00 	vldr	s14, [r3]
 800765e:	4b64      	ldr	r3, [pc, #400]	; (80077f0 <chassis_motion_control+0x408>)
 8007660:	edd3 7a01 	vldr	s15, [r3, #4]
 8007664:	ee37 7a67 	vsub.f32	s14, s14, s15
 8007668:	eddf 6a5e 	vldr	s13, [pc, #376]	; 80077e4 <chassis_motion_control+0x3fc>
 800766c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007670:	4b60      	ldr	r3, [pc, #384]	; (80077f4 <chassis_motion_control+0x40c>)
 8007672:	edc3 7a00 	vstr	s15, [r3]
		last_angles[1] = last_angles[0];
 8007676:	4b5a      	ldr	r3, [pc, #360]	; (80077e0 <chassis_motion_control+0x3f8>)
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	4a59      	ldr	r2, [pc, #356]	; (80077e0 <chassis_motion_control+0x3f8>)
 800767c:	6053      	str	r3, [r2, #4]
		last_vel[1] = last_vel[0];
 800767e:	4b5c      	ldr	r3, [pc, #368]	; (80077f0 <chassis_motion_control+0x408>)
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	4a5b      	ldr	r2, [pc, #364]	; (80077f0 <chassis_motion_control+0x408>)
 8007684:	6053      	str	r3, [r2, #4]
		last_angle_time[1] = last_angle_time[0];
 8007686:	4b54      	ldr	r3, [pc, #336]	; (80077d8 <chassis_motion_control+0x3f0>)
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	4a53      	ldr	r2, [pc, #332]	; (80077d8 <chassis_motion_control+0x3f0>)
 800768c:	6053      	str	r3, [r2, #4]
		if (remote_cmd.left_switch == 1){  //left switch up for Cascade PID control
 800768e:	4b5a      	ldr	r3, [pc, #360]	; (80077f8 <chassis_motion_control+0x410>)
 8007690:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8007694:	2b01      	cmp	r3, #1
 8007696:	f040 80c3 	bne.w	8007820 <chassis_motion_control+0x438>
			b_angle_pid.kp 			=	B_ANGLE_KP;  //reset
 800769a:	4b58      	ldr	r3, [pc, #352]	; (80077fc <chassis_motion_control+0x414>)
 800769c:	4a58      	ldr	r2, [pc, #352]	; (8007800 <chassis_motion_control+0x418>)
 800769e:	601a      	str	r2, [r3, #0]
			b_angle_pid.ki 			=	B_ANGLE_KI;  //reset
 80076a0:	4b56      	ldr	r3, [pc, #344]	; (80077fc <chassis_motion_control+0x414>)
 80076a2:	4a58      	ldr	r2, [pc, #352]	; (8007804 <chassis_motion_control+0x41c>)
 80076a4:	605a      	str	r2, [r3, #4]
			b_angle_pid.kd 			=	B_ANGLE_KD;
 80076a6:	4b55      	ldr	r3, [pc, #340]	; (80077fc <chassis_motion_control+0x414>)
 80076a8:	4a57      	ldr	r2, [pc, #348]	; (8007808 <chassis_motion_control+0x420>)
 80076aa:	609a      	str	r2, [r3, #8]
			b_accel_pid.max_out		= 	B_ACCEL_MAX_OUT;
 80076ac:	4b57      	ldr	r3, [pc, #348]	; (800780c <chassis_motion_control+0x424>)
 80076ae:	4a58      	ldr	r2, [pc, #352]	; (8007810 <chassis_motion_control+0x428>)
 80076b0:	61da      	str	r2, [r3, #28]
			b_accel_pid.kp 			= 	B_ACCEL_KP;
 80076b2:	4b56      	ldr	r3, [pc, #344]	; (800780c <chassis_motion_control+0x424>)
 80076b4:	4a57      	ldr	r2, [pc, #348]	; (8007814 <chassis_motion_control+0x42c>)
 80076b6:	601a      	str	r2, [r3, #0]
			if (counter == 10){
 80076b8:	4b57      	ldr	r3, [pc, #348]	; (8007818 <chassis_motion_control+0x430>)
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	2b0a      	cmp	r3, #10
 80076be:	d13c      	bne.n	800773a <chassis_motion_control+0x352>
				if (fabs(chassis_ctrl_data.forward) <0.05){  //decay integral faster to stop if minimal fwd input
 80076c0:	4b3f      	ldr	r3, [pc, #252]	; (80077c0 <chassis_motion_control+0x3d8>)
 80076c2:	edd3 7a00 	vldr	s15, [r3]
 80076c6:	eef0 7ae7 	vabs.f32	s15, s15
 80076ca:	ee17 0a90 	vmov	r0, s15
 80076ce:	f7f8 fef3 	bl	80004b8 <__aeabi_f2d>
 80076d2:	a335      	add	r3, pc, #212	; (adr r3, 80077a8 <chassis_motion_control+0x3c0>)
 80076d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076d8:	f7f9 f9b8 	bl	8000a4c <__aeabi_dcmplt>
 80076dc:	4603      	mov	r3, r0
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d012      	beq.n	8007708 <chassis_motion_control+0x320>
						b_accel_pid.integral*=0.8;
 80076e2:	4b4a      	ldr	r3, [pc, #296]	; (800780c <chassis_motion_control+0x424>)
 80076e4:	695b      	ldr	r3, [r3, #20]
 80076e6:	4618      	mov	r0, r3
 80076e8:	f7f8 fee6 	bl	80004b8 <__aeabi_f2d>
 80076ec:	a330      	add	r3, pc, #192	; (adr r3, 80077b0 <chassis_motion_control+0x3c8>)
 80076ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076f2:	f7f8 ff39 	bl	8000568 <__aeabi_dmul>
 80076f6:	4602      	mov	r2, r0
 80076f8:	460b      	mov	r3, r1
 80076fa:	4610      	mov	r0, r2
 80076fc:	4619      	mov	r1, r3
 80076fe:	f7f9 fa2b 	bl	8000b58 <__aeabi_d2f>
 8007702:	4603      	mov	r3, r0
 8007704:	4a41      	ldr	r2, [pc, #260]	; (800780c <chassis_motion_control+0x424>)
 8007706:	6153      	str	r3, [r2, #20]
				speed_pid(target_speed, velocity, &b_accel_pid); //velocity PID calc
 8007708:	4b2e      	ldr	r3, [pc, #184]	; (80077c4 <chassis_motion_control+0x3dc>)
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	4618      	mov	r0, r3
 800770e:	f7f8 fed3 	bl	80004b8 <__aeabi_f2d>
 8007712:	4604      	mov	r4, r0
 8007714:	460d      	mov	r5, r1
 8007716:	4b35      	ldr	r3, [pc, #212]	; (80077ec <chassis_motion_control+0x404>)
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	4618      	mov	r0, r3
 800771c:	f7f8 fecc 	bl	80004b8 <__aeabi_f2d>
 8007720:	4602      	mov	r2, r0
 8007722:	460b      	mov	r3, r1
 8007724:	4839      	ldr	r0, [pc, #228]	; (800780c <chassis_motion_control+0x424>)
 8007726:	ec43 2b11 	vmov	d1, r2, r3
 800772a:	ec45 4b10 	vmov	d0, r4, r5
 800772e:	f7ff f869 	bl	8006804 <speed_pid>
				counter = 0;
 8007732:	4b39      	ldr	r3, [pc, #228]	; (8007818 <chassis_motion_control+0x430>)
 8007734:	2200      	movs	r2, #0
 8007736:	601a      	str	r2, [r3, #0]
 8007738:	e004      	b.n	8007744 <chassis_motion_control+0x35c>
				counter+=1;
 800773a:	4b37      	ldr	r3, [pc, #220]	; (8007818 <chassis_motion_control+0x430>)
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	3301      	adds	r3, #1
 8007740:	4a35      	ldr	r2, [pc, #212]	; (8007818 <chassis_motion_control+0x430>)
 8007742:	6013      	str	r3, [r2, #0]
			speed_pid(b_accel_pid.output, imu_heading.pit* 57.2958 - ANGLE_OFFSET, &b_angle_pid); //angle PID calc
 8007744:	4b31      	ldr	r3, [pc, #196]	; (800780c <chassis_motion_control+0x424>)
 8007746:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007748:	4618      	mov	r0, r3
 800774a:	f7f8 feb5 	bl	80004b8 <__aeabi_f2d>
 800774e:	4604      	mov	r4, r0
 8007750:	460d      	mov	r5, r1
 8007752:	4b22      	ldr	r3, [pc, #136]	; (80077dc <chassis_motion_control+0x3f4>)
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	4618      	mov	r0, r3
 8007758:	f7f8 feae 	bl	80004b8 <__aeabi_f2d>
 800775c:	a316      	add	r3, pc, #88	; (adr r3, 80077b8 <chassis_motion_control+0x3d0>)
 800775e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007762:	f7f8 ff01 	bl	8000568 <__aeabi_dmul>
 8007766:	4602      	mov	r2, r0
 8007768:	460b      	mov	r3, r1
 800776a:	4610      	mov	r0, r2
 800776c:	4619      	mov	r1, r3
 800776e:	f04f 0200 	mov.w	r2, #0
 8007772:	4b2a      	ldr	r3, [pc, #168]	; (800781c <chassis_motion_control+0x434>)
 8007774:	f7f8 fd42 	bl	80001fc <__adddf3>
 8007778:	4602      	mov	r2, r0
 800777a:	460b      	mov	r3, r1
 800777c:	ec43 2b17 	vmov	d7, r2, r3
 8007780:	481e      	ldr	r0, [pc, #120]	; (80077fc <chassis_motion_control+0x414>)
 8007782:	eeb0 1a47 	vmov.f32	s2, s14
 8007786:	eef0 1a67 	vmov.f32	s3, s15
 800778a:	ec45 4b10 	vmov	d0, r4, r5
 800778e:	f7ff f839 	bl	8006804 <speed_pid>
}
 8007792:	e0b2      	b.n	80078fa <chassis_motion_control+0x512>
 8007794:	f3af 8000 	nop.w
 8007798:	33333333 	.word	0x33333333
 800779c:	40433333 	.word	0x40433333
 80077a0:	4dd2f1aa 	.word	0x4dd2f1aa
 80077a4:	3fa81062 	.word	0x3fa81062
 80077a8:	9999999a 	.word	0x9999999a
 80077ac:	3fa99999 	.word	0x3fa99999
 80077b0:	9999999a 	.word	0x9999999a
 80077b4:	3fe99999 	.word	0x3fe99999
 80077b8:	c63f1412 	.word	0xc63f1412
 80077bc:	404ca5dc 	.word	0x404ca5dc
 80077c0:	20001f14 	.word	0x20001f14
 80077c4:	20002120 	.word	0x20002120
 80077c8:	403e0000 	.word	0x403e0000
 80077cc:	40590000 	.word	0x40590000
 80077d0:	404e0000 	.word	0x404e0000
 80077d4:	20002124 	.word	0x20002124
 80077d8:	20002144 	.word	0x20002144
 80077dc:	2000202c 	.word	0x2000202c
 80077e0:	20002134 	.word	0x20002134
 80077e4:	447a0000 	.word	0x447a0000
 80077e8:	20002128 	.word	0x20002128
 80077ec:	2000212c 	.word	0x2000212c
 80077f0:	2000213c 	.word	0x2000213c
 80077f4:	20002130 	.word	0x20002130
 80077f8:	20001ef0 	.word	0x20001ef0
 80077fc:	20002084 	.word	0x20002084
 8007800:	44160000 	.word	0x44160000
 8007804:	42700000 	.word	0x42700000
 8007808:	44960000 	.word	0x44960000
 800780c:	200020ec 	.word	0x200020ec
 8007810:	41700000 	.word	0x41700000
 8007814:	40400000 	.word	0x40400000
 8007818:	2000214c 	.word	0x2000214c
 800781c:	40140000 	.word	0x40140000
		else if (remote_cmd.left_switch == 3){   //left switch middle  for State Space control
 8007820:	4b3b      	ldr	r3, [pc, #236]	; (8007910 <chassis_motion_control+0x528>)
 8007822:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8007826:	2b03      	cmp	r3, #3
 8007828:	d167      	bne.n	80078fa <chassis_motion_control+0x512>
			b_angle_pid.output = - (currentangle * k1 + angular_vel * k2 + (velocity-target_speed*0.8 )* k3 + accel * k4);
 800782a:	4b3a      	ldr	r3, [pc, #232]	; (8007914 <chassis_motion_control+0x52c>)
 800782c:	ed93 7a00 	vldr	s14, [r3]
 8007830:	4b39      	ldr	r3, [pc, #228]	; (8007918 <chassis_motion_control+0x530>)
 8007832:	edd3 7a00 	vldr	s15, [r3]
 8007836:	ee27 7a27 	vmul.f32	s14, s14, s15
 800783a:	4b38      	ldr	r3, [pc, #224]	; (800791c <chassis_motion_control+0x534>)
 800783c:	edd3 6a00 	vldr	s13, [r3]
 8007840:	4b37      	ldr	r3, [pc, #220]	; (8007920 <chassis_motion_control+0x538>)
 8007842:	edd3 7a00 	vldr	s15, [r3]
 8007846:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800784a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800784e:	ee17 0a90 	vmov	r0, s15
 8007852:	f7f8 fe31 	bl	80004b8 <__aeabi_f2d>
 8007856:	4604      	mov	r4, r0
 8007858:	460d      	mov	r5, r1
 800785a:	4b32      	ldr	r3, [pc, #200]	; (8007924 <chassis_motion_control+0x53c>)
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	4618      	mov	r0, r3
 8007860:	f7f8 fe2a 	bl	80004b8 <__aeabi_f2d>
 8007864:	4680      	mov	r8, r0
 8007866:	4689      	mov	r9, r1
 8007868:	4b2f      	ldr	r3, [pc, #188]	; (8007928 <chassis_motion_control+0x540>)
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	4618      	mov	r0, r3
 800786e:	f7f8 fe23 	bl	80004b8 <__aeabi_f2d>
 8007872:	a325      	add	r3, pc, #148	; (adr r3, 8007908 <chassis_motion_control+0x520>)
 8007874:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007878:	f7f8 fe76 	bl	8000568 <__aeabi_dmul>
 800787c:	4602      	mov	r2, r0
 800787e:	460b      	mov	r3, r1
 8007880:	4640      	mov	r0, r8
 8007882:	4649      	mov	r1, r9
 8007884:	f7f8 fcb8 	bl	80001f8 <__aeabi_dsub>
 8007888:	4602      	mov	r2, r0
 800788a:	460b      	mov	r3, r1
 800788c:	4690      	mov	r8, r2
 800788e:	4699      	mov	r9, r3
 8007890:	4b26      	ldr	r3, [pc, #152]	; (800792c <chassis_motion_control+0x544>)
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	4618      	mov	r0, r3
 8007896:	f7f8 fe0f 	bl	80004b8 <__aeabi_f2d>
 800789a:	4602      	mov	r2, r0
 800789c:	460b      	mov	r3, r1
 800789e:	4640      	mov	r0, r8
 80078a0:	4649      	mov	r1, r9
 80078a2:	f7f8 fe61 	bl	8000568 <__aeabi_dmul>
 80078a6:	4602      	mov	r2, r0
 80078a8:	460b      	mov	r3, r1
 80078aa:	4620      	mov	r0, r4
 80078ac:	4629      	mov	r1, r5
 80078ae:	f7f8 fca5 	bl	80001fc <__adddf3>
 80078b2:	4602      	mov	r2, r0
 80078b4:	460b      	mov	r3, r1
 80078b6:	4614      	mov	r4, r2
 80078b8:	461d      	mov	r5, r3
 80078ba:	4b1d      	ldr	r3, [pc, #116]	; (8007930 <chassis_motion_control+0x548>)
 80078bc:	ed93 7a00 	vldr	s14, [r3]
 80078c0:	4b1c      	ldr	r3, [pc, #112]	; (8007934 <chassis_motion_control+0x54c>)
 80078c2:	edd3 7a00 	vldr	s15, [r3]
 80078c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80078ca:	ee17 0a90 	vmov	r0, s15
 80078ce:	f7f8 fdf3 	bl	80004b8 <__aeabi_f2d>
 80078d2:	4602      	mov	r2, r0
 80078d4:	460b      	mov	r3, r1
 80078d6:	4620      	mov	r0, r4
 80078d8:	4629      	mov	r1, r5
 80078da:	f7f8 fc8f 	bl	80001fc <__adddf3>
 80078de:	4602      	mov	r2, r0
 80078e0:	460b      	mov	r3, r1
 80078e2:	4610      	mov	r0, r2
 80078e4:	4619      	mov	r1, r3
 80078e6:	f7f9 f937 	bl	8000b58 <__aeabi_d2f>
 80078ea:	4603      	mov	r3, r0
 80078ec:	ee07 3a90 	vmov	s15, r3
 80078f0:	eef1 7a67 	vneg.f32	s15, s15
 80078f4:	4b10      	ldr	r3, [pc, #64]	; (8007938 <chassis_motion_control+0x550>)
 80078f6:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
}
 80078fa:	bf00      	nop
 80078fc:	3710      	adds	r7, #16
 80078fe:	46bd      	mov	sp, r7
 8007900:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8007904:	f3af 8000 	nop.w
 8007908:	9999999a 	.word	0x9999999a
 800790c:	3fe99999 	.word	0x3fe99999
 8007910:	20001ef0 	.word	0x20001ef0
 8007914:	20002150 	.word	0x20002150
 8007918:	20000010 	.word	0x20000010
 800791c:	20002128 	.word	0x20002128
 8007920:	20000014 	.word	0x20000014
 8007924:	2000212c 	.word	0x2000212c
 8007928:	20002120 	.word	0x20002120
 800792c:	20000018 	.word	0x20000018
 8007930:	20002130 	.word	0x20002130
 8007934:	2000001c 	.word	0x2000001c
 8007938:	20002084 	.word	0x20002084

0800793c <startup_task>:
extern remote_cmd_t remote_cmd;
extern float pitch;
extern float yaw;
uint16_t error = 0b111111111;

void startup_task() {
 800793c:	b580      	push	{r7, lr}
 800793e:	af00      	add	r7, sp, #0
	led_on();
 8007940:	f7fa f892 	bl	8001a68 <led_on>
	buzzer_init();
 8007944:	f7f9 fb3e 	bl	8000fc4 <buzzer_init>
	imu_config();
 8007948:	f7f9 fe9a 	bl	8001680 <imu_config>
	HAL_Delay(STARTUP_DELAY);
 800794c:	2064      	movs	r0, #100	; 0x64
 800794e:	f000 f893 	bl	8007a78 <HAL_Delay>
	led_green_off();
 8007952:	f7fa f87d 	bl	8001a50 <led_green_off>
	start_micros_timer();
 8007956:	f7fa f92b 	bl	8001bb0 <start_micros_timer>
	//motor online check, code does not continue if any fails
	ok_buzzer(1, 1);
 800795a:	2101      	movs	r1, #1
 800795c:	2001      	movs	r0, #1
 800795e:	f000 f804 	bl	800796a <ok_buzzer>
	led_toggle();
 8007962:	f7fa f895 	bl	8001a90 <led_toggle>

}
 8007966:	bf00      	nop
 8007968:	bd80      	pop	{r7, pc}

0800796a <ok_buzzer>:
		HAL_Delay(BUZZER_DELAY);
	}
	HAL_Delay(BUZZER_DELAY * 2);
}

void ok_buzzer(uint8_t high, uint8_t low) {
 800796a:	b580      	push	{r7, lr}
 800796c:	b084      	sub	sp, #16
 800796e:	af00      	add	r7, sp, #0
 8007970:	4603      	mov	r3, r0
 8007972:	460a      	mov	r2, r1
 8007974:	71fb      	strb	r3, [r7, #7]
 8007976:	4613      	mov	r3, r2
 8007978:	71bb      	strb	r3, [r7, #6]
	for (int8_t i = 0; i < high; i++) {
 800797a:	2300      	movs	r3, #0
 800797c:	73fb      	strb	r3, [r7, #15]
 800797e:	e012      	b.n	80079a6 <ok_buzzer+0x3c>
		//PWM
		buzzer(HIGH_FREQ);
 8007980:	f44f 705c 	mov.w	r0, #880	; 0x370
 8007984:	f7f9 fafc 	bl	8000f80 <buzzer>
		HAL_Delay(BUZZER_DELAY);
 8007988:	2046      	movs	r0, #70	; 0x46
 800798a:	f000 f875 	bl	8007a78 <HAL_Delay>
		buzzer(0);
 800798e:	2000      	movs	r0, #0
 8007990:	f7f9 faf6 	bl	8000f80 <buzzer>
		HAL_Delay(BUZZER_DELAY);
 8007994:	2046      	movs	r0, #70	; 0x46
 8007996:	f000 f86f 	bl	8007a78 <HAL_Delay>
	for (int8_t i = 0; i < high; i++) {
 800799a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800799e:	b2db      	uxtb	r3, r3
 80079a0:	3301      	adds	r3, #1
 80079a2:	b2db      	uxtb	r3, r3
 80079a4:	73fb      	strb	r3, [r7, #15]
 80079a6:	f997 200f 	ldrsb.w	r2, [r7, #15]
 80079aa:	79fb      	ldrb	r3, [r7, #7]
 80079ac:	429a      	cmp	r2, r3
 80079ae:	dbe7      	blt.n	8007980 <ok_buzzer+0x16>
	}
	for (int8_t i = 0; i < low; i++) {
 80079b0:	2300      	movs	r3, #0
 80079b2:	73bb      	strb	r3, [r7, #14]
 80079b4:	e012      	b.n	80079dc <ok_buzzer+0x72>
		buzzer(LOW_FREQ);
 80079b6:	f44f 70dc 	mov.w	r0, #440	; 0x1b8
 80079ba:	f7f9 fae1 	bl	8000f80 <buzzer>
		HAL_Delay(BUZZER_DELAY);
 80079be:	2046      	movs	r0, #70	; 0x46
 80079c0:	f000 f85a 	bl	8007a78 <HAL_Delay>
		buzzer(0);
 80079c4:	2000      	movs	r0, #0
 80079c6:	f7f9 fadb 	bl	8000f80 <buzzer>
		HAL_Delay(BUZZER_DELAY);
 80079ca:	2046      	movs	r0, #70	; 0x46
 80079cc:	f000 f854 	bl	8007a78 <HAL_Delay>
	for (int8_t i = 0; i < low; i++) {
 80079d0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80079d4:	b2db      	uxtb	r3, r3
 80079d6:	3301      	adds	r3, #1
 80079d8:	b2db      	uxtb	r3, r3
 80079da:	73bb      	strb	r3, [r7, #14]
 80079dc:	f997 200e 	ldrsb.w	r2, [r7, #14]
 80079e0:	79bb      	ldrb	r3, [r7, #6]
 80079e2:	429a      	cmp	r2, r3
 80079e4:	dbe7      	blt.n	80079b6 <ok_buzzer+0x4c>
	}
	HAL_Delay(BUZZER_DELAY * 2);
 80079e6:	208c      	movs	r0, #140	; 0x8c
 80079e8:	f000 f846 	bl	8007a78 <HAL_Delay>
}
 80079ec:	bf00      	nop
 80079ee:	3710      	adds	r7, #16
 80079f0:	46bd      	mov	sp, r7
 80079f2:	bd80      	pop	{r7, pc}

080079f4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80079f4:	b580      	push	{r7, lr}
 80079f6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80079f8:	4b0e      	ldr	r3, [pc, #56]	; (8007a34 <HAL_Init+0x40>)
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	4a0d      	ldr	r2, [pc, #52]	; (8007a34 <HAL_Init+0x40>)
 80079fe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007a02:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8007a04:	4b0b      	ldr	r3, [pc, #44]	; (8007a34 <HAL_Init+0x40>)
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	4a0a      	ldr	r2, [pc, #40]	; (8007a34 <HAL_Init+0x40>)
 8007a0a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007a0e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8007a10:	4b08      	ldr	r3, [pc, #32]	; (8007a34 <HAL_Init+0x40>)
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	4a07      	ldr	r2, [pc, #28]	; (8007a34 <HAL_Init+0x40>)
 8007a16:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007a1a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8007a1c:	2003      	movs	r0, #3
 8007a1e:	f000 ff7c 	bl	800891a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8007a22:	2000      	movs	r0, #0
 8007a24:	f7fa ff0c 	bl	8002840 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8007a28:	f7fa fec0 	bl	80027ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8007a2c:	2300      	movs	r3, #0
}
 8007a2e:	4618      	mov	r0, r3
 8007a30:	bd80      	pop	{r7, pc}
 8007a32:	bf00      	nop
 8007a34:	40023c00 	.word	0x40023c00

08007a38 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8007a38:	b480      	push	{r7}
 8007a3a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8007a3c:	4b06      	ldr	r3, [pc, #24]	; (8007a58 <HAL_IncTick+0x20>)
 8007a3e:	781b      	ldrb	r3, [r3, #0]
 8007a40:	461a      	mov	r2, r3
 8007a42:	4b06      	ldr	r3, [pc, #24]	; (8007a5c <HAL_IncTick+0x24>)
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	4413      	add	r3, r2
 8007a48:	4a04      	ldr	r2, [pc, #16]	; (8007a5c <HAL_IncTick+0x24>)
 8007a4a:	6013      	str	r3, [r2, #0]
}
 8007a4c:	bf00      	nop
 8007a4e:	46bd      	mov	sp, r7
 8007a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a54:	4770      	bx	lr
 8007a56:	bf00      	nop
 8007a58:	20000024 	.word	0x20000024
 8007a5c:	20002170 	.word	0x20002170

08007a60 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8007a60:	b480      	push	{r7}
 8007a62:	af00      	add	r7, sp, #0
  return uwTick;
 8007a64:	4b03      	ldr	r3, [pc, #12]	; (8007a74 <HAL_GetTick+0x14>)
 8007a66:	681b      	ldr	r3, [r3, #0]
}
 8007a68:	4618      	mov	r0, r3
 8007a6a:	46bd      	mov	sp, r7
 8007a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a70:	4770      	bx	lr
 8007a72:	bf00      	nop
 8007a74:	20002170 	.word	0x20002170

08007a78 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8007a78:	b580      	push	{r7, lr}
 8007a7a:	b084      	sub	sp, #16
 8007a7c:	af00      	add	r7, sp, #0
 8007a7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8007a80:	f7ff ffee 	bl	8007a60 <HAL_GetTick>
 8007a84:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a90:	d005      	beq.n	8007a9e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8007a92:	4b0a      	ldr	r3, [pc, #40]	; (8007abc <HAL_Delay+0x44>)
 8007a94:	781b      	ldrb	r3, [r3, #0]
 8007a96:	461a      	mov	r2, r3
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	4413      	add	r3, r2
 8007a9c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8007a9e:	bf00      	nop
 8007aa0:	f7ff ffde 	bl	8007a60 <HAL_GetTick>
 8007aa4:	4602      	mov	r2, r0
 8007aa6:	68bb      	ldr	r3, [r7, #8]
 8007aa8:	1ad3      	subs	r3, r2, r3
 8007aaa:	68fa      	ldr	r2, [r7, #12]
 8007aac:	429a      	cmp	r2, r3
 8007aae:	d8f7      	bhi.n	8007aa0 <HAL_Delay+0x28>
  {
  }
}
 8007ab0:	bf00      	nop
 8007ab2:	bf00      	nop
 8007ab4:	3710      	adds	r7, #16
 8007ab6:	46bd      	mov	sp, r7
 8007ab8:	bd80      	pop	{r7, pc}
 8007aba:	bf00      	nop
 8007abc:	20000024 	.word	0x20000024

08007ac0 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8007ac0:	b580      	push	{r7, lr}
 8007ac2:	b084      	sub	sp, #16
 8007ac4:	af00      	add	r7, sp, #0
 8007ac6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d101      	bne.n	8007ad2 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8007ace:	2301      	movs	r3, #1
 8007ad0:	e0ed      	b.n	8007cae <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007ad8:	b2db      	uxtb	r3, r3
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d102      	bne.n	8007ae4 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8007ade:	6878      	ldr	r0, [r7, #4]
 8007ae0:	f7fa f972 	bl	8001dc8 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	681a      	ldr	r2, [r3, #0]
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	f042 0201 	orr.w	r2, r2, #1
 8007af2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007af4:	f7ff ffb4 	bl	8007a60 <HAL_GetTick>
 8007af8:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8007afa:	e012      	b.n	8007b22 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8007afc:	f7ff ffb0 	bl	8007a60 <HAL_GetTick>
 8007b00:	4602      	mov	r2, r0
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	1ad3      	subs	r3, r2, r3
 8007b06:	2b0a      	cmp	r3, #10
 8007b08:	d90b      	bls.n	8007b22 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b0e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	2205      	movs	r2, #5
 8007b1a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8007b1e:	2301      	movs	r3, #1
 8007b20:	e0c5      	b.n	8007cae <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	685b      	ldr	r3, [r3, #4]
 8007b28:	f003 0301 	and.w	r3, r3, #1
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d0e5      	beq.n	8007afc <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	681a      	ldr	r2, [r3, #0]
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	f022 0202 	bic.w	r2, r2, #2
 8007b3e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007b40:	f7ff ff8e 	bl	8007a60 <HAL_GetTick>
 8007b44:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8007b46:	e012      	b.n	8007b6e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8007b48:	f7ff ff8a 	bl	8007a60 <HAL_GetTick>
 8007b4c:	4602      	mov	r2, r0
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	1ad3      	subs	r3, r2, r3
 8007b52:	2b0a      	cmp	r3, #10
 8007b54:	d90b      	bls.n	8007b6e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b5a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	2205      	movs	r2, #5
 8007b66:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8007b6a:	2301      	movs	r3, #1
 8007b6c:	e09f      	b.n	8007cae <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	685b      	ldr	r3, [r3, #4]
 8007b74:	f003 0302 	and.w	r3, r3, #2
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d1e5      	bne.n	8007b48 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	7e1b      	ldrb	r3, [r3, #24]
 8007b80:	2b01      	cmp	r3, #1
 8007b82:	d108      	bne.n	8007b96 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	681a      	ldr	r2, [r3, #0]
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007b92:	601a      	str	r2, [r3, #0]
 8007b94:	e007      	b.n	8007ba6 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	681a      	ldr	r2, [r3, #0]
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007ba4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	7e5b      	ldrb	r3, [r3, #25]
 8007baa:	2b01      	cmp	r3, #1
 8007bac:	d108      	bne.n	8007bc0 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	681a      	ldr	r2, [r3, #0]
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007bbc:	601a      	str	r2, [r3, #0]
 8007bbe:	e007      	b.n	8007bd0 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	681a      	ldr	r2, [r3, #0]
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007bce:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	7e9b      	ldrb	r3, [r3, #26]
 8007bd4:	2b01      	cmp	r3, #1
 8007bd6:	d108      	bne.n	8007bea <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	681a      	ldr	r2, [r3, #0]
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	f042 0220 	orr.w	r2, r2, #32
 8007be6:	601a      	str	r2, [r3, #0]
 8007be8:	e007      	b.n	8007bfa <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	681a      	ldr	r2, [r3, #0]
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	f022 0220 	bic.w	r2, r2, #32
 8007bf8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	7edb      	ldrb	r3, [r3, #27]
 8007bfe:	2b01      	cmp	r3, #1
 8007c00:	d108      	bne.n	8007c14 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	681a      	ldr	r2, [r3, #0]
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	f022 0210 	bic.w	r2, r2, #16
 8007c10:	601a      	str	r2, [r3, #0]
 8007c12:	e007      	b.n	8007c24 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	681a      	ldr	r2, [r3, #0]
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	f042 0210 	orr.w	r2, r2, #16
 8007c22:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	7f1b      	ldrb	r3, [r3, #28]
 8007c28:	2b01      	cmp	r3, #1
 8007c2a:	d108      	bne.n	8007c3e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	681a      	ldr	r2, [r3, #0]
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	f042 0208 	orr.w	r2, r2, #8
 8007c3a:	601a      	str	r2, [r3, #0]
 8007c3c:	e007      	b.n	8007c4e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	681a      	ldr	r2, [r3, #0]
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	f022 0208 	bic.w	r2, r2, #8
 8007c4c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	7f5b      	ldrb	r3, [r3, #29]
 8007c52:	2b01      	cmp	r3, #1
 8007c54:	d108      	bne.n	8007c68 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	681a      	ldr	r2, [r3, #0]
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	f042 0204 	orr.w	r2, r2, #4
 8007c64:	601a      	str	r2, [r3, #0]
 8007c66:	e007      	b.n	8007c78 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	681a      	ldr	r2, [r3, #0]
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	f022 0204 	bic.w	r2, r2, #4
 8007c76:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	689a      	ldr	r2, [r3, #8]
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	68db      	ldr	r3, [r3, #12]
 8007c80:	431a      	orrs	r2, r3
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	691b      	ldr	r3, [r3, #16]
 8007c86:	431a      	orrs	r2, r3
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	695b      	ldr	r3, [r3, #20]
 8007c8c:	ea42 0103 	orr.w	r1, r2, r3
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	685b      	ldr	r3, [r3, #4]
 8007c94:	1e5a      	subs	r2, r3, #1
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	430a      	orrs	r2, r1
 8007c9c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	2200      	movs	r2, #0
 8007ca2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	2201      	movs	r2, #1
 8007ca8:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8007cac:	2300      	movs	r3, #0
}
 8007cae:	4618      	mov	r0, r3
 8007cb0:	3710      	adds	r7, #16
 8007cb2:	46bd      	mov	sp, r7
 8007cb4:	bd80      	pop	{r7, pc}
	...

08007cb8 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8007cb8:	b480      	push	{r7}
 8007cba:	b087      	sub	sp, #28
 8007cbc:	af00      	add	r7, sp, #0
 8007cbe:	6078      	str	r0, [r7, #4]
 8007cc0:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007cce:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8007cd0:	7cfb      	ldrb	r3, [r7, #19]
 8007cd2:	2b01      	cmp	r3, #1
 8007cd4:	d003      	beq.n	8007cde <HAL_CAN_ConfigFilter+0x26>
 8007cd6:	7cfb      	ldrb	r3, [r7, #19]
 8007cd8:	2b02      	cmp	r3, #2
 8007cda:	f040 80be 	bne.w	8007e5a <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8007cde:	4b65      	ldr	r3, [pc, #404]	; (8007e74 <HAL_CAN_ConfigFilter+0x1bc>)
 8007ce0:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8007ce2:	697b      	ldr	r3, [r7, #20]
 8007ce4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007ce8:	f043 0201 	orr.w	r2, r3, #1
 8007cec:	697b      	ldr	r3, [r7, #20]
 8007cee:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8007cf2:	697b      	ldr	r3, [r7, #20]
 8007cf4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007cf8:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8007cfc:	697b      	ldr	r3, [r7, #20]
 8007cfe:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8007d02:	697b      	ldr	r3, [r7, #20]
 8007d04:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8007d08:	683b      	ldr	r3, [r7, #0]
 8007d0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d0c:	021b      	lsls	r3, r3, #8
 8007d0e:	431a      	orrs	r2, r3
 8007d10:	697b      	ldr	r3, [r7, #20]
 8007d12:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8007d16:	683b      	ldr	r3, [r7, #0]
 8007d18:	695b      	ldr	r3, [r3, #20]
 8007d1a:	f003 031f 	and.w	r3, r3, #31
 8007d1e:	2201      	movs	r2, #1
 8007d20:	fa02 f303 	lsl.w	r3, r2, r3
 8007d24:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8007d26:	697b      	ldr	r3, [r7, #20]
 8007d28:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	43db      	mvns	r3, r3
 8007d30:	401a      	ands	r2, r3
 8007d32:	697b      	ldr	r3, [r7, #20]
 8007d34:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8007d38:	683b      	ldr	r3, [r7, #0]
 8007d3a:	69db      	ldr	r3, [r3, #28]
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d123      	bne.n	8007d88 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8007d40:	697b      	ldr	r3, [r7, #20]
 8007d42:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	43db      	mvns	r3, r3
 8007d4a:	401a      	ands	r2, r3
 8007d4c:	697b      	ldr	r3, [r7, #20]
 8007d4e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8007d52:	683b      	ldr	r3, [r7, #0]
 8007d54:	68db      	ldr	r3, [r3, #12]
 8007d56:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8007d58:	683b      	ldr	r3, [r7, #0]
 8007d5a:	685b      	ldr	r3, [r3, #4]
 8007d5c:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8007d5e:	683a      	ldr	r2, [r7, #0]
 8007d60:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8007d62:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8007d64:	697b      	ldr	r3, [r7, #20]
 8007d66:	3248      	adds	r2, #72	; 0x48
 8007d68:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8007d6c:	683b      	ldr	r3, [r7, #0]
 8007d6e:	689b      	ldr	r3, [r3, #8]
 8007d70:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8007d72:	683b      	ldr	r3, [r7, #0]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8007d78:	683b      	ldr	r3, [r7, #0]
 8007d7a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8007d7c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8007d7e:	6979      	ldr	r1, [r7, #20]
 8007d80:	3348      	adds	r3, #72	; 0x48
 8007d82:	00db      	lsls	r3, r3, #3
 8007d84:	440b      	add	r3, r1
 8007d86:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8007d88:	683b      	ldr	r3, [r7, #0]
 8007d8a:	69db      	ldr	r3, [r3, #28]
 8007d8c:	2b01      	cmp	r3, #1
 8007d8e:	d122      	bne.n	8007dd6 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8007d90:	697b      	ldr	r3, [r7, #20]
 8007d92:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	431a      	orrs	r2, r3
 8007d9a:	697b      	ldr	r3, [r7, #20]
 8007d9c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8007da0:	683b      	ldr	r3, [r7, #0]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8007da6:	683b      	ldr	r3, [r7, #0]
 8007da8:	685b      	ldr	r3, [r3, #4]
 8007daa:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8007dac:	683a      	ldr	r2, [r7, #0]
 8007dae:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8007db0:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8007db2:	697b      	ldr	r3, [r7, #20]
 8007db4:	3248      	adds	r2, #72	; 0x48
 8007db6:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8007dba:	683b      	ldr	r3, [r7, #0]
 8007dbc:	689b      	ldr	r3, [r3, #8]
 8007dbe:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8007dc0:	683b      	ldr	r3, [r7, #0]
 8007dc2:	68db      	ldr	r3, [r3, #12]
 8007dc4:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8007dc6:	683b      	ldr	r3, [r7, #0]
 8007dc8:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8007dca:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8007dcc:	6979      	ldr	r1, [r7, #20]
 8007dce:	3348      	adds	r3, #72	; 0x48
 8007dd0:	00db      	lsls	r3, r3, #3
 8007dd2:	440b      	add	r3, r1
 8007dd4:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8007dd6:	683b      	ldr	r3, [r7, #0]
 8007dd8:	699b      	ldr	r3, [r3, #24]
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d109      	bne.n	8007df2 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8007dde:	697b      	ldr	r3, [r7, #20]
 8007de0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	43db      	mvns	r3, r3
 8007de8:	401a      	ands	r2, r3
 8007dea:	697b      	ldr	r3, [r7, #20]
 8007dec:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8007df0:	e007      	b.n	8007e02 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8007df2:	697b      	ldr	r3, [r7, #20]
 8007df4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	431a      	orrs	r2, r3
 8007dfc:	697b      	ldr	r3, [r7, #20]
 8007dfe:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8007e02:	683b      	ldr	r3, [r7, #0]
 8007e04:	691b      	ldr	r3, [r3, #16]
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d109      	bne.n	8007e1e <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8007e0a:	697b      	ldr	r3, [r7, #20]
 8007e0c:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	43db      	mvns	r3, r3
 8007e14:	401a      	ands	r2, r3
 8007e16:	697b      	ldr	r3, [r7, #20]
 8007e18:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8007e1c:	e007      	b.n	8007e2e <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8007e1e:	697b      	ldr	r3, [r7, #20]
 8007e20:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	431a      	orrs	r2, r3
 8007e28:	697b      	ldr	r3, [r7, #20]
 8007e2a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8007e2e:	683b      	ldr	r3, [r7, #0]
 8007e30:	6a1b      	ldr	r3, [r3, #32]
 8007e32:	2b01      	cmp	r3, #1
 8007e34:	d107      	bne.n	8007e46 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8007e36:	697b      	ldr	r3, [r7, #20]
 8007e38:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	431a      	orrs	r2, r3
 8007e40:	697b      	ldr	r3, [r7, #20]
 8007e42:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8007e46:	697b      	ldr	r3, [r7, #20]
 8007e48:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007e4c:	f023 0201 	bic.w	r2, r3, #1
 8007e50:	697b      	ldr	r3, [r7, #20]
 8007e52:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8007e56:	2300      	movs	r3, #0
 8007e58:	e006      	b.n	8007e68 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e5e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8007e66:	2301      	movs	r3, #1
  }
}
 8007e68:	4618      	mov	r0, r3
 8007e6a:	371c      	adds	r7, #28
 8007e6c:	46bd      	mov	sp, r7
 8007e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e72:	4770      	bx	lr
 8007e74:	40006400 	.word	0x40006400

08007e78 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8007e78:	b580      	push	{r7, lr}
 8007e7a:	b084      	sub	sp, #16
 8007e7c:	af00      	add	r7, sp, #0
 8007e7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007e86:	b2db      	uxtb	r3, r3
 8007e88:	2b01      	cmp	r3, #1
 8007e8a:	d12e      	bne.n	8007eea <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	2202      	movs	r2, #2
 8007e90:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	681a      	ldr	r2, [r3, #0]
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	f022 0201 	bic.w	r2, r2, #1
 8007ea2:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007ea4:	f7ff fddc 	bl	8007a60 <HAL_GetTick>
 8007ea8:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8007eaa:	e012      	b.n	8007ed2 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8007eac:	f7ff fdd8 	bl	8007a60 <HAL_GetTick>
 8007eb0:	4602      	mov	r2, r0
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	1ad3      	subs	r3, r2, r3
 8007eb6:	2b0a      	cmp	r3, #10
 8007eb8:	d90b      	bls.n	8007ed2 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ebe:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	2205      	movs	r2, #5
 8007eca:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8007ece:	2301      	movs	r3, #1
 8007ed0:	e012      	b.n	8007ef8 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	685b      	ldr	r3, [r3, #4]
 8007ed8:	f003 0301 	and.w	r3, r3, #1
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d1e5      	bne.n	8007eac <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	2200      	movs	r2, #0
 8007ee4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8007ee6:	2300      	movs	r3, #0
 8007ee8:	e006      	b.n	8007ef8 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007eee:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8007ef6:	2301      	movs	r3, #1
  }
}
 8007ef8:	4618      	mov	r0, r3
 8007efa:	3710      	adds	r7, #16
 8007efc:	46bd      	mov	sp, r7
 8007efe:	bd80      	pop	{r7, pc}

08007f00 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8007f00:	b480      	push	{r7}
 8007f02:	b089      	sub	sp, #36	; 0x24
 8007f04:	af00      	add	r7, sp, #0
 8007f06:	60f8      	str	r0, [r7, #12]
 8007f08:	60b9      	str	r1, [r7, #8]
 8007f0a:	607a      	str	r2, [r7, #4]
 8007f0c:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007f14:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	689b      	ldr	r3, [r3, #8]
 8007f1c:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8007f1e:	7ffb      	ldrb	r3, [r7, #31]
 8007f20:	2b01      	cmp	r3, #1
 8007f22:	d003      	beq.n	8007f2c <HAL_CAN_AddTxMessage+0x2c>
 8007f24:	7ffb      	ldrb	r3, [r7, #31]
 8007f26:	2b02      	cmp	r3, #2
 8007f28:	f040 80b8 	bne.w	800809c <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8007f2c:	69bb      	ldr	r3, [r7, #24]
 8007f2e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d10a      	bne.n	8007f4c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8007f36:	69bb      	ldr	r3, [r7, #24]
 8007f38:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d105      	bne.n	8007f4c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8007f40:	69bb      	ldr	r3, [r7, #24]
 8007f42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	f000 80a0 	beq.w	800808c <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8007f4c:	69bb      	ldr	r3, [r7, #24]
 8007f4e:	0e1b      	lsrs	r3, r3, #24
 8007f50:	f003 0303 	and.w	r3, r3, #3
 8007f54:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8007f56:	697b      	ldr	r3, [r7, #20]
 8007f58:	2b02      	cmp	r3, #2
 8007f5a:	d907      	bls.n	8007f6c <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f60:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8007f68:	2301      	movs	r3, #1
 8007f6a:	e09e      	b.n	80080aa <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8007f6c:	2201      	movs	r2, #1
 8007f6e:	697b      	ldr	r3, [r7, #20]
 8007f70:	409a      	lsls	r2, r3
 8007f72:	683b      	ldr	r3, [r7, #0]
 8007f74:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8007f76:	68bb      	ldr	r3, [r7, #8]
 8007f78:	689b      	ldr	r3, [r3, #8]
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d10d      	bne.n	8007f9a <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8007f7e:	68bb      	ldr	r3, [r7, #8]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8007f84:	68bb      	ldr	r3, [r7, #8]
 8007f86:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8007f88:	68f9      	ldr	r1, [r7, #12]
 8007f8a:	6809      	ldr	r1, [r1, #0]
 8007f8c:	431a      	orrs	r2, r3
 8007f8e:	697b      	ldr	r3, [r7, #20]
 8007f90:	3318      	adds	r3, #24
 8007f92:	011b      	lsls	r3, r3, #4
 8007f94:	440b      	add	r3, r1
 8007f96:	601a      	str	r2, [r3, #0]
 8007f98:	e00f      	b.n	8007fba <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8007f9a:	68bb      	ldr	r3, [r7, #8]
 8007f9c:	685b      	ldr	r3, [r3, #4]
 8007f9e:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8007fa0:	68bb      	ldr	r3, [r7, #8]
 8007fa2:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8007fa4:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8007fa6:	68bb      	ldr	r3, [r7, #8]
 8007fa8:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8007faa:	68f9      	ldr	r1, [r7, #12]
 8007fac:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8007fae:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8007fb0:	697b      	ldr	r3, [r7, #20]
 8007fb2:	3318      	adds	r3, #24
 8007fb4:	011b      	lsls	r3, r3, #4
 8007fb6:	440b      	add	r3, r1
 8007fb8:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	6819      	ldr	r1, [r3, #0]
 8007fbe:	68bb      	ldr	r3, [r7, #8]
 8007fc0:	691a      	ldr	r2, [r3, #16]
 8007fc2:	697b      	ldr	r3, [r7, #20]
 8007fc4:	3318      	adds	r3, #24
 8007fc6:	011b      	lsls	r3, r3, #4
 8007fc8:	440b      	add	r3, r1
 8007fca:	3304      	adds	r3, #4
 8007fcc:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8007fce:	68bb      	ldr	r3, [r7, #8]
 8007fd0:	7d1b      	ldrb	r3, [r3, #20]
 8007fd2:	2b01      	cmp	r3, #1
 8007fd4:	d111      	bne.n	8007ffa <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	681a      	ldr	r2, [r3, #0]
 8007fda:	697b      	ldr	r3, [r7, #20]
 8007fdc:	3318      	adds	r3, #24
 8007fde:	011b      	lsls	r3, r3, #4
 8007fe0:	4413      	add	r3, r2
 8007fe2:	3304      	adds	r3, #4
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	68fa      	ldr	r2, [r7, #12]
 8007fe8:	6811      	ldr	r1, [r2, #0]
 8007fea:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8007fee:	697b      	ldr	r3, [r7, #20]
 8007ff0:	3318      	adds	r3, #24
 8007ff2:	011b      	lsls	r3, r3, #4
 8007ff4:	440b      	add	r3, r1
 8007ff6:	3304      	adds	r3, #4
 8007ff8:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	3307      	adds	r3, #7
 8007ffe:	781b      	ldrb	r3, [r3, #0]
 8008000:	061a      	lsls	r2, r3, #24
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	3306      	adds	r3, #6
 8008006:	781b      	ldrb	r3, [r3, #0]
 8008008:	041b      	lsls	r3, r3, #16
 800800a:	431a      	orrs	r2, r3
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	3305      	adds	r3, #5
 8008010:	781b      	ldrb	r3, [r3, #0]
 8008012:	021b      	lsls	r3, r3, #8
 8008014:	4313      	orrs	r3, r2
 8008016:	687a      	ldr	r2, [r7, #4]
 8008018:	3204      	adds	r2, #4
 800801a:	7812      	ldrb	r2, [r2, #0]
 800801c:	4610      	mov	r0, r2
 800801e:	68fa      	ldr	r2, [r7, #12]
 8008020:	6811      	ldr	r1, [r2, #0]
 8008022:	ea43 0200 	orr.w	r2, r3, r0
 8008026:	697b      	ldr	r3, [r7, #20]
 8008028:	011b      	lsls	r3, r3, #4
 800802a:	440b      	add	r3, r1
 800802c:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8008030:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	3303      	adds	r3, #3
 8008036:	781b      	ldrb	r3, [r3, #0]
 8008038:	061a      	lsls	r2, r3, #24
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	3302      	adds	r3, #2
 800803e:	781b      	ldrb	r3, [r3, #0]
 8008040:	041b      	lsls	r3, r3, #16
 8008042:	431a      	orrs	r2, r3
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	3301      	adds	r3, #1
 8008048:	781b      	ldrb	r3, [r3, #0]
 800804a:	021b      	lsls	r3, r3, #8
 800804c:	4313      	orrs	r3, r2
 800804e:	687a      	ldr	r2, [r7, #4]
 8008050:	7812      	ldrb	r2, [r2, #0]
 8008052:	4610      	mov	r0, r2
 8008054:	68fa      	ldr	r2, [r7, #12]
 8008056:	6811      	ldr	r1, [r2, #0]
 8008058:	ea43 0200 	orr.w	r2, r3, r0
 800805c:	697b      	ldr	r3, [r7, #20]
 800805e:	011b      	lsls	r3, r3, #4
 8008060:	440b      	add	r3, r1
 8008062:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8008066:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	681a      	ldr	r2, [r3, #0]
 800806c:	697b      	ldr	r3, [r7, #20]
 800806e:	3318      	adds	r3, #24
 8008070:	011b      	lsls	r3, r3, #4
 8008072:	4413      	add	r3, r2
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	68fa      	ldr	r2, [r7, #12]
 8008078:	6811      	ldr	r1, [r2, #0]
 800807a:	f043 0201 	orr.w	r2, r3, #1
 800807e:	697b      	ldr	r3, [r7, #20]
 8008080:	3318      	adds	r3, #24
 8008082:	011b      	lsls	r3, r3, #4
 8008084:	440b      	add	r3, r1
 8008086:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8008088:	2300      	movs	r3, #0
 800808a:	e00e      	b.n	80080aa <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008090:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8008098:	2301      	movs	r3, #1
 800809a:	e006      	b.n	80080aa <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080a0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80080a8:	2301      	movs	r3, #1
  }
}
 80080aa:	4618      	mov	r0, r3
 80080ac:	3724      	adds	r7, #36	; 0x24
 80080ae:	46bd      	mov	sp, r7
 80080b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080b4:	4770      	bx	lr

080080b6 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80080b6:	b480      	push	{r7}
 80080b8:	b087      	sub	sp, #28
 80080ba:	af00      	add	r7, sp, #0
 80080bc:	60f8      	str	r0, [r7, #12]
 80080be:	60b9      	str	r1, [r7, #8]
 80080c0:	607a      	str	r2, [r7, #4]
 80080c2:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80080ca:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80080cc:	7dfb      	ldrb	r3, [r7, #23]
 80080ce:	2b01      	cmp	r3, #1
 80080d0:	d003      	beq.n	80080da <HAL_CAN_GetRxMessage+0x24>
 80080d2:	7dfb      	ldrb	r3, [r7, #23]
 80080d4:	2b02      	cmp	r3, #2
 80080d6:	f040 80f3 	bne.w	80082c0 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80080da:	68bb      	ldr	r3, [r7, #8]
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d10e      	bne.n	80080fe <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	68db      	ldr	r3, [r3, #12]
 80080e6:	f003 0303 	and.w	r3, r3, #3
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d116      	bne.n	800811c <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080f2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80080fa:	2301      	movs	r3, #1
 80080fc:	e0e7      	b.n	80082ce <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	691b      	ldr	r3, [r3, #16]
 8008104:	f003 0303 	and.w	r3, r3, #3
 8008108:	2b00      	cmp	r3, #0
 800810a:	d107      	bne.n	800811c <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008110:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8008118:	2301      	movs	r3, #1
 800811a:	e0d8      	b.n	80082ce <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	681a      	ldr	r2, [r3, #0]
 8008120:	68bb      	ldr	r3, [r7, #8]
 8008122:	331b      	adds	r3, #27
 8008124:	011b      	lsls	r3, r3, #4
 8008126:	4413      	add	r3, r2
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	f003 0204 	and.w	r2, r3, #4
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	689b      	ldr	r3, [r3, #8]
 8008136:	2b00      	cmp	r3, #0
 8008138:	d10c      	bne.n	8008154 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	681a      	ldr	r2, [r3, #0]
 800813e:	68bb      	ldr	r3, [r7, #8]
 8008140:	331b      	adds	r3, #27
 8008142:	011b      	lsls	r3, r3, #4
 8008144:	4413      	add	r3, r2
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	0d5b      	lsrs	r3, r3, #21
 800814a:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	601a      	str	r2, [r3, #0]
 8008152:	e00b      	b.n	800816c <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	681a      	ldr	r2, [r3, #0]
 8008158:	68bb      	ldr	r3, [r7, #8]
 800815a:	331b      	adds	r3, #27
 800815c:	011b      	lsls	r3, r3, #4
 800815e:	4413      	add	r3, r2
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	08db      	lsrs	r3, r3, #3
 8008164:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	681a      	ldr	r2, [r3, #0]
 8008170:	68bb      	ldr	r3, [r7, #8]
 8008172:	331b      	adds	r3, #27
 8008174:	011b      	lsls	r3, r3, #4
 8008176:	4413      	add	r3, r2
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	f003 0202 	and.w	r2, r3, #2
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	681a      	ldr	r2, [r3, #0]
 8008186:	68bb      	ldr	r3, [r7, #8]
 8008188:	331b      	adds	r3, #27
 800818a:	011b      	lsls	r3, r3, #4
 800818c:	4413      	add	r3, r2
 800818e:	3304      	adds	r3, #4
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	f003 020f 	and.w	r2, r3, #15
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	681a      	ldr	r2, [r3, #0]
 800819e:	68bb      	ldr	r3, [r7, #8]
 80081a0:	331b      	adds	r3, #27
 80081a2:	011b      	lsls	r3, r3, #4
 80081a4:	4413      	add	r3, r2
 80081a6:	3304      	adds	r3, #4
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	0a1b      	lsrs	r3, r3, #8
 80081ac:	b2da      	uxtb	r2, r3
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	681a      	ldr	r2, [r3, #0]
 80081b6:	68bb      	ldr	r3, [r7, #8]
 80081b8:	331b      	adds	r3, #27
 80081ba:	011b      	lsls	r3, r3, #4
 80081bc:	4413      	add	r3, r2
 80081be:	3304      	adds	r3, #4
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	0c1b      	lsrs	r3, r3, #16
 80081c4:	b29a      	uxth	r2, r3
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	681a      	ldr	r2, [r3, #0]
 80081ce:	68bb      	ldr	r3, [r7, #8]
 80081d0:	011b      	lsls	r3, r3, #4
 80081d2:	4413      	add	r3, r2
 80081d4:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	b2da      	uxtb	r2, r3
 80081dc:	683b      	ldr	r3, [r7, #0]
 80081de:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	681a      	ldr	r2, [r3, #0]
 80081e4:	68bb      	ldr	r3, [r7, #8]
 80081e6:	011b      	lsls	r3, r3, #4
 80081e8:	4413      	add	r3, r2
 80081ea:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	0a1a      	lsrs	r2, r3, #8
 80081f2:	683b      	ldr	r3, [r7, #0]
 80081f4:	3301      	adds	r3, #1
 80081f6:	b2d2      	uxtb	r2, r2
 80081f8:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	681a      	ldr	r2, [r3, #0]
 80081fe:	68bb      	ldr	r3, [r7, #8]
 8008200:	011b      	lsls	r3, r3, #4
 8008202:	4413      	add	r3, r2
 8008204:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	0c1a      	lsrs	r2, r3, #16
 800820c:	683b      	ldr	r3, [r7, #0]
 800820e:	3302      	adds	r3, #2
 8008210:	b2d2      	uxtb	r2, r2
 8008212:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	681a      	ldr	r2, [r3, #0]
 8008218:	68bb      	ldr	r3, [r7, #8]
 800821a:	011b      	lsls	r3, r3, #4
 800821c:	4413      	add	r3, r2
 800821e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	0e1a      	lsrs	r2, r3, #24
 8008226:	683b      	ldr	r3, [r7, #0]
 8008228:	3303      	adds	r3, #3
 800822a:	b2d2      	uxtb	r2, r2
 800822c:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	681a      	ldr	r2, [r3, #0]
 8008232:	68bb      	ldr	r3, [r7, #8]
 8008234:	011b      	lsls	r3, r3, #4
 8008236:	4413      	add	r3, r2
 8008238:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800823c:	681a      	ldr	r2, [r3, #0]
 800823e:	683b      	ldr	r3, [r7, #0]
 8008240:	3304      	adds	r3, #4
 8008242:	b2d2      	uxtb	r2, r2
 8008244:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	681a      	ldr	r2, [r3, #0]
 800824a:	68bb      	ldr	r3, [r7, #8]
 800824c:	011b      	lsls	r3, r3, #4
 800824e:	4413      	add	r3, r2
 8008250:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	0a1a      	lsrs	r2, r3, #8
 8008258:	683b      	ldr	r3, [r7, #0]
 800825a:	3305      	adds	r3, #5
 800825c:	b2d2      	uxtb	r2, r2
 800825e:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	681a      	ldr	r2, [r3, #0]
 8008264:	68bb      	ldr	r3, [r7, #8]
 8008266:	011b      	lsls	r3, r3, #4
 8008268:	4413      	add	r3, r2
 800826a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	0c1a      	lsrs	r2, r3, #16
 8008272:	683b      	ldr	r3, [r7, #0]
 8008274:	3306      	adds	r3, #6
 8008276:	b2d2      	uxtb	r2, r2
 8008278:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	681a      	ldr	r2, [r3, #0]
 800827e:	68bb      	ldr	r3, [r7, #8]
 8008280:	011b      	lsls	r3, r3, #4
 8008282:	4413      	add	r3, r2
 8008284:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	0e1a      	lsrs	r2, r3, #24
 800828c:	683b      	ldr	r3, [r7, #0]
 800828e:	3307      	adds	r3, #7
 8008290:	b2d2      	uxtb	r2, r2
 8008292:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8008294:	68bb      	ldr	r3, [r7, #8]
 8008296:	2b00      	cmp	r3, #0
 8008298:	d108      	bne.n	80082ac <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	68da      	ldr	r2, [r3, #12]
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	f042 0220 	orr.w	r2, r2, #32
 80082a8:	60da      	str	r2, [r3, #12]
 80082aa:	e007      	b.n	80082bc <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	691a      	ldr	r2, [r3, #16]
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	f042 0220 	orr.w	r2, r2, #32
 80082ba:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80082bc:	2300      	movs	r3, #0
 80082be:	e006      	b.n	80082ce <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082c4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80082cc:	2301      	movs	r3, #1
  }
}
 80082ce:	4618      	mov	r0, r3
 80082d0:	371c      	adds	r7, #28
 80082d2:	46bd      	mov	sp, r7
 80082d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082d8:	4770      	bx	lr

080082da <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80082da:	b480      	push	{r7}
 80082dc:	b085      	sub	sp, #20
 80082de:	af00      	add	r7, sp, #0
 80082e0:	6078      	str	r0, [r7, #4]
 80082e2:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80082ea:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80082ec:	7bfb      	ldrb	r3, [r7, #15]
 80082ee:	2b01      	cmp	r3, #1
 80082f0:	d002      	beq.n	80082f8 <HAL_CAN_ActivateNotification+0x1e>
 80082f2:	7bfb      	ldrb	r3, [r7, #15]
 80082f4:	2b02      	cmp	r3, #2
 80082f6:	d109      	bne.n	800830c <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	6959      	ldr	r1, [r3, #20]
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	683a      	ldr	r2, [r7, #0]
 8008304:	430a      	orrs	r2, r1
 8008306:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8008308:	2300      	movs	r3, #0
 800830a:	e006      	b.n	800831a <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008310:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8008318:	2301      	movs	r3, #1
  }
}
 800831a:	4618      	mov	r0, r3
 800831c:	3714      	adds	r7, #20
 800831e:	46bd      	mov	sp, r7
 8008320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008324:	4770      	bx	lr

08008326 <HAL_CAN_DeactivateNotification>:
  * @param  InactiveITs indicates which interrupts will be disabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_DeactivateNotification(CAN_HandleTypeDef *hcan, uint32_t InactiveITs)
{
 8008326:	b480      	push	{r7}
 8008328:	b085      	sub	sp, #20
 800832a:	af00      	add	r7, sp, #0
 800832c:	6078      	str	r0, [r7, #4]
 800832e:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008336:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(InactiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8008338:	7bfb      	ldrb	r3, [r7, #15]
 800833a:	2b01      	cmp	r3, #1
 800833c:	d002      	beq.n	8008344 <HAL_CAN_DeactivateNotification+0x1e>
 800833e:	7bfb      	ldrb	r3, [r7, #15]
 8008340:	2b02      	cmp	r3, #2
 8008342:	d10a      	bne.n	800835a <HAL_CAN_DeactivateNotification+0x34>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Disable the selected interrupts */
    __HAL_CAN_DISABLE_IT(hcan, InactiveITs);
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	6959      	ldr	r1, [r3, #20]
 800834a:	683b      	ldr	r3, [r7, #0]
 800834c:	43da      	mvns	r2, r3
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	400a      	ands	r2, r1
 8008354:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8008356:	2300      	movs	r3, #0
 8008358:	e006      	b.n	8008368 <HAL_CAN_DeactivateNotification+0x42>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800835e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8008366:	2301      	movs	r3, #1
  }
}
 8008368:	4618      	mov	r0, r3
 800836a:	3714      	adds	r7, #20
 800836c:	46bd      	mov	sp, r7
 800836e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008372:	4770      	bx	lr

08008374 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8008374:	b580      	push	{r7, lr}
 8008376:	b08a      	sub	sp, #40	; 0x28
 8008378:	af00      	add	r7, sp, #0
 800837a:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800837c:	2300      	movs	r3, #0
 800837e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	695b      	ldr	r3, [r3, #20]
 8008386:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	685b      	ldr	r3, [r3, #4]
 800838e:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	689b      	ldr	r3, [r3, #8]
 8008396:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	68db      	ldr	r3, [r3, #12]
 800839e:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	691b      	ldr	r3, [r3, #16]
 80083a6:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	699b      	ldr	r3, [r3, #24]
 80083ae:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80083b0:	6a3b      	ldr	r3, [r7, #32]
 80083b2:	f003 0301 	and.w	r3, r3, #1
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d07c      	beq.n	80084b4 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80083ba:	69bb      	ldr	r3, [r7, #24]
 80083bc:	f003 0301 	and.w	r3, r3, #1
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d023      	beq.n	800840c <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	2201      	movs	r2, #1
 80083ca:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80083cc:	69bb      	ldr	r3, [r7, #24]
 80083ce:	f003 0302 	and.w	r3, r3, #2
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d003      	beq.n	80083de <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80083d6:	6878      	ldr	r0, [r7, #4]
 80083d8:	f000 f983 	bl	80086e2 <HAL_CAN_TxMailbox0CompleteCallback>
 80083dc:	e016      	b.n	800840c <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80083de:	69bb      	ldr	r3, [r7, #24]
 80083e0:	f003 0304 	and.w	r3, r3, #4
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d004      	beq.n	80083f2 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80083e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083ea:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80083ee:	627b      	str	r3, [r7, #36]	; 0x24
 80083f0:	e00c      	b.n	800840c <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80083f2:	69bb      	ldr	r3, [r7, #24]
 80083f4:	f003 0308 	and.w	r3, r3, #8
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d004      	beq.n	8008406 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80083fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083fe:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008402:	627b      	str	r3, [r7, #36]	; 0x24
 8008404:	e002      	b.n	800840c <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8008406:	6878      	ldr	r0, [r7, #4]
 8008408:	f000 f989 	bl	800871e <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800840c:	69bb      	ldr	r3, [r7, #24]
 800840e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008412:	2b00      	cmp	r3, #0
 8008414:	d024      	beq.n	8008460 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800841e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8008420:	69bb      	ldr	r3, [r7, #24]
 8008422:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008426:	2b00      	cmp	r3, #0
 8008428:	d003      	beq.n	8008432 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800842a:	6878      	ldr	r0, [r7, #4]
 800842c:	f000 f963 	bl	80086f6 <HAL_CAN_TxMailbox1CompleteCallback>
 8008430:	e016      	b.n	8008460 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8008432:	69bb      	ldr	r3, [r7, #24]
 8008434:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008438:	2b00      	cmp	r3, #0
 800843a:	d004      	beq.n	8008446 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800843c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800843e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8008442:	627b      	str	r3, [r7, #36]	; 0x24
 8008444:	e00c      	b.n	8008460 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8008446:	69bb      	ldr	r3, [r7, #24]
 8008448:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800844c:	2b00      	cmp	r3, #0
 800844e:	d004      	beq.n	800845a <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8008450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008452:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008456:	627b      	str	r3, [r7, #36]	; 0x24
 8008458:	e002      	b.n	8008460 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800845a:	6878      	ldr	r0, [r7, #4]
 800845c:	f000 f969 	bl	8008732 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8008460:	69bb      	ldr	r3, [r7, #24]
 8008462:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008466:	2b00      	cmp	r3, #0
 8008468:	d024      	beq.n	80084b4 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8008472:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8008474:	69bb      	ldr	r3, [r7, #24]
 8008476:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800847a:	2b00      	cmp	r3, #0
 800847c:	d003      	beq.n	8008486 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800847e:	6878      	ldr	r0, [r7, #4]
 8008480:	f000 f943 	bl	800870a <HAL_CAN_TxMailbox2CompleteCallback>
 8008484:	e016      	b.n	80084b4 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8008486:	69bb      	ldr	r3, [r7, #24]
 8008488:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800848c:	2b00      	cmp	r3, #0
 800848e:	d004      	beq.n	800849a <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8008490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008492:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008496:	627b      	str	r3, [r7, #36]	; 0x24
 8008498:	e00c      	b.n	80084b4 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800849a:	69bb      	ldr	r3, [r7, #24]
 800849c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d004      	beq.n	80084ae <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80084a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80084aa:	627b      	str	r3, [r7, #36]	; 0x24
 80084ac:	e002      	b.n	80084b4 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80084ae:	6878      	ldr	r0, [r7, #4]
 80084b0:	f000 f949 	bl	8008746 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80084b4:	6a3b      	ldr	r3, [r7, #32]
 80084b6:	f003 0308 	and.w	r3, r3, #8
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d00c      	beq.n	80084d8 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80084be:	697b      	ldr	r3, [r7, #20]
 80084c0:	f003 0310 	and.w	r3, r3, #16
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d007      	beq.n	80084d8 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80084c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084ca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80084ce:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	2210      	movs	r2, #16
 80084d6:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80084d8:	6a3b      	ldr	r3, [r7, #32]
 80084da:	f003 0304 	and.w	r3, r3, #4
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d00b      	beq.n	80084fa <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80084e2:	697b      	ldr	r3, [r7, #20]
 80084e4:	f003 0308 	and.w	r3, r3, #8
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d006      	beq.n	80084fa <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	2208      	movs	r2, #8
 80084f2:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80084f4:	6878      	ldr	r0, [r7, #4]
 80084f6:	f000 f930 	bl	800875a <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80084fa:	6a3b      	ldr	r3, [r7, #32]
 80084fc:	f003 0302 	and.w	r3, r3, #2
 8008500:	2b00      	cmp	r3, #0
 8008502:	d009      	beq.n	8008518 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	68db      	ldr	r3, [r3, #12]
 800850a:	f003 0303 	and.w	r3, r3, #3
 800850e:	2b00      	cmp	r3, #0
 8008510:	d002      	beq.n	8008518 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8008512:	6878      	ldr	r0, [r7, #4]
 8008514:	f7f8 fd64 	bl	8000fe0 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8008518:	6a3b      	ldr	r3, [r7, #32]
 800851a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800851e:	2b00      	cmp	r3, #0
 8008520:	d00c      	beq.n	800853c <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8008522:	693b      	ldr	r3, [r7, #16]
 8008524:	f003 0310 	and.w	r3, r3, #16
 8008528:	2b00      	cmp	r3, #0
 800852a:	d007      	beq.n	800853c <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800852c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800852e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8008532:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	2210      	movs	r2, #16
 800853a:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800853c:	6a3b      	ldr	r3, [r7, #32]
 800853e:	f003 0320 	and.w	r3, r3, #32
 8008542:	2b00      	cmp	r3, #0
 8008544:	d00b      	beq.n	800855e <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8008546:	693b      	ldr	r3, [r7, #16]
 8008548:	f003 0308 	and.w	r3, r3, #8
 800854c:	2b00      	cmp	r3, #0
 800854e:	d006      	beq.n	800855e <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	2208      	movs	r2, #8
 8008556:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8008558:	6878      	ldr	r0, [r7, #4]
 800855a:	f000 f908 	bl	800876e <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800855e:	6a3b      	ldr	r3, [r7, #32]
 8008560:	f003 0310 	and.w	r3, r3, #16
 8008564:	2b00      	cmp	r3, #0
 8008566:	d009      	beq.n	800857c <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	691b      	ldr	r3, [r3, #16]
 800856e:	f003 0303 	and.w	r3, r3, #3
 8008572:	2b00      	cmp	r3, #0
 8008574:	d002      	beq.n	800857c <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8008576:	6878      	ldr	r0, [r7, #4]
 8008578:	f7f8 fd3d 	bl	8000ff6 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800857c:	6a3b      	ldr	r3, [r7, #32]
 800857e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008582:	2b00      	cmp	r3, #0
 8008584:	d00b      	beq.n	800859e <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8008586:	69fb      	ldr	r3, [r7, #28]
 8008588:	f003 0310 	and.w	r3, r3, #16
 800858c:	2b00      	cmp	r3, #0
 800858e:	d006      	beq.n	800859e <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	2210      	movs	r2, #16
 8008596:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8008598:	6878      	ldr	r0, [r7, #4]
 800859a:	f000 f8f2 	bl	8008782 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800859e:	6a3b      	ldr	r3, [r7, #32]
 80085a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d00b      	beq.n	80085c0 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80085a8:	69fb      	ldr	r3, [r7, #28]
 80085aa:	f003 0308 	and.w	r3, r3, #8
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d006      	beq.n	80085c0 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	2208      	movs	r2, #8
 80085b8:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80085ba:	6878      	ldr	r0, [r7, #4]
 80085bc:	f000 f8eb 	bl	8008796 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80085c0:	6a3b      	ldr	r3, [r7, #32]
 80085c2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d07b      	beq.n	80086c2 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80085ca:	69fb      	ldr	r3, [r7, #28]
 80085cc:	f003 0304 	and.w	r3, r3, #4
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d072      	beq.n	80086ba <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80085d4:	6a3b      	ldr	r3, [r7, #32]
 80085d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d008      	beq.n	80085f0 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d003      	beq.n	80085f0 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80085e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085ea:	f043 0301 	orr.w	r3, r3, #1
 80085ee:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80085f0:	6a3b      	ldr	r3, [r7, #32]
 80085f2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d008      	beq.n	800860c <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8008600:	2b00      	cmp	r3, #0
 8008602:	d003      	beq.n	800860c <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8008604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008606:	f043 0302 	orr.w	r3, r3, #2
 800860a:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800860c:	6a3b      	ldr	r3, [r7, #32]
 800860e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008612:	2b00      	cmp	r3, #0
 8008614:	d008      	beq.n	8008628 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800861c:	2b00      	cmp	r3, #0
 800861e:	d003      	beq.n	8008628 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8008620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008622:	f043 0304 	orr.w	r3, r3, #4
 8008626:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8008628:	6a3b      	ldr	r3, [r7, #32]
 800862a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800862e:	2b00      	cmp	r3, #0
 8008630:	d043      	beq.n	80086ba <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8008638:	2b00      	cmp	r3, #0
 800863a:	d03e      	beq.n	80086ba <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008642:	2b60      	cmp	r3, #96	; 0x60
 8008644:	d02b      	beq.n	800869e <HAL_CAN_IRQHandler+0x32a>
 8008646:	2b60      	cmp	r3, #96	; 0x60
 8008648:	d82e      	bhi.n	80086a8 <HAL_CAN_IRQHandler+0x334>
 800864a:	2b50      	cmp	r3, #80	; 0x50
 800864c:	d022      	beq.n	8008694 <HAL_CAN_IRQHandler+0x320>
 800864e:	2b50      	cmp	r3, #80	; 0x50
 8008650:	d82a      	bhi.n	80086a8 <HAL_CAN_IRQHandler+0x334>
 8008652:	2b40      	cmp	r3, #64	; 0x40
 8008654:	d019      	beq.n	800868a <HAL_CAN_IRQHandler+0x316>
 8008656:	2b40      	cmp	r3, #64	; 0x40
 8008658:	d826      	bhi.n	80086a8 <HAL_CAN_IRQHandler+0x334>
 800865a:	2b30      	cmp	r3, #48	; 0x30
 800865c:	d010      	beq.n	8008680 <HAL_CAN_IRQHandler+0x30c>
 800865e:	2b30      	cmp	r3, #48	; 0x30
 8008660:	d822      	bhi.n	80086a8 <HAL_CAN_IRQHandler+0x334>
 8008662:	2b10      	cmp	r3, #16
 8008664:	d002      	beq.n	800866c <HAL_CAN_IRQHandler+0x2f8>
 8008666:	2b20      	cmp	r3, #32
 8008668:	d005      	beq.n	8008676 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800866a:	e01d      	b.n	80086a8 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 800866c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800866e:	f043 0308 	orr.w	r3, r3, #8
 8008672:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8008674:	e019      	b.n	80086aa <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8008676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008678:	f043 0310 	orr.w	r3, r3, #16
 800867c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800867e:	e014      	b.n	80086aa <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8008680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008682:	f043 0320 	orr.w	r3, r3, #32
 8008686:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8008688:	e00f      	b.n	80086aa <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 800868a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800868c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008690:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8008692:	e00a      	b.n	80086aa <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8008694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008696:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800869a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800869c:	e005      	b.n	80086aa <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 800869e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80086a4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80086a6:	e000      	b.n	80086aa <HAL_CAN_IRQHandler+0x336>
            break;
 80086a8:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	699a      	ldr	r2, [r3, #24]
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80086b8:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	2204      	movs	r2, #4
 80086c0:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80086c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d008      	beq.n	80086da <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80086cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086ce:	431a      	orrs	r2, r3
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80086d4:	6878      	ldr	r0, [r7, #4]
 80086d6:	f000 f868 	bl	80087aa <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80086da:	bf00      	nop
 80086dc:	3728      	adds	r7, #40	; 0x28
 80086de:	46bd      	mov	sp, r7
 80086e0:	bd80      	pop	{r7, pc}

080086e2 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80086e2:	b480      	push	{r7}
 80086e4:	b083      	sub	sp, #12
 80086e6:	af00      	add	r7, sp, #0
 80086e8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80086ea:	bf00      	nop
 80086ec:	370c      	adds	r7, #12
 80086ee:	46bd      	mov	sp, r7
 80086f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086f4:	4770      	bx	lr

080086f6 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80086f6:	b480      	push	{r7}
 80086f8:	b083      	sub	sp, #12
 80086fa:	af00      	add	r7, sp, #0
 80086fc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80086fe:	bf00      	nop
 8008700:	370c      	adds	r7, #12
 8008702:	46bd      	mov	sp, r7
 8008704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008708:	4770      	bx	lr

0800870a <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800870a:	b480      	push	{r7}
 800870c:	b083      	sub	sp, #12
 800870e:	af00      	add	r7, sp, #0
 8008710:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8008712:	bf00      	nop
 8008714:	370c      	adds	r7, #12
 8008716:	46bd      	mov	sp, r7
 8008718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800871c:	4770      	bx	lr

0800871e <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800871e:	b480      	push	{r7}
 8008720:	b083      	sub	sp, #12
 8008722:	af00      	add	r7, sp, #0
 8008724:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8008726:	bf00      	nop
 8008728:	370c      	adds	r7, #12
 800872a:	46bd      	mov	sp, r7
 800872c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008730:	4770      	bx	lr

08008732 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8008732:	b480      	push	{r7}
 8008734:	b083      	sub	sp, #12
 8008736:	af00      	add	r7, sp, #0
 8008738:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800873a:	bf00      	nop
 800873c:	370c      	adds	r7, #12
 800873e:	46bd      	mov	sp, r7
 8008740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008744:	4770      	bx	lr

08008746 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8008746:	b480      	push	{r7}
 8008748:	b083      	sub	sp, #12
 800874a:	af00      	add	r7, sp, #0
 800874c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800874e:	bf00      	nop
 8008750:	370c      	adds	r7, #12
 8008752:	46bd      	mov	sp, r7
 8008754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008758:	4770      	bx	lr

0800875a <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 800875a:	b480      	push	{r7}
 800875c:	b083      	sub	sp, #12
 800875e:	af00      	add	r7, sp, #0
 8008760:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8008762:	bf00      	nop
 8008764:	370c      	adds	r7, #12
 8008766:	46bd      	mov	sp, r7
 8008768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800876c:	4770      	bx	lr

0800876e <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800876e:	b480      	push	{r7}
 8008770:	b083      	sub	sp, #12
 8008772:	af00      	add	r7, sp, #0
 8008774:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8008776:	bf00      	nop
 8008778:	370c      	adds	r7, #12
 800877a:	46bd      	mov	sp, r7
 800877c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008780:	4770      	bx	lr

08008782 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8008782:	b480      	push	{r7}
 8008784:	b083      	sub	sp, #12
 8008786:	af00      	add	r7, sp, #0
 8008788:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800878a:	bf00      	nop
 800878c:	370c      	adds	r7, #12
 800878e:	46bd      	mov	sp, r7
 8008790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008794:	4770      	bx	lr

08008796 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8008796:	b480      	push	{r7}
 8008798:	b083      	sub	sp, #12
 800879a:	af00      	add	r7, sp, #0
 800879c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800879e:	bf00      	nop
 80087a0:	370c      	adds	r7, #12
 80087a2:	46bd      	mov	sp, r7
 80087a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087a8:	4770      	bx	lr

080087aa <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80087aa:	b480      	push	{r7}
 80087ac:	b083      	sub	sp, #12
 80087ae:	af00      	add	r7, sp, #0
 80087b0:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80087b2:	bf00      	nop
 80087b4:	370c      	adds	r7, #12
 80087b6:	46bd      	mov	sp, r7
 80087b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087bc:	4770      	bx	lr
	...

080087c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80087c0:	b480      	push	{r7}
 80087c2:	b085      	sub	sp, #20
 80087c4:	af00      	add	r7, sp, #0
 80087c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	f003 0307 	and.w	r3, r3, #7
 80087ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80087d0:	4b0c      	ldr	r3, [pc, #48]	; (8008804 <__NVIC_SetPriorityGrouping+0x44>)
 80087d2:	68db      	ldr	r3, [r3, #12]
 80087d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80087d6:	68ba      	ldr	r2, [r7, #8]
 80087d8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80087dc:	4013      	ands	r3, r2
 80087de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80087e4:	68bb      	ldr	r3, [r7, #8]
 80087e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80087e8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80087ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80087f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80087f2:	4a04      	ldr	r2, [pc, #16]	; (8008804 <__NVIC_SetPriorityGrouping+0x44>)
 80087f4:	68bb      	ldr	r3, [r7, #8]
 80087f6:	60d3      	str	r3, [r2, #12]
}
 80087f8:	bf00      	nop
 80087fa:	3714      	adds	r7, #20
 80087fc:	46bd      	mov	sp, r7
 80087fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008802:	4770      	bx	lr
 8008804:	e000ed00 	.word	0xe000ed00

08008808 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8008808:	b480      	push	{r7}
 800880a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800880c:	4b04      	ldr	r3, [pc, #16]	; (8008820 <__NVIC_GetPriorityGrouping+0x18>)
 800880e:	68db      	ldr	r3, [r3, #12]
 8008810:	0a1b      	lsrs	r3, r3, #8
 8008812:	f003 0307 	and.w	r3, r3, #7
}
 8008816:	4618      	mov	r0, r3
 8008818:	46bd      	mov	sp, r7
 800881a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800881e:	4770      	bx	lr
 8008820:	e000ed00 	.word	0xe000ed00

08008824 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008824:	b480      	push	{r7}
 8008826:	b083      	sub	sp, #12
 8008828:	af00      	add	r7, sp, #0
 800882a:	4603      	mov	r3, r0
 800882c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800882e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008832:	2b00      	cmp	r3, #0
 8008834:	db0b      	blt.n	800884e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008836:	79fb      	ldrb	r3, [r7, #7]
 8008838:	f003 021f 	and.w	r2, r3, #31
 800883c:	4907      	ldr	r1, [pc, #28]	; (800885c <__NVIC_EnableIRQ+0x38>)
 800883e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008842:	095b      	lsrs	r3, r3, #5
 8008844:	2001      	movs	r0, #1
 8008846:	fa00 f202 	lsl.w	r2, r0, r2
 800884a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800884e:	bf00      	nop
 8008850:	370c      	adds	r7, #12
 8008852:	46bd      	mov	sp, r7
 8008854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008858:	4770      	bx	lr
 800885a:	bf00      	nop
 800885c:	e000e100 	.word	0xe000e100

08008860 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8008860:	b480      	push	{r7}
 8008862:	b083      	sub	sp, #12
 8008864:	af00      	add	r7, sp, #0
 8008866:	4603      	mov	r3, r0
 8008868:	6039      	str	r1, [r7, #0]
 800886a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800886c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008870:	2b00      	cmp	r3, #0
 8008872:	db0a      	blt.n	800888a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008874:	683b      	ldr	r3, [r7, #0]
 8008876:	b2da      	uxtb	r2, r3
 8008878:	490c      	ldr	r1, [pc, #48]	; (80088ac <__NVIC_SetPriority+0x4c>)
 800887a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800887e:	0112      	lsls	r2, r2, #4
 8008880:	b2d2      	uxtb	r2, r2
 8008882:	440b      	add	r3, r1
 8008884:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8008888:	e00a      	b.n	80088a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800888a:	683b      	ldr	r3, [r7, #0]
 800888c:	b2da      	uxtb	r2, r3
 800888e:	4908      	ldr	r1, [pc, #32]	; (80088b0 <__NVIC_SetPriority+0x50>)
 8008890:	79fb      	ldrb	r3, [r7, #7]
 8008892:	f003 030f 	and.w	r3, r3, #15
 8008896:	3b04      	subs	r3, #4
 8008898:	0112      	lsls	r2, r2, #4
 800889a:	b2d2      	uxtb	r2, r2
 800889c:	440b      	add	r3, r1
 800889e:	761a      	strb	r2, [r3, #24]
}
 80088a0:	bf00      	nop
 80088a2:	370c      	adds	r7, #12
 80088a4:	46bd      	mov	sp, r7
 80088a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088aa:	4770      	bx	lr
 80088ac:	e000e100 	.word	0xe000e100
 80088b0:	e000ed00 	.word	0xe000ed00

080088b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80088b4:	b480      	push	{r7}
 80088b6:	b089      	sub	sp, #36	; 0x24
 80088b8:	af00      	add	r7, sp, #0
 80088ba:	60f8      	str	r0, [r7, #12]
 80088bc:	60b9      	str	r1, [r7, #8]
 80088be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	f003 0307 	and.w	r3, r3, #7
 80088c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80088c8:	69fb      	ldr	r3, [r7, #28]
 80088ca:	f1c3 0307 	rsb	r3, r3, #7
 80088ce:	2b04      	cmp	r3, #4
 80088d0:	bf28      	it	cs
 80088d2:	2304      	movcs	r3, #4
 80088d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80088d6:	69fb      	ldr	r3, [r7, #28]
 80088d8:	3304      	adds	r3, #4
 80088da:	2b06      	cmp	r3, #6
 80088dc:	d902      	bls.n	80088e4 <NVIC_EncodePriority+0x30>
 80088de:	69fb      	ldr	r3, [r7, #28]
 80088e0:	3b03      	subs	r3, #3
 80088e2:	e000      	b.n	80088e6 <NVIC_EncodePriority+0x32>
 80088e4:	2300      	movs	r3, #0
 80088e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80088e8:	f04f 32ff 	mov.w	r2, #4294967295
 80088ec:	69bb      	ldr	r3, [r7, #24]
 80088ee:	fa02 f303 	lsl.w	r3, r2, r3
 80088f2:	43da      	mvns	r2, r3
 80088f4:	68bb      	ldr	r3, [r7, #8]
 80088f6:	401a      	ands	r2, r3
 80088f8:	697b      	ldr	r3, [r7, #20]
 80088fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80088fc:	f04f 31ff 	mov.w	r1, #4294967295
 8008900:	697b      	ldr	r3, [r7, #20]
 8008902:	fa01 f303 	lsl.w	r3, r1, r3
 8008906:	43d9      	mvns	r1, r3
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800890c:	4313      	orrs	r3, r2
         );
}
 800890e:	4618      	mov	r0, r3
 8008910:	3724      	adds	r7, #36	; 0x24
 8008912:	46bd      	mov	sp, r7
 8008914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008918:	4770      	bx	lr

0800891a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800891a:	b580      	push	{r7, lr}
 800891c:	b082      	sub	sp, #8
 800891e:	af00      	add	r7, sp, #0
 8008920:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8008922:	6878      	ldr	r0, [r7, #4]
 8008924:	f7ff ff4c 	bl	80087c0 <__NVIC_SetPriorityGrouping>
}
 8008928:	bf00      	nop
 800892a:	3708      	adds	r7, #8
 800892c:	46bd      	mov	sp, r7
 800892e:	bd80      	pop	{r7, pc}

08008930 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8008930:	b580      	push	{r7, lr}
 8008932:	b086      	sub	sp, #24
 8008934:	af00      	add	r7, sp, #0
 8008936:	4603      	mov	r3, r0
 8008938:	60b9      	str	r1, [r7, #8]
 800893a:	607a      	str	r2, [r7, #4]
 800893c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800893e:	2300      	movs	r3, #0
 8008940:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8008942:	f7ff ff61 	bl	8008808 <__NVIC_GetPriorityGrouping>
 8008946:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8008948:	687a      	ldr	r2, [r7, #4]
 800894a:	68b9      	ldr	r1, [r7, #8]
 800894c:	6978      	ldr	r0, [r7, #20]
 800894e:	f7ff ffb1 	bl	80088b4 <NVIC_EncodePriority>
 8008952:	4602      	mov	r2, r0
 8008954:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008958:	4611      	mov	r1, r2
 800895a:	4618      	mov	r0, r3
 800895c:	f7ff ff80 	bl	8008860 <__NVIC_SetPriority>
}
 8008960:	bf00      	nop
 8008962:	3718      	adds	r7, #24
 8008964:	46bd      	mov	sp, r7
 8008966:	bd80      	pop	{r7, pc}

08008968 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008968:	b580      	push	{r7, lr}
 800896a:	b082      	sub	sp, #8
 800896c:	af00      	add	r7, sp, #0
 800896e:	4603      	mov	r3, r0
 8008970:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8008972:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008976:	4618      	mov	r0, r3
 8008978:	f7ff ff54 	bl	8008824 <__NVIC_EnableIRQ>
}
 800897c:	bf00      	nop
 800897e:	3708      	adds	r7, #8
 8008980:	46bd      	mov	sp, r7
 8008982:	bd80      	pop	{r7, pc}

08008984 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8008984:	b580      	push	{r7, lr}
 8008986:	b086      	sub	sp, #24
 8008988:	af00      	add	r7, sp, #0
 800898a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800898c:	2300      	movs	r3, #0
 800898e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8008990:	f7ff f866 	bl	8007a60 <HAL_GetTick>
 8008994:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	2b00      	cmp	r3, #0
 800899a:	d101      	bne.n	80089a0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800899c:	2301      	movs	r3, #1
 800899e:	e099      	b.n	8008ad4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	2202      	movs	r2, #2
 80089a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	2200      	movs	r2, #0
 80089ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	681a      	ldr	r2, [r3, #0]
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	f022 0201 	bic.w	r2, r2, #1
 80089be:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80089c0:	e00f      	b.n	80089e2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80089c2:	f7ff f84d 	bl	8007a60 <HAL_GetTick>
 80089c6:	4602      	mov	r2, r0
 80089c8:	693b      	ldr	r3, [r7, #16]
 80089ca:	1ad3      	subs	r3, r2, r3
 80089cc:	2b05      	cmp	r3, #5
 80089ce:	d908      	bls.n	80089e2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	2220      	movs	r2, #32
 80089d4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	2203      	movs	r2, #3
 80089da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80089de:	2303      	movs	r3, #3
 80089e0:	e078      	b.n	8008ad4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	f003 0301 	and.w	r3, r3, #1
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d1e8      	bne.n	80089c2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80089f8:	697a      	ldr	r2, [r7, #20]
 80089fa:	4b38      	ldr	r3, [pc, #224]	; (8008adc <HAL_DMA_Init+0x158>)
 80089fc:	4013      	ands	r3, r2
 80089fe:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	685a      	ldr	r2, [r3, #4]
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	689b      	ldr	r3, [r3, #8]
 8008a08:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8008a0e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	691b      	ldr	r3, [r3, #16]
 8008a14:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008a1a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	699b      	ldr	r3, [r3, #24]
 8008a20:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008a26:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	6a1b      	ldr	r3, [r3, #32]
 8008a2c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8008a2e:	697a      	ldr	r2, [r7, #20]
 8008a30:	4313      	orrs	r3, r2
 8008a32:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a38:	2b04      	cmp	r3, #4
 8008a3a:	d107      	bne.n	8008a4c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a44:	4313      	orrs	r3, r2
 8008a46:	697a      	ldr	r2, [r7, #20]
 8008a48:	4313      	orrs	r3, r2
 8008a4a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	697a      	ldr	r2, [r7, #20]
 8008a52:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	695b      	ldr	r3, [r3, #20]
 8008a5a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8008a5c:	697b      	ldr	r3, [r7, #20]
 8008a5e:	f023 0307 	bic.w	r3, r3, #7
 8008a62:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a68:	697a      	ldr	r2, [r7, #20]
 8008a6a:	4313      	orrs	r3, r2
 8008a6c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a72:	2b04      	cmp	r3, #4
 8008a74:	d117      	bne.n	8008aa6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a7a:	697a      	ldr	r2, [r7, #20]
 8008a7c:	4313      	orrs	r3, r2
 8008a7e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	d00e      	beq.n	8008aa6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8008a88:	6878      	ldr	r0, [r7, #4]
 8008a8a:	f000 fb01 	bl	8009090 <DMA_CheckFifoParam>
 8008a8e:	4603      	mov	r3, r0
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	d008      	beq.n	8008aa6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	2240      	movs	r2, #64	; 0x40
 8008a98:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	2201      	movs	r2, #1
 8008a9e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8008aa2:	2301      	movs	r3, #1
 8008aa4:	e016      	b.n	8008ad4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	697a      	ldr	r2, [r7, #20]
 8008aac:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8008aae:	6878      	ldr	r0, [r7, #4]
 8008ab0:	f000 fab8 	bl	8009024 <DMA_CalcBaseAndBitshift>
 8008ab4:	4603      	mov	r3, r0
 8008ab6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008abc:	223f      	movs	r2, #63	; 0x3f
 8008abe:	409a      	lsls	r2, r3
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	2200      	movs	r2, #0
 8008ac8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	2201      	movs	r2, #1
 8008ace:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8008ad2:	2300      	movs	r3, #0
}
 8008ad4:	4618      	mov	r0, r3
 8008ad6:	3718      	adds	r7, #24
 8008ad8:	46bd      	mov	sp, r7
 8008ada:	bd80      	pop	{r7, pc}
 8008adc:	f010803f 	.word	0xf010803f

08008ae0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008ae0:	b580      	push	{r7, lr}
 8008ae2:	b086      	sub	sp, #24
 8008ae4:	af00      	add	r7, sp, #0
 8008ae6:	60f8      	str	r0, [r7, #12]
 8008ae8:	60b9      	str	r1, [r7, #8]
 8008aea:	607a      	str	r2, [r7, #4]
 8008aec:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008aee:	2300      	movs	r3, #0
 8008af0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008af6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008afe:	2b01      	cmp	r3, #1
 8008b00:	d101      	bne.n	8008b06 <HAL_DMA_Start_IT+0x26>
 8008b02:	2302      	movs	r3, #2
 8008b04:	e040      	b.n	8008b88 <HAL_DMA_Start_IT+0xa8>
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	2201      	movs	r2, #1
 8008b0a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008b14:	b2db      	uxtb	r3, r3
 8008b16:	2b01      	cmp	r3, #1
 8008b18:	d12f      	bne.n	8008b7a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	2202      	movs	r2, #2
 8008b1e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	2200      	movs	r2, #0
 8008b26:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8008b28:	683b      	ldr	r3, [r7, #0]
 8008b2a:	687a      	ldr	r2, [r7, #4]
 8008b2c:	68b9      	ldr	r1, [r7, #8]
 8008b2e:	68f8      	ldr	r0, [r7, #12]
 8008b30:	f000 fa4a 	bl	8008fc8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008b38:	223f      	movs	r2, #63	; 0x3f
 8008b3a:	409a      	lsls	r2, r3
 8008b3c:	693b      	ldr	r3, [r7, #16]
 8008b3e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	681a      	ldr	r2, [r3, #0]
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	f042 0216 	orr.w	r2, r2, #22
 8008b4e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d007      	beq.n	8008b68 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	681a      	ldr	r2, [r3, #0]
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	f042 0208 	orr.w	r2, r2, #8
 8008b66:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	681a      	ldr	r2, [r3, #0]
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	f042 0201 	orr.w	r2, r2, #1
 8008b76:	601a      	str	r2, [r3, #0]
 8008b78:	e005      	b.n	8008b86 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	2200      	movs	r2, #0
 8008b7e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8008b82:	2302      	movs	r3, #2
 8008b84:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8008b86:	7dfb      	ldrb	r3, [r7, #23]
}
 8008b88:	4618      	mov	r0, r3
 8008b8a:	3718      	adds	r7, #24
 8008b8c:	46bd      	mov	sp, r7
 8008b8e:	bd80      	pop	{r7, pc}

08008b90 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8008b90:	b580      	push	{r7, lr}
 8008b92:	b084      	sub	sp, #16
 8008b94:	af00      	add	r7, sp, #0
 8008b96:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008b9c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8008b9e:	f7fe ff5f 	bl	8007a60 <HAL_GetTick>
 8008ba2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008baa:	b2db      	uxtb	r3, r3
 8008bac:	2b02      	cmp	r3, #2
 8008bae:	d008      	beq.n	8008bc2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	2280      	movs	r2, #128	; 0x80
 8008bb4:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	2200      	movs	r2, #0
 8008bba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8008bbe:	2301      	movs	r3, #1
 8008bc0:	e052      	b.n	8008c68 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	681a      	ldr	r2, [r3, #0]
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	f022 0216 	bic.w	r2, r2, #22
 8008bd0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	695a      	ldr	r2, [r3, #20]
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008be0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d103      	bne.n	8008bf2 <HAL_DMA_Abort+0x62>
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d007      	beq.n	8008c02 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	681a      	ldr	r2, [r3, #0]
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	f022 0208 	bic.w	r2, r2, #8
 8008c00:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	681a      	ldr	r2, [r3, #0]
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	f022 0201 	bic.w	r2, r2, #1
 8008c10:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8008c12:	e013      	b.n	8008c3c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8008c14:	f7fe ff24 	bl	8007a60 <HAL_GetTick>
 8008c18:	4602      	mov	r2, r0
 8008c1a:	68bb      	ldr	r3, [r7, #8]
 8008c1c:	1ad3      	subs	r3, r2, r3
 8008c1e:	2b05      	cmp	r3, #5
 8008c20:	d90c      	bls.n	8008c3c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	2220      	movs	r2, #32
 8008c26:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	2203      	movs	r2, #3
 8008c2c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	2200      	movs	r2, #0
 8008c34:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8008c38:	2303      	movs	r3, #3
 8008c3a:	e015      	b.n	8008c68 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	f003 0301 	and.w	r3, r3, #1
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d1e4      	bne.n	8008c14 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008c4e:	223f      	movs	r2, #63	; 0x3f
 8008c50:	409a      	lsls	r2, r3
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	2201      	movs	r2, #1
 8008c5a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	2200      	movs	r2, #0
 8008c62:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8008c66:	2300      	movs	r3, #0
}
 8008c68:	4618      	mov	r0, r3
 8008c6a:	3710      	adds	r7, #16
 8008c6c:	46bd      	mov	sp, r7
 8008c6e:	bd80      	pop	{r7, pc}

08008c70 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8008c70:	b480      	push	{r7}
 8008c72:	b083      	sub	sp, #12
 8008c74:	af00      	add	r7, sp, #0
 8008c76:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008c7e:	b2db      	uxtb	r3, r3
 8008c80:	2b02      	cmp	r3, #2
 8008c82:	d004      	beq.n	8008c8e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	2280      	movs	r2, #128	; 0x80
 8008c88:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8008c8a:	2301      	movs	r3, #1
 8008c8c:	e00c      	b.n	8008ca8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	2205      	movs	r2, #5
 8008c92:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	681a      	ldr	r2, [r3, #0]
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	f022 0201 	bic.w	r2, r2, #1
 8008ca4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8008ca6:	2300      	movs	r3, #0
}
 8008ca8:	4618      	mov	r0, r3
 8008caa:	370c      	adds	r7, #12
 8008cac:	46bd      	mov	sp, r7
 8008cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cb2:	4770      	bx	lr

08008cb4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8008cb4:	b580      	push	{r7, lr}
 8008cb6:	b086      	sub	sp, #24
 8008cb8:	af00      	add	r7, sp, #0
 8008cba:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8008cbc:	2300      	movs	r3, #0
 8008cbe:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8008cc0:	4b8e      	ldr	r3, [pc, #568]	; (8008efc <HAL_DMA_IRQHandler+0x248>)
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	4a8e      	ldr	r2, [pc, #568]	; (8008f00 <HAL_DMA_IRQHandler+0x24c>)
 8008cc6:	fba2 2303 	umull	r2, r3, r2, r3
 8008cca:	0a9b      	lsrs	r3, r3, #10
 8008ccc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008cd2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8008cd4:	693b      	ldr	r3, [r7, #16]
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008cde:	2208      	movs	r2, #8
 8008ce0:	409a      	lsls	r2, r3
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	4013      	ands	r3, r2
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d01a      	beq.n	8008d20 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	f003 0304 	and.w	r3, r3, #4
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d013      	beq.n	8008d20 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	681a      	ldr	r2, [r3, #0]
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	f022 0204 	bic.w	r2, r2, #4
 8008d06:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008d0c:	2208      	movs	r2, #8
 8008d0e:	409a      	lsls	r2, r3
 8008d10:	693b      	ldr	r3, [r7, #16]
 8008d12:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008d18:	f043 0201 	orr.w	r2, r3, #1
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008d24:	2201      	movs	r2, #1
 8008d26:	409a      	lsls	r2, r3
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	4013      	ands	r3, r2
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	d012      	beq.n	8008d56 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	695b      	ldr	r3, [r3, #20]
 8008d36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	d00b      	beq.n	8008d56 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008d42:	2201      	movs	r2, #1
 8008d44:	409a      	lsls	r2, r3
 8008d46:	693b      	ldr	r3, [r7, #16]
 8008d48:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008d4e:	f043 0202 	orr.w	r2, r3, #2
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008d5a:	2204      	movs	r2, #4
 8008d5c:	409a      	lsls	r2, r3
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	4013      	ands	r3, r2
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d012      	beq.n	8008d8c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	f003 0302 	and.w	r3, r3, #2
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	d00b      	beq.n	8008d8c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008d78:	2204      	movs	r2, #4
 8008d7a:	409a      	lsls	r2, r3
 8008d7c:	693b      	ldr	r3, [r7, #16]
 8008d7e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008d84:	f043 0204 	orr.w	r2, r3, #4
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008d90:	2210      	movs	r2, #16
 8008d92:	409a      	lsls	r2, r3
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	4013      	ands	r3, r2
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	d043      	beq.n	8008e24 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	f003 0308 	and.w	r3, r3, #8
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d03c      	beq.n	8008e24 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008dae:	2210      	movs	r2, #16
 8008db0:	409a      	lsls	r2, r3
 8008db2:	693b      	ldr	r3, [r7, #16]
 8008db4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	d018      	beq.n	8008df6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d108      	bne.n	8008de4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d024      	beq.n	8008e24 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008dde:	6878      	ldr	r0, [r7, #4]
 8008de0:	4798      	blx	r3
 8008de2:	e01f      	b.n	8008e24 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	d01b      	beq.n	8008e24 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008df0:	6878      	ldr	r0, [r7, #4]
 8008df2:	4798      	blx	r3
 8008df4:	e016      	b.n	8008e24 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	d107      	bne.n	8008e14 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	681a      	ldr	r2, [r3, #0]
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	f022 0208 	bic.w	r2, r2, #8
 8008e12:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	d003      	beq.n	8008e24 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e20:	6878      	ldr	r0, [r7, #4]
 8008e22:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008e28:	2220      	movs	r2, #32
 8008e2a:	409a      	lsls	r2, r3
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	4013      	ands	r3, r2
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	f000 808f 	beq.w	8008f54 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	f003 0310 	and.w	r3, r3, #16
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	f000 8087 	beq.w	8008f54 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008e4a:	2220      	movs	r2, #32
 8008e4c:	409a      	lsls	r2, r3
 8008e4e:	693b      	ldr	r3, [r7, #16]
 8008e50:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008e58:	b2db      	uxtb	r3, r3
 8008e5a:	2b05      	cmp	r3, #5
 8008e5c:	d136      	bne.n	8008ecc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	681a      	ldr	r2, [r3, #0]
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	f022 0216 	bic.w	r2, r2, #22
 8008e6c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	695a      	ldr	r2, [r3, #20]
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008e7c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d103      	bne.n	8008e8e <HAL_DMA_IRQHandler+0x1da>
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d007      	beq.n	8008e9e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	681a      	ldr	r2, [r3, #0]
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	f022 0208 	bic.w	r2, r2, #8
 8008e9c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008ea2:	223f      	movs	r2, #63	; 0x3f
 8008ea4:	409a      	lsls	r2, r3
 8008ea6:	693b      	ldr	r3, [r7, #16]
 8008ea8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	2201      	movs	r2, #1
 8008eae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	2200      	movs	r2, #0
 8008eb6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d07e      	beq.n	8008fc0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008ec6:	6878      	ldr	r0, [r7, #4]
 8008ec8:	4798      	blx	r3
        }
        return;
 8008eca:	e079      	b.n	8008fc0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d01d      	beq.n	8008f16 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	d10d      	bne.n	8008f04 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	d031      	beq.n	8008f54 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008ef4:	6878      	ldr	r0, [r7, #4]
 8008ef6:	4798      	blx	r3
 8008ef8:	e02c      	b.n	8008f54 <HAL_DMA_IRQHandler+0x2a0>
 8008efa:	bf00      	nop
 8008efc:	20000000 	.word	0x20000000
 8008f00:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	d023      	beq.n	8008f54 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008f10:	6878      	ldr	r0, [r7, #4]
 8008f12:	4798      	blx	r3
 8008f14:	e01e      	b.n	8008f54 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d10f      	bne.n	8008f44 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	681a      	ldr	r2, [r3, #0]
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	f022 0210 	bic.w	r2, r2, #16
 8008f32:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	2201      	movs	r2, #1
 8008f38:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	2200      	movs	r2, #0
 8008f40:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d003      	beq.n	8008f54 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008f50:	6878      	ldr	r0, [r7, #4]
 8008f52:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	d032      	beq.n	8008fc2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008f60:	f003 0301 	and.w	r3, r3, #1
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d022      	beq.n	8008fae <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	2205      	movs	r2, #5
 8008f6c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	681a      	ldr	r2, [r3, #0]
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	f022 0201 	bic.w	r2, r2, #1
 8008f7e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8008f80:	68bb      	ldr	r3, [r7, #8]
 8008f82:	3301      	adds	r3, #1
 8008f84:	60bb      	str	r3, [r7, #8]
 8008f86:	697a      	ldr	r2, [r7, #20]
 8008f88:	429a      	cmp	r2, r3
 8008f8a:	d307      	bcc.n	8008f9c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	f003 0301 	and.w	r3, r3, #1
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d1f2      	bne.n	8008f80 <HAL_DMA_IRQHandler+0x2cc>
 8008f9a:	e000      	b.n	8008f9e <HAL_DMA_IRQHandler+0x2ea>
          break;
 8008f9c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	2201      	movs	r2, #1
 8008fa2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	2200      	movs	r2, #0
 8008faa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	d005      	beq.n	8008fc2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008fba:	6878      	ldr	r0, [r7, #4]
 8008fbc:	4798      	blx	r3
 8008fbe:	e000      	b.n	8008fc2 <HAL_DMA_IRQHandler+0x30e>
        return;
 8008fc0:	bf00      	nop
    }
  }
}
 8008fc2:	3718      	adds	r7, #24
 8008fc4:	46bd      	mov	sp, r7
 8008fc6:	bd80      	pop	{r7, pc}

08008fc8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008fc8:	b480      	push	{r7}
 8008fca:	b085      	sub	sp, #20
 8008fcc:	af00      	add	r7, sp, #0
 8008fce:	60f8      	str	r0, [r7, #12]
 8008fd0:	60b9      	str	r1, [r7, #8]
 8008fd2:	607a      	str	r2, [r7, #4]
 8008fd4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	681a      	ldr	r2, [r3, #0]
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008fe4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	683a      	ldr	r2, [r7, #0]
 8008fec:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	689b      	ldr	r3, [r3, #8]
 8008ff2:	2b40      	cmp	r3, #64	; 0x40
 8008ff4:	d108      	bne.n	8009008 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	687a      	ldr	r2, [r7, #4]
 8008ffc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	68ba      	ldr	r2, [r7, #8]
 8009004:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8009006:	e007      	b.n	8009018 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	68ba      	ldr	r2, [r7, #8]
 800900e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	687a      	ldr	r2, [r7, #4]
 8009016:	60da      	str	r2, [r3, #12]
}
 8009018:	bf00      	nop
 800901a:	3714      	adds	r7, #20
 800901c:	46bd      	mov	sp, r7
 800901e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009022:	4770      	bx	lr

08009024 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8009024:	b480      	push	{r7}
 8009026:	b085      	sub	sp, #20
 8009028:	af00      	add	r7, sp, #0
 800902a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	b2db      	uxtb	r3, r3
 8009032:	3b10      	subs	r3, #16
 8009034:	4a14      	ldr	r2, [pc, #80]	; (8009088 <DMA_CalcBaseAndBitshift+0x64>)
 8009036:	fba2 2303 	umull	r2, r3, r2, r3
 800903a:	091b      	lsrs	r3, r3, #4
 800903c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800903e:	4a13      	ldr	r2, [pc, #76]	; (800908c <DMA_CalcBaseAndBitshift+0x68>)
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	4413      	add	r3, r2
 8009044:	781b      	ldrb	r3, [r3, #0]
 8009046:	461a      	mov	r2, r3
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	2b03      	cmp	r3, #3
 8009050:	d909      	bls.n	8009066 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800905a:	f023 0303 	bic.w	r3, r3, #3
 800905e:	1d1a      	adds	r2, r3, #4
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	659a      	str	r2, [r3, #88]	; 0x58
 8009064:	e007      	b.n	8009076 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800906e:	f023 0303 	bic.w	r3, r3, #3
 8009072:	687a      	ldr	r2, [r7, #4]
 8009074:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800907a:	4618      	mov	r0, r3
 800907c:	3714      	adds	r7, #20
 800907e:	46bd      	mov	sp, r7
 8009080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009084:	4770      	bx	lr
 8009086:	bf00      	nop
 8009088:	aaaaaaab 	.word	0xaaaaaaab
 800908c:	08016d64 	.word	0x08016d64

08009090 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8009090:	b480      	push	{r7}
 8009092:	b085      	sub	sp, #20
 8009094:	af00      	add	r7, sp, #0
 8009096:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009098:	2300      	movs	r3, #0
 800909a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80090a0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	699b      	ldr	r3, [r3, #24]
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	d11f      	bne.n	80090ea <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80090aa:	68bb      	ldr	r3, [r7, #8]
 80090ac:	2b03      	cmp	r3, #3
 80090ae:	d856      	bhi.n	800915e <DMA_CheckFifoParam+0xce>
 80090b0:	a201      	add	r2, pc, #4	; (adr r2, 80090b8 <DMA_CheckFifoParam+0x28>)
 80090b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090b6:	bf00      	nop
 80090b8:	080090c9 	.word	0x080090c9
 80090bc:	080090db 	.word	0x080090db
 80090c0:	080090c9 	.word	0x080090c9
 80090c4:	0800915f 	.word	0x0800915f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090cc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	d046      	beq.n	8009162 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80090d4:	2301      	movs	r3, #1
 80090d6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80090d8:	e043      	b.n	8009162 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090de:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80090e2:	d140      	bne.n	8009166 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80090e4:	2301      	movs	r3, #1
 80090e6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80090e8:	e03d      	b.n	8009166 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	699b      	ldr	r3, [r3, #24]
 80090ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80090f2:	d121      	bne.n	8009138 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80090f4:	68bb      	ldr	r3, [r7, #8]
 80090f6:	2b03      	cmp	r3, #3
 80090f8:	d837      	bhi.n	800916a <DMA_CheckFifoParam+0xda>
 80090fa:	a201      	add	r2, pc, #4	; (adr r2, 8009100 <DMA_CheckFifoParam+0x70>)
 80090fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009100:	08009111 	.word	0x08009111
 8009104:	08009117 	.word	0x08009117
 8009108:	08009111 	.word	0x08009111
 800910c:	08009129 	.word	0x08009129
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8009110:	2301      	movs	r3, #1
 8009112:	73fb      	strb	r3, [r7, #15]
      break;
 8009114:	e030      	b.n	8009178 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800911a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800911e:	2b00      	cmp	r3, #0
 8009120:	d025      	beq.n	800916e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8009122:	2301      	movs	r3, #1
 8009124:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8009126:	e022      	b.n	800916e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800912c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8009130:	d11f      	bne.n	8009172 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8009132:	2301      	movs	r3, #1
 8009134:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8009136:	e01c      	b.n	8009172 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8009138:	68bb      	ldr	r3, [r7, #8]
 800913a:	2b02      	cmp	r3, #2
 800913c:	d903      	bls.n	8009146 <DMA_CheckFifoParam+0xb6>
 800913e:	68bb      	ldr	r3, [r7, #8]
 8009140:	2b03      	cmp	r3, #3
 8009142:	d003      	beq.n	800914c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8009144:	e018      	b.n	8009178 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8009146:	2301      	movs	r3, #1
 8009148:	73fb      	strb	r3, [r7, #15]
      break;
 800914a:	e015      	b.n	8009178 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009150:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009154:	2b00      	cmp	r3, #0
 8009156:	d00e      	beq.n	8009176 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8009158:	2301      	movs	r3, #1
 800915a:	73fb      	strb	r3, [r7, #15]
      break;
 800915c:	e00b      	b.n	8009176 <DMA_CheckFifoParam+0xe6>
      break;
 800915e:	bf00      	nop
 8009160:	e00a      	b.n	8009178 <DMA_CheckFifoParam+0xe8>
      break;
 8009162:	bf00      	nop
 8009164:	e008      	b.n	8009178 <DMA_CheckFifoParam+0xe8>
      break;
 8009166:	bf00      	nop
 8009168:	e006      	b.n	8009178 <DMA_CheckFifoParam+0xe8>
      break;
 800916a:	bf00      	nop
 800916c:	e004      	b.n	8009178 <DMA_CheckFifoParam+0xe8>
      break;
 800916e:	bf00      	nop
 8009170:	e002      	b.n	8009178 <DMA_CheckFifoParam+0xe8>
      break;   
 8009172:	bf00      	nop
 8009174:	e000      	b.n	8009178 <DMA_CheckFifoParam+0xe8>
      break;
 8009176:	bf00      	nop
    }
  } 
  
  return status; 
 8009178:	7bfb      	ldrb	r3, [r7, #15]
}
 800917a:	4618      	mov	r0, r3
 800917c:	3714      	adds	r7, #20
 800917e:	46bd      	mov	sp, r7
 8009180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009184:	4770      	bx	lr
 8009186:	bf00      	nop

08009188 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8009188:	b480      	push	{r7}
 800918a:	b089      	sub	sp, #36	; 0x24
 800918c:	af00      	add	r7, sp, #0
 800918e:	6078      	str	r0, [r7, #4]
 8009190:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8009192:	2300      	movs	r3, #0
 8009194:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8009196:	2300      	movs	r3, #0
 8009198:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800919a:	2300      	movs	r3, #0
 800919c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800919e:	2300      	movs	r3, #0
 80091a0:	61fb      	str	r3, [r7, #28]
 80091a2:	e177      	b.n	8009494 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80091a4:	2201      	movs	r2, #1
 80091a6:	69fb      	ldr	r3, [r7, #28]
 80091a8:	fa02 f303 	lsl.w	r3, r2, r3
 80091ac:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80091ae:	683b      	ldr	r3, [r7, #0]
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	697a      	ldr	r2, [r7, #20]
 80091b4:	4013      	ands	r3, r2
 80091b6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80091b8:	693a      	ldr	r2, [r7, #16]
 80091ba:	697b      	ldr	r3, [r7, #20]
 80091bc:	429a      	cmp	r2, r3
 80091be:	f040 8166 	bne.w	800948e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80091c2:	683b      	ldr	r3, [r7, #0]
 80091c4:	685b      	ldr	r3, [r3, #4]
 80091c6:	f003 0303 	and.w	r3, r3, #3
 80091ca:	2b01      	cmp	r3, #1
 80091cc:	d005      	beq.n	80091da <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80091ce:	683b      	ldr	r3, [r7, #0]
 80091d0:	685b      	ldr	r3, [r3, #4]
 80091d2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80091d6:	2b02      	cmp	r3, #2
 80091d8:	d130      	bne.n	800923c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	689b      	ldr	r3, [r3, #8]
 80091de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80091e0:	69fb      	ldr	r3, [r7, #28]
 80091e2:	005b      	lsls	r3, r3, #1
 80091e4:	2203      	movs	r2, #3
 80091e6:	fa02 f303 	lsl.w	r3, r2, r3
 80091ea:	43db      	mvns	r3, r3
 80091ec:	69ba      	ldr	r2, [r7, #24]
 80091ee:	4013      	ands	r3, r2
 80091f0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80091f2:	683b      	ldr	r3, [r7, #0]
 80091f4:	68da      	ldr	r2, [r3, #12]
 80091f6:	69fb      	ldr	r3, [r7, #28]
 80091f8:	005b      	lsls	r3, r3, #1
 80091fa:	fa02 f303 	lsl.w	r3, r2, r3
 80091fe:	69ba      	ldr	r2, [r7, #24]
 8009200:	4313      	orrs	r3, r2
 8009202:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	69ba      	ldr	r2, [r7, #24]
 8009208:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	685b      	ldr	r3, [r3, #4]
 800920e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8009210:	2201      	movs	r2, #1
 8009212:	69fb      	ldr	r3, [r7, #28]
 8009214:	fa02 f303 	lsl.w	r3, r2, r3
 8009218:	43db      	mvns	r3, r3
 800921a:	69ba      	ldr	r2, [r7, #24]
 800921c:	4013      	ands	r3, r2
 800921e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8009220:	683b      	ldr	r3, [r7, #0]
 8009222:	685b      	ldr	r3, [r3, #4]
 8009224:	091b      	lsrs	r3, r3, #4
 8009226:	f003 0201 	and.w	r2, r3, #1
 800922a:	69fb      	ldr	r3, [r7, #28]
 800922c:	fa02 f303 	lsl.w	r3, r2, r3
 8009230:	69ba      	ldr	r2, [r7, #24]
 8009232:	4313      	orrs	r3, r2
 8009234:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	69ba      	ldr	r2, [r7, #24]
 800923a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800923c:	683b      	ldr	r3, [r7, #0]
 800923e:	685b      	ldr	r3, [r3, #4]
 8009240:	f003 0303 	and.w	r3, r3, #3
 8009244:	2b03      	cmp	r3, #3
 8009246:	d017      	beq.n	8009278 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	68db      	ldr	r3, [r3, #12]
 800924c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800924e:	69fb      	ldr	r3, [r7, #28]
 8009250:	005b      	lsls	r3, r3, #1
 8009252:	2203      	movs	r2, #3
 8009254:	fa02 f303 	lsl.w	r3, r2, r3
 8009258:	43db      	mvns	r3, r3
 800925a:	69ba      	ldr	r2, [r7, #24]
 800925c:	4013      	ands	r3, r2
 800925e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8009260:	683b      	ldr	r3, [r7, #0]
 8009262:	689a      	ldr	r2, [r3, #8]
 8009264:	69fb      	ldr	r3, [r7, #28]
 8009266:	005b      	lsls	r3, r3, #1
 8009268:	fa02 f303 	lsl.w	r3, r2, r3
 800926c:	69ba      	ldr	r2, [r7, #24]
 800926e:	4313      	orrs	r3, r2
 8009270:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	69ba      	ldr	r2, [r7, #24]
 8009276:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8009278:	683b      	ldr	r3, [r7, #0]
 800927a:	685b      	ldr	r3, [r3, #4]
 800927c:	f003 0303 	and.w	r3, r3, #3
 8009280:	2b02      	cmp	r3, #2
 8009282:	d123      	bne.n	80092cc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8009284:	69fb      	ldr	r3, [r7, #28]
 8009286:	08da      	lsrs	r2, r3, #3
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	3208      	adds	r2, #8
 800928c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009290:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8009292:	69fb      	ldr	r3, [r7, #28]
 8009294:	f003 0307 	and.w	r3, r3, #7
 8009298:	009b      	lsls	r3, r3, #2
 800929a:	220f      	movs	r2, #15
 800929c:	fa02 f303 	lsl.w	r3, r2, r3
 80092a0:	43db      	mvns	r3, r3
 80092a2:	69ba      	ldr	r2, [r7, #24]
 80092a4:	4013      	ands	r3, r2
 80092a6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80092a8:	683b      	ldr	r3, [r7, #0]
 80092aa:	691a      	ldr	r2, [r3, #16]
 80092ac:	69fb      	ldr	r3, [r7, #28]
 80092ae:	f003 0307 	and.w	r3, r3, #7
 80092b2:	009b      	lsls	r3, r3, #2
 80092b4:	fa02 f303 	lsl.w	r3, r2, r3
 80092b8:	69ba      	ldr	r2, [r7, #24]
 80092ba:	4313      	orrs	r3, r2
 80092bc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80092be:	69fb      	ldr	r3, [r7, #28]
 80092c0:	08da      	lsrs	r2, r3, #3
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	3208      	adds	r2, #8
 80092c6:	69b9      	ldr	r1, [r7, #24]
 80092c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80092d2:	69fb      	ldr	r3, [r7, #28]
 80092d4:	005b      	lsls	r3, r3, #1
 80092d6:	2203      	movs	r2, #3
 80092d8:	fa02 f303 	lsl.w	r3, r2, r3
 80092dc:	43db      	mvns	r3, r3
 80092de:	69ba      	ldr	r2, [r7, #24]
 80092e0:	4013      	ands	r3, r2
 80092e2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80092e4:	683b      	ldr	r3, [r7, #0]
 80092e6:	685b      	ldr	r3, [r3, #4]
 80092e8:	f003 0203 	and.w	r2, r3, #3
 80092ec:	69fb      	ldr	r3, [r7, #28]
 80092ee:	005b      	lsls	r3, r3, #1
 80092f0:	fa02 f303 	lsl.w	r3, r2, r3
 80092f4:	69ba      	ldr	r2, [r7, #24]
 80092f6:	4313      	orrs	r3, r2
 80092f8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	69ba      	ldr	r2, [r7, #24]
 80092fe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8009300:	683b      	ldr	r3, [r7, #0]
 8009302:	685b      	ldr	r3, [r3, #4]
 8009304:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8009308:	2b00      	cmp	r3, #0
 800930a:	f000 80c0 	beq.w	800948e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800930e:	2300      	movs	r3, #0
 8009310:	60fb      	str	r3, [r7, #12]
 8009312:	4b66      	ldr	r3, [pc, #408]	; (80094ac <HAL_GPIO_Init+0x324>)
 8009314:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009316:	4a65      	ldr	r2, [pc, #404]	; (80094ac <HAL_GPIO_Init+0x324>)
 8009318:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800931c:	6453      	str	r3, [r2, #68]	; 0x44
 800931e:	4b63      	ldr	r3, [pc, #396]	; (80094ac <HAL_GPIO_Init+0x324>)
 8009320:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009322:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009326:	60fb      	str	r3, [r7, #12]
 8009328:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800932a:	4a61      	ldr	r2, [pc, #388]	; (80094b0 <HAL_GPIO_Init+0x328>)
 800932c:	69fb      	ldr	r3, [r7, #28]
 800932e:	089b      	lsrs	r3, r3, #2
 8009330:	3302      	adds	r3, #2
 8009332:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009336:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8009338:	69fb      	ldr	r3, [r7, #28]
 800933a:	f003 0303 	and.w	r3, r3, #3
 800933e:	009b      	lsls	r3, r3, #2
 8009340:	220f      	movs	r2, #15
 8009342:	fa02 f303 	lsl.w	r3, r2, r3
 8009346:	43db      	mvns	r3, r3
 8009348:	69ba      	ldr	r2, [r7, #24]
 800934a:	4013      	ands	r3, r2
 800934c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	4a58      	ldr	r2, [pc, #352]	; (80094b4 <HAL_GPIO_Init+0x32c>)
 8009352:	4293      	cmp	r3, r2
 8009354:	d037      	beq.n	80093c6 <HAL_GPIO_Init+0x23e>
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	4a57      	ldr	r2, [pc, #348]	; (80094b8 <HAL_GPIO_Init+0x330>)
 800935a:	4293      	cmp	r3, r2
 800935c:	d031      	beq.n	80093c2 <HAL_GPIO_Init+0x23a>
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	4a56      	ldr	r2, [pc, #344]	; (80094bc <HAL_GPIO_Init+0x334>)
 8009362:	4293      	cmp	r3, r2
 8009364:	d02b      	beq.n	80093be <HAL_GPIO_Init+0x236>
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	4a55      	ldr	r2, [pc, #340]	; (80094c0 <HAL_GPIO_Init+0x338>)
 800936a:	4293      	cmp	r3, r2
 800936c:	d025      	beq.n	80093ba <HAL_GPIO_Init+0x232>
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	4a54      	ldr	r2, [pc, #336]	; (80094c4 <HAL_GPIO_Init+0x33c>)
 8009372:	4293      	cmp	r3, r2
 8009374:	d01f      	beq.n	80093b6 <HAL_GPIO_Init+0x22e>
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	4a53      	ldr	r2, [pc, #332]	; (80094c8 <HAL_GPIO_Init+0x340>)
 800937a:	4293      	cmp	r3, r2
 800937c:	d019      	beq.n	80093b2 <HAL_GPIO_Init+0x22a>
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	4a52      	ldr	r2, [pc, #328]	; (80094cc <HAL_GPIO_Init+0x344>)
 8009382:	4293      	cmp	r3, r2
 8009384:	d013      	beq.n	80093ae <HAL_GPIO_Init+0x226>
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	4a51      	ldr	r2, [pc, #324]	; (80094d0 <HAL_GPIO_Init+0x348>)
 800938a:	4293      	cmp	r3, r2
 800938c:	d00d      	beq.n	80093aa <HAL_GPIO_Init+0x222>
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	4a50      	ldr	r2, [pc, #320]	; (80094d4 <HAL_GPIO_Init+0x34c>)
 8009392:	4293      	cmp	r3, r2
 8009394:	d007      	beq.n	80093a6 <HAL_GPIO_Init+0x21e>
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	4a4f      	ldr	r2, [pc, #316]	; (80094d8 <HAL_GPIO_Init+0x350>)
 800939a:	4293      	cmp	r3, r2
 800939c:	d101      	bne.n	80093a2 <HAL_GPIO_Init+0x21a>
 800939e:	2309      	movs	r3, #9
 80093a0:	e012      	b.n	80093c8 <HAL_GPIO_Init+0x240>
 80093a2:	230a      	movs	r3, #10
 80093a4:	e010      	b.n	80093c8 <HAL_GPIO_Init+0x240>
 80093a6:	2308      	movs	r3, #8
 80093a8:	e00e      	b.n	80093c8 <HAL_GPIO_Init+0x240>
 80093aa:	2307      	movs	r3, #7
 80093ac:	e00c      	b.n	80093c8 <HAL_GPIO_Init+0x240>
 80093ae:	2306      	movs	r3, #6
 80093b0:	e00a      	b.n	80093c8 <HAL_GPIO_Init+0x240>
 80093b2:	2305      	movs	r3, #5
 80093b4:	e008      	b.n	80093c8 <HAL_GPIO_Init+0x240>
 80093b6:	2304      	movs	r3, #4
 80093b8:	e006      	b.n	80093c8 <HAL_GPIO_Init+0x240>
 80093ba:	2303      	movs	r3, #3
 80093bc:	e004      	b.n	80093c8 <HAL_GPIO_Init+0x240>
 80093be:	2302      	movs	r3, #2
 80093c0:	e002      	b.n	80093c8 <HAL_GPIO_Init+0x240>
 80093c2:	2301      	movs	r3, #1
 80093c4:	e000      	b.n	80093c8 <HAL_GPIO_Init+0x240>
 80093c6:	2300      	movs	r3, #0
 80093c8:	69fa      	ldr	r2, [r7, #28]
 80093ca:	f002 0203 	and.w	r2, r2, #3
 80093ce:	0092      	lsls	r2, r2, #2
 80093d0:	4093      	lsls	r3, r2
 80093d2:	69ba      	ldr	r2, [r7, #24]
 80093d4:	4313      	orrs	r3, r2
 80093d6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80093d8:	4935      	ldr	r1, [pc, #212]	; (80094b0 <HAL_GPIO_Init+0x328>)
 80093da:	69fb      	ldr	r3, [r7, #28]
 80093dc:	089b      	lsrs	r3, r3, #2
 80093de:	3302      	adds	r3, #2
 80093e0:	69ba      	ldr	r2, [r7, #24]
 80093e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80093e6:	4b3d      	ldr	r3, [pc, #244]	; (80094dc <HAL_GPIO_Init+0x354>)
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80093ec:	693b      	ldr	r3, [r7, #16]
 80093ee:	43db      	mvns	r3, r3
 80093f0:	69ba      	ldr	r2, [r7, #24]
 80093f2:	4013      	ands	r3, r2
 80093f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80093f6:	683b      	ldr	r3, [r7, #0]
 80093f8:	685b      	ldr	r3, [r3, #4]
 80093fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d003      	beq.n	800940a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8009402:	69ba      	ldr	r2, [r7, #24]
 8009404:	693b      	ldr	r3, [r7, #16]
 8009406:	4313      	orrs	r3, r2
 8009408:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800940a:	4a34      	ldr	r2, [pc, #208]	; (80094dc <HAL_GPIO_Init+0x354>)
 800940c:	69bb      	ldr	r3, [r7, #24]
 800940e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8009410:	4b32      	ldr	r3, [pc, #200]	; (80094dc <HAL_GPIO_Init+0x354>)
 8009412:	685b      	ldr	r3, [r3, #4]
 8009414:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009416:	693b      	ldr	r3, [r7, #16]
 8009418:	43db      	mvns	r3, r3
 800941a:	69ba      	ldr	r2, [r7, #24]
 800941c:	4013      	ands	r3, r2
 800941e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8009420:	683b      	ldr	r3, [r7, #0]
 8009422:	685b      	ldr	r3, [r3, #4]
 8009424:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009428:	2b00      	cmp	r3, #0
 800942a:	d003      	beq.n	8009434 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800942c:	69ba      	ldr	r2, [r7, #24]
 800942e:	693b      	ldr	r3, [r7, #16]
 8009430:	4313      	orrs	r3, r2
 8009432:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8009434:	4a29      	ldr	r2, [pc, #164]	; (80094dc <HAL_GPIO_Init+0x354>)
 8009436:	69bb      	ldr	r3, [r7, #24]
 8009438:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800943a:	4b28      	ldr	r3, [pc, #160]	; (80094dc <HAL_GPIO_Init+0x354>)
 800943c:	689b      	ldr	r3, [r3, #8]
 800943e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009440:	693b      	ldr	r3, [r7, #16]
 8009442:	43db      	mvns	r3, r3
 8009444:	69ba      	ldr	r2, [r7, #24]
 8009446:	4013      	ands	r3, r2
 8009448:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800944a:	683b      	ldr	r3, [r7, #0]
 800944c:	685b      	ldr	r3, [r3, #4]
 800944e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009452:	2b00      	cmp	r3, #0
 8009454:	d003      	beq.n	800945e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8009456:	69ba      	ldr	r2, [r7, #24]
 8009458:	693b      	ldr	r3, [r7, #16]
 800945a:	4313      	orrs	r3, r2
 800945c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800945e:	4a1f      	ldr	r2, [pc, #124]	; (80094dc <HAL_GPIO_Init+0x354>)
 8009460:	69bb      	ldr	r3, [r7, #24]
 8009462:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8009464:	4b1d      	ldr	r3, [pc, #116]	; (80094dc <HAL_GPIO_Init+0x354>)
 8009466:	68db      	ldr	r3, [r3, #12]
 8009468:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800946a:	693b      	ldr	r3, [r7, #16]
 800946c:	43db      	mvns	r3, r3
 800946e:	69ba      	ldr	r2, [r7, #24]
 8009470:	4013      	ands	r3, r2
 8009472:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8009474:	683b      	ldr	r3, [r7, #0]
 8009476:	685b      	ldr	r3, [r3, #4]
 8009478:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800947c:	2b00      	cmp	r3, #0
 800947e:	d003      	beq.n	8009488 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8009480:	69ba      	ldr	r2, [r7, #24]
 8009482:	693b      	ldr	r3, [r7, #16]
 8009484:	4313      	orrs	r3, r2
 8009486:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8009488:	4a14      	ldr	r2, [pc, #80]	; (80094dc <HAL_GPIO_Init+0x354>)
 800948a:	69bb      	ldr	r3, [r7, #24]
 800948c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800948e:	69fb      	ldr	r3, [r7, #28]
 8009490:	3301      	adds	r3, #1
 8009492:	61fb      	str	r3, [r7, #28]
 8009494:	69fb      	ldr	r3, [r7, #28]
 8009496:	2b0f      	cmp	r3, #15
 8009498:	f67f ae84 	bls.w	80091a4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800949c:	bf00      	nop
 800949e:	bf00      	nop
 80094a0:	3724      	adds	r7, #36	; 0x24
 80094a2:	46bd      	mov	sp, r7
 80094a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094a8:	4770      	bx	lr
 80094aa:	bf00      	nop
 80094ac:	40023800 	.word	0x40023800
 80094b0:	40013800 	.word	0x40013800
 80094b4:	40020000 	.word	0x40020000
 80094b8:	40020400 	.word	0x40020400
 80094bc:	40020800 	.word	0x40020800
 80094c0:	40020c00 	.word	0x40020c00
 80094c4:	40021000 	.word	0x40021000
 80094c8:	40021400 	.word	0x40021400
 80094cc:	40021800 	.word	0x40021800
 80094d0:	40021c00 	.word	0x40021c00
 80094d4:	40022000 	.word	0x40022000
 80094d8:	40022400 	.word	0x40022400
 80094dc:	40013c00 	.word	0x40013c00

080094e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80094e0:	b480      	push	{r7}
 80094e2:	b083      	sub	sp, #12
 80094e4:	af00      	add	r7, sp, #0
 80094e6:	6078      	str	r0, [r7, #4]
 80094e8:	460b      	mov	r3, r1
 80094ea:	807b      	strh	r3, [r7, #2]
 80094ec:	4613      	mov	r3, r2
 80094ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80094f0:	787b      	ldrb	r3, [r7, #1]
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	d003      	beq.n	80094fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80094f6:	887a      	ldrh	r2, [r7, #2]
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80094fc:	e003      	b.n	8009506 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80094fe:	887b      	ldrh	r3, [r7, #2]
 8009500:	041a      	lsls	r2, r3, #16
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	619a      	str	r2, [r3, #24]
}
 8009506:	bf00      	nop
 8009508:	370c      	adds	r7, #12
 800950a:	46bd      	mov	sp, r7
 800950c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009510:	4770      	bx	lr
	...

08009514 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8009514:	b580      	push	{r7, lr}
 8009516:	b082      	sub	sp, #8
 8009518:	af00      	add	r7, sp, #0
 800951a:	4603      	mov	r3, r0
 800951c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800951e:	4b08      	ldr	r3, [pc, #32]	; (8009540 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8009520:	695a      	ldr	r2, [r3, #20]
 8009522:	88fb      	ldrh	r3, [r7, #6]
 8009524:	4013      	ands	r3, r2
 8009526:	2b00      	cmp	r3, #0
 8009528:	d006      	beq.n	8009538 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800952a:	4a05      	ldr	r2, [pc, #20]	; (8009540 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800952c:	88fb      	ldrh	r3, [r7, #6]
 800952e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8009530:	88fb      	ldrh	r3, [r7, #6]
 8009532:	4618      	mov	r0, r3
 8009534:	f7f8 fa66 	bl	8001a04 <HAL_GPIO_EXTI_Callback>
  }
}
 8009538:	bf00      	nop
 800953a:	3708      	adds	r7, #8
 800953c:	46bd      	mov	sp, r7
 800953e:	bd80      	pop	{r7, pc}
 8009540:	40013c00 	.word	0x40013c00

08009544 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8009544:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009546:	b08f      	sub	sp, #60	; 0x3c
 8009548:	af0a      	add	r7, sp, #40	; 0x28
 800954a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	2b00      	cmp	r3, #0
 8009550:	d101      	bne.n	8009556 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8009552:	2301      	movs	r3, #1
 8009554:	e10f      	b.n	8009776 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8009562:	b2db      	uxtb	r3, r3
 8009564:	2b00      	cmp	r3, #0
 8009566:	d106      	bne.n	8009576 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	2200      	movs	r2, #0
 800956c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8009570:	6878      	ldr	r0, [r7, #4]
 8009572:	f00a ffe3 	bl	801453c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	2203      	movs	r2, #3
 800957a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800957e:	68bb      	ldr	r3, [r7, #8]
 8009580:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009582:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009586:	2b00      	cmp	r3, #0
 8009588:	d102      	bne.n	8009590 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	2200      	movs	r2, #0
 800958e:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	4618      	mov	r0, r3
 8009596:	f004 fd20 	bl	800dfda <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	603b      	str	r3, [r7, #0]
 80095a0:	687e      	ldr	r6, [r7, #4]
 80095a2:	466d      	mov	r5, sp
 80095a4:	f106 0410 	add.w	r4, r6, #16
 80095a8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80095aa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80095ac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80095ae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80095b0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80095b4:	e885 0003 	stmia.w	r5, {r0, r1}
 80095b8:	1d33      	adds	r3, r6, #4
 80095ba:	cb0e      	ldmia	r3, {r1, r2, r3}
 80095bc:	6838      	ldr	r0, [r7, #0]
 80095be:	f004 fbf7 	bl	800ddb0 <USB_CoreInit>
 80095c2:	4603      	mov	r3, r0
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	d005      	beq.n	80095d4 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	2202      	movs	r2, #2
 80095cc:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80095d0:	2301      	movs	r3, #1
 80095d2:	e0d0      	b.n	8009776 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	2100      	movs	r1, #0
 80095da:	4618      	mov	r0, r3
 80095dc:	f004 fd0e 	bl	800dffc <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80095e0:	2300      	movs	r3, #0
 80095e2:	73fb      	strb	r3, [r7, #15]
 80095e4:	e04a      	b.n	800967c <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80095e6:	7bfa      	ldrb	r2, [r7, #15]
 80095e8:	6879      	ldr	r1, [r7, #4]
 80095ea:	4613      	mov	r3, r2
 80095ec:	00db      	lsls	r3, r3, #3
 80095ee:	1a9b      	subs	r3, r3, r2
 80095f0:	009b      	lsls	r3, r3, #2
 80095f2:	440b      	add	r3, r1
 80095f4:	333d      	adds	r3, #61	; 0x3d
 80095f6:	2201      	movs	r2, #1
 80095f8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80095fa:	7bfa      	ldrb	r2, [r7, #15]
 80095fc:	6879      	ldr	r1, [r7, #4]
 80095fe:	4613      	mov	r3, r2
 8009600:	00db      	lsls	r3, r3, #3
 8009602:	1a9b      	subs	r3, r3, r2
 8009604:	009b      	lsls	r3, r3, #2
 8009606:	440b      	add	r3, r1
 8009608:	333c      	adds	r3, #60	; 0x3c
 800960a:	7bfa      	ldrb	r2, [r7, #15]
 800960c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800960e:	7bfa      	ldrb	r2, [r7, #15]
 8009610:	7bfb      	ldrb	r3, [r7, #15]
 8009612:	b298      	uxth	r0, r3
 8009614:	6879      	ldr	r1, [r7, #4]
 8009616:	4613      	mov	r3, r2
 8009618:	00db      	lsls	r3, r3, #3
 800961a:	1a9b      	subs	r3, r3, r2
 800961c:	009b      	lsls	r3, r3, #2
 800961e:	440b      	add	r3, r1
 8009620:	3342      	adds	r3, #66	; 0x42
 8009622:	4602      	mov	r2, r0
 8009624:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8009626:	7bfa      	ldrb	r2, [r7, #15]
 8009628:	6879      	ldr	r1, [r7, #4]
 800962a:	4613      	mov	r3, r2
 800962c:	00db      	lsls	r3, r3, #3
 800962e:	1a9b      	subs	r3, r3, r2
 8009630:	009b      	lsls	r3, r3, #2
 8009632:	440b      	add	r3, r1
 8009634:	333f      	adds	r3, #63	; 0x3f
 8009636:	2200      	movs	r2, #0
 8009638:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800963a:	7bfa      	ldrb	r2, [r7, #15]
 800963c:	6879      	ldr	r1, [r7, #4]
 800963e:	4613      	mov	r3, r2
 8009640:	00db      	lsls	r3, r3, #3
 8009642:	1a9b      	subs	r3, r3, r2
 8009644:	009b      	lsls	r3, r3, #2
 8009646:	440b      	add	r3, r1
 8009648:	3344      	adds	r3, #68	; 0x44
 800964a:	2200      	movs	r2, #0
 800964c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800964e:	7bfa      	ldrb	r2, [r7, #15]
 8009650:	6879      	ldr	r1, [r7, #4]
 8009652:	4613      	mov	r3, r2
 8009654:	00db      	lsls	r3, r3, #3
 8009656:	1a9b      	subs	r3, r3, r2
 8009658:	009b      	lsls	r3, r3, #2
 800965a:	440b      	add	r3, r1
 800965c:	3348      	adds	r3, #72	; 0x48
 800965e:	2200      	movs	r2, #0
 8009660:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8009662:	7bfa      	ldrb	r2, [r7, #15]
 8009664:	6879      	ldr	r1, [r7, #4]
 8009666:	4613      	mov	r3, r2
 8009668:	00db      	lsls	r3, r3, #3
 800966a:	1a9b      	subs	r3, r3, r2
 800966c:	009b      	lsls	r3, r3, #2
 800966e:	440b      	add	r3, r1
 8009670:	3350      	adds	r3, #80	; 0x50
 8009672:	2200      	movs	r2, #0
 8009674:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009676:	7bfb      	ldrb	r3, [r7, #15]
 8009678:	3301      	adds	r3, #1
 800967a:	73fb      	strb	r3, [r7, #15]
 800967c:	7bfa      	ldrb	r2, [r7, #15]
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	685b      	ldr	r3, [r3, #4]
 8009682:	429a      	cmp	r2, r3
 8009684:	d3af      	bcc.n	80095e6 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009686:	2300      	movs	r3, #0
 8009688:	73fb      	strb	r3, [r7, #15]
 800968a:	e044      	b.n	8009716 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800968c:	7bfa      	ldrb	r2, [r7, #15]
 800968e:	6879      	ldr	r1, [r7, #4]
 8009690:	4613      	mov	r3, r2
 8009692:	00db      	lsls	r3, r3, #3
 8009694:	1a9b      	subs	r3, r3, r2
 8009696:	009b      	lsls	r3, r3, #2
 8009698:	440b      	add	r3, r1
 800969a:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 800969e:	2200      	movs	r2, #0
 80096a0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80096a2:	7bfa      	ldrb	r2, [r7, #15]
 80096a4:	6879      	ldr	r1, [r7, #4]
 80096a6:	4613      	mov	r3, r2
 80096a8:	00db      	lsls	r3, r3, #3
 80096aa:	1a9b      	subs	r3, r3, r2
 80096ac:	009b      	lsls	r3, r3, #2
 80096ae:	440b      	add	r3, r1
 80096b0:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80096b4:	7bfa      	ldrb	r2, [r7, #15]
 80096b6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80096b8:	7bfa      	ldrb	r2, [r7, #15]
 80096ba:	6879      	ldr	r1, [r7, #4]
 80096bc:	4613      	mov	r3, r2
 80096be:	00db      	lsls	r3, r3, #3
 80096c0:	1a9b      	subs	r3, r3, r2
 80096c2:	009b      	lsls	r3, r3, #2
 80096c4:	440b      	add	r3, r1
 80096c6:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80096ca:	2200      	movs	r2, #0
 80096cc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80096ce:	7bfa      	ldrb	r2, [r7, #15]
 80096d0:	6879      	ldr	r1, [r7, #4]
 80096d2:	4613      	mov	r3, r2
 80096d4:	00db      	lsls	r3, r3, #3
 80096d6:	1a9b      	subs	r3, r3, r2
 80096d8:	009b      	lsls	r3, r3, #2
 80096da:	440b      	add	r3, r1
 80096dc:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80096e0:	2200      	movs	r2, #0
 80096e2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80096e4:	7bfa      	ldrb	r2, [r7, #15]
 80096e6:	6879      	ldr	r1, [r7, #4]
 80096e8:	4613      	mov	r3, r2
 80096ea:	00db      	lsls	r3, r3, #3
 80096ec:	1a9b      	subs	r3, r3, r2
 80096ee:	009b      	lsls	r3, r3, #2
 80096f0:	440b      	add	r3, r1
 80096f2:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80096f6:	2200      	movs	r2, #0
 80096f8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80096fa:	7bfa      	ldrb	r2, [r7, #15]
 80096fc:	6879      	ldr	r1, [r7, #4]
 80096fe:	4613      	mov	r3, r2
 8009700:	00db      	lsls	r3, r3, #3
 8009702:	1a9b      	subs	r3, r3, r2
 8009704:	009b      	lsls	r3, r3, #2
 8009706:	440b      	add	r3, r1
 8009708:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800970c:	2200      	movs	r2, #0
 800970e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009710:	7bfb      	ldrb	r3, [r7, #15]
 8009712:	3301      	adds	r3, #1
 8009714:	73fb      	strb	r3, [r7, #15]
 8009716:	7bfa      	ldrb	r2, [r7, #15]
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	685b      	ldr	r3, [r3, #4]
 800971c:	429a      	cmp	r2, r3
 800971e:	d3b5      	bcc.n	800968c <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	603b      	str	r3, [r7, #0]
 8009726:	687e      	ldr	r6, [r7, #4]
 8009728:	466d      	mov	r5, sp
 800972a:	f106 0410 	add.w	r4, r6, #16
 800972e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009730:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8009732:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009734:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8009736:	e894 0003 	ldmia.w	r4, {r0, r1}
 800973a:	e885 0003 	stmia.w	r5, {r0, r1}
 800973e:	1d33      	adds	r3, r6, #4
 8009740:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009742:	6838      	ldr	r0, [r7, #0]
 8009744:	f004 fca6 	bl	800e094 <USB_DevInit>
 8009748:	4603      	mov	r3, r0
 800974a:	2b00      	cmp	r3, #0
 800974c:	d005      	beq.n	800975a <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	2202      	movs	r2, #2
 8009752:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8009756:	2301      	movs	r3, #1
 8009758:	e00d      	b.n	8009776 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	2200      	movs	r2, #0
 800975e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	2201      	movs	r2, #1
 8009766:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	4618      	mov	r0, r3
 8009770:	f005 fd22 	bl	800f1b8 <USB_DevDisconnect>

  return HAL_OK;
 8009774:	2300      	movs	r3, #0
}
 8009776:	4618      	mov	r0, r3
 8009778:	3714      	adds	r7, #20
 800977a:	46bd      	mov	sp, r7
 800977c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800977e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800977e:	b580      	push	{r7, lr}
 8009780:	b084      	sub	sp, #16
 8009782:	af00      	add	r7, sp, #0
 8009784:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8009792:	2b01      	cmp	r3, #1
 8009794:	d101      	bne.n	800979a <HAL_PCD_Start+0x1c>
 8009796:	2302      	movs	r3, #2
 8009798:	e020      	b.n	80097dc <HAL_PCD_Start+0x5e>
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	2201      	movs	r2, #1
 800979e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80097a6:	2b01      	cmp	r3, #1
 80097a8:	d109      	bne.n	80097be <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80097ae:	2b01      	cmp	r3, #1
 80097b0:	d005      	beq.n	80097be <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80097b2:	68fb      	ldr	r3, [r7, #12]
 80097b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097b6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80097ba:	68fb      	ldr	r3, [r7, #12]
 80097bc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	4618      	mov	r0, r3
 80097c4:	f004 fbf8 	bl	800dfb8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	4618      	mov	r0, r3
 80097ce:	f005 fcd2 	bl	800f176 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	2200      	movs	r2, #0
 80097d6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80097da:	2300      	movs	r3, #0
}
 80097dc:	4618      	mov	r0, r3
 80097de:	3710      	adds	r7, #16
 80097e0:	46bd      	mov	sp, r7
 80097e2:	bd80      	pop	{r7, pc}

080097e4 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80097e4:	b590      	push	{r4, r7, lr}
 80097e6:	b08d      	sub	sp, #52	; 0x34
 80097e8:	af00      	add	r7, sp, #0
 80097ea:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80097f2:	6a3b      	ldr	r3, [r7, #32]
 80097f4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	4618      	mov	r0, r3
 80097fc:	f005 fd90 	bl	800f320 <USB_GetMode>
 8009800:	4603      	mov	r3, r0
 8009802:	2b00      	cmp	r3, #0
 8009804:	f040 839d 	bne.w	8009f42 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	4618      	mov	r0, r3
 800980e:	f005 fcf4 	bl	800f1fa <USB_ReadInterrupts>
 8009812:	4603      	mov	r3, r0
 8009814:	2b00      	cmp	r3, #0
 8009816:	f000 8393 	beq.w	8009f40 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	4618      	mov	r0, r3
 8009820:	f005 fceb 	bl	800f1fa <USB_ReadInterrupts>
 8009824:	4603      	mov	r3, r0
 8009826:	f003 0302 	and.w	r3, r3, #2
 800982a:	2b02      	cmp	r3, #2
 800982c:	d107      	bne.n	800983e <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	695a      	ldr	r2, [r3, #20]
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	f002 0202 	and.w	r2, r2, #2
 800983c:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	4618      	mov	r0, r3
 8009844:	f005 fcd9 	bl	800f1fa <USB_ReadInterrupts>
 8009848:	4603      	mov	r3, r0
 800984a:	f003 0310 	and.w	r3, r3, #16
 800984e:	2b10      	cmp	r3, #16
 8009850:	d161      	bne.n	8009916 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	699a      	ldr	r2, [r3, #24]
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	f022 0210 	bic.w	r2, r2, #16
 8009860:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8009862:	6a3b      	ldr	r3, [r7, #32]
 8009864:	6a1b      	ldr	r3, [r3, #32]
 8009866:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8009868:	69bb      	ldr	r3, [r7, #24]
 800986a:	f003 020f 	and.w	r2, r3, #15
 800986e:	4613      	mov	r3, r2
 8009870:	00db      	lsls	r3, r3, #3
 8009872:	1a9b      	subs	r3, r3, r2
 8009874:	009b      	lsls	r3, r3, #2
 8009876:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800987a:	687a      	ldr	r2, [r7, #4]
 800987c:	4413      	add	r3, r2
 800987e:	3304      	adds	r3, #4
 8009880:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8009882:	69bb      	ldr	r3, [r7, #24]
 8009884:	0c5b      	lsrs	r3, r3, #17
 8009886:	f003 030f 	and.w	r3, r3, #15
 800988a:	2b02      	cmp	r3, #2
 800988c:	d124      	bne.n	80098d8 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 800988e:	69ba      	ldr	r2, [r7, #24]
 8009890:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8009894:	4013      	ands	r3, r2
 8009896:	2b00      	cmp	r3, #0
 8009898:	d035      	beq.n	8009906 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800989a:	697b      	ldr	r3, [r7, #20]
 800989c:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 800989e:	69bb      	ldr	r3, [r7, #24]
 80098a0:	091b      	lsrs	r3, r3, #4
 80098a2:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80098a4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80098a8:	b29b      	uxth	r3, r3
 80098aa:	461a      	mov	r2, r3
 80098ac:	6a38      	ldr	r0, [r7, #32]
 80098ae:	f005 fb10 	bl	800eed2 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80098b2:	697b      	ldr	r3, [r7, #20]
 80098b4:	68da      	ldr	r2, [r3, #12]
 80098b6:	69bb      	ldr	r3, [r7, #24]
 80098b8:	091b      	lsrs	r3, r3, #4
 80098ba:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80098be:	441a      	add	r2, r3
 80098c0:	697b      	ldr	r3, [r7, #20]
 80098c2:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80098c4:	697b      	ldr	r3, [r7, #20]
 80098c6:	699a      	ldr	r2, [r3, #24]
 80098c8:	69bb      	ldr	r3, [r7, #24]
 80098ca:	091b      	lsrs	r3, r3, #4
 80098cc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80098d0:	441a      	add	r2, r3
 80098d2:	697b      	ldr	r3, [r7, #20]
 80098d4:	619a      	str	r2, [r3, #24]
 80098d6:	e016      	b.n	8009906 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 80098d8:	69bb      	ldr	r3, [r7, #24]
 80098da:	0c5b      	lsrs	r3, r3, #17
 80098dc:	f003 030f 	and.w	r3, r3, #15
 80098e0:	2b06      	cmp	r3, #6
 80098e2:	d110      	bne.n	8009906 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80098ea:	2208      	movs	r2, #8
 80098ec:	4619      	mov	r1, r3
 80098ee:	6a38      	ldr	r0, [r7, #32]
 80098f0:	f005 faef 	bl	800eed2 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80098f4:	697b      	ldr	r3, [r7, #20]
 80098f6:	699a      	ldr	r2, [r3, #24]
 80098f8:	69bb      	ldr	r3, [r7, #24]
 80098fa:	091b      	lsrs	r3, r3, #4
 80098fc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009900:	441a      	add	r2, r3
 8009902:	697b      	ldr	r3, [r7, #20]
 8009904:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	699a      	ldr	r2, [r3, #24]
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	681b      	ldr	r3, [r3, #0]
 8009910:	f042 0210 	orr.w	r2, r2, #16
 8009914:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	4618      	mov	r0, r3
 800991c:	f005 fc6d 	bl	800f1fa <USB_ReadInterrupts>
 8009920:	4603      	mov	r3, r0
 8009922:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009926:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800992a:	d16e      	bne.n	8009a0a <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 800992c:	2300      	movs	r3, #0
 800992e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	4618      	mov	r0, r3
 8009936:	f005 fc73 	bl	800f220 <USB_ReadDevAllOutEpInterrupt>
 800993a:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800993c:	e062      	b.n	8009a04 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 800993e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009940:	f003 0301 	and.w	r3, r3, #1
 8009944:	2b00      	cmp	r3, #0
 8009946:	d057      	beq.n	80099f8 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800994e:	b2d2      	uxtb	r2, r2
 8009950:	4611      	mov	r1, r2
 8009952:	4618      	mov	r0, r3
 8009954:	f005 fc98 	bl	800f288 <USB_ReadDevOutEPInterrupt>
 8009958:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800995a:	693b      	ldr	r3, [r7, #16]
 800995c:	f003 0301 	and.w	r3, r3, #1
 8009960:	2b00      	cmp	r3, #0
 8009962:	d00c      	beq.n	800997e <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8009964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009966:	015a      	lsls	r2, r3, #5
 8009968:	69fb      	ldr	r3, [r7, #28]
 800996a:	4413      	add	r3, r2
 800996c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009970:	461a      	mov	r2, r3
 8009972:	2301      	movs	r3, #1
 8009974:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8009976:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009978:	6878      	ldr	r0, [r7, #4]
 800997a:	f000 fdb1 	bl	800a4e0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800997e:	693b      	ldr	r3, [r7, #16]
 8009980:	f003 0308 	and.w	r3, r3, #8
 8009984:	2b00      	cmp	r3, #0
 8009986:	d00c      	beq.n	80099a2 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8009988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800998a:	015a      	lsls	r2, r3, #5
 800998c:	69fb      	ldr	r3, [r7, #28]
 800998e:	4413      	add	r3, r2
 8009990:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009994:	461a      	mov	r2, r3
 8009996:	2308      	movs	r3, #8
 8009998:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800999a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800999c:	6878      	ldr	r0, [r7, #4]
 800999e:	f000 feab 	bl	800a6f8 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80099a2:	693b      	ldr	r3, [r7, #16]
 80099a4:	f003 0310 	and.w	r3, r3, #16
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	d008      	beq.n	80099be <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80099ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099ae:	015a      	lsls	r2, r3, #5
 80099b0:	69fb      	ldr	r3, [r7, #28]
 80099b2:	4413      	add	r3, r2
 80099b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80099b8:	461a      	mov	r2, r3
 80099ba:	2310      	movs	r3, #16
 80099bc:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80099be:	693b      	ldr	r3, [r7, #16]
 80099c0:	f003 0320 	and.w	r3, r3, #32
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	d008      	beq.n	80099da <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80099c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099ca:	015a      	lsls	r2, r3, #5
 80099cc:	69fb      	ldr	r3, [r7, #28]
 80099ce:	4413      	add	r3, r2
 80099d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80099d4:	461a      	mov	r2, r3
 80099d6:	2320      	movs	r3, #32
 80099d8:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80099da:	693b      	ldr	r3, [r7, #16]
 80099dc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80099e0:	2b00      	cmp	r3, #0
 80099e2:	d009      	beq.n	80099f8 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80099e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099e6:	015a      	lsls	r2, r3, #5
 80099e8:	69fb      	ldr	r3, [r7, #28]
 80099ea:	4413      	add	r3, r2
 80099ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80099f0:	461a      	mov	r2, r3
 80099f2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80099f6:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80099f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099fa:	3301      	adds	r3, #1
 80099fc:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80099fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a00:	085b      	lsrs	r3, r3, #1
 8009a02:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8009a04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	d199      	bne.n	800993e <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	4618      	mov	r0, r3
 8009a10:	f005 fbf3 	bl	800f1fa <USB_ReadInterrupts>
 8009a14:	4603      	mov	r3, r0
 8009a16:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009a1a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009a1e:	f040 80c0 	bne.w	8009ba2 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	4618      	mov	r0, r3
 8009a28:	f005 fc14 	bl	800f254 <USB_ReadDevAllInEpInterrupt>
 8009a2c:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8009a2e:	2300      	movs	r3, #0
 8009a30:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8009a32:	e0b2      	b.n	8009b9a <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8009a34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a36:	f003 0301 	and.w	r3, r3, #1
 8009a3a:	2b00      	cmp	r3, #0
 8009a3c:	f000 80a7 	beq.w	8009b8e <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009a46:	b2d2      	uxtb	r2, r2
 8009a48:	4611      	mov	r1, r2
 8009a4a:	4618      	mov	r0, r3
 8009a4c:	f005 fc3a 	bl	800f2c4 <USB_ReadDevInEPInterrupt>
 8009a50:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8009a52:	693b      	ldr	r3, [r7, #16]
 8009a54:	f003 0301 	and.w	r3, r3, #1
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	d057      	beq.n	8009b0c <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8009a5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a5e:	f003 030f 	and.w	r3, r3, #15
 8009a62:	2201      	movs	r2, #1
 8009a64:	fa02 f303 	lsl.w	r3, r2, r3
 8009a68:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8009a6a:	69fb      	ldr	r3, [r7, #28]
 8009a6c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009a70:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009a72:	68fb      	ldr	r3, [r7, #12]
 8009a74:	43db      	mvns	r3, r3
 8009a76:	69f9      	ldr	r1, [r7, #28]
 8009a78:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009a7c:	4013      	ands	r3, r2
 8009a7e:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8009a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a82:	015a      	lsls	r2, r3, #5
 8009a84:	69fb      	ldr	r3, [r7, #28]
 8009a86:	4413      	add	r3, r2
 8009a88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009a8c:	461a      	mov	r2, r3
 8009a8e:	2301      	movs	r3, #1
 8009a90:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	691b      	ldr	r3, [r3, #16]
 8009a96:	2b01      	cmp	r3, #1
 8009a98:	d132      	bne.n	8009b00 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8009a9a:	6879      	ldr	r1, [r7, #4]
 8009a9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009a9e:	4613      	mov	r3, r2
 8009aa0:	00db      	lsls	r3, r3, #3
 8009aa2:	1a9b      	subs	r3, r3, r2
 8009aa4:	009b      	lsls	r3, r3, #2
 8009aa6:	440b      	add	r3, r1
 8009aa8:	3348      	adds	r3, #72	; 0x48
 8009aaa:	6819      	ldr	r1, [r3, #0]
 8009aac:	6878      	ldr	r0, [r7, #4]
 8009aae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009ab0:	4613      	mov	r3, r2
 8009ab2:	00db      	lsls	r3, r3, #3
 8009ab4:	1a9b      	subs	r3, r3, r2
 8009ab6:	009b      	lsls	r3, r3, #2
 8009ab8:	4403      	add	r3, r0
 8009aba:	3344      	adds	r3, #68	; 0x44
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	4419      	add	r1, r3
 8009ac0:	6878      	ldr	r0, [r7, #4]
 8009ac2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009ac4:	4613      	mov	r3, r2
 8009ac6:	00db      	lsls	r3, r3, #3
 8009ac8:	1a9b      	subs	r3, r3, r2
 8009aca:	009b      	lsls	r3, r3, #2
 8009acc:	4403      	add	r3, r0
 8009ace:	3348      	adds	r3, #72	; 0x48
 8009ad0:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8009ad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ad4:	2b00      	cmp	r3, #0
 8009ad6:	d113      	bne.n	8009b00 <HAL_PCD_IRQHandler+0x31c>
 8009ad8:	6879      	ldr	r1, [r7, #4]
 8009ada:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009adc:	4613      	mov	r3, r2
 8009ade:	00db      	lsls	r3, r3, #3
 8009ae0:	1a9b      	subs	r3, r3, r2
 8009ae2:	009b      	lsls	r3, r3, #2
 8009ae4:	440b      	add	r3, r1
 8009ae6:	3350      	adds	r3, #80	; 0x50
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	d108      	bne.n	8009b00 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	6818      	ldr	r0, [r3, #0]
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8009af8:	461a      	mov	r2, r3
 8009afa:	2101      	movs	r1, #1
 8009afc:	f005 fc42 	bl	800f384 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8009b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b02:	b2db      	uxtb	r3, r3
 8009b04:	4619      	mov	r1, r3
 8009b06:	6878      	ldr	r0, [r7, #4]
 8009b08:	f00a fd99 	bl	801463e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8009b0c:	693b      	ldr	r3, [r7, #16]
 8009b0e:	f003 0308 	and.w	r3, r3, #8
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	d008      	beq.n	8009b28 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8009b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b18:	015a      	lsls	r2, r3, #5
 8009b1a:	69fb      	ldr	r3, [r7, #28]
 8009b1c:	4413      	add	r3, r2
 8009b1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009b22:	461a      	mov	r2, r3
 8009b24:	2308      	movs	r3, #8
 8009b26:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8009b28:	693b      	ldr	r3, [r7, #16]
 8009b2a:	f003 0310 	and.w	r3, r3, #16
 8009b2e:	2b00      	cmp	r3, #0
 8009b30:	d008      	beq.n	8009b44 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8009b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b34:	015a      	lsls	r2, r3, #5
 8009b36:	69fb      	ldr	r3, [r7, #28]
 8009b38:	4413      	add	r3, r2
 8009b3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009b3e:	461a      	mov	r2, r3
 8009b40:	2310      	movs	r3, #16
 8009b42:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8009b44:	693b      	ldr	r3, [r7, #16]
 8009b46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009b4a:	2b00      	cmp	r3, #0
 8009b4c:	d008      	beq.n	8009b60 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8009b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b50:	015a      	lsls	r2, r3, #5
 8009b52:	69fb      	ldr	r3, [r7, #28]
 8009b54:	4413      	add	r3, r2
 8009b56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009b5a:	461a      	mov	r2, r3
 8009b5c:	2340      	movs	r3, #64	; 0x40
 8009b5e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8009b60:	693b      	ldr	r3, [r7, #16]
 8009b62:	f003 0302 	and.w	r3, r3, #2
 8009b66:	2b00      	cmp	r3, #0
 8009b68:	d008      	beq.n	8009b7c <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8009b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b6c:	015a      	lsls	r2, r3, #5
 8009b6e:	69fb      	ldr	r3, [r7, #28]
 8009b70:	4413      	add	r3, r2
 8009b72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009b76:	461a      	mov	r2, r3
 8009b78:	2302      	movs	r3, #2
 8009b7a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8009b7c:	693b      	ldr	r3, [r7, #16]
 8009b7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	d003      	beq.n	8009b8e <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8009b86:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009b88:	6878      	ldr	r0, [r7, #4]
 8009b8a:	f000 fc1b 	bl	800a3c4 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8009b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b90:	3301      	adds	r3, #1
 8009b92:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8009b94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b96:	085b      	lsrs	r3, r3, #1
 8009b98:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8009b9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b9c:	2b00      	cmp	r3, #0
 8009b9e:	f47f af49 	bne.w	8009a34 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	4618      	mov	r0, r3
 8009ba8:	f005 fb27 	bl	800f1fa <USB_ReadInterrupts>
 8009bac:	4603      	mov	r3, r0
 8009bae:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009bb2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009bb6:	d122      	bne.n	8009bfe <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8009bb8:	69fb      	ldr	r3, [r7, #28]
 8009bba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009bbe:	685b      	ldr	r3, [r3, #4]
 8009bc0:	69fa      	ldr	r2, [r7, #28]
 8009bc2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009bc6:	f023 0301 	bic.w	r3, r3, #1
 8009bca:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8009bd2:	2b01      	cmp	r3, #1
 8009bd4:	d108      	bne.n	8009be8 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	2200      	movs	r2, #0
 8009bda:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8009bde:	2100      	movs	r1, #0
 8009be0:	6878      	ldr	r0, [r7, #4]
 8009be2:	f000 fe27 	bl	800a834 <HAL_PCDEx_LPM_Callback>
 8009be6:	e002      	b.n	8009bee <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8009be8:	6878      	ldr	r0, [r7, #4]
 8009bea:	f00a fd9f 	bl	801472c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	695a      	ldr	r2, [r3, #20]
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8009bfc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	4618      	mov	r0, r3
 8009c04:	f005 faf9 	bl	800f1fa <USB_ReadInterrupts>
 8009c08:	4603      	mov	r3, r0
 8009c0a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009c0e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009c12:	d112      	bne.n	8009c3a <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8009c14:	69fb      	ldr	r3, [r7, #28]
 8009c16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009c1a:	689b      	ldr	r3, [r3, #8]
 8009c1c:	f003 0301 	and.w	r3, r3, #1
 8009c20:	2b01      	cmp	r3, #1
 8009c22:	d102      	bne.n	8009c2a <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8009c24:	6878      	ldr	r0, [r7, #4]
 8009c26:	f00a fd5b 	bl	80146e0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	695a      	ldr	r2, [r3, #20]
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	681b      	ldr	r3, [r3, #0]
 8009c34:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8009c38:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	681b      	ldr	r3, [r3, #0]
 8009c3e:	4618      	mov	r0, r3
 8009c40:	f005 fadb 	bl	800f1fa <USB_ReadInterrupts>
 8009c44:	4603      	mov	r3, r0
 8009c46:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009c4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009c4e:	f040 80c7 	bne.w	8009de0 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8009c52:	69fb      	ldr	r3, [r7, #28]
 8009c54:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009c58:	685b      	ldr	r3, [r3, #4]
 8009c5a:	69fa      	ldr	r2, [r7, #28]
 8009c5c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009c60:	f023 0301 	bic.w	r3, r3, #1
 8009c64:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	2110      	movs	r1, #16
 8009c6c:	4618      	mov	r0, r3
 8009c6e:	f004 fb75 	bl	800e35c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009c72:	2300      	movs	r3, #0
 8009c74:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009c76:	e056      	b.n	8009d26 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8009c78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c7a:	015a      	lsls	r2, r3, #5
 8009c7c:	69fb      	ldr	r3, [r7, #28]
 8009c7e:	4413      	add	r3, r2
 8009c80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009c84:	461a      	mov	r2, r3
 8009c86:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009c8a:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8009c8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c8e:	015a      	lsls	r2, r3, #5
 8009c90:	69fb      	ldr	r3, [r7, #28]
 8009c92:	4413      	add	r3, r2
 8009c94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009c98:	681b      	ldr	r3, [r3, #0]
 8009c9a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009c9c:	0151      	lsls	r1, r2, #5
 8009c9e:	69fa      	ldr	r2, [r7, #28]
 8009ca0:	440a      	add	r2, r1
 8009ca2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009ca6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009caa:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8009cac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009cae:	015a      	lsls	r2, r3, #5
 8009cb0:	69fb      	ldr	r3, [r7, #28]
 8009cb2:	4413      	add	r3, r2
 8009cb4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009cbc:	0151      	lsls	r1, r2, #5
 8009cbe:	69fa      	ldr	r2, [r7, #28]
 8009cc0:	440a      	add	r2, r1
 8009cc2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009cc6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009cca:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8009ccc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009cce:	015a      	lsls	r2, r3, #5
 8009cd0:	69fb      	ldr	r3, [r7, #28]
 8009cd2:	4413      	add	r3, r2
 8009cd4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009cd8:	461a      	mov	r2, r3
 8009cda:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009cde:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8009ce0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ce2:	015a      	lsls	r2, r3, #5
 8009ce4:	69fb      	ldr	r3, [r7, #28]
 8009ce6:	4413      	add	r3, r2
 8009ce8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009cf0:	0151      	lsls	r1, r2, #5
 8009cf2:	69fa      	ldr	r2, [r7, #28]
 8009cf4:	440a      	add	r2, r1
 8009cf6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009cfa:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009cfe:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8009d00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d02:	015a      	lsls	r2, r3, #5
 8009d04:	69fb      	ldr	r3, [r7, #28]
 8009d06:	4413      	add	r3, r2
 8009d08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009d0c:	681b      	ldr	r3, [r3, #0]
 8009d0e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009d10:	0151      	lsls	r1, r2, #5
 8009d12:	69fa      	ldr	r2, [r7, #28]
 8009d14:	440a      	add	r2, r1
 8009d16:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009d1a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009d1e:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009d20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d22:	3301      	adds	r3, #1
 8009d24:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	685b      	ldr	r3, [r3, #4]
 8009d2a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009d2c:	429a      	cmp	r2, r3
 8009d2e:	d3a3      	bcc.n	8009c78 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8009d30:	69fb      	ldr	r3, [r7, #28]
 8009d32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009d36:	69db      	ldr	r3, [r3, #28]
 8009d38:	69fa      	ldr	r2, [r7, #28]
 8009d3a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009d3e:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8009d42:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d48:	2b00      	cmp	r3, #0
 8009d4a:	d016      	beq.n	8009d7a <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8009d4c:	69fb      	ldr	r3, [r7, #28]
 8009d4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009d52:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009d56:	69fa      	ldr	r2, [r7, #28]
 8009d58:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009d5c:	f043 030b 	orr.w	r3, r3, #11
 8009d60:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8009d64:	69fb      	ldr	r3, [r7, #28]
 8009d66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009d6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009d6c:	69fa      	ldr	r2, [r7, #28]
 8009d6e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009d72:	f043 030b 	orr.w	r3, r3, #11
 8009d76:	6453      	str	r3, [r2, #68]	; 0x44
 8009d78:	e015      	b.n	8009da6 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8009d7a:	69fb      	ldr	r3, [r7, #28]
 8009d7c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009d80:	695b      	ldr	r3, [r3, #20]
 8009d82:	69fa      	ldr	r2, [r7, #28]
 8009d84:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009d88:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8009d8c:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8009d90:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8009d92:	69fb      	ldr	r3, [r7, #28]
 8009d94:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009d98:	691b      	ldr	r3, [r3, #16]
 8009d9a:	69fa      	ldr	r2, [r7, #28]
 8009d9c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009da0:	f043 030b 	orr.w	r3, r3, #11
 8009da4:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8009da6:	69fb      	ldr	r3, [r7, #28]
 8009da8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	69fa      	ldr	r2, [r7, #28]
 8009db0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009db4:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8009db8:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	6818      	ldr	r0, [r3, #0]
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	691b      	ldr	r3, [r3, #16]
 8009dc2:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8009dca:	461a      	mov	r2, r3
 8009dcc:	f005 fada 	bl	800f384 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	695a      	ldr	r2, [r3, #20]
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	681b      	ldr	r3, [r3, #0]
 8009dda:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8009dde:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	4618      	mov	r0, r3
 8009de6:	f005 fa08 	bl	800f1fa <USB_ReadInterrupts>
 8009dea:	4603      	mov	r3, r0
 8009dec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009df0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009df4:	d124      	bne.n	8009e40 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	4618      	mov	r0, r3
 8009dfc:	f005 fa9e 	bl	800f33c <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	4618      	mov	r0, r3
 8009e06:	f004 fb06 	bl	800e416 <USB_GetDevSpeed>
 8009e0a:	4603      	mov	r3, r0
 8009e0c:	461a      	mov	r2, r3
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	681c      	ldr	r4, [r3, #0]
 8009e16:	f001 f93d 	bl	800b094 <HAL_RCC_GetHCLKFreq>
 8009e1a:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8009e20:	b2db      	uxtb	r3, r3
 8009e22:	461a      	mov	r2, r3
 8009e24:	4620      	mov	r0, r4
 8009e26:	f004 f825 	bl	800de74 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8009e2a:	6878      	ldr	r0, [r7, #4]
 8009e2c:	f00a fc2f 	bl	801468e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	695a      	ldr	r2, [r3, #20]
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8009e3e:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	4618      	mov	r0, r3
 8009e46:	f005 f9d8 	bl	800f1fa <USB_ReadInterrupts>
 8009e4a:	4603      	mov	r3, r0
 8009e4c:	f003 0308 	and.w	r3, r3, #8
 8009e50:	2b08      	cmp	r3, #8
 8009e52:	d10a      	bne.n	8009e6a <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8009e54:	6878      	ldr	r0, [r7, #4]
 8009e56:	f00a fc0c 	bl	8014672 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	681b      	ldr	r3, [r3, #0]
 8009e5e:	695a      	ldr	r2, [r3, #20]
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	681b      	ldr	r3, [r3, #0]
 8009e64:	f002 0208 	and.w	r2, r2, #8
 8009e68:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	681b      	ldr	r3, [r3, #0]
 8009e6e:	4618      	mov	r0, r3
 8009e70:	f005 f9c3 	bl	800f1fa <USB_ReadInterrupts>
 8009e74:	4603      	mov	r3, r0
 8009e76:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009e7a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009e7e:	d10f      	bne.n	8009ea0 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8009e80:	2300      	movs	r3, #0
 8009e82:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8009e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e86:	b2db      	uxtb	r3, r3
 8009e88:	4619      	mov	r1, r3
 8009e8a:	6878      	ldr	r0, [r7, #4]
 8009e8c:	f00a fc6e 	bl	801476c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	695a      	ldr	r2, [r3, #20]
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	681b      	ldr	r3, [r3, #0]
 8009e9a:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8009e9e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	4618      	mov	r0, r3
 8009ea6:	f005 f9a8 	bl	800f1fa <USB_ReadInterrupts>
 8009eaa:	4603      	mov	r3, r0
 8009eac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009eb0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009eb4:	d10f      	bne.n	8009ed6 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8009eb6:	2300      	movs	r3, #0
 8009eb8:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8009eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ebc:	b2db      	uxtb	r3, r3
 8009ebe:	4619      	mov	r1, r3
 8009ec0:	6878      	ldr	r0, [r7, #4]
 8009ec2:	f00a fc41 	bl	8014748 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	695a      	ldr	r2, [r3, #20]
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8009ed4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	4618      	mov	r0, r3
 8009edc:	f005 f98d 	bl	800f1fa <USB_ReadInterrupts>
 8009ee0:	4603      	mov	r3, r0
 8009ee2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009ee6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009eea:	d10a      	bne.n	8009f02 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8009eec:	6878      	ldr	r0, [r7, #4]
 8009eee:	f00a fc4f 	bl	8014790 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	695a      	ldr	r2, [r3, #20]
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8009f00:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	681b      	ldr	r3, [r3, #0]
 8009f06:	4618      	mov	r0, r3
 8009f08:	f005 f977 	bl	800f1fa <USB_ReadInterrupts>
 8009f0c:	4603      	mov	r3, r0
 8009f0e:	f003 0304 	and.w	r3, r3, #4
 8009f12:	2b04      	cmp	r3, #4
 8009f14:	d115      	bne.n	8009f42 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	681b      	ldr	r3, [r3, #0]
 8009f1a:	685b      	ldr	r3, [r3, #4]
 8009f1c:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8009f1e:	69bb      	ldr	r3, [r7, #24]
 8009f20:	f003 0304 	and.w	r3, r3, #4
 8009f24:	2b00      	cmp	r3, #0
 8009f26:	d002      	beq.n	8009f2e <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8009f28:	6878      	ldr	r0, [r7, #4]
 8009f2a:	f00a fc3f 	bl	80147ac <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	6859      	ldr	r1, [r3, #4]
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	681b      	ldr	r3, [r3, #0]
 8009f38:	69ba      	ldr	r2, [r7, #24]
 8009f3a:	430a      	orrs	r2, r1
 8009f3c:	605a      	str	r2, [r3, #4]
 8009f3e:	e000      	b.n	8009f42 <HAL_PCD_IRQHandler+0x75e>
      return;
 8009f40:	bf00      	nop
    }
  }
}
 8009f42:	3734      	adds	r7, #52	; 0x34
 8009f44:	46bd      	mov	sp, r7
 8009f46:	bd90      	pop	{r4, r7, pc}

08009f48 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8009f48:	b580      	push	{r7, lr}
 8009f4a:	b082      	sub	sp, #8
 8009f4c:	af00      	add	r7, sp, #0
 8009f4e:	6078      	str	r0, [r7, #4]
 8009f50:	460b      	mov	r3, r1
 8009f52:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8009f5a:	2b01      	cmp	r3, #1
 8009f5c:	d101      	bne.n	8009f62 <HAL_PCD_SetAddress+0x1a>
 8009f5e:	2302      	movs	r3, #2
 8009f60:	e013      	b.n	8009f8a <HAL_PCD_SetAddress+0x42>
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	2201      	movs	r2, #1
 8009f66:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	78fa      	ldrb	r2, [r7, #3]
 8009f6e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	681b      	ldr	r3, [r3, #0]
 8009f76:	78fa      	ldrb	r2, [r7, #3]
 8009f78:	4611      	mov	r1, r2
 8009f7a:	4618      	mov	r0, r3
 8009f7c:	f005 f8d5 	bl	800f12a <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	2200      	movs	r2, #0
 8009f84:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8009f88:	2300      	movs	r3, #0
}
 8009f8a:	4618      	mov	r0, r3
 8009f8c:	3708      	adds	r7, #8
 8009f8e:	46bd      	mov	sp, r7
 8009f90:	bd80      	pop	{r7, pc}

08009f92 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8009f92:	b580      	push	{r7, lr}
 8009f94:	b084      	sub	sp, #16
 8009f96:	af00      	add	r7, sp, #0
 8009f98:	6078      	str	r0, [r7, #4]
 8009f9a:	4608      	mov	r0, r1
 8009f9c:	4611      	mov	r1, r2
 8009f9e:	461a      	mov	r2, r3
 8009fa0:	4603      	mov	r3, r0
 8009fa2:	70fb      	strb	r3, [r7, #3]
 8009fa4:	460b      	mov	r3, r1
 8009fa6:	803b      	strh	r3, [r7, #0]
 8009fa8:	4613      	mov	r3, r2
 8009faa:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8009fac:	2300      	movs	r3, #0
 8009fae:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8009fb0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	da0f      	bge.n	8009fd8 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009fb8:	78fb      	ldrb	r3, [r7, #3]
 8009fba:	f003 020f 	and.w	r2, r3, #15
 8009fbe:	4613      	mov	r3, r2
 8009fc0:	00db      	lsls	r3, r3, #3
 8009fc2:	1a9b      	subs	r3, r3, r2
 8009fc4:	009b      	lsls	r3, r3, #2
 8009fc6:	3338      	adds	r3, #56	; 0x38
 8009fc8:	687a      	ldr	r2, [r7, #4]
 8009fca:	4413      	add	r3, r2
 8009fcc:	3304      	adds	r3, #4
 8009fce:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8009fd0:	68fb      	ldr	r3, [r7, #12]
 8009fd2:	2201      	movs	r2, #1
 8009fd4:	705a      	strb	r2, [r3, #1]
 8009fd6:	e00f      	b.n	8009ff8 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009fd8:	78fb      	ldrb	r3, [r7, #3]
 8009fda:	f003 020f 	and.w	r2, r3, #15
 8009fde:	4613      	mov	r3, r2
 8009fe0:	00db      	lsls	r3, r3, #3
 8009fe2:	1a9b      	subs	r3, r3, r2
 8009fe4:	009b      	lsls	r3, r3, #2
 8009fe6:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8009fea:	687a      	ldr	r2, [r7, #4]
 8009fec:	4413      	add	r3, r2
 8009fee:	3304      	adds	r3, #4
 8009ff0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8009ff2:	68fb      	ldr	r3, [r7, #12]
 8009ff4:	2200      	movs	r2, #0
 8009ff6:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8009ff8:	78fb      	ldrb	r3, [r7, #3]
 8009ffa:	f003 030f 	and.w	r3, r3, #15
 8009ffe:	b2da      	uxtb	r2, r3
 800a000:	68fb      	ldr	r3, [r7, #12]
 800a002:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800a004:	883a      	ldrh	r2, [r7, #0]
 800a006:	68fb      	ldr	r3, [r7, #12]
 800a008:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800a00a:	68fb      	ldr	r3, [r7, #12]
 800a00c:	78ba      	ldrb	r2, [r7, #2]
 800a00e:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800a010:	68fb      	ldr	r3, [r7, #12]
 800a012:	785b      	ldrb	r3, [r3, #1]
 800a014:	2b00      	cmp	r3, #0
 800a016:	d004      	beq.n	800a022 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800a018:	68fb      	ldr	r3, [r7, #12]
 800a01a:	781b      	ldrb	r3, [r3, #0]
 800a01c:	b29a      	uxth	r2, r3
 800a01e:	68fb      	ldr	r3, [r7, #12]
 800a020:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800a022:	78bb      	ldrb	r3, [r7, #2]
 800a024:	2b02      	cmp	r3, #2
 800a026:	d102      	bne.n	800a02e <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800a028:	68fb      	ldr	r3, [r7, #12]
 800a02a:	2200      	movs	r2, #0
 800a02c:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800a034:	2b01      	cmp	r3, #1
 800a036:	d101      	bne.n	800a03c <HAL_PCD_EP_Open+0xaa>
 800a038:	2302      	movs	r3, #2
 800a03a:	e00e      	b.n	800a05a <HAL_PCD_EP_Open+0xc8>
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	2201      	movs	r2, #1
 800a040:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	68f9      	ldr	r1, [r7, #12]
 800a04a:	4618      	mov	r0, r3
 800a04c:	f004 fa08 	bl	800e460 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	2200      	movs	r2, #0
 800a054:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 800a058:	7afb      	ldrb	r3, [r7, #11]
}
 800a05a:	4618      	mov	r0, r3
 800a05c:	3710      	adds	r7, #16
 800a05e:	46bd      	mov	sp, r7
 800a060:	bd80      	pop	{r7, pc}

0800a062 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800a062:	b580      	push	{r7, lr}
 800a064:	b084      	sub	sp, #16
 800a066:	af00      	add	r7, sp, #0
 800a068:	6078      	str	r0, [r7, #4]
 800a06a:	460b      	mov	r3, r1
 800a06c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800a06e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a072:	2b00      	cmp	r3, #0
 800a074:	da0f      	bge.n	800a096 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a076:	78fb      	ldrb	r3, [r7, #3]
 800a078:	f003 020f 	and.w	r2, r3, #15
 800a07c:	4613      	mov	r3, r2
 800a07e:	00db      	lsls	r3, r3, #3
 800a080:	1a9b      	subs	r3, r3, r2
 800a082:	009b      	lsls	r3, r3, #2
 800a084:	3338      	adds	r3, #56	; 0x38
 800a086:	687a      	ldr	r2, [r7, #4]
 800a088:	4413      	add	r3, r2
 800a08a:	3304      	adds	r3, #4
 800a08c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800a08e:	68fb      	ldr	r3, [r7, #12]
 800a090:	2201      	movs	r2, #1
 800a092:	705a      	strb	r2, [r3, #1]
 800a094:	e00f      	b.n	800a0b6 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800a096:	78fb      	ldrb	r3, [r7, #3]
 800a098:	f003 020f 	and.w	r2, r3, #15
 800a09c:	4613      	mov	r3, r2
 800a09e:	00db      	lsls	r3, r3, #3
 800a0a0:	1a9b      	subs	r3, r3, r2
 800a0a2:	009b      	lsls	r3, r3, #2
 800a0a4:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800a0a8:	687a      	ldr	r2, [r7, #4]
 800a0aa:	4413      	add	r3, r2
 800a0ac:	3304      	adds	r3, #4
 800a0ae:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800a0b0:	68fb      	ldr	r3, [r7, #12]
 800a0b2:	2200      	movs	r2, #0
 800a0b4:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800a0b6:	78fb      	ldrb	r3, [r7, #3]
 800a0b8:	f003 030f 	and.w	r3, r3, #15
 800a0bc:	b2da      	uxtb	r2, r3
 800a0be:	68fb      	ldr	r3, [r7, #12]
 800a0c0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800a0c8:	2b01      	cmp	r3, #1
 800a0ca:	d101      	bne.n	800a0d0 <HAL_PCD_EP_Close+0x6e>
 800a0cc:	2302      	movs	r3, #2
 800a0ce:	e00e      	b.n	800a0ee <HAL_PCD_EP_Close+0x8c>
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	2201      	movs	r2, #1
 800a0d4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	681b      	ldr	r3, [r3, #0]
 800a0dc:	68f9      	ldr	r1, [r7, #12]
 800a0de:	4618      	mov	r0, r3
 800a0e0:	f004 fa46 	bl	800e570 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	2200      	movs	r2, #0
 800a0e8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 800a0ec:	2300      	movs	r3, #0
}
 800a0ee:	4618      	mov	r0, r3
 800a0f0:	3710      	adds	r7, #16
 800a0f2:	46bd      	mov	sp, r7
 800a0f4:	bd80      	pop	{r7, pc}

0800a0f6 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800a0f6:	b580      	push	{r7, lr}
 800a0f8:	b086      	sub	sp, #24
 800a0fa:	af00      	add	r7, sp, #0
 800a0fc:	60f8      	str	r0, [r7, #12]
 800a0fe:	607a      	str	r2, [r7, #4]
 800a100:	603b      	str	r3, [r7, #0]
 800a102:	460b      	mov	r3, r1
 800a104:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800a106:	7afb      	ldrb	r3, [r7, #11]
 800a108:	f003 020f 	and.w	r2, r3, #15
 800a10c:	4613      	mov	r3, r2
 800a10e:	00db      	lsls	r3, r3, #3
 800a110:	1a9b      	subs	r3, r3, r2
 800a112:	009b      	lsls	r3, r3, #2
 800a114:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800a118:	68fa      	ldr	r2, [r7, #12]
 800a11a:	4413      	add	r3, r2
 800a11c:	3304      	adds	r3, #4
 800a11e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800a120:	697b      	ldr	r3, [r7, #20]
 800a122:	687a      	ldr	r2, [r7, #4]
 800a124:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800a126:	697b      	ldr	r3, [r7, #20]
 800a128:	683a      	ldr	r2, [r7, #0]
 800a12a:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800a12c:	697b      	ldr	r3, [r7, #20]
 800a12e:	2200      	movs	r2, #0
 800a130:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 800a132:	697b      	ldr	r3, [r7, #20]
 800a134:	2200      	movs	r2, #0
 800a136:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800a138:	7afb      	ldrb	r3, [r7, #11]
 800a13a:	f003 030f 	and.w	r3, r3, #15
 800a13e:	b2da      	uxtb	r2, r3
 800a140:	697b      	ldr	r3, [r7, #20]
 800a142:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800a144:	68fb      	ldr	r3, [r7, #12]
 800a146:	691b      	ldr	r3, [r3, #16]
 800a148:	2b01      	cmp	r3, #1
 800a14a:	d102      	bne.n	800a152 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800a14c:	687a      	ldr	r2, [r7, #4]
 800a14e:	697b      	ldr	r3, [r7, #20]
 800a150:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800a152:	7afb      	ldrb	r3, [r7, #11]
 800a154:	f003 030f 	and.w	r3, r3, #15
 800a158:	2b00      	cmp	r3, #0
 800a15a:	d109      	bne.n	800a170 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800a15c:	68fb      	ldr	r3, [r7, #12]
 800a15e:	6818      	ldr	r0, [r3, #0]
 800a160:	68fb      	ldr	r3, [r7, #12]
 800a162:	691b      	ldr	r3, [r3, #16]
 800a164:	b2db      	uxtb	r3, r3
 800a166:	461a      	mov	r2, r3
 800a168:	6979      	ldr	r1, [r7, #20]
 800a16a:	f004 fd21 	bl	800ebb0 <USB_EP0StartXfer>
 800a16e:	e008      	b.n	800a182 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800a170:	68fb      	ldr	r3, [r7, #12]
 800a172:	6818      	ldr	r0, [r3, #0]
 800a174:	68fb      	ldr	r3, [r7, #12]
 800a176:	691b      	ldr	r3, [r3, #16]
 800a178:	b2db      	uxtb	r3, r3
 800a17a:	461a      	mov	r2, r3
 800a17c:	6979      	ldr	r1, [r7, #20]
 800a17e:	f004 fad3 	bl	800e728 <USB_EPStartXfer>
  }

  return HAL_OK;
 800a182:	2300      	movs	r3, #0
}
 800a184:	4618      	mov	r0, r3
 800a186:	3718      	adds	r7, #24
 800a188:	46bd      	mov	sp, r7
 800a18a:	bd80      	pop	{r7, pc}

0800a18c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800a18c:	b480      	push	{r7}
 800a18e:	b083      	sub	sp, #12
 800a190:	af00      	add	r7, sp, #0
 800a192:	6078      	str	r0, [r7, #4]
 800a194:	460b      	mov	r3, r1
 800a196:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800a198:	78fb      	ldrb	r3, [r7, #3]
 800a19a:	f003 020f 	and.w	r2, r3, #15
 800a19e:	6879      	ldr	r1, [r7, #4]
 800a1a0:	4613      	mov	r3, r2
 800a1a2:	00db      	lsls	r3, r3, #3
 800a1a4:	1a9b      	subs	r3, r3, r2
 800a1a6:	009b      	lsls	r3, r3, #2
 800a1a8:	440b      	add	r3, r1
 800a1aa:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800a1ae:	681b      	ldr	r3, [r3, #0]
}
 800a1b0:	4618      	mov	r0, r3
 800a1b2:	370c      	adds	r7, #12
 800a1b4:	46bd      	mov	sp, r7
 800a1b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ba:	4770      	bx	lr

0800a1bc <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800a1bc:	b580      	push	{r7, lr}
 800a1be:	b086      	sub	sp, #24
 800a1c0:	af00      	add	r7, sp, #0
 800a1c2:	60f8      	str	r0, [r7, #12]
 800a1c4:	607a      	str	r2, [r7, #4]
 800a1c6:	603b      	str	r3, [r7, #0]
 800a1c8:	460b      	mov	r3, r1
 800a1ca:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a1cc:	7afb      	ldrb	r3, [r7, #11]
 800a1ce:	f003 020f 	and.w	r2, r3, #15
 800a1d2:	4613      	mov	r3, r2
 800a1d4:	00db      	lsls	r3, r3, #3
 800a1d6:	1a9b      	subs	r3, r3, r2
 800a1d8:	009b      	lsls	r3, r3, #2
 800a1da:	3338      	adds	r3, #56	; 0x38
 800a1dc:	68fa      	ldr	r2, [r7, #12]
 800a1de:	4413      	add	r3, r2
 800a1e0:	3304      	adds	r3, #4
 800a1e2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800a1e4:	697b      	ldr	r3, [r7, #20]
 800a1e6:	687a      	ldr	r2, [r7, #4]
 800a1e8:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800a1ea:	697b      	ldr	r3, [r7, #20]
 800a1ec:	683a      	ldr	r2, [r7, #0]
 800a1ee:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800a1f0:	697b      	ldr	r3, [r7, #20]
 800a1f2:	2200      	movs	r2, #0
 800a1f4:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 800a1f6:	697b      	ldr	r3, [r7, #20]
 800a1f8:	2201      	movs	r2, #1
 800a1fa:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800a1fc:	7afb      	ldrb	r3, [r7, #11]
 800a1fe:	f003 030f 	and.w	r3, r3, #15
 800a202:	b2da      	uxtb	r2, r3
 800a204:	697b      	ldr	r3, [r7, #20]
 800a206:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800a208:	68fb      	ldr	r3, [r7, #12]
 800a20a:	691b      	ldr	r3, [r3, #16]
 800a20c:	2b01      	cmp	r3, #1
 800a20e:	d102      	bne.n	800a216 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800a210:	687a      	ldr	r2, [r7, #4]
 800a212:	697b      	ldr	r3, [r7, #20]
 800a214:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800a216:	7afb      	ldrb	r3, [r7, #11]
 800a218:	f003 030f 	and.w	r3, r3, #15
 800a21c:	2b00      	cmp	r3, #0
 800a21e:	d109      	bne.n	800a234 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800a220:	68fb      	ldr	r3, [r7, #12]
 800a222:	6818      	ldr	r0, [r3, #0]
 800a224:	68fb      	ldr	r3, [r7, #12]
 800a226:	691b      	ldr	r3, [r3, #16]
 800a228:	b2db      	uxtb	r3, r3
 800a22a:	461a      	mov	r2, r3
 800a22c:	6979      	ldr	r1, [r7, #20]
 800a22e:	f004 fcbf 	bl	800ebb0 <USB_EP0StartXfer>
 800a232:	e008      	b.n	800a246 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800a234:	68fb      	ldr	r3, [r7, #12]
 800a236:	6818      	ldr	r0, [r3, #0]
 800a238:	68fb      	ldr	r3, [r7, #12]
 800a23a:	691b      	ldr	r3, [r3, #16]
 800a23c:	b2db      	uxtb	r3, r3
 800a23e:	461a      	mov	r2, r3
 800a240:	6979      	ldr	r1, [r7, #20]
 800a242:	f004 fa71 	bl	800e728 <USB_EPStartXfer>
  }

  return HAL_OK;
 800a246:	2300      	movs	r3, #0
}
 800a248:	4618      	mov	r0, r3
 800a24a:	3718      	adds	r7, #24
 800a24c:	46bd      	mov	sp, r7
 800a24e:	bd80      	pop	{r7, pc}

0800a250 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800a250:	b580      	push	{r7, lr}
 800a252:	b084      	sub	sp, #16
 800a254:	af00      	add	r7, sp, #0
 800a256:	6078      	str	r0, [r7, #4]
 800a258:	460b      	mov	r3, r1
 800a25a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800a25c:	78fb      	ldrb	r3, [r7, #3]
 800a25e:	f003 020f 	and.w	r2, r3, #15
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	685b      	ldr	r3, [r3, #4]
 800a266:	429a      	cmp	r2, r3
 800a268:	d901      	bls.n	800a26e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800a26a:	2301      	movs	r3, #1
 800a26c:	e050      	b.n	800a310 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800a26e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a272:	2b00      	cmp	r3, #0
 800a274:	da0f      	bge.n	800a296 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a276:	78fb      	ldrb	r3, [r7, #3]
 800a278:	f003 020f 	and.w	r2, r3, #15
 800a27c:	4613      	mov	r3, r2
 800a27e:	00db      	lsls	r3, r3, #3
 800a280:	1a9b      	subs	r3, r3, r2
 800a282:	009b      	lsls	r3, r3, #2
 800a284:	3338      	adds	r3, #56	; 0x38
 800a286:	687a      	ldr	r2, [r7, #4]
 800a288:	4413      	add	r3, r2
 800a28a:	3304      	adds	r3, #4
 800a28c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800a28e:	68fb      	ldr	r3, [r7, #12]
 800a290:	2201      	movs	r2, #1
 800a292:	705a      	strb	r2, [r3, #1]
 800a294:	e00d      	b.n	800a2b2 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800a296:	78fa      	ldrb	r2, [r7, #3]
 800a298:	4613      	mov	r3, r2
 800a29a:	00db      	lsls	r3, r3, #3
 800a29c:	1a9b      	subs	r3, r3, r2
 800a29e:	009b      	lsls	r3, r3, #2
 800a2a0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800a2a4:	687a      	ldr	r2, [r7, #4]
 800a2a6:	4413      	add	r3, r2
 800a2a8:	3304      	adds	r3, #4
 800a2aa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800a2ac:	68fb      	ldr	r3, [r7, #12]
 800a2ae:	2200      	movs	r2, #0
 800a2b0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800a2b2:	68fb      	ldr	r3, [r7, #12]
 800a2b4:	2201      	movs	r2, #1
 800a2b6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800a2b8:	78fb      	ldrb	r3, [r7, #3]
 800a2ba:	f003 030f 	and.w	r3, r3, #15
 800a2be:	b2da      	uxtb	r2, r3
 800a2c0:	68fb      	ldr	r3, [r7, #12]
 800a2c2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800a2ca:	2b01      	cmp	r3, #1
 800a2cc:	d101      	bne.n	800a2d2 <HAL_PCD_EP_SetStall+0x82>
 800a2ce:	2302      	movs	r3, #2
 800a2d0:	e01e      	b.n	800a310 <HAL_PCD_EP_SetStall+0xc0>
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	2201      	movs	r2, #1
 800a2d6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	681b      	ldr	r3, [r3, #0]
 800a2de:	68f9      	ldr	r1, [r7, #12]
 800a2e0:	4618      	mov	r0, r3
 800a2e2:	f004 fe4e 	bl	800ef82 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800a2e6:	78fb      	ldrb	r3, [r7, #3]
 800a2e8:	f003 030f 	and.w	r3, r3, #15
 800a2ec:	2b00      	cmp	r3, #0
 800a2ee:	d10a      	bne.n	800a306 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	6818      	ldr	r0, [r3, #0]
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	691b      	ldr	r3, [r3, #16]
 800a2f8:	b2d9      	uxtb	r1, r3
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800a300:	461a      	mov	r2, r3
 800a302:	f005 f83f 	bl	800f384 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	2200      	movs	r2, #0
 800a30a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800a30e:	2300      	movs	r3, #0
}
 800a310:	4618      	mov	r0, r3
 800a312:	3710      	adds	r7, #16
 800a314:	46bd      	mov	sp, r7
 800a316:	bd80      	pop	{r7, pc}

0800a318 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800a318:	b580      	push	{r7, lr}
 800a31a:	b084      	sub	sp, #16
 800a31c:	af00      	add	r7, sp, #0
 800a31e:	6078      	str	r0, [r7, #4]
 800a320:	460b      	mov	r3, r1
 800a322:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800a324:	78fb      	ldrb	r3, [r7, #3]
 800a326:	f003 020f 	and.w	r2, r3, #15
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	685b      	ldr	r3, [r3, #4]
 800a32e:	429a      	cmp	r2, r3
 800a330:	d901      	bls.n	800a336 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800a332:	2301      	movs	r3, #1
 800a334:	e042      	b.n	800a3bc <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800a336:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a33a:	2b00      	cmp	r3, #0
 800a33c:	da0f      	bge.n	800a35e <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a33e:	78fb      	ldrb	r3, [r7, #3]
 800a340:	f003 020f 	and.w	r2, r3, #15
 800a344:	4613      	mov	r3, r2
 800a346:	00db      	lsls	r3, r3, #3
 800a348:	1a9b      	subs	r3, r3, r2
 800a34a:	009b      	lsls	r3, r3, #2
 800a34c:	3338      	adds	r3, #56	; 0x38
 800a34e:	687a      	ldr	r2, [r7, #4]
 800a350:	4413      	add	r3, r2
 800a352:	3304      	adds	r3, #4
 800a354:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800a356:	68fb      	ldr	r3, [r7, #12]
 800a358:	2201      	movs	r2, #1
 800a35a:	705a      	strb	r2, [r3, #1]
 800a35c:	e00f      	b.n	800a37e <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800a35e:	78fb      	ldrb	r3, [r7, #3]
 800a360:	f003 020f 	and.w	r2, r3, #15
 800a364:	4613      	mov	r3, r2
 800a366:	00db      	lsls	r3, r3, #3
 800a368:	1a9b      	subs	r3, r3, r2
 800a36a:	009b      	lsls	r3, r3, #2
 800a36c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800a370:	687a      	ldr	r2, [r7, #4]
 800a372:	4413      	add	r3, r2
 800a374:	3304      	adds	r3, #4
 800a376:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800a378:	68fb      	ldr	r3, [r7, #12]
 800a37a:	2200      	movs	r2, #0
 800a37c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800a37e:	68fb      	ldr	r3, [r7, #12]
 800a380:	2200      	movs	r2, #0
 800a382:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800a384:	78fb      	ldrb	r3, [r7, #3]
 800a386:	f003 030f 	and.w	r3, r3, #15
 800a38a:	b2da      	uxtb	r2, r3
 800a38c:	68fb      	ldr	r3, [r7, #12]
 800a38e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800a396:	2b01      	cmp	r3, #1
 800a398:	d101      	bne.n	800a39e <HAL_PCD_EP_ClrStall+0x86>
 800a39a:	2302      	movs	r3, #2
 800a39c:	e00e      	b.n	800a3bc <HAL_PCD_EP_ClrStall+0xa4>
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	2201      	movs	r2, #1
 800a3a2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	681b      	ldr	r3, [r3, #0]
 800a3aa:	68f9      	ldr	r1, [r7, #12]
 800a3ac:	4618      	mov	r0, r3
 800a3ae:	f004 fe56 	bl	800f05e <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	2200      	movs	r2, #0
 800a3b6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800a3ba:	2300      	movs	r3, #0
}
 800a3bc:	4618      	mov	r0, r3
 800a3be:	3710      	adds	r7, #16
 800a3c0:	46bd      	mov	sp, r7
 800a3c2:	bd80      	pop	{r7, pc}

0800a3c4 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800a3c4:	b580      	push	{r7, lr}
 800a3c6:	b08a      	sub	sp, #40	; 0x28
 800a3c8:	af02      	add	r7, sp, #8
 800a3ca:	6078      	str	r0, [r7, #4]
 800a3cc:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	681b      	ldr	r3, [r3, #0]
 800a3d2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a3d4:	697b      	ldr	r3, [r7, #20]
 800a3d6:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800a3d8:	683a      	ldr	r2, [r7, #0]
 800a3da:	4613      	mov	r3, r2
 800a3dc:	00db      	lsls	r3, r3, #3
 800a3de:	1a9b      	subs	r3, r3, r2
 800a3e0:	009b      	lsls	r3, r3, #2
 800a3e2:	3338      	adds	r3, #56	; 0x38
 800a3e4:	687a      	ldr	r2, [r7, #4]
 800a3e6:	4413      	add	r3, r2
 800a3e8:	3304      	adds	r3, #4
 800a3ea:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800a3ec:	68fb      	ldr	r3, [r7, #12]
 800a3ee:	699a      	ldr	r2, [r3, #24]
 800a3f0:	68fb      	ldr	r3, [r7, #12]
 800a3f2:	695b      	ldr	r3, [r3, #20]
 800a3f4:	429a      	cmp	r2, r3
 800a3f6:	d901      	bls.n	800a3fc <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800a3f8:	2301      	movs	r3, #1
 800a3fa:	e06c      	b.n	800a4d6 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800a3fc:	68fb      	ldr	r3, [r7, #12]
 800a3fe:	695a      	ldr	r2, [r3, #20]
 800a400:	68fb      	ldr	r3, [r7, #12]
 800a402:	699b      	ldr	r3, [r3, #24]
 800a404:	1ad3      	subs	r3, r2, r3
 800a406:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800a408:	68fb      	ldr	r3, [r7, #12]
 800a40a:	689b      	ldr	r3, [r3, #8]
 800a40c:	69fa      	ldr	r2, [r7, #28]
 800a40e:	429a      	cmp	r2, r3
 800a410:	d902      	bls.n	800a418 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800a412:	68fb      	ldr	r3, [r7, #12]
 800a414:	689b      	ldr	r3, [r3, #8]
 800a416:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800a418:	69fb      	ldr	r3, [r7, #28]
 800a41a:	3303      	adds	r3, #3
 800a41c:	089b      	lsrs	r3, r3, #2
 800a41e:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800a420:	e02b      	b.n	800a47a <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800a422:	68fb      	ldr	r3, [r7, #12]
 800a424:	695a      	ldr	r2, [r3, #20]
 800a426:	68fb      	ldr	r3, [r7, #12]
 800a428:	699b      	ldr	r3, [r3, #24]
 800a42a:	1ad3      	subs	r3, r2, r3
 800a42c:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800a42e:	68fb      	ldr	r3, [r7, #12]
 800a430:	689b      	ldr	r3, [r3, #8]
 800a432:	69fa      	ldr	r2, [r7, #28]
 800a434:	429a      	cmp	r2, r3
 800a436:	d902      	bls.n	800a43e <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800a438:	68fb      	ldr	r3, [r7, #12]
 800a43a:	689b      	ldr	r3, [r3, #8]
 800a43c:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800a43e:	69fb      	ldr	r3, [r7, #28]
 800a440:	3303      	adds	r3, #3
 800a442:	089b      	lsrs	r3, r3, #2
 800a444:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800a446:	68fb      	ldr	r3, [r7, #12]
 800a448:	68d9      	ldr	r1, [r3, #12]
 800a44a:	683b      	ldr	r3, [r7, #0]
 800a44c:	b2da      	uxtb	r2, r3
 800a44e:	69fb      	ldr	r3, [r7, #28]
 800a450:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800a456:	b2db      	uxtb	r3, r3
 800a458:	9300      	str	r3, [sp, #0]
 800a45a:	4603      	mov	r3, r0
 800a45c:	6978      	ldr	r0, [r7, #20]
 800a45e:	f004 fcfa 	bl	800ee56 <USB_WritePacket>

    ep->xfer_buff  += len;
 800a462:	68fb      	ldr	r3, [r7, #12]
 800a464:	68da      	ldr	r2, [r3, #12]
 800a466:	69fb      	ldr	r3, [r7, #28]
 800a468:	441a      	add	r2, r3
 800a46a:	68fb      	ldr	r3, [r7, #12]
 800a46c:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800a46e:	68fb      	ldr	r3, [r7, #12]
 800a470:	699a      	ldr	r2, [r3, #24]
 800a472:	69fb      	ldr	r3, [r7, #28]
 800a474:	441a      	add	r2, r3
 800a476:	68fb      	ldr	r3, [r7, #12]
 800a478:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800a47a:	683b      	ldr	r3, [r7, #0]
 800a47c:	015a      	lsls	r2, r3, #5
 800a47e:	693b      	ldr	r3, [r7, #16]
 800a480:	4413      	add	r3, r2
 800a482:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a486:	699b      	ldr	r3, [r3, #24]
 800a488:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800a48a:	69ba      	ldr	r2, [r7, #24]
 800a48c:	429a      	cmp	r2, r3
 800a48e:	d809      	bhi.n	800a4a4 <PCD_WriteEmptyTxFifo+0xe0>
 800a490:	68fb      	ldr	r3, [r7, #12]
 800a492:	699a      	ldr	r2, [r3, #24]
 800a494:	68fb      	ldr	r3, [r7, #12]
 800a496:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800a498:	429a      	cmp	r2, r3
 800a49a:	d203      	bcs.n	800a4a4 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800a49c:	68fb      	ldr	r3, [r7, #12]
 800a49e:	695b      	ldr	r3, [r3, #20]
 800a4a0:	2b00      	cmp	r3, #0
 800a4a2:	d1be      	bne.n	800a422 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800a4a4:	68fb      	ldr	r3, [r7, #12]
 800a4a6:	695a      	ldr	r2, [r3, #20]
 800a4a8:	68fb      	ldr	r3, [r7, #12]
 800a4aa:	699b      	ldr	r3, [r3, #24]
 800a4ac:	429a      	cmp	r2, r3
 800a4ae:	d811      	bhi.n	800a4d4 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800a4b0:	683b      	ldr	r3, [r7, #0]
 800a4b2:	f003 030f 	and.w	r3, r3, #15
 800a4b6:	2201      	movs	r2, #1
 800a4b8:	fa02 f303 	lsl.w	r3, r2, r3
 800a4bc:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800a4be:	693b      	ldr	r3, [r7, #16]
 800a4c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a4c4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a4c6:	68bb      	ldr	r3, [r7, #8]
 800a4c8:	43db      	mvns	r3, r3
 800a4ca:	6939      	ldr	r1, [r7, #16]
 800a4cc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a4d0:	4013      	ands	r3, r2
 800a4d2:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800a4d4:	2300      	movs	r3, #0
}
 800a4d6:	4618      	mov	r0, r3
 800a4d8:	3720      	adds	r7, #32
 800a4da:	46bd      	mov	sp, r7
 800a4dc:	bd80      	pop	{r7, pc}
	...

0800a4e0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800a4e0:	b580      	push	{r7, lr}
 800a4e2:	b086      	sub	sp, #24
 800a4e4:	af00      	add	r7, sp, #0
 800a4e6:	6078      	str	r0, [r7, #4]
 800a4e8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	681b      	ldr	r3, [r3, #0]
 800a4ee:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a4f0:	697b      	ldr	r3, [r7, #20]
 800a4f2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800a4f4:	697b      	ldr	r3, [r7, #20]
 800a4f6:	333c      	adds	r3, #60	; 0x3c
 800a4f8:	3304      	adds	r3, #4
 800a4fa:	681b      	ldr	r3, [r3, #0]
 800a4fc:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800a4fe:	683b      	ldr	r3, [r7, #0]
 800a500:	015a      	lsls	r2, r3, #5
 800a502:	693b      	ldr	r3, [r7, #16]
 800a504:	4413      	add	r3, r2
 800a506:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a50a:	689b      	ldr	r3, [r3, #8]
 800a50c:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	691b      	ldr	r3, [r3, #16]
 800a512:	2b01      	cmp	r3, #1
 800a514:	f040 80a0 	bne.w	800a658 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800a518:	68bb      	ldr	r3, [r7, #8]
 800a51a:	f003 0308 	and.w	r3, r3, #8
 800a51e:	2b00      	cmp	r3, #0
 800a520:	d015      	beq.n	800a54e <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800a522:	68fb      	ldr	r3, [r7, #12]
 800a524:	4a72      	ldr	r2, [pc, #456]	; (800a6f0 <PCD_EP_OutXfrComplete_int+0x210>)
 800a526:	4293      	cmp	r3, r2
 800a528:	f240 80dd 	bls.w	800a6e6 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800a52c:	68bb      	ldr	r3, [r7, #8]
 800a52e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800a532:	2b00      	cmp	r3, #0
 800a534:	f000 80d7 	beq.w	800a6e6 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800a538:	683b      	ldr	r3, [r7, #0]
 800a53a:	015a      	lsls	r2, r3, #5
 800a53c:	693b      	ldr	r3, [r7, #16]
 800a53e:	4413      	add	r3, r2
 800a540:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a544:	461a      	mov	r2, r3
 800a546:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a54a:	6093      	str	r3, [r2, #8]
 800a54c:	e0cb      	b.n	800a6e6 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800a54e:	68bb      	ldr	r3, [r7, #8]
 800a550:	f003 0320 	and.w	r3, r3, #32
 800a554:	2b00      	cmp	r3, #0
 800a556:	d009      	beq.n	800a56c <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800a558:	683b      	ldr	r3, [r7, #0]
 800a55a:	015a      	lsls	r2, r3, #5
 800a55c:	693b      	ldr	r3, [r7, #16]
 800a55e:	4413      	add	r3, r2
 800a560:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a564:	461a      	mov	r2, r3
 800a566:	2320      	movs	r3, #32
 800a568:	6093      	str	r3, [r2, #8]
 800a56a:	e0bc      	b.n	800a6e6 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800a56c:	68bb      	ldr	r3, [r7, #8]
 800a56e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800a572:	2b00      	cmp	r3, #0
 800a574:	f040 80b7 	bne.w	800a6e6 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800a578:	68fb      	ldr	r3, [r7, #12]
 800a57a:	4a5d      	ldr	r2, [pc, #372]	; (800a6f0 <PCD_EP_OutXfrComplete_int+0x210>)
 800a57c:	4293      	cmp	r3, r2
 800a57e:	d90f      	bls.n	800a5a0 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800a580:	68bb      	ldr	r3, [r7, #8]
 800a582:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800a586:	2b00      	cmp	r3, #0
 800a588:	d00a      	beq.n	800a5a0 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800a58a:	683b      	ldr	r3, [r7, #0]
 800a58c:	015a      	lsls	r2, r3, #5
 800a58e:	693b      	ldr	r3, [r7, #16]
 800a590:	4413      	add	r3, r2
 800a592:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a596:	461a      	mov	r2, r3
 800a598:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a59c:	6093      	str	r3, [r2, #8]
 800a59e:	e0a2      	b.n	800a6e6 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 800a5a0:	6879      	ldr	r1, [r7, #4]
 800a5a2:	683a      	ldr	r2, [r7, #0]
 800a5a4:	4613      	mov	r3, r2
 800a5a6:	00db      	lsls	r3, r3, #3
 800a5a8:	1a9b      	subs	r3, r3, r2
 800a5aa:	009b      	lsls	r3, r3, #2
 800a5ac:	440b      	add	r3, r1
 800a5ae:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800a5b2:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800a5b4:	683b      	ldr	r3, [r7, #0]
 800a5b6:	0159      	lsls	r1, r3, #5
 800a5b8:	693b      	ldr	r3, [r7, #16]
 800a5ba:	440b      	add	r3, r1
 800a5bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a5c0:	691b      	ldr	r3, [r3, #16]
 800a5c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 800a5c6:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 800a5c8:	6878      	ldr	r0, [r7, #4]
 800a5ca:	683a      	ldr	r2, [r7, #0]
 800a5cc:	4613      	mov	r3, r2
 800a5ce:	00db      	lsls	r3, r3, #3
 800a5d0:	1a9b      	subs	r3, r3, r2
 800a5d2:	009b      	lsls	r3, r3, #2
 800a5d4:	4403      	add	r3, r0
 800a5d6:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800a5da:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 800a5dc:	6879      	ldr	r1, [r7, #4]
 800a5de:	683a      	ldr	r2, [r7, #0]
 800a5e0:	4613      	mov	r3, r2
 800a5e2:	00db      	lsls	r3, r3, #3
 800a5e4:	1a9b      	subs	r3, r3, r2
 800a5e6:	009b      	lsls	r3, r3, #2
 800a5e8:	440b      	add	r3, r1
 800a5ea:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800a5ee:	6819      	ldr	r1, [r3, #0]
 800a5f0:	6878      	ldr	r0, [r7, #4]
 800a5f2:	683a      	ldr	r2, [r7, #0]
 800a5f4:	4613      	mov	r3, r2
 800a5f6:	00db      	lsls	r3, r3, #3
 800a5f8:	1a9b      	subs	r3, r3, r2
 800a5fa:	009b      	lsls	r3, r3, #2
 800a5fc:	4403      	add	r3, r0
 800a5fe:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800a602:	681b      	ldr	r3, [r3, #0]
 800a604:	4419      	add	r1, r3
 800a606:	6878      	ldr	r0, [r7, #4]
 800a608:	683a      	ldr	r2, [r7, #0]
 800a60a:	4613      	mov	r3, r2
 800a60c:	00db      	lsls	r3, r3, #3
 800a60e:	1a9b      	subs	r3, r3, r2
 800a610:	009b      	lsls	r3, r3, #2
 800a612:	4403      	add	r3, r0
 800a614:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800a618:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800a61a:	683b      	ldr	r3, [r7, #0]
 800a61c:	2b00      	cmp	r3, #0
 800a61e:	d114      	bne.n	800a64a <PCD_EP_OutXfrComplete_int+0x16a>
 800a620:	6879      	ldr	r1, [r7, #4]
 800a622:	683a      	ldr	r2, [r7, #0]
 800a624:	4613      	mov	r3, r2
 800a626:	00db      	lsls	r3, r3, #3
 800a628:	1a9b      	subs	r3, r3, r2
 800a62a:	009b      	lsls	r3, r3, #2
 800a62c:	440b      	add	r3, r1
 800a62e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800a632:	681b      	ldr	r3, [r3, #0]
 800a634:	2b00      	cmp	r3, #0
 800a636:	d108      	bne.n	800a64a <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	6818      	ldr	r0, [r3, #0]
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800a642:	461a      	mov	r2, r3
 800a644:	2101      	movs	r1, #1
 800a646:	f004 fe9d 	bl	800f384 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800a64a:	683b      	ldr	r3, [r7, #0]
 800a64c:	b2db      	uxtb	r3, r3
 800a64e:	4619      	mov	r1, r3
 800a650:	6878      	ldr	r0, [r7, #4]
 800a652:	f009 ffd9 	bl	8014608 <HAL_PCD_DataOutStageCallback>
 800a656:	e046      	b.n	800a6e6 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800a658:	68fb      	ldr	r3, [r7, #12]
 800a65a:	4a26      	ldr	r2, [pc, #152]	; (800a6f4 <PCD_EP_OutXfrComplete_int+0x214>)
 800a65c:	4293      	cmp	r3, r2
 800a65e:	d124      	bne.n	800a6aa <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800a660:	68bb      	ldr	r3, [r7, #8]
 800a662:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a666:	2b00      	cmp	r3, #0
 800a668:	d00a      	beq.n	800a680 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800a66a:	683b      	ldr	r3, [r7, #0]
 800a66c:	015a      	lsls	r2, r3, #5
 800a66e:	693b      	ldr	r3, [r7, #16]
 800a670:	4413      	add	r3, r2
 800a672:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a676:	461a      	mov	r2, r3
 800a678:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a67c:	6093      	str	r3, [r2, #8]
 800a67e:	e032      	b.n	800a6e6 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800a680:	68bb      	ldr	r3, [r7, #8]
 800a682:	f003 0320 	and.w	r3, r3, #32
 800a686:	2b00      	cmp	r3, #0
 800a688:	d008      	beq.n	800a69c <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800a68a:	683b      	ldr	r3, [r7, #0]
 800a68c:	015a      	lsls	r2, r3, #5
 800a68e:	693b      	ldr	r3, [r7, #16]
 800a690:	4413      	add	r3, r2
 800a692:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a696:	461a      	mov	r2, r3
 800a698:	2320      	movs	r3, #32
 800a69a:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800a69c:	683b      	ldr	r3, [r7, #0]
 800a69e:	b2db      	uxtb	r3, r3
 800a6a0:	4619      	mov	r1, r3
 800a6a2:	6878      	ldr	r0, [r7, #4]
 800a6a4:	f009 ffb0 	bl	8014608 <HAL_PCD_DataOutStageCallback>
 800a6a8:	e01d      	b.n	800a6e6 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800a6aa:	683b      	ldr	r3, [r7, #0]
 800a6ac:	2b00      	cmp	r3, #0
 800a6ae:	d114      	bne.n	800a6da <PCD_EP_OutXfrComplete_int+0x1fa>
 800a6b0:	6879      	ldr	r1, [r7, #4]
 800a6b2:	683a      	ldr	r2, [r7, #0]
 800a6b4:	4613      	mov	r3, r2
 800a6b6:	00db      	lsls	r3, r3, #3
 800a6b8:	1a9b      	subs	r3, r3, r2
 800a6ba:	009b      	lsls	r3, r3, #2
 800a6bc:	440b      	add	r3, r1
 800a6be:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800a6c2:	681b      	ldr	r3, [r3, #0]
 800a6c4:	2b00      	cmp	r3, #0
 800a6c6:	d108      	bne.n	800a6da <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	6818      	ldr	r0, [r3, #0]
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800a6d2:	461a      	mov	r2, r3
 800a6d4:	2100      	movs	r1, #0
 800a6d6:	f004 fe55 	bl	800f384 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800a6da:	683b      	ldr	r3, [r7, #0]
 800a6dc:	b2db      	uxtb	r3, r3
 800a6de:	4619      	mov	r1, r3
 800a6e0:	6878      	ldr	r0, [r7, #4]
 800a6e2:	f009 ff91 	bl	8014608 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800a6e6:	2300      	movs	r3, #0
}
 800a6e8:	4618      	mov	r0, r3
 800a6ea:	3718      	adds	r7, #24
 800a6ec:	46bd      	mov	sp, r7
 800a6ee:	bd80      	pop	{r7, pc}
 800a6f0:	4f54300a 	.word	0x4f54300a
 800a6f4:	4f54310a 	.word	0x4f54310a

0800a6f8 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800a6f8:	b580      	push	{r7, lr}
 800a6fa:	b086      	sub	sp, #24
 800a6fc:	af00      	add	r7, sp, #0
 800a6fe:	6078      	str	r0, [r7, #4]
 800a700:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	681b      	ldr	r3, [r3, #0]
 800a706:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a708:	697b      	ldr	r3, [r7, #20]
 800a70a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800a70c:	697b      	ldr	r3, [r7, #20]
 800a70e:	333c      	adds	r3, #60	; 0x3c
 800a710:	3304      	adds	r3, #4
 800a712:	681b      	ldr	r3, [r3, #0]
 800a714:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800a716:	683b      	ldr	r3, [r7, #0]
 800a718:	015a      	lsls	r2, r3, #5
 800a71a:	693b      	ldr	r3, [r7, #16]
 800a71c:	4413      	add	r3, r2
 800a71e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a722:	689b      	ldr	r3, [r3, #8]
 800a724:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800a726:	68fb      	ldr	r3, [r7, #12]
 800a728:	4a15      	ldr	r2, [pc, #84]	; (800a780 <PCD_EP_OutSetupPacket_int+0x88>)
 800a72a:	4293      	cmp	r3, r2
 800a72c:	d90e      	bls.n	800a74c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800a72e:	68bb      	ldr	r3, [r7, #8]
 800a730:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800a734:	2b00      	cmp	r3, #0
 800a736:	d009      	beq.n	800a74c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800a738:	683b      	ldr	r3, [r7, #0]
 800a73a:	015a      	lsls	r2, r3, #5
 800a73c:	693b      	ldr	r3, [r7, #16]
 800a73e:	4413      	add	r3, r2
 800a740:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a744:	461a      	mov	r2, r3
 800a746:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a74a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800a74c:	6878      	ldr	r0, [r7, #4]
 800a74e:	f009 ff49 	bl	80145e4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800a752:	68fb      	ldr	r3, [r7, #12]
 800a754:	4a0a      	ldr	r2, [pc, #40]	; (800a780 <PCD_EP_OutSetupPacket_int+0x88>)
 800a756:	4293      	cmp	r3, r2
 800a758:	d90c      	bls.n	800a774 <PCD_EP_OutSetupPacket_int+0x7c>
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	691b      	ldr	r3, [r3, #16]
 800a75e:	2b01      	cmp	r3, #1
 800a760:	d108      	bne.n	800a774 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	6818      	ldr	r0, [r3, #0]
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800a76c:	461a      	mov	r2, r3
 800a76e:	2101      	movs	r1, #1
 800a770:	f004 fe08 	bl	800f384 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800a774:	2300      	movs	r3, #0
}
 800a776:	4618      	mov	r0, r3
 800a778:	3718      	adds	r7, #24
 800a77a:	46bd      	mov	sp, r7
 800a77c:	bd80      	pop	{r7, pc}
 800a77e:	bf00      	nop
 800a780:	4f54300a 	.word	0x4f54300a

0800a784 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800a784:	b480      	push	{r7}
 800a786:	b085      	sub	sp, #20
 800a788:	af00      	add	r7, sp, #0
 800a78a:	6078      	str	r0, [r7, #4]
 800a78c:	460b      	mov	r3, r1
 800a78e:	70fb      	strb	r3, [r7, #3]
 800a790:	4613      	mov	r3, r2
 800a792:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	681b      	ldr	r3, [r3, #0]
 800a798:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a79a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800a79c:	78fb      	ldrb	r3, [r7, #3]
 800a79e:	2b00      	cmp	r3, #0
 800a7a0:	d107      	bne.n	800a7b2 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800a7a2:	883b      	ldrh	r3, [r7, #0]
 800a7a4:	0419      	lsls	r1, r3, #16
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	681b      	ldr	r3, [r3, #0]
 800a7aa:	68ba      	ldr	r2, [r7, #8]
 800a7ac:	430a      	orrs	r2, r1
 800a7ae:	629a      	str	r2, [r3, #40]	; 0x28
 800a7b0:	e028      	b.n	800a804 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	681b      	ldr	r3, [r3, #0]
 800a7b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a7b8:	0c1b      	lsrs	r3, r3, #16
 800a7ba:	68ba      	ldr	r2, [r7, #8]
 800a7bc:	4413      	add	r3, r2
 800a7be:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800a7c0:	2300      	movs	r3, #0
 800a7c2:	73fb      	strb	r3, [r7, #15]
 800a7c4:	e00d      	b.n	800a7e2 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	681a      	ldr	r2, [r3, #0]
 800a7ca:	7bfb      	ldrb	r3, [r7, #15]
 800a7cc:	3340      	adds	r3, #64	; 0x40
 800a7ce:	009b      	lsls	r3, r3, #2
 800a7d0:	4413      	add	r3, r2
 800a7d2:	685b      	ldr	r3, [r3, #4]
 800a7d4:	0c1b      	lsrs	r3, r3, #16
 800a7d6:	68ba      	ldr	r2, [r7, #8]
 800a7d8:	4413      	add	r3, r2
 800a7da:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800a7dc:	7bfb      	ldrb	r3, [r7, #15]
 800a7de:	3301      	adds	r3, #1
 800a7e0:	73fb      	strb	r3, [r7, #15]
 800a7e2:	7bfa      	ldrb	r2, [r7, #15]
 800a7e4:	78fb      	ldrb	r3, [r7, #3]
 800a7e6:	3b01      	subs	r3, #1
 800a7e8:	429a      	cmp	r2, r3
 800a7ea:	d3ec      	bcc.n	800a7c6 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800a7ec:	883b      	ldrh	r3, [r7, #0]
 800a7ee:	0418      	lsls	r0, r3, #16
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	6819      	ldr	r1, [r3, #0]
 800a7f4:	78fb      	ldrb	r3, [r7, #3]
 800a7f6:	3b01      	subs	r3, #1
 800a7f8:	68ba      	ldr	r2, [r7, #8]
 800a7fa:	4302      	orrs	r2, r0
 800a7fc:	3340      	adds	r3, #64	; 0x40
 800a7fe:	009b      	lsls	r3, r3, #2
 800a800:	440b      	add	r3, r1
 800a802:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800a804:	2300      	movs	r3, #0
}
 800a806:	4618      	mov	r0, r3
 800a808:	3714      	adds	r7, #20
 800a80a:	46bd      	mov	sp, r7
 800a80c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a810:	4770      	bx	lr

0800a812 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800a812:	b480      	push	{r7}
 800a814:	b083      	sub	sp, #12
 800a816:	af00      	add	r7, sp, #0
 800a818:	6078      	str	r0, [r7, #4]
 800a81a:	460b      	mov	r3, r1
 800a81c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	681b      	ldr	r3, [r3, #0]
 800a822:	887a      	ldrh	r2, [r7, #2]
 800a824:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800a826:	2300      	movs	r3, #0
}
 800a828:	4618      	mov	r0, r3
 800a82a:	370c      	adds	r7, #12
 800a82c:	46bd      	mov	sp, r7
 800a82e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a832:	4770      	bx	lr

0800a834 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800a834:	b480      	push	{r7}
 800a836:	b083      	sub	sp, #12
 800a838:	af00      	add	r7, sp, #0
 800a83a:	6078      	str	r0, [r7, #4]
 800a83c:	460b      	mov	r3, r1
 800a83e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800a840:	bf00      	nop
 800a842:	370c      	adds	r7, #12
 800a844:	46bd      	mov	sp, r7
 800a846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a84a:	4770      	bx	lr

0800a84c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a84c:	b580      	push	{r7, lr}
 800a84e:	b086      	sub	sp, #24
 800a850:	af00      	add	r7, sp, #0
 800a852:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	2b00      	cmp	r3, #0
 800a858:	d101      	bne.n	800a85e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800a85a:	2301      	movs	r3, #1
 800a85c:	e267      	b.n	800ad2e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	681b      	ldr	r3, [r3, #0]
 800a862:	f003 0301 	and.w	r3, r3, #1
 800a866:	2b00      	cmp	r3, #0
 800a868:	d075      	beq.n	800a956 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800a86a:	4b88      	ldr	r3, [pc, #544]	; (800aa8c <HAL_RCC_OscConfig+0x240>)
 800a86c:	689b      	ldr	r3, [r3, #8]
 800a86e:	f003 030c 	and.w	r3, r3, #12
 800a872:	2b04      	cmp	r3, #4
 800a874:	d00c      	beq.n	800a890 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800a876:	4b85      	ldr	r3, [pc, #532]	; (800aa8c <HAL_RCC_OscConfig+0x240>)
 800a878:	689b      	ldr	r3, [r3, #8]
 800a87a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800a87e:	2b08      	cmp	r3, #8
 800a880:	d112      	bne.n	800a8a8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800a882:	4b82      	ldr	r3, [pc, #520]	; (800aa8c <HAL_RCC_OscConfig+0x240>)
 800a884:	685b      	ldr	r3, [r3, #4]
 800a886:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a88a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a88e:	d10b      	bne.n	800a8a8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a890:	4b7e      	ldr	r3, [pc, #504]	; (800aa8c <HAL_RCC_OscConfig+0x240>)
 800a892:	681b      	ldr	r3, [r3, #0]
 800a894:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a898:	2b00      	cmp	r3, #0
 800a89a:	d05b      	beq.n	800a954 <HAL_RCC_OscConfig+0x108>
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	685b      	ldr	r3, [r3, #4]
 800a8a0:	2b00      	cmp	r3, #0
 800a8a2:	d157      	bne.n	800a954 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800a8a4:	2301      	movs	r3, #1
 800a8a6:	e242      	b.n	800ad2e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	685b      	ldr	r3, [r3, #4]
 800a8ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a8b0:	d106      	bne.n	800a8c0 <HAL_RCC_OscConfig+0x74>
 800a8b2:	4b76      	ldr	r3, [pc, #472]	; (800aa8c <HAL_RCC_OscConfig+0x240>)
 800a8b4:	681b      	ldr	r3, [r3, #0]
 800a8b6:	4a75      	ldr	r2, [pc, #468]	; (800aa8c <HAL_RCC_OscConfig+0x240>)
 800a8b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a8bc:	6013      	str	r3, [r2, #0]
 800a8be:	e01d      	b.n	800a8fc <HAL_RCC_OscConfig+0xb0>
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	685b      	ldr	r3, [r3, #4]
 800a8c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a8c8:	d10c      	bne.n	800a8e4 <HAL_RCC_OscConfig+0x98>
 800a8ca:	4b70      	ldr	r3, [pc, #448]	; (800aa8c <HAL_RCC_OscConfig+0x240>)
 800a8cc:	681b      	ldr	r3, [r3, #0]
 800a8ce:	4a6f      	ldr	r2, [pc, #444]	; (800aa8c <HAL_RCC_OscConfig+0x240>)
 800a8d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a8d4:	6013      	str	r3, [r2, #0]
 800a8d6:	4b6d      	ldr	r3, [pc, #436]	; (800aa8c <HAL_RCC_OscConfig+0x240>)
 800a8d8:	681b      	ldr	r3, [r3, #0]
 800a8da:	4a6c      	ldr	r2, [pc, #432]	; (800aa8c <HAL_RCC_OscConfig+0x240>)
 800a8dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a8e0:	6013      	str	r3, [r2, #0]
 800a8e2:	e00b      	b.n	800a8fc <HAL_RCC_OscConfig+0xb0>
 800a8e4:	4b69      	ldr	r3, [pc, #420]	; (800aa8c <HAL_RCC_OscConfig+0x240>)
 800a8e6:	681b      	ldr	r3, [r3, #0]
 800a8e8:	4a68      	ldr	r2, [pc, #416]	; (800aa8c <HAL_RCC_OscConfig+0x240>)
 800a8ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a8ee:	6013      	str	r3, [r2, #0]
 800a8f0:	4b66      	ldr	r3, [pc, #408]	; (800aa8c <HAL_RCC_OscConfig+0x240>)
 800a8f2:	681b      	ldr	r3, [r3, #0]
 800a8f4:	4a65      	ldr	r2, [pc, #404]	; (800aa8c <HAL_RCC_OscConfig+0x240>)
 800a8f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a8fa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	685b      	ldr	r3, [r3, #4]
 800a900:	2b00      	cmp	r3, #0
 800a902:	d013      	beq.n	800a92c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a904:	f7fd f8ac 	bl	8007a60 <HAL_GetTick>
 800a908:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a90a:	e008      	b.n	800a91e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800a90c:	f7fd f8a8 	bl	8007a60 <HAL_GetTick>
 800a910:	4602      	mov	r2, r0
 800a912:	693b      	ldr	r3, [r7, #16]
 800a914:	1ad3      	subs	r3, r2, r3
 800a916:	2b64      	cmp	r3, #100	; 0x64
 800a918:	d901      	bls.n	800a91e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800a91a:	2303      	movs	r3, #3
 800a91c:	e207      	b.n	800ad2e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a91e:	4b5b      	ldr	r3, [pc, #364]	; (800aa8c <HAL_RCC_OscConfig+0x240>)
 800a920:	681b      	ldr	r3, [r3, #0]
 800a922:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a926:	2b00      	cmp	r3, #0
 800a928:	d0f0      	beq.n	800a90c <HAL_RCC_OscConfig+0xc0>
 800a92a:	e014      	b.n	800a956 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a92c:	f7fd f898 	bl	8007a60 <HAL_GetTick>
 800a930:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a932:	e008      	b.n	800a946 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800a934:	f7fd f894 	bl	8007a60 <HAL_GetTick>
 800a938:	4602      	mov	r2, r0
 800a93a:	693b      	ldr	r3, [r7, #16]
 800a93c:	1ad3      	subs	r3, r2, r3
 800a93e:	2b64      	cmp	r3, #100	; 0x64
 800a940:	d901      	bls.n	800a946 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800a942:	2303      	movs	r3, #3
 800a944:	e1f3      	b.n	800ad2e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a946:	4b51      	ldr	r3, [pc, #324]	; (800aa8c <HAL_RCC_OscConfig+0x240>)
 800a948:	681b      	ldr	r3, [r3, #0]
 800a94a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a94e:	2b00      	cmp	r3, #0
 800a950:	d1f0      	bne.n	800a934 <HAL_RCC_OscConfig+0xe8>
 800a952:	e000      	b.n	800a956 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a954:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	681b      	ldr	r3, [r3, #0]
 800a95a:	f003 0302 	and.w	r3, r3, #2
 800a95e:	2b00      	cmp	r3, #0
 800a960:	d063      	beq.n	800aa2a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800a962:	4b4a      	ldr	r3, [pc, #296]	; (800aa8c <HAL_RCC_OscConfig+0x240>)
 800a964:	689b      	ldr	r3, [r3, #8]
 800a966:	f003 030c 	and.w	r3, r3, #12
 800a96a:	2b00      	cmp	r3, #0
 800a96c:	d00b      	beq.n	800a986 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800a96e:	4b47      	ldr	r3, [pc, #284]	; (800aa8c <HAL_RCC_OscConfig+0x240>)
 800a970:	689b      	ldr	r3, [r3, #8]
 800a972:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800a976:	2b08      	cmp	r3, #8
 800a978:	d11c      	bne.n	800a9b4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800a97a:	4b44      	ldr	r3, [pc, #272]	; (800aa8c <HAL_RCC_OscConfig+0x240>)
 800a97c:	685b      	ldr	r3, [r3, #4]
 800a97e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a982:	2b00      	cmp	r3, #0
 800a984:	d116      	bne.n	800a9b4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a986:	4b41      	ldr	r3, [pc, #260]	; (800aa8c <HAL_RCC_OscConfig+0x240>)
 800a988:	681b      	ldr	r3, [r3, #0]
 800a98a:	f003 0302 	and.w	r3, r3, #2
 800a98e:	2b00      	cmp	r3, #0
 800a990:	d005      	beq.n	800a99e <HAL_RCC_OscConfig+0x152>
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	68db      	ldr	r3, [r3, #12]
 800a996:	2b01      	cmp	r3, #1
 800a998:	d001      	beq.n	800a99e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800a99a:	2301      	movs	r3, #1
 800a99c:	e1c7      	b.n	800ad2e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a99e:	4b3b      	ldr	r3, [pc, #236]	; (800aa8c <HAL_RCC_OscConfig+0x240>)
 800a9a0:	681b      	ldr	r3, [r3, #0]
 800a9a2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	691b      	ldr	r3, [r3, #16]
 800a9aa:	00db      	lsls	r3, r3, #3
 800a9ac:	4937      	ldr	r1, [pc, #220]	; (800aa8c <HAL_RCC_OscConfig+0x240>)
 800a9ae:	4313      	orrs	r3, r2
 800a9b0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a9b2:	e03a      	b.n	800aa2a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	68db      	ldr	r3, [r3, #12]
 800a9b8:	2b00      	cmp	r3, #0
 800a9ba:	d020      	beq.n	800a9fe <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800a9bc:	4b34      	ldr	r3, [pc, #208]	; (800aa90 <HAL_RCC_OscConfig+0x244>)
 800a9be:	2201      	movs	r2, #1
 800a9c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a9c2:	f7fd f84d 	bl	8007a60 <HAL_GetTick>
 800a9c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a9c8:	e008      	b.n	800a9dc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800a9ca:	f7fd f849 	bl	8007a60 <HAL_GetTick>
 800a9ce:	4602      	mov	r2, r0
 800a9d0:	693b      	ldr	r3, [r7, #16]
 800a9d2:	1ad3      	subs	r3, r2, r3
 800a9d4:	2b02      	cmp	r3, #2
 800a9d6:	d901      	bls.n	800a9dc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800a9d8:	2303      	movs	r3, #3
 800a9da:	e1a8      	b.n	800ad2e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a9dc:	4b2b      	ldr	r3, [pc, #172]	; (800aa8c <HAL_RCC_OscConfig+0x240>)
 800a9de:	681b      	ldr	r3, [r3, #0]
 800a9e0:	f003 0302 	and.w	r3, r3, #2
 800a9e4:	2b00      	cmp	r3, #0
 800a9e6:	d0f0      	beq.n	800a9ca <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a9e8:	4b28      	ldr	r3, [pc, #160]	; (800aa8c <HAL_RCC_OscConfig+0x240>)
 800a9ea:	681b      	ldr	r3, [r3, #0]
 800a9ec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	691b      	ldr	r3, [r3, #16]
 800a9f4:	00db      	lsls	r3, r3, #3
 800a9f6:	4925      	ldr	r1, [pc, #148]	; (800aa8c <HAL_RCC_OscConfig+0x240>)
 800a9f8:	4313      	orrs	r3, r2
 800a9fa:	600b      	str	r3, [r1, #0]
 800a9fc:	e015      	b.n	800aa2a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a9fe:	4b24      	ldr	r3, [pc, #144]	; (800aa90 <HAL_RCC_OscConfig+0x244>)
 800aa00:	2200      	movs	r2, #0
 800aa02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800aa04:	f7fd f82c 	bl	8007a60 <HAL_GetTick>
 800aa08:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800aa0a:	e008      	b.n	800aa1e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800aa0c:	f7fd f828 	bl	8007a60 <HAL_GetTick>
 800aa10:	4602      	mov	r2, r0
 800aa12:	693b      	ldr	r3, [r7, #16]
 800aa14:	1ad3      	subs	r3, r2, r3
 800aa16:	2b02      	cmp	r3, #2
 800aa18:	d901      	bls.n	800aa1e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800aa1a:	2303      	movs	r3, #3
 800aa1c:	e187      	b.n	800ad2e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800aa1e:	4b1b      	ldr	r3, [pc, #108]	; (800aa8c <HAL_RCC_OscConfig+0x240>)
 800aa20:	681b      	ldr	r3, [r3, #0]
 800aa22:	f003 0302 	and.w	r3, r3, #2
 800aa26:	2b00      	cmp	r3, #0
 800aa28:	d1f0      	bne.n	800aa0c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	681b      	ldr	r3, [r3, #0]
 800aa2e:	f003 0308 	and.w	r3, r3, #8
 800aa32:	2b00      	cmp	r3, #0
 800aa34:	d036      	beq.n	800aaa4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	695b      	ldr	r3, [r3, #20]
 800aa3a:	2b00      	cmp	r3, #0
 800aa3c:	d016      	beq.n	800aa6c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800aa3e:	4b15      	ldr	r3, [pc, #84]	; (800aa94 <HAL_RCC_OscConfig+0x248>)
 800aa40:	2201      	movs	r2, #1
 800aa42:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800aa44:	f7fd f80c 	bl	8007a60 <HAL_GetTick>
 800aa48:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800aa4a:	e008      	b.n	800aa5e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800aa4c:	f7fd f808 	bl	8007a60 <HAL_GetTick>
 800aa50:	4602      	mov	r2, r0
 800aa52:	693b      	ldr	r3, [r7, #16]
 800aa54:	1ad3      	subs	r3, r2, r3
 800aa56:	2b02      	cmp	r3, #2
 800aa58:	d901      	bls.n	800aa5e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800aa5a:	2303      	movs	r3, #3
 800aa5c:	e167      	b.n	800ad2e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800aa5e:	4b0b      	ldr	r3, [pc, #44]	; (800aa8c <HAL_RCC_OscConfig+0x240>)
 800aa60:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800aa62:	f003 0302 	and.w	r3, r3, #2
 800aa66:	2b00      	cmp	r3, #0
 800aa68:	d0f0      	beq.n	800aa4c <HAL_RCC_OscConfig+0x200>
 800aa6a:	e01b      	b.n	800aaa4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800aa6c:	4b09      	ldr	r3, [pc, #36]	; (800aa94 <HAL_RCC_OscConfig+0x248>)
 800aa6e:	2200      	movs	r2, #0
 800aa70:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800aa72:	f7fc fff5 	bl	8007a60 <HAL_GetTick>
 800aa76:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800aa78:	e00e      	b.n	800aa98 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800aa7a:	f7fc fff1 	bl	8007a60 <HAL_GetTick>
 800aa7e:	4602      	mov	r2, r0
 800aa80:	693b      	ldr	r3, [r7, #16]
 800aa82:	1ad3      	subs	r3, r2, r3
 800aa84:	2b02      	cmp	r3, #2
 800aa86:	d907      	bls.n	800aa98 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800aa88:	2303      	movs	r3, #3
 800aa8a:	e150      	b.n	800ad2e <HAL_RCC_OscConfig+0x4e2>
 800aa8c:	40023800 	.word	0x40023800
 800aa90:	42470000 	.word	0x42470000
 800aa94:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800aa98:	4b88      	ldr	r3, [pc, #544]	; (800acbc <HAL_RCC_OscConfig+0x470>)
 800aa9a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800aa9c:	f003 0302 	and.w	r3, r3, #2
 800aaa0:	2b00      	cmp	r3, #0
 800aaa2:	d1ea      	bne.n	800aa7a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	681b      	ldr	r3, [r3, #0]
 800aaa8:	f003 0304 	and.w	r3, r3, #4
 800aaac:	2b00      	cmp	r3, #0
 800aaae:	f000 8097 	beq.w	800abe0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800aab2:	2300      	movs	r3, #0
 800aab4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800aab6:	4b81      	ldr	r3, [pc, #516]	; (800acbc <HAL_RCC_OscConfig+0x470>)
 800aab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aaba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800aabe:	2b00      	cmp	r3, #0
 800aac0:	d10f      	bne.n	800aae2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800aac2:	2300      	movs	r3, #0
 800aac4:	60bb      	str	r3, [r7, #8]
 800aac6:	4b7d      	ldr	r3, [pc, #500]	; (800acbc <HAL_RCC_OscConfig+0x470>)
 800aac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aaca:	4a7c      	ldr	r2, [pc, #496]	; (800acbc <HAL_RCC_OscConfig+0x470>)
 800aacc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800aad0:	6413      	str	r3, [r2, #64]	; 0x40
 800aad2:	4b7a      	ldr	r3, [pc, #488]	; (800acbc <HAL_RCC_OscConfig+0x470>)
 800aad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aad6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800aada:	60bb      	str	r3, [r7, #8]
 800aadc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800aade:	2301      	movs	r3, #1
 800aae0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800aae2:	4b77      	ldr	r3, [pc, #476]	; (800acc0 <HAL_RCC_OscConfig+0x474>)
 800aae4:	681b      	ldr	r3, [r3, #0]
 800aae6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aaea:	2b00      	cmp	r3, #0
 800aaec:	d118      	bne.n	800ab20 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800aaee:	4b74      	ldr	r3, [pc, #464]	; (800acc0 <HAL_RCC_OscConfig+0x474>)
 800aaf0:	681b      	ldr	r3, [r3, #0]
 800aaf2:	4a73      	ldr	r2, [pc, #460]	; (800acc0 <HAL_RCC_OscConfig+0x474>)
 800aaf4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800aaf8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800aafa:	f7fc ffb1 	bl	8007a60 <HAL_GetTick>
 800aafe:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800ab00:	e008      	b.n	800ab14 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800ab02:	f7fc ffad 	bl	8007a60 <HAL_GetTick>
 800ab06:	4602      	mov	r2, r0
 800ab08:	693b      	ldr	r3, [r7, #16]
 800ab0a:	1ad3      	subs	r3, r2, r3
 800ab0c:	2b02      	cmp	r3, #2
 800ab0e:	d901      	bls.n	800ab14 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800ab10:	2303      	movs	r3, #3
 800ab12:	e10c      	b.n	800ad2e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800ab14:	4b6a      	ldr	r3, [pc, #424]	; (800acc0 <HAL_RCC_OscConfig+0x474>)
 800ab16:	681b      	ldr	r3, [r3, #0]
 800ab18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ab1c:	2b00      	cmp	r3, #0
 800ab1e:	d0f0      	beq.n	800ab02 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	689b      	ldr	r3, [r3, #8]
 800ab24:	2b01      	cmp	r3, #1
 800ab26:	d106      	bne.n	800ab36 <HAL_RCC_OscConfig+0x2ea>
 800ab28:	4b64      	ldr	r3, [pc, #400]	; (800acbc <HAL_RCC_OscConfig+0x470>)
 800ab2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ab2c:	4a63      	ldr	r2, [pc, #396]	; (800acbc <HAL_RCC_OscConfig+0x470>)
 800ab2e:	f043 0301 	orr.w	r3, r3, #1
 800ab32:	6713      	str	r3, [r2, #112]	; 0x70
 800ab34:	e01c      	b.n	800ab70 <HAL_RCC_OscConfig+0x324>
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	689b      	ldr	r3, [r3, #8]
 800ab3a:	2b05      	cmp	r3, #5
 800ab3c:	d10c      	bne.n	800ab58 <HAL_RCC_OscConfig+0x30c>
 800ab3e:	4b5f      	ldr	r3, [pc, #380]	; (800acbc <HAL_RCC_OscConfig+0x470>)
 800ab40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ab42:	4a5e      	ldr	r2, [pc, #376]	; (800acbc <HAL_RCC_OscConfig+0x470>)
 800ab44:	f043 0304 	orr.w	r3, r3, #4
 800ab48:	6713      	str	r3, [r2, #112]	; 0x70
 800ab4a:	4b5c      	ldr	r3, [pc, #368]	; (800acbc <HAL_RCC_OscConfig+0x470>)
 800ab4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ab4e:	4a5b      	ldr	r2, [pc, #364]	; (800acbc <HAL_RCC_OscConfig+0x470>)
 800ab50:	f043 0301 	orr.w	r3, r3, #1
 800ab54:	6713      	str	r3, [r2, #112]	; 0x70
 800ab56:	e00b      	b.n	800ab70 <HAL_RCC_OscConfig+0x324>
 800ab58:	4b58      	ldr	r3, [pc, #352]	; (800acbc <HAL_RCC_OscConfig+0x470>)
 800ab5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ab5c:	4a57      	ldr	r2, [pc, #348]	; (800acbc <HAL_RCC_OscConfig+0x470>)
 800ab5e:	f023 0301 	bic.w	r3, r3, #1
 800ab62:	6713      	str	r3, [r2, #112]	; 0x70
 800ab64:	4b55      	ldr	r3, [pc, #340]	; (800acbc <HAL_RCC_OscConfig+0x470>)
 800ab66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ab68:	4a54      	ldr	r2, [pc, #336]	; (800acbc <HAL_RCC_OscConfig+0x470>)
 800ab6a:	f023 0304 	bic.w	r3, r3, #4
 800ab6e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	689b      	ldr	r3, [r3, #8]
 800ab74:	2b00      	cmp	r3, #0
 800ab76:	d015      	beq.n	800aba4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ab78:	f7fc ff72 	bl	8007a60 <HAL_GetTick>
 800ab7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800ab7e:	e00a      	b.n	800ab96 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800ab80:	f7fc ff6e 	bl	8007a60 <HAL_GetTick>
 800ab84:	4602      	mov	r2, r0
 800ab86:	693b      	ldr	r3, [r7, #16]
 800ab88:	1ad3      	subs	r3, r2, r3
 800ab8a:	f241 3288 	movw	r2, #5000	; 0x1388
 800ab8e:	4293      	cmp	r3, r2
 800ab90:	d901      	bls.n	800ab96 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800ab92:	2303      	movs	r3, #3
 800ab94:	e0cb      	b.n	800ad2e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800ab96:	4b49      	ldr	r3, [pc, #292]	; (800acbc <HAL_RCC_OscConfig+0x470>)
 800ab98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ab9a:	f003 0302 	and.w	r3, r3, #2
 800ab9e:	2b00      	cmp	r3, #0
 800aba0:	d0ee      	beq.n	800ab80 <HAL_RCC_OscConfig+0x334>
 800aba2:	e014      	b.n	800abce <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800aba4:	f7fc ff5c 	bl	8007a60 <HAL_GetTick>
 800aba8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800abaa:	e00a      	b.n	800abc2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800abac:	f7fc ff58 	bl	8007a60 <HAL_GetTick>
 800abb0:	4602      	mov	r2, r0
 800abb2:	693b      	ldr	r3, [r7, #16]
 800abb4:	1ad3      	subs	r3, r2, r3
 800abb6:	f241 3288 	movw	r2, #5000	; 0x1388
 800abba:	4293      	cmp	r3, r2
 800abbc:	d901      	bls.n	800abc2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800abbe:	2303      	movs	r3, #3
 800abc0:	e0b5      	b.n	800ad2e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800abc2:	4b3e      	ldr	r3, [pc, #248]	; (800acbc <HAL_RCC_OscConfig+0x470>)
 800abc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800abc6:	f003 0302 	and.w	r3, r3, #2
 800abca:	2b00      	cmp	r3, #0
 800abcc:	d1ee      	bne.n	800abac <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800abce:	7dfb      	ldrb	r3, [r7, #23]
 800abd0:	2b01      	cmp	r3, #1
 800abd2:	d105      	bne.n	800abe0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800abd4:	4b39      	ldr	r3, [pc, #228]	; (800acbc <HAL_RCC_OscConfig+0x470>)
 800abd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800abd8:	4a38      	ldr	r2, [pc, #224]	; (800acbc <HAL_RCC_OscConfig+0x470>)
 800abda:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800abde:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	699b      	ldr	r3, [r3, #24]
 800abe4:	2b00      	cmp	r3, #0
 800abe6:	f000 80a1 	beq.w	800ad2c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800abea:	4b34      	ldr	r3, [pc, #208]	; (800acbc <HAL_RCC_OscConfig+0x470>)
 800abec:	689b      	ldr	r3, [r3, #8]
 800abee:	f003 030c 	and.w	r3, r3, #12
 800abf2:	2b08      	cmp	r3, #8
 800abf4:	d05c      	beq.n	800acb0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	699b      	ldr	r3, [r3, #24]
 800abfa:	2b02      	cmp	r3, #2
 800abfc:	d141      	bne.n	800ac82 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800abfe:	4b31      	ldr	r3, [pc, #196]	; (800acc4 <HAL_RCC_OscConfig+0x478>)
 800ac00:	2200      	movs	r2, #0
 800ac02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ac04:	f7fc ff2c 	bl	8007a60 <HAL_GetTick>
 800ac08:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800ac0a:	e008      	b.n	800ac1e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800ac0c:	f7fc ff28 	bl	8007a60 <HAL_GetTick>
 800ac10:	4602      	mov	r2, r0
 800ac12:	693b      	ldr	r3, [r7, #16]
 800ac14:	1ad3      	subs	r3, r2, r3
 800ac16:	2b02      	cmp	r3, #2
 800ac18:	d901      	bls.n	800ac1e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800ac1a:	2303      	movs	r3, #3
 800ac1c:	e087      	b.n	800ad2e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800ac1e:	4b27      	ldr	r3, [pc, #156]	; (800acbc <HAL_RCC_OscConfig+0x470>)
 800ac20:	681b      	ldr	r3, [r3, #0]
 800ac22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ac26:	2b00      	cmp	r3, #0
 800ac28:	d1f0      	bne.n	800ac0c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	69da      	ldr	r2, [r3, #28]
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	6a1b      	ldr	r3, [r3, #32]
 800ac32:	431a      	orrs	r2, r3
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac38:	019b      	lsls	r3, r3, #6
 800ac3a:	431a      	orrs	r2, r3
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac40:	085b      	lsrs	r3, r3, #1
 800ac42:	3b01      	subs	r3, #1
 800ac44:	041b      	lsls	r3, r3, #16
 800ac46:	431a      	orrs	r2, r3
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac4c:	061b      	lsls	r3, r3, #24
 800ac4e:	491b      	ldr	r1, [pc, #108]	; (800acbc <HAL_RCC_OscConfig+0x470>)
 800ac50:	4313      	orrs	r3, r2
 800ac52:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800ac54:	4b1b      	ldr	r3, [pc, #108]	; (800acc4 <HAL_RCC_OscConfig+0x478>)
 800ac56:	2201      	movs	r2, #1
 800ac58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ac5a:	f7fc ff01 	bl	8007a60 <HAL_GetTick>
 800ac5e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800ac60:	e008      	b.n	800ac74 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800ac62:	f7fc fefd 	bl	8007a60 <HAL_GetTick>
 800ac66:	4602      	mov	r2, r0
 800ac68:	693b      	ldr	r3, [r7, #16]
 800ac6a:	1ad3      	subs	r3, r2, r3
 800ac6c:	2b02      	cmp	r3, #2
 800ac6e:	d901      	bls.n	800ac74 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800ac70:	2303      	movs	r3, #3
 800ac72:	e05c      	b.n	800ad2e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800ac74:	4b11      	ldr	r3, [pc, #68]	; (800acbc <HAL_RCC_OscConfig+0x470>)
 800ac76:	681b      	ldr	r3, [r3, #0]
 800ac78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ac7c:	2b00      	cmp	r3, #0
 800ac7e:	d0f0      	beq.n	800ac62 <HAL_RCC_OscConfig+0x416>
 800ac80:	e054      	b.n	800ad2c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ac82:	4b10      	ldr	r3, [pc, #64]	; (800acc4 <HAL_RCC_OscConfig+0x478>)
 800ac84:	2200      	movs	r2, #0
 800ac86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ac88:	f7fc feea 	bl	8007a60 <HAL_GetTick>
 800ac8c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800ac8e:	e008      	b.n	800aca2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800ac90:	f7fc fee6 	bl	8007a60 <HAL_GetTick>
 800ac94:	4602      	mov	r2, r0
 800ac96:	693b      	ldr	r3, [r7, #16]
 800ac98:	1ad3      	subs	r3, r2, r3
 800ac9a:	2b02      	cmp	r3, #2
 800ac9c:	d901      	bls.n	800aca2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800ac9e:	2303      	movs	r3, #3
 800aca0:	e045      	b.n	800ad2e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800aca2:	4b06      	ldr	r3, [pc, #24]	; (800acbc <HAL_RCC_OscConfig+0x470>)
 800aca4:	681b      	ldr	r3, [r3, #0]
 800aca6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800acaa:	2b00      	cmp	r3, #0
 800acac:	d1f0      	bne.n	800ac90 <HAL_RCC_OscConfig+0x444>
 800acae:	e03d      	b.n	800ad2c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	699b      	ldr	r3, [r3, #24]
 800acb4:	2b01      	cmp	r3, #1
 800acb6:	d107      	bne.n	800acc8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800acb8:	2301      	movs	r3, #1
 800acba:	e038      	b.n	800ad2e <HAL_RCC_OscConfig+0x4e2>
 800acbc:	40023800 	.word	0x40023800
 800acc0:	40007000 	.word	0x40007000
 800acc4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800acc8:	4b1b      	ldr	r3, [pc, #108]	; (800ad38 <HAL_RCC_OscConfig+0x4ec>)
 800acca:	685b      	ldr	r3, [r3, #4]
 800accc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	699b      	ldr	r3, [r3, #24]
 800acd2:	2b01      	cmp	r3, #1
 800acd4:	d028      	beq.n	800ad28 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800acd6:	68fb      	ldr	r3, [r7, #12]
 800acd8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800ace0:	429a      	cmp	r2, r3
 800ace2:	d121      	bne.n	800ad28 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800ace4:	68fb      	ldr	r3, [r7, #12]
 800ace6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800acee:	429a      	cmp	r2, r3
 800acf0:	d11a      	bne.n	800ad28 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800acf2:	68fa      	ldr	r2, [r7, #12]
 800acf4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800acf8:	4013      	ands	r3, r2
 800acfa:	687a      	ldr	r2, [r7, #4]
 800acfc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800acfe:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800ad00:	4293      	cmp	r3, r2
 800ad02:	d111      	bne.n	800ad28 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800ad04:	68fb      	ldr	r3, [r7, #12]
 800ad06:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ad0e:	085b      	lsrs	r3, r3, #1
 800ad10:	3b01      	subs	r3, #1
 800ad12:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800ad14:	429a      	cmp	r2, r3
 800ad16:	d107      	bne.n	800ad28 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800ad18:	68fb      	ldr	r3, [r7, #12]
 800ad1a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad22:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800ad24:	429a      	cmp	r2, r3
 800ad26:	d001      	beq.n	800ad2c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800ad28:	2301      	movs	r3, #1
 800ad2a:	e000      	b.n	800ad2e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800ad2c:	2300      	movs	r3, #0
}
 800ad2e:	4618      	mov	r0, r3
 800ad30:	3718      	adds	r7, #24
 800ad32:	46bd      	mov	sp, r7
 800ad34:	bd80      	pop	{r7, pc}
 800ad36:	bf00      	nop
 800ad38:	40023800 	.word	0x40023800

0800ad3c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800ad3c:	b580      	push	{r7, lr}
 800ad3e:	b084      	sub	sp, #16
 800ad40:	af00      	add	r7, sp, #0
 800ad42:	6078      	str	r0, [r7, #4]
 800ad44:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	2b00      	cmp	r3, #0
 800ad4a:	d101      	bne.n	800ad50 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800ad4c:	2301      	movs	r3, #1
 800ad4e:	e0cc      	b.n	800aeea <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800ad50:	4b68      	ldr	r3, [pc, #416]	; (800aef4 <HAL_RCC_ClockConfig+0x1b8>)
 800ad52:	681b      	ldr	r3, [r3, #0]
 800ad54:	f003 030f 	and.w	r3, r3, #15
 800ad58:	683a      	ldr	r2, [r7, #0]
 800ad5a:	429a      	cmp	r2, r3
 800ad5c:	d90c      	bls.n	800ad78 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ad5e:	4b65      	ldr	r3, [pc, #404]	; (800aef4 <HAL_RCC_ClockConfig+0x1b8>)
 800ad60:	683a      	ldr	r2, [r7, #0]
 800ad62:	b2d2      	uxtb	r2, r2
 800ad64:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800ad66:	4b63      	ldr	r3, [pc, #396]	; (800aef4 <HAL_RCC_ClockConfig+0x1b8>)
 800ad68:	681b      	ldr	r3, [r3, #0]
 800ad6a:	f003 030f 	and.w	r3, r3, #15
 800ad6e:	683a      	ldr	r2, [r7, #0]
 800ad70:	429a      	cmp	r2, r3
 800ad72:	d001      	beq.n	800ad78 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800ad74:	2301      	movs	r3, #1
 800ad76:	e0b8      	b.n	800aeea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	681b      	ldr	r3, [r3, #0]
 800ad7c:	f003 0302 	and.w	r3, r3, #2
 800ad80:	2b00      	cmp	r3, #0
 800ad82:	d020      	beq.n	800adc6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	681b      	ldr	r3, [r3, #0]
 800ad88:	f003 0304 	and.w	r3, r3, #4
 800ad8c:	2b00      	cmp	r3, #0
 800ad8e:	d005      	beq.n	800ad9c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800ad90:	4b59      	ldr	r3, [pc, #356]	; (800aef8 <HAL_RCC_ClockConfig+0x1bc>)
 800ad92:	689b      	ldr	r3, [r3, #8]
 800ad94:	4a58      	ldr	r2, [pc, #352]	; (800aef8 <HAL_RCC_ClockConfig+0x1bc>)
 800ad96:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800ad9a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	681b      	ldr	r3, [r3, #0]
 800ada0:	f003 0308 	and.w	r3, r3, #8
 800ada4:	2b00      	cmp	r3, #0
 800ada6:	d005      	beq.n	800adb4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800ada8:	4b53      	ldr	r3, [pc, #332]	; (800aef8 <HAL_RCC_ClockConfig+0x1bc>)
 800adaa:	689b      	ldr	r3, [r3, #8]
 800adac:	4a52      	ldr	r2, [pc, #328]	; (800aef8 <HAL_RCC_ClockConfig+0x1bc>)
 800adae:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800adb2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800adb4:	4b50      	ldr	r3, [pc, #320]	; (800aef8 <HAL_RCC_ClockConfig+0x1bc>)
 800adb6:	689b      	ldr	r3, [r3, #8]
 800adb8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	689b      	ldr	r3, [r3, #8]
 800adc0:	494d      	ldr	r1, [pc, #308]	; (800aef8 <HAL_RCC_ClockConfig+0x1bc>)
 800adc2:	4313      	orrs	r3, r2
 800adc4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	681b      	ldr	r3, [r3, #0]
 800adca:	f003 0301 	and.w	r3, r3, #1
 800adce:	2b00      	cmp	r3, #0
 800add0:	d044      	beq.n	800ae5c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	685b      	ldr	r3, [r3, #4]
 800add6:	2b01      	cmp	r3, #1
 800add8:	d107      	bne.n	800adea <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800adda:	4b47      	ldr	r3, [pc, #284]	; (800aef8 <HAL_RCC_ClockConfig+0x1bc>)
 800addc:	681b      	ldr	r3, [r3, #0]
 800adde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ade2:	2b00      	cmp	r3, #0
 800ade4:	d119      	bne.n	800ae1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800ade6:	2301      	movs	r3, #1
 800ade8:	e07f      	b.n	800aeea <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	685b      	ldr	r3, [r3, #4]
 800adee:	2b02      	cmp	r3, #2
 800adf0:	d003      	beq.n	800adfa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800adf6:	2b03      	cmp	r3, #3
 800adf8:	d107      	bne.n	800ae0a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800adfa:	4b3f      	ldr	r3, [pc, #252]	; (800aef8 <HAL_RCC_ClockConfig+0x1bc>)
 800adfc:	681b      	ldr	r3, [r3, #0]
 800adfe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ae02:	2b00      	cmp	r3, #0
 800ae04:	d109      	bne.n	800ae1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800ae06:	2301      	movs	r3, #1
 800ae08:	e06f      	b.n	800aeea <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800ae0a:	4b3b      	ldr	r3, [pc, #236]	; (800aef8 <HAL_RCC_ClockConfig+0x1bc>)
 800ae0c:	681b      	ldr	r3, [r3, #0]
 800ae0e:	f003 0302 	and.w	r3, r3, #2
 800ae12:	2b00      	cmp	r3, #0
 800ae14:	d101      	bne.n	800ae1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800ae16:	2301      	movs	r3, #1
 800ae18:	e067      	b.n	800aeea <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800ae1a:	4b37      	ldr	r3, [pc, #220]	; (800aef8 <HAL_RCC_ClockConfig+0x1bc>)
 800ae1c:	689b      	ldr	r3, [r3, #8]
 800ae1e:	f023 0203 	bic.w	r2, r3, #3
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	685b      	ldr	r3, [r3, #4]
 800ae26:	4934      	ldr	r1, [pc, #208]	; (800aef8 <HAL_RCC_ClockConfig+0x1bc>)
 800ae28:	4313      	orrs	r3, r2
 800ae2a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800ae2c:	f7fc fe18 	bl	8007a60 <HAL_GetTick>
 800ae30:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ae32:	e00a      	b.n	800ae4a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800ae34:	f7fc fe14 	bl	8007a60 <HAL_GetTick>
 800ae38:	4602      	mov	r2, r0
 800ae3a:	68fb      	ldr	r3, [r7, #12]
 800ae3c:	1ad3      	subs	r3, r2, r3
 800ae3e:	f241 3288 	movw	r2, #5000	; 0x1388
 800ae42:	4293      	cmp	r3, r2
 800ae44:	d901      	bls.n	800ae4a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800ae46:	2303      	movs	r3, #3
 800ae48:	e04f      	b.n	800aeea <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ae4a:	4b2b      	ldr	r3, [pc, #172]	; (800aef8 <HAL_RCC_ClockConfig+0x1bc>)
 800ae4c:	689b      	ldr	r3, [r3, #8]
 800ae4e:	f003 020c 	and.w	r2, r3, #12
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	685b      	ldr	r3, [r3, #4]
 800ae56:	009b      	lsls	r3, r3, #2
 800ae58:	429a      	cmp	r2, r3
 800ae5a:	d1eb      	bne.n	800ae34 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800ae5c:	4b25      	ldr	r3, [pc, #148]	; (800aef4 <HAL_RCC_ClockConfig+0x1b8>)
 800ae5e:	681b      	ldr	r3, [r3, #0]
 800ae60:	f003 030f 	and.w	r3, r3, #15
 800ae64:	683a      	ldr	r2, [r7, #0]
 800ae66:	429a      	cmp	r2, r3
 800ae68:	d20c      	bcs.n	800ae84 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ae6a:	4b22      	ldr	r3, [pc, #136]	; (800aef4 <HAL_RCC_ClockConfig+0x1b8>)
 800ae6c:	683a      	ldr	r2, [r7, #0]
 800ae6e:	b2d2      	uxtb	r2, r2
 800ae70:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800ae72:	4b20      	ldr	r3, [pc, #128]	; (800aef4 <HAL_RCC_ClockConfig+0x1b8>)
 800ae74:	681b      	ldr	r3, [r3, #0]
 800ae76:	f003 030f 	and.w	r3, r3, #15
 800ae7a:	683a      	ldr	r2, [r7, #0]
 800ae7c:	429a      	cmp	r2, r3
 800ae7e:	d001      	beq.n	800ae84 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800ae80:	2301      	movs	r3, #1
 800ae82:	e032      	b.n	800aeea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	681b      	ldr	r3, [r3, #0]
 800ae88:	f003 0304 	and.w	r3, r3, #4
 800ae8c:	2b00      	cmp	r3, #0
 800ae8e:	d008      	beq.n	800aea2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800ae90:	4b19      	ldr	r3, [pc, #100]	; (800aef8 <HAL_RCC_ClockConfig+0x1bc>)
 800ae92:	689b      	ldr	r3, [r3, #8]
 800ae94:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	68db      	ldr	r3, [r3, #12]
 800ae9c:	4916      	ldr	r1, [pc, #88]	; (800aef8 <HAL_RCC_ClockConfig+0x1bc>)
 800ae9e:	4313      	orrs	r3, r2
 800aea0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	681b      	ldr	r3, [r3, #0]
 800aea6:	f003 0308 	and.w	r3, r3, #8
 800aeaa:	2b00      	cmp	r3, #0
 800aeac:	d009      	beq.n	800aec2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800aeae:	4b12      	ldr	r3, [pc, #72]	; (800aef8 <HAL_RCC_ClockConfig+0x1bc>)
 800aeb0:	689b      	ldr	r3, [r3, #8]
 800aeb2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	691b      	ldr	r3, [r3, #16]
 800aeba:	00db      	lsls	r3, r3, #3
 800aebc:	490e      	ldr	r1, [pc, #56]	; (800aef8 <HAL_RCC_ClockConfig+0x1bc>)
 800aebe:	4313      	orrs	r3, r2
 800aec0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800aec2:	f000 f821 	bl	800af08 <HAL_RCC_GetSysClockFreq>
 800aec6:	4602      	mov	r2, r0
 800aec8:	4b0b      	ldr	r3, [pc, #44]	; (800aef8 <HAL_RCC_ClockConfig+0x1bc>)
 800aeca:	689b      	ldr	r3, [r3, #8]
 800aecc:	091b      	lsrs	r3, r3, #4
 800aece:	f003 030f 	and.w	r3, r3, #15
 800aed2:	490a      	ldr	r1, [pc, #40]	; (800aefc <HAL_RCC_ClockConfig+0x1c0>)
 800aed4:	5ccb      	ldrb	r3, [r1, r3]
 800aed6:	fa22 f303 	lsr.w	r3, r2, r3
 800aeda:	4a09      	ldr	r2, [pc, #36]	; (800af00 <HAL_RCC_ClockConfig+0x1c4>)
 800aedc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800aede:	4b09      	ldr	r3, [pc, #36]	; (800af04 <HAL_RCC_ClockConfig+0x1c8>)
 800aee0:	681b      	ldr	r3, [r3, #0]
 800aee2:	4618      	mov	r0, r3
 800aee4:	f7f7 fcac 	bl	8002840 <HAL_InitTick>

  return HAL_OK;
 800aee8:	2300      	movs	r3, #0
}
 800aeea:	4618      	mov	r0, r3
 800aeec:	3710      	adds	r7, #16
 800aeee:	46bd      	mov	sp, r7
 800aef0:	bd80      	pop	{r7, pc}
 800aef2:	bf00      	nop
 800aef4:	40023c00 	.word	0x40023c00
 800aef8:	40023800 	.word	0x40023800
 800aefc:	08016a5c 	.word	0x08016a5c
 800af00:	20000000 	.word	0x20000000
 800af04:	20000020 	.word	0x20000020

0800af08 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800af08:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800af0c:	b090      	sub	sp, #64	; 0x40
 800af0e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800af10:	2300      	movs	r3, #0
 800af12:	637b      	str	r3, [r7, #52]	; 0x34
 800af14:	2300      	movs	r3, #0
 800af16:	63fb      	str	r3, [r7, #60]	; 0x3c
 800af18:	2300      	movs	r3, #0
 800af1a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 800af1c:	2300      	movs	r3, #0
 800af1e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800af20:	4b59      	ldr	r3, [pc, #356]	; (800b088 <HAL_RCC_GetSysClockFreq+0x180>)
 800af22:	689b      	ldr	r3, [r3, #8]
 800af24:	f003 030c 	and.w	r3, r3, #12
 800af28:	2b08      	cmp	r3, #8
 800af2a:	d00d      	beq.n	800af48 <HAL_RCC_GetSysClockFreq+0x40>
 800af2c:	2b08      	cmp	r3, #8
 800af2e:	f200 80a1 	bhi.w	800b074 <HAL_RCC_GetSysClockFreq+0x16c>
 800af32:	2b00      	cmp	r3, #0
 800af34:	d002      	beq.n	800af3c <HAL_RCC_GetSysClockFreq+0x34>
 800af36:	2b04      	cmp	r3, #4
 800af38:	d003      	beq.n	800af42 <HAL_RCC_GetSysClockFreq+0x3a>
 800af3a:	e09b      	b.n	800b074 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800af3c:	4b53      	ldr	r3, [pc, #332]	; (800b08c <HAL_RCC_GetSysClockFreq+0x184>)
 800af3e:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 800af40:	e09b      	b.n	800b07a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800af42:	4b53      	ldr	r3, [pc, #332]	; (800b090 <HAL_RCC_GetSysClockFreq+0x188>)
 800af44:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800af46:	e098      	b.n	800b07a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800af48:	4b4f      	ldr	r3, [pc, #316]	; (800b088 <HAL_RCC_GetSysClockFreq+0x180>)
 800af4a:	685b      	ldr	r3, [r3, #4]
 800af4c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800af50:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800af52:	4b4d      	ldr	r3, [pc, #308]	; (800b088 <HAL_RCC_GetSysClockFreq+0x180>)
 800af54:	685b      	ldr	r3, [r3, #4]
 800af56:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800af5a:	2b00      	cmp	r3, #0
 800af5c:	d028      	beq.n	800afb0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800af5e:	4b4a      	ldr	r3, [pc, #296]	; (800b088 <HAL_RCC_GetSysClockFreq+0x180>)
 800af60:	685b      	ldr	r3, [r3, #4]
 800af62:	099b      	lsrs	r3, r3, #6
 800af64:	2200      	movs	r2, #0
 800af66:	623b      	str	r3, [r7, #32]
 800af68:	627a      	str	r2, [r7, #36]	; 0x24
 800af6a:	6a3b      	ldr	r3, [r7, #32]
 800af6c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800af70:	2100      	movs	r1, #0
 800af72:	4b47      	ldr	r3, [pc, #284]	; (800b090 <HAL_RCC_GetSysClockFreq+0x188>)
 800af74:	fb03 f201 	mul.w	r2, r3, r1
 800af78:	2300      	movs	r3, #0
 800af7a:	fb00 f303 	mul.w	r3, r0, r3
 800af7e:	4413      	add	r3, r2
 800af80:	4a43      	ldr	r2, [pc, #268]	; (800b090 <HAL_RCC_GetSysClockFreq+0x188>)
 800af82:	fba0 1202 	umull	r1, r2, r0, r2
 800af86:	62fa      	str	r2, [r7, #44]	; 0x2c
 800af88:	460a      	mov	r2, r1
 800af8a:	62ba      	str	r2, [r7, #40]	; 0x28
 800af8c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800af8e:	4413      	add	r3, r2
 800af90:	62fb      	str	r3, [r7, #44]	; 0x2c
 800af92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800af94:	2200      	movs	r2, #0
 800af96:	61bb      	str	r3, [r7, #24]
 800af98:	61fa      	str	r2, [r7, #28]
 800af9a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800af9e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800afa2:	f7f5 fe29 	bl	8000bf8 <__aeabi_uldivmod>
 800afa6:	4602      	mov	r2, r0
 800afa8:	460b      	mov	r3, r1
 800afaa:	4613      	mov	r3, r2
 800afac:	63fb      	str	r3, [r7, #60]	; 0x3c
 800afae:	e053      	b.n	800b058 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800afb0:	4b35      	ldr	r3, [pc, #212]	; (800b088 <HAL_RCC_GetSysClockFreq+0x180>)
 800afb2:	685b      	ldr	r3, [r3, #4]
 800afb4:	099b      	lsrs	r3, r3, #6
 800afb6:	2200      	movs	r2, #0
 800afb8:	613b      	str	r3, [r7, #16]
 800afba:	617a      	str	r2, [r7, #20]
 800afbc:	693b      	ldr	r3, [r7, #16]
 800afbe:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800afc2:	f04f 0b00 	mov.w	fp, #0
 800afc6:	4652      	mov	r2, sl
 800afc8:	465b      	mov	r3, fp
 800afca:	f04f 0000 	mov.w	r0, #0
 800afce:	f04f 0100 	mov.w	r1, #0
 800afd2:	0159      	lsls	r1, r3, #5
 800afd4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800afd8:	0150      	lsls	r0, r2, #5
 800afda:	4602      	mov	r2, r0
 800afdc:	460b      	mov	r3, r1
 800afde:	ebb2 080a 	subs.w	r8, r2, sl
 800afe2:	eb63 090b 	sbc.w	r9, r3, fp
 800afe6:	f04f 0200 	mov.w	r2, #0
 800afea:	f04f 0300 	mov.w	r3, #0
 800afee:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800aff2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800aff6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800affa:	ebb2 0408 	subs.w	r4, r2, r8
 800affe:	eb63 0509 	sbc.w	r5, r3, r9
 800b002:	f04f 0200 	mov.w	r2, #0
 800b006:	f04f 0300 	mov.w	r3, #0
 800b00a:	00eb      	lsls	r3, r5, #3
 800b00c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800b010:	00e2      	lsls	r2, r4, #3
 800b012:	4614      	mov	r4, r2
 800b014:	461d      	mov	r5, r3
 800b016:	eb14 030a 	adds.w	r3, r4, sl
 800b01a:	603b      	str	r3, [r7, #0]
 800b01c:	eb45 030b 	adc.w	r3, r5, fp
 800b020:	607b      	str	r3, [r7, #4]
 800b022:	f04f 0200 	mov.w	r2, #0
 800b026:	f04f 0300 	mov.w	r3, #0
 800b02a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800b02e:	4629      	mov	r1, r5
 800b030:	028b      	lsls	r3, r1, #10
 800b032:	4621      	mov	r1, r4
 800b034:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800b038:	4621      	mov	r1, r4
 800b03a:	028a      	lsls	r2, r1, #10
 800b03c:	4610      	mov	r0, r2
 800b03e:	4619      	mov	r1, r3
 800b040:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b042:	2200      	movs	r2, #0
 800b044:	60bb      	str	r3, [r7, #8]
 800b046:	60fa      	str	r2, [r7, #12]
 800b048:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800b04c:	f7f5 fdd4 	bl	8000bf8 <__aeabi_uldivmod>
 800b050:	4602      	mov	r2, r0
 800b052:	460b      	mov	r3, r1
 800b054:	4613      	mov	r3, r2
 800b056:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800b058:	4b0b      	ldr	r3, [pc, #44]	; (800b088 <HAL_RCC_GetSysClockFreq+0x180>)
 800b05a:	685b      	ldr	r3, [r3, #4]
 800b05c:	0c1b      	lsrs	r3, r3, #16
 800b05e:	f003 0303 	and.w	r3, r3, #3
 800b062:	3301      	adds	r3, #1
 800b064:	005b      	lsls	r3, r3, #1
 800b066:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 800b068:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b06a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b06c:	fbb2 f3f3 	udiv	r3, r2, r3
 800b070:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800b072:	e002      	b.n	800b07a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800b074:	4b05      	ldr	r3, [pc, #20]	; (800b08c <HAL_RCC_GetSysClockFreq+0x184>)
 800b076:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800b078:	bf00      	nop
    }
  }
  return sysclockfreq;
 800b07a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 800b07c:	4618      	mov	r0, r3
 800b07e:	3740      	adds	r7, #64	; 0x40
 800b080:	46bd      	mov	sp, r7
 800b082:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b086:	bf00      	nop
 800b088:	40023800 	.word	0x40023800
 800b08c:	00f42400 	.word	0x00f42400
 800b090:	00b71b00 	.word	0x00b71b00

0800b094 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800b094:	b480      	push	{r7}
 800b096:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800b098:	4b03      	ldr	r3, [pc, #12]	; (800b0a8 <HAL_RCC_GetHCLKFreq+0x14>)
 800b09a:	681b      	ldr	r3, [r3, #0]
}
 800b09c:	4618      	mov	r0, r3
 800b09e:	46bd      	mov	sp, r7
 800b0a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0a4:	4770      	bx	lr
 800b0a6:	bf00      	nop
 800b0a8:	20000000 	.word	0x20000000

0800b0ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800b0ac:	b580      	push	{r7, lr}
 800b0ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800b0b0:	f7ff fff0 	bl	800b094 <HAL_RCC_GetHCLKFreq>
 800b0b4:	4602      	mov	r2, r0
 800b0b6:	4b05      	ldr	r3, [pc, #20]	; (800b0cc <HAL_RCC_GetPCLK1Freq+0x20>)
 800b0b8:	689b      	ldr	r3, [r3, #8]
 800b0ba:	0a9b      	lsrs	r3, r3, #10
 800b0bc:	f003 0307 	and.w	r3, r3, #7
 800b0c0:	4903      	ldr	r1, [pc, #12]	; (800b0d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 800b0c2:	5ccb      	ldrb	r3, [r1, r3]
 800b0c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 800b0c8:	4618      	mov	r0, r3
 800b0ca:	bd80      	pop	{r7, pc}
 800b0cc:	40023800 	.word	0x40023800
 800b0d0:	08016a6c 	.word	0x08016a6c

0800b0d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800b0d4:	b580      	push	{r7, lr}
 800b0d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800b0d8:	f7ff ffdc 	bl	800b094 <HAL_RCC_GetHCLKFreq>
 800b0dc:	4602      	mov	r2, r0
 800b0de:	4b05      	ldr	r3, [pc, #20]	; (800b0f4 <HAL_RCC_GetPCLK2Freq+0x20>)
 800b0e0:	689b      	ldr	r3, [r3, #8]
 800b0e2:	0b5b      	lsrs	r3, r3, #13
 800b0e4:	f003 0307 	and.w	r3, r3, #7
 800b0e8:	4903      	ldr	r1, [pc, #12]	; (800b0f8 <HAL_RCC_GetPCLK2Freq+0x24>)
 800b0ea:	5ccb      	ldrb	r3, [r1, r3]
 800b0ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 800b0f0:	4618      	mov	r0, r3
 800b0f2:	bd80      	pop	{r7, pc}
 800b0f4:	40023800 	.word	0x40023800
 800b0f8:	08016a6c 	.word	0x08016a6c

0800b0fc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800b0fc:	b480      	push	{r7}
 800b0fe:	b083      	sub	sp, #12
 800b100:	af00      	add	r7, sp, #0
 800b102:	6078      	str	r0, [r7, #4]
 800b104:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	220f      	movs	r2, #15
 800b10a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800b10c:	4b12      	ldr	r3, [pc, #72]	; (800b158 <HAL_RCC_GetClockConfig+0x5c>)
 800b10e:	689b      	ldr	r3, [r3, #8]
 800b110:	f003 0203 	and.w	r2, r3, #3
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800b118:	4b0f      	ldr	r3, [pc, #60]	; (800b158 <HAL_RCC_GetClockConfig+0x5c>)
 800b11a:	689b      	ldr	r3, [r3, #8]
 800b11c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800b124:	4b0c      	ldr	r3, [pc, #48]	; (800b158 <HAL_RCC_GetClockConfig+0x5c>)
 800b126:	689b      	ldr	r3, [r3, #8]
 800b128:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800b130:	4b09      	ldr	r3, [pc, #36]	; (800b158 <HAL_RCC_GetClockConfig+0x5c>)
 800b132:	689b      	ldr	r3, [r3, #8]
 800b134:	08db      	lsrs	r3, r3, #3
 800b136:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800b13e:	4b07      	ldr	r3, [pc, #28]	; (800b15c <HAL_RCC_GetClockConfig+0x60>)
 800b140:	681b      	ldr	r3, [r3, #0]
 800b142:	f003 020f 	and.w	r2, r3, #15
 800b146:	683b      	ldr	r3, [r7, #0]
 800b148:	601a      	str	r2, [r3, #0]
}
 800b14a:	bf00      	nop
 800b14c:	370c      	adds	r7, #12
 800b14e:	46bd      	mov	sp, r7
 800b150:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b154:	4770      	bx	lr
 800b156:	bf00      	nop
 800b158:	40023800 	.word	0x40023800
 800b15c:	40023c00 	.word	0x40023c00

0800b160 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800b160:	b580      	push	{r7, lr}
 800b162:	b082      	sub	sp, #8
 800b164:	af00      	add	r7, sp, #0
 800b166:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	2b00      	cmp	r3, #0
 800b16c:	d101      	bne.n	800b172 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800b16e:	2301      	movs	r3, #1
 800b170:	e07b      	b.n	800b26a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b176:	2b00      	cmp	r3, #0
 800b178:	d108      	bne.n	800b18c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	685b      	ldr	r3, [r3, #4]
 800b17e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b182:	d009      	beq.n	800b198 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	2200      	movs	r2, #0
 800b188:	61da      	str	r2, [r3, #28]
 800b18a:	e005      	b.n	800b198 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	2200      	movs	r2, #0
 800b190:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	2200      	movs	r2, #0
 800b196:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	2200      	movs	r2, #0
 800b19c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b1a4:	b2db      	uxtb	r3, r3
 800b1a6:	2b00      	cmp	r3, #0
 800b1a8:	d106      	bne.n	800b1b8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	2200      	movs	r2, #0
 800b1ae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800b1b2:	6878      	ldr	r0, [r7, #4]
 800b1b4:	f7f7 fa3a 	bl	800262c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	2202      	movs	r2, #2
 800b1bc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	681b      	ldr	r3, [r3, #0]
 800b1c4:	681a      	ldr	r2, [r3, #0]
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	681b      	ldr	r3, [r3, #0]
 800b1ca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b1ce:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	685b      	ldr	r3, [r3, #4]
 800b1d4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	689b      	ldr	r3, [r3, #8]
 800b1dc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800b1e0:	431a      	orrs	r2, r3
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	68db      	ldr	r3, [r3, #12]
 800b1e6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b1ea:	431a      	orrs	r2, r3
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	691b      	ldr	r3, [r3, #16]
 800b1f0:	f003 0302 	and.w	r3, r3, #2
 800b1f4:	431a      	orrs	r2, r3
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	695b      	ldr	r3, [r3, #20]
 800b1fa:	f003 0301 	and.w	r3, r3, #1
 800b1fe:	431a      	orrs	r2, r3
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	699b      	ldr	r3, [r3, #24]
 800b204:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b208:	431a      	orrs	r2, r3
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	69db      	ldr	r3, [r3, #28]
 800b20e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b212:	431a      	orrs	r2, r3
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	6a1b      	ldr	r3, [r3, #32]
 800b218:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b21c:	ea42 0103 	orr.w	r1, r2, r3
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b224:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	681b      	ldr	r3, [r3, #0]
 800b22c:	430a      	orrs	r2, r1
 800b22e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	699b      	ldr	r3, [r3, #24]
 800b234:	0c1b      	lsrs	r3, r3, #16
 800b236:	f003 0104 	and.w	r1, r3, #4
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b23e:	f003 0210 	and.w	r2, r3, #16
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	681b      	ldr	r3, [r3, #0]
 800b246:	430a      	orrs	r2, r1
 800b248:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	681b      	ldr	r3, [r3, #0]
 800b24e:	69da      	ldr	r2, [r3, #28]
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	681b      	ldr	r3, [r3, #0]
 800b254:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800b258:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	2200      	movs	r2, #0
 800b25e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	2201      	movs	r2, #1
 800b264:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800b268:	2300      	movs	r3, #0
}
 800b26a:	4618      	mov	r0, r3
 800b26c:	3708      	adds	r7, #8
 800b26e:	46bd      	mov	sp, r7
 800b270:	bd80      	pop	{r7, pc}

0800b272 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b272:	b580      	push	{r7, lr}
 800b274:	b088      	sub	sp, #32
 800b276:	af02      	add	r7, sp, #8
 800b278:	60f8      	str	r0, [r7, #12]
 800b27a:	60b9      	str	r1, [r7, #8]
 800b27c:	603b      	str	r3, [r7, #0]
 800b27e:	4613      	mov	r3, r2
 800b280:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800b282:	2300      	movs	r3, #0
 800b284:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800b286:	68fb      	ldr	r3, [r7, #12]
 800b288:	685b      	ldr	r3, [r3, #4]
 800b28a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b28e:	d112      	bne.n	800b2b6 <HAL_SPI_Receive+0x44>
 800b290:	68fb      	ldr	r3, [r7, #12]
 800b292:	689b      	ldr	r3, [r3, #8]
 800b294:	2b00      	cmp	r3, #0
 800b296:	d10e      	bne.n	800b2b6 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800b298:	68fb      	ldr	r3, [r7, #12]
 800b29a:	2204      	movs	r2, #4
 800b29c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800b2a0:	88fa      	ldrh	r2, [r7, #6]
 800b2a2:	683b      	ldr	r3, [r7, #0]
 800b2a4:	9300      	str	r3, [sp, #0]
 800b2a6:	4613      	mov	r3, r2
 800b2a8:	68ba      	ldr	r2, [r7, #8]
 800b2aa:	68b9      	ldr	r1, [r7, #8]
 800b2ac:	68f8      	ldr	r0, [r7, #12]
 800b2ae:	f000 f8f1 	bl	800b494 <HAL_SPI_TransmitReceive>
 800b2b2:	4603      	mov	r3, r0
 800b2b4:	e0ea      	b.n	800b48c <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800b2b6:	68fb      	ldr	r3, [r7, #12]
 800b2b8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800b2bc:	2b01      	cmp	r3, #1
 800b2be:	d101      	bne.n	800b2c4 <HAL_SPI_Receive+0x52>
 800b2c0:	2302      	movs	r3, #2
 800b2c2:	e0e3      	b.n	800b48c <HAL_SPI_Receive+0x21a>
 800b2c4:	68fb      	ldr	r3, [r7, #12]
 800b2c6:	2201      	movs	r2, #1
 800b2c8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b2cc:	f7fc fbc8 	bl	8007a60 <HAL_GetTick>
 800b2d0:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800b2d2:	68fb      	ldr	r3, [r7, #12]
 800b2d4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b2d8:	b2db      	uxtb	r3, r3
 800b2da:	2b01      	cmp	r3, #1
 800b2dc:	d002      	beq.n	800b2e4 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800b2de:	2302      	movs	r3, #2
 800b2e0:	75fb      	strb	r3, [r7, #23]
    goto error;
 800b2e2:	e0ca      	b.n	800b47a <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 800b2e4:	68bb      	ldr	r3, [r7, #8]
 800b2e6:	2b00      	cmp	r3, #0
 800b2e8:	d002      	beq.n	800b2f0 <HAL_SPI_Receive+0x7e>
 800b2ea:	88fb      	ldrh	r3, [r7, #6]
 800b2ec:	2b00      	cmp	r3, #0
 800b2ee:	d102      	bne.n	800b2f6 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800b2f0:	2301      	movs	r3, #1
 800b2f2:	75fb      	strb	r3, [r7, #23]
    goto error;
 800b2f4:	e0c1      	b.n	800b47a <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800b2f6:	68fb      	ldr	r3, [r7, #12]
 800b2f8:	2204      	movs	r2, #4
 800b2fa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b2fe:	68fb      	ldr	r3, [r7, #12]
 800b300:	2200      	movs	r2, #0
 800b302:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800b304:	68fb      	ldr	r3, [r7, #12]
 800b306:	68ba      	ldr	r2, [r7, #8]
 800b308:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800b30a:	68fb      	ldr	r3, [r7, #12]
 800b30c:	88fa      	ldrh	r2, [r7, #6]
 800b30e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800b310:	68fb      	ldr	r3, [r7, #12]
 800b312:	88fa      	ldrh	r2, [r7, #6]
 800b314:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800b316:	68fb      	ldr	r3, [r7, #12]
 800b318:	2200      	movs	r2, #0
 800b31a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800b31c:	68fb      	ldr	r3, [r7, #12]
 800b31e:	2200      	movs	r2, #0
 800b320:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800b322:	68fb      	ldr	r3, [r7, #12]
 800b324:	2200      	movs	r2, #0
 800b326:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800b328:	68fb      	ldr	r3, [r7, #12]
 800b32a:	2200      	movs	r2, #0
 800b32c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800b32e:	68fb      	ldr	r3, [r7, #12]
 800b330:	2200      	movs	r2, #0
 800b332:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b334:	68fb      	ldr	r3, [r7, #12]
 800b336:	689b      	ldr	r3, [r3, #8]
 800b338:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b33c:	d10f      	bne.n	800b35e <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800b33e:	68fb      	ldr	r3, [r7, #12]
 800b340:	681b      	ldr	r3, [r3, #0]
 800b342:	681a      	ldr	r2, [r3, #0]
 800b344:	68fb      	ldr	r3, [r7, #12]
 800b346:	681b      	ldr	r3, [r3, #0]
 800b348:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b34c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800b34e:	68fb      	ldr	r3, [r7, #12]
 800b350:	681b      	ldr	r3, [r3, #0]
 800b352:	681a      	ldr	r2, [r3, #0]
 800b354:	68fb      	ldr	r3, [r7, #12]
 800b356:	681b      	ldr	r3, [r3, #0]
 800b358:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800b35c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800b35e:	68fb      	ldr	r3, [r7, #12]
 800b360:	681b      	ldr	r3, [r3, #0]
 800b362:	681b      	ldr	r3, [r3, #0]
 800b364:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b368:	2b40      	cmp	r3, #64	; 0x40
 800b36a:	d007      	beq.n	800b37c <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800b36c:	68fb      	ldr	r3, [r7, #12]
 800b36e:	681b      	ldr	r3, [r3, #0]
 800b370:	681a      	ldr	r2, [r3, #0]
 800b372:	68fb      	ldr	r3, [r7, #12]
 800b374:	681b      	ldr	r3, [r3, #0]
 800b376:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b37a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800b37c:	68fb      	ldr	r3, [r7, #12]
 800b37e:	68db      	ldr	r3, [r3, #12]
 800b380:	2b00      	cmp	r3, #0
 800b382:	d162      	bne.n	800b44a <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800b384:	e02e      	b.n	800b3e4 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800b386:	68fb      	ldr	r3, [r7, #12]
 800b388:	681b      	ldr	r3, [r3, #0]
 800b38a:	689b      	ldr	r3, [r3, #8]
 800b38c:	f003 0301 	and.w	r3, r3, #1
 800b390:	2b01      	cmp	r3, #1
 800b392:	d115      	bne.n	800b3c0 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800b394:	68fb      	ldr	r3, [r7, #12]
 800b396:	681b      	ldr	r3, [r3, #0]
 800b398:	f103 020c 	add.w	r2, r3, #12
 800b39c:	68fb      	ldr	r3, [r7, #12]
 800b39e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b3a0:	7812      	ldrb	r2, [r2, #0]
 800b3a2:	b2d2      	uxtb	r2, r2
 800b3a4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800b3a6:	68fb      	ldr	r3, [r7, #12]
 800b3a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b3aa:	1c5a      	adds	r2, r3, #1
 800b3ac:	68fb      	ldr	r3, [r7, #12]
 800b3ae:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800b3b0:	68fb      	ldr	r3, [r7, #12]
 800b3b2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b3b4:	b29b      	uxth	r3, r3
 800b3b6:	3b01      	subs	r3, #1
 800b3b8:	b29a      	uxth	r2, r3
 800b3ba:	68fb      	ldr	r3, [r7, #12]
 800b3bc:	87da      	strh	r2, [r3, #62]	; 0x3e
 800b3be:	e011      	b.n	800b3e4 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b3c0:	f7fc fb4e 	bl	8007a60 <HAL_GetTick>
 800b3c4:	4602      	mov	r2, r0
 800b3c6:	693b      	ldr	r3, [r7, #16]
 800b3c8:	1ad3      	subs	r3, r2, r3
 800b3ca:	683a      	ldr	r2, [r7, #0]
 800b3cc:	429a      	cmp	r2, r3
 800b3ce:	d803      	bhi.n	800b3d8 <HAL_SPI_Receive+0x166>
 800b3d0:	683b      	ldr	r3, [r7, #0]
 800b3d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b3d6:	d102      	bne.n	800b3de <HAL_SPI_Receive+0x16c>
 800b3d8:	683b      	ldr	r3, [r7, #0]
 800b3da:	2b00      	cmp	r3, #0
 800b3dc:	d102      	bne.n	800b3e4 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 800b3de:	2303      	movs	r3, #3
 800b3e0:	75fb      	strb	r3, [r7, #23]
          goto error;
 800b3e2:	e04a      	b.n	800b47a <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800b3e4:	68fb      	ldr	r3, [r7, #12]
 800b3e6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b3e8:	b29b      	uxth	r3, r3
 800b3ea:	2b00      	cmp	r3, #0
 800b3ec:	d1cb      	bne.n	800b386 <HAL_SPI_Receive+0x114>
 800b3ee:	e031      	b.n	800b454 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800b3f0:	68fb      	ldr	r3, [r7, #12]
 800b3f2:	681b      	ldr	r3, [r3, #0]
 800b3f4:	689b      	ldr	r3, [r3, #8]
 800b3f6:	f003 0301 	and.w	r3, r3, #1
 800b3fa:	2b01      	cmp	r3, #1
 800b3fc:	d113      	bne.n	800b426 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800b3fe:	68fb      	ldr	r3, [r7, #12]
 800b400:	681b      	ldr	r3, [r3, #0]
 800b402:	68da      	ldr	r2, [r3, #12]
 800b404:	68fb      	ldr	r3, [r7, #12]
 800b406:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b408:	b292      	uxth	r2, r2
 800b40a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800b40c:	68fb      	ldr	r3, [r7, #12]
 800b40e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b410:	1c9a      	adds	r2, r3, #2
 800b412:	68fb      	ldr	r3, [r7, #12]
 800b414:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800b416:	68fb      	ldr	r3, [r7, #12]
 800b418:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b41a:	b29b      	uxth	r3, r3
 800b41c:	3b01      	subs	r3, #1
 800b41e:	b29a      	uxth	r2, r3
 800b420:	68fb      	ldr	r3, [r7, #12]
 800b422:	87da      	strh	r2, [r3, #62]	; 0x3e
 800b424:	e011      	b.n	800b44a <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b426:	f7fc fb1b 	bl	8007a60 <HAL_GetTick>
 800b42a:	4602      	mov	r2, r0
 800b42c:	693b      	ldr	r3, [r7, #16]
 800b42e:	1ad3      	subs	r3, r2, r3
 800b430:	683a      	ldr	r2, [r7, #0]
 800b432:	429a      	cmp	r2, r3
 800b434:	d803      	bhi.n	800b43e <HAL_SPI_Receive+0x1cc>
 800b436:	683b      	ldr	r3, [r7, #0]
 800b438:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b43c:	d102      	bne.n	800b444 <HAL_SPI_Receive+0x1d2>
 800b43e:	683b      	ldr	r3, [r7, #0]
 800b440:	2b00      	cmp	r3, #0
 800b442:	d102      	bne.n	800b44a <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 800b444:	2303      	movs	r3, #3
 800b446:	75fb      	strb	r3, [r7, #23]
          goto error;
 800b448:	e017      	b.n	800b47a <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800b44a:	68fb      	ldr	r3, [r7, #12]
 800b44c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b44e:	b29b      	uxth	r3, r3
 800b450:	2b00      	cmp	r3, #0
 800b452:	d1cd      	bne.n	800b3f0 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800b454:	693a      	ldr	r2, [r7, #16]
 800b456:	6839      	ldr	r1, [r7, #0]
 800b458:	68f8      	ldr	r0, [r7, #12]
 800b45a:	f000 fb57 	bl	800bb0c <SPI_EndRxTransaction>
 800b45e:	4603      	mov	r3, r0
 800b460:	2b00      	cmp	r3, #0
 800b462:	d002      	beq.n	800b46a <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800b464:	68fb      	ldr	r3, [r7, #12]
 800b466:	2220      	movs	r2, #32
 800b468:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b46a:	68fb      	ldr	r3, [r7, #12]
 800b46c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b46e:	2b00      	cmp	r3, #0
 800b470:	d002      	beq.n	800b478 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 800b472:	2301      	movs	r3, #1
 800b474:	75fb      	strb	r3, [r7, #23]
 800b476:	e000      	b.n	800b47a <HAL_SPI_Receive+0x208>
  }

error :
 800b478:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800b47a:	68fb      	ldr	r3, [r7, #12]
 800b47c:	2201      	movs	r2, #1
 800b47e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800b482:	68fb      	ldr	r3, [r7, #12]
 800b484:	2200      	movs	r2, #0
 800b486:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800b48a:	7dfb      	ldrb	r3, [r7, #23]
}
 800b48c:	4618      	mov	r0, r3
 800b48e:	3718      	adds	r7, #24
 800b490:	46bd      	mov	sp, r7
 800b492:	bd80      	pop	{r7, pc}

0800b494 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800b494:	b580      	push	{r7, lr}
 800b496:	b08c      	sub	sp, #48	; 0x30
 800b498:	af00      	add	r7, sp, #0
 800b49a:	60f8      	str	r0, [r7, #12]
 800b49c:	60b9      	str	r1, [r7, #8]
 800b49e:	607a      	str	r2, [r7, #4]
 800b4a0:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800b4a2:	2301      	movs	r3, #1
 800b4a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800b4a6:	2300      	movs	r3, #0
 800b4a8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800b4ac:	68fb      	ldr	r3, [r7, #12]
 800b4ae:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800b4b2:	2b01      	cmp	r3, #1
 800b4b4:	d101      	bne.n	800b4ba <HAL_SPI_TransmitReceive+0x26>
 800b4b6:	2302      	movs	r3, #2
 800b4b8:	e18a      	b.n	800b7d0 <HAL_SPI_TransmitReceive+0x33c>
 800b4ba:	68fb      	ldr	r3, [r7, #12]
 800b4bc:	2201      	movs	r2, #1
 800b4be:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b4c2:	f7fc facd 	bl	8007a60 <HAL_GetTick>
 800b4c6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800b4c8:	68fb      	ldr	r3, [r7, #12]
 800b4ca:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b4ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800b4d2:	68fb      	ldr	r3, [r7, #12]
 800b4d4:	685b      	ldr	r3, [r3, #4]
 800b4d6:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800b4d8:	887b      	ldrh	r3, [r7, #2]
 800b4da:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800b4dc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b4e0:	2b01      	cmp	r3, #1
 800b4e2:	d00f      	beq.n	800b504 <HAL_SPI_TransmitReceive+0x70>
 800b4e4:	69fb      	ldr	r3, [r7, #28]
 800b4e6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b4ea:	d107      	bne.n	800b4fc <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800b4ec:	68fb      	ldr	r3, [r7, #12]
 800b4ee:	689b      	ldr	r3, [r3, #8]
 800b4f0:	2b00      	cmp	r3, #0
 800b4f2:	d103      	bne.n	800b4fc <HAL_SPI_TransmitReceive+0x68>
 800b4f4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b4f8:	2b04      	cmp	r3, #4
 800b4fa:	d003      	beq.n	800b504 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800b4fc:	2302      	movs	r3, #2
 800b4fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800b502:	e15b      	b.n	800b7bc <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800b504:	68bb      	ldr	r3, [r7, #8]
 800b506:	2b00      	cmp	r3, #0
 800b508:	d005      	beq.n	800b516 <HAL_SPI_TransmitReceive+0x82>
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	2b00      	cmp	r3, #0
 800b50e:	d002      	beq.n	800b516 <HAL_SPI_TransmitReceive+0x82>
 800b510:	887b      	ldrh	r3, [r7, #2]
 800b512:	2b00      	cmp	r3, #0
 800b514:	d103      	bne.n	800b51e <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800b516:	2301      	movs	r3, #1
 800b518:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800b51c:	e14e      	b.n	800b7bc <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800b51e:	68fb      	ldr	r3, [r7, #12]
 800b520:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b524:	b2db      	uxtb	r3, r3
 800b526:	2b04      	cmp	r3, #4
 800b528:	d003      	beq.n	800b532 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800b52a:	68fb      	ldr	r3, [r7, #12]
 800b52c:	2205      	movs	r2, #5
 800b52e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b532:	68fb      	ldr	r3, [r7, #12]
 800b534:	2200      	movs	r2, #0
 800b536:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800b538:	68fb      	ldr	r3, [r7, #12]
 800b53a:	687a      	ldr	r2, [r7, #4]
 800b53c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800b53e:	68fb      	ldr	r3, [r7, #12]
 800b540:	887a      	ldrh	r2, [r7, #2]
 800b542:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800b544:	68fb      	ldr	r3, [r7, #12]
 800b546:	887a      	ldrh	r2, [r7, #2]
 800b548:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800b54a:	68fb      	ldr	r3, [r7, #12]
 800b54c:	68ba      	ldr	r2, [r7, #8]
 800b54e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800b550:	68fb      	ldr	r3, [r7, #12]
 800b552:	887a      	ldrh	r2, [r7, #2]
 800b554:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800b556:	68fb      	ldr	r3, [r7, #12]
 800b558:	887a      	ldrh	r2, [r7, #2]
 800b55a:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800b55c:	68fb      	ldr	r3, [r7, #12]
 800b55e:	2200      	movs	r2, #0
 800b560:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800b562:	68fb      	ldr	r3, [r7, #12]
 800b564:	2200      	movs	r2, #0
 800b566:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800b568:	68fb      	ldr	r3, [r7, #12]
 800b56a:	681b      	ldr	r3, [r3, #0]
 800b56c:	681b      	ldr	r3, [r3, #0]
 800b56e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b572:	2b40      	cmp	r3, #64	; 0x40
 800b574:	d007      	beq.n	800b586 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800b576:	68fb      	ldr	r3, [r7, #12]
 800b578:	681b      	ldr	r3, [r3, #0]
 800b57a:	681a      	ldr	r2, [r3, #0]
 800b57c:	68fb      	ldr	r3, [r7, #12]
 800b57e:	681b      	ldr	r3, [r3, #0]
 800b580:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b584:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800b586:	68fb      	ldr	r3, [r7, #12]
 800b588:	68db      	ldr	r3, [r3, #12]
 800b58a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b58e:	d178      	bne.n	800b682 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b590:	68fb      	ldr	r3, [r7, #12]
 800b592:	685b      	ldr	r3, [r3, #4]
 800b594:	2b00      	cmp	r3, #0
 800b596:	d002      	beq.n	800b59e <HAL_SPI_TransmitReceive+0x10a>
 800b598:	8b7b      	ldrh	r3, [r7, #26]
 800b59a:	2b01      	cmp	r3, #1
 800b59c:	d166      	bne.n	800b66c <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b59e:	68fb      	ldr	r3, [r7, #12]
 800b5a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b5a2:	881a      	ldrh	r2, [r3, #0]
 800b5a4:	68fb      	ldr	r3, [r7, #12]
 800b5a6:	681b      	ldr	r3, [r3, #0]
 800b5a8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800b5aa:	68fb      	ldr	r3, [r7, #12]
 800b5ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b5ae:	1c9a      	adds	r2, r3, #2
 800b5b0:	68fb      	ldr	r3, [r7, #12]
 800b5b2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800b5b4:	68fb      	ldr	r3, [r7, #12]
 800b5b6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b5b8:	b29b      	uxth	r3, r3
 800b5ba:	3b01      	subs	r3, #1
 800b5bc:	b29a      	uxth	r2, r3
 800b5be:	68fb      	ldr	r3, [r7, #12]
 800b5c0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b5c2:	e053      	b.n	800b66c <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800b5c4:	68fb      	ldr	r3, [r7, #12]
 800b5c6:	681b      	ldr	r3, [r3, #0]
 800b5c8:	689b      	ldr	r3, [r3, #8]
 800b5ca:	f003 0302 	and.w	r3, r3, #2
 800b5ce:	2b02      	cmp	r3, #2
 800b5d0:	d11b      	bne.n	800b60a <HAL_SPI_TransmitReceive+0x176>
 800b5d2:	68fb      	ldr	r3, [r7, #12]
 800b5d4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b5d6:	b29b      	uxth	r3, r3
 800b5d8:	2b00      	cmp	r3, #0
 800b5da:	d016      	beq.n	800b60a <HAL_SPI_TransmitReceive+0x176>
 800b5dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5de:	2b01      	cmp	r3, #1
 800b5e0:	d113      	bne.n	800b60a <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b5e2:	68fb      	ldr	r3, [r7, #12]
 800b5e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b5e6:	881a      	ldrh	r2, [r3, #0]
 800b5e8:	68fb      	ldr	r3, [r7, #12]
 800b5ea:	681b      	ldr	r3, [r3, #0]
 800b5ec:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800b5ee:	68fb      	ldr	r3, [r7, #12]
 800b5f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b5f2:	1c9a      	adds	r2, r3, #2
 800b5f4:	68fb      	ldr	r3, [r7, #12]
 800b5f6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800b5f8:	68fb      	ldr	r3, [r7, #12]
 800b5fa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b5fc:	b29b      	uxth	r3, r3
 800b5fe:	3b01      	subs	r3, #1
 800b600:	b29a      	uxth	r2, r3
 800b602:	68fb      	ldr	r3, [r7, #12]
 800b604:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800b606:	2300      	movs	r3, #0
 800b608:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800b60a:	68fb      	ldr	r3, [r7, #12]
 800b60c:	681b      	ldr	r3, [r3, #0]
 800b60e:	689b      	ldr	r3, [r3, #8]
 800b610:	f003 0301 	and.w	r3, r3, #1
 800b614:	2b01      	cmp	r3, #1
 800b616:	d119      	bne.n	800b64c <HAL_SPI_TransmitReceive+0x1b8>
 800b618:	68fb      	ldr	r3, [r7, #12]
 800b61a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b61c:	b29b      	uxth	r3, r3
 800b61e:	2b00      	cmp	r3, #0
 800b620:	d014      	beq.n	800b64c <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800b622:	68fb      	ldr	r3, [r7, #12]
 800b624:	681b      	ldr	r3, [r3, #0]
 800b626:	68da      	ldr	r2, [r3, #12]
 800b628:	68fb      	ldr	r3, [r7, #12]
 800b62a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b62c:	b292      	uxth	r2, r2
 800b62e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800b630:	68fb      	ldr	r3, [r7, #12]
 800b632:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b634:	1c9a      	adds	r2, r3, #2
 800b636:	68fb      	ldr	r3, [r7, #12]
 800b638:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800b63a:	68fb      	ldr	r3, [r7, #12]
 800b63c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b63e:	b29b      	uxth	r3, r3
 800b640:	3b01      	subs	r3, #1
 800b642:	b29a      	uxth	r2, r3
 800b644:	68fb      	ldr	r3, [r7, #12]
 800b646:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800b648:	2301      	movs	r3, #1
 800b64a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800b64c:	f7fc fa08 	bl	8007a60 <HAL_GetTick>
 800b650:	4602      	mov	r2, r0
 800b652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b654:	1ad3      	subs	r3, r2, r3
 800b656:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b658:	429a      	cmp	r2, r3
 800b65a:	d807      	bhi.n	800b66c <HAL_SPI_TransmitReceive+0x1d8>
 800b65c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b65e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b662:	d003      	beq.n	800b66c <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800b664:	2303      	movs	r3, #3
 800b666:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800b66a:	e0a7      	b.n	800b7bc <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b66c:	68fb      	ldr	r3, [r7, #12]
 800b66e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b670:	b29b      	uxth	r3, r3
 800b672:	2b00      	cmp	r3, #0
 800b674:	d1a6      	bne.n	800b5c4 <HAL_SPI_TransmitReceive+0x130>
 800b676:	68fb      	ldr	r3, [r7, #12]
 800b678:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b67a:	b29b      	uxth	r3, r3
 800b67c:	2b00      	cmp	r3, #0
 800b67e:	d1a1      	bne.n	800b5c4 <HAL_SPI_TransmitReceive+0x130>
 800b680:	e07c      	b.n	800b77c <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b682:	68fb      	ldr	r3, [r7, #12]
 800b684:	685b      	ldr	r3, [r3, #4]
 800b686:	2b00      	cmp	r3, #0
 800b688:	d002      	beq.n	800b690 <HAL_SPI_TransmitReceive+0x1fc>
 800b68a:	8b7b      	ldrh	r3, [r7, #26]
 800b68c:	2b01      	cmp	r3, #1
 800b68e:	d16b      	bne.n	800b768 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800b690:	68fb      	ldr	r3, [r7, #12]
 800b692:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b694:	68fb      	ldr	r3, [r7, #12]
 800b696:	681b      	ldr	r3, [r3, #0]
 800b698:	330c      	adds	r3, #12
 800b69a:	7812      	ldrb	r2, [r2, #0]
 800b69c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800b69e:	68fb      	ldr	r3, [r7, #12]
 800b6a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b6a2:	1c5a      	adds	r2, r3, #1
 800b6a4:	68fb      	ldr	r3, [r7, #12]
 800b6a6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800b6a8:	68fb      	ldr	r3, [r7, #12]
 800b6aa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b6ac:	b29b      	uxth	r3, r3
 800b6ae:	3b01      	subs	r3, #1
 800b6b0:	b29a      	uxth	r2, r3
 800b6b2:	68fb      	ldr	r3, [r7, #12]
 800b6b4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b6b6:	e057      	b.n	800b768 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800b6b8:	68fb      	ldr	r3, [r7, #12]
 800b6ba:	681b      	ldr	r3, [r3, #0]
 800b6bc:	689b      	ldr	r3, [r3, #8]
 800b6be:	f003 0302 	and.w	r3, r3, #2
 800b6c2:	2b02      	cmp	r3, #2
 800b6c4:	d11c      	bne.n	800b700 <HAL_SPI_TransmitReceive+0x26c>
 800b6c6:	68fb      	ldr	r3, [r7, #12]
 800b6c8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b6ca:	b29b      	uxth	r3, r3
 800b6cc:	2b00      	cmp	r3, #0
 800b6ce:	d017      	beq.n	800b700 <HAL_SPI_TransmitReceive+0x26c>
 800b6d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6d2:	2b01      	cmp	r3, #1
 800b6d4:	d114      	bne.n	800b700 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800b6d6:	68fb      	ldr	r3, [r7, #12]
 800b6d8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b6da:	68fb      	ldr	r3, [r7, #12]
 800b6dc:	681b      	ldr	r3, [r3, #0]
 800b6de:	330c      	adds	r3, #12
 800b6e0:	7812      	ldrb	r2, [r2, #0]
 800b6e2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800b6e4:	68fb      	ldr	r3, [r7, #12]
 800b6e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b6e8:	1c5a      	adds	r2, r3, #1
 800b6ea:	68fb      	ldr	r3, [r7, #12]
 800b6ec:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800b6ee:	68fb      	ldr	r3, [r7, #12]
 800b6f0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b6f2:	b29b      	uxth	r3, r3
 800b6f4:	3b01      	subs	r3, #1
 800b6f6:	b29a      	uxth	r2, r3
 800b6f8:	68fb      	ldr	r3, [r7, #12]
 800b6fa:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800b6fc:	2300      	movs	r3, #0
 800b6fe:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800b700:	68fb      	ldr	r3, [r7, #12]
 800b702:	681b      	ldr	r3, [r3, #0]
 800b704:	689b      	ldr	r3, [r3, #8]
 800b706:	f003 0301 	and.w	r3, r3, #1
 800b70a:	2b01      	cmp	r3, #1
 800b70c:	d119      	bne.n	800b742 <HAL_SPI_TransmitReceive+0x2ae>
 800b70e:	68fb      	ldr	r3, [r7, #12]
 800b710:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b712:	b29b      	uxth	r3, r3
 800b714:	2b00      	cmp	r3, #0
 800b716:	d014      	beq.n	800b742 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800b718:	68fb      	ldr	r3, [r7, #12]
 800b71a:	681b      	ldr	r3, [r3, #0]
 800b71c:	68da      	ldr	r2, [r3, #12]
 800b71e:	68fb      	ldr	r3, [r7, #12]
 800b720:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b722:	b2d2      	uxtb	r2, r2
 800b724:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800b726:	68fb      	ldr	r3, [r7, #12]
 800b728:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b72a:	1c5a      	adds	r2, r3, #1
 800b72c:	68fb      	ldr	r3, [r7, #12]
 800b72e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800b730:	68fb      	ldr	r3, [r7, #12]
 800b732:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b734:	b29b      	uxth	r3, r3
 800b736:	3b01      	subs	r3, #1
 800b738:	b29a      	uxth	r2, r3
 800b73a:	68fb      	ldr	r3, [r7, #12]
 800b73c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800b73e:	2301      	movs	r3, #1
 800b740:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800b742:	f7fc f98d 	bl	8007a60 <HAL_GetTick>
 800b746:	4602      	mov	r2, r0
 800b748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b74a:	1ad3      	subs	r3, r2, r3
 800b74c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b74e:	429a      	cmp	r2, r3
 800b750:	d803      	bhi.n	800b75a <HAL_SPI_TransmitReceive+0x2c6>
 800b752:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b754:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b758:	d102      	bne.n	800b760 <HAL_SPI_TransmitReceive+0x2cc>
 800b75a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b75c:	2b00      	cmp	r3, #0
 800b75e:	d103      	bne.n	800b768 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800b760:	2303      	movs	r3, #3
 800b762:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800b766:	e029      	b.n	800b7bc <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b768:	68fb      	ldr	r3, [r7, #12]
 800b76a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b76c:	b29b      	uxth	r3, r3
 800b76e:	2b00      	cmp	r3, #0
 800b770:	d1a2      	bne.n	800b6b8 <HAL_SPI_TransmitReceive+0x224>
 800b772:	68fb      	ldr	r3, [r7, #12]
 800b774:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b776:	b29b      	uxth	r3, r3
 800b778:	2b00      	cmp	r3, #0
 800b77a:	d19d      	bne.n	800b6b8 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800b77c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b77e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800b780:	68f8      	ldr	r0, [r7, #12]
 800b782:	f000 fa29 	bl	800bbd8 <SPI_EndRxTxTransaction>
 800b786:	4603      	mov	r3, r0
 800b788:	2b00      	cmp	r3, #0
 800b78a:	d006      	beq.n	800b79a <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800b78c:	2301      	movs	r3, #1
 800b78e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800b792:	68fb      	ldr	r3, [r7, #12]
 800b794:	2220      	movs	r2, #32
 800b796:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800b798:	e010      	b.n	800b7bc <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800b79a:	68fb      	ldr	r3, [r7, #12]
 800b79c:	689b      	ldr	r3, [r3, #8]
 800b79e:	2b00      	cmp	r3, #0
 800b7a0:	d10b      	bne.n	800b7ba <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800b7a2:	2300      	movs	r3, #0
 800b7a4:	617b      	str	r3, [r7, #20]
 800b7a6:	68fb      	ldr	r3, [r7, #12]
 800b7a8:	681b      	ldr	r3, [r3, #0]
 800b7aa:	68db      	ldr	r3, [r3, #12]
 800b7ac:	617b      	str	r3, [r7, #20]
 800b7ae:	68fb      	ldr	r3, [r7, #12]
 800b7b0:	681b      	ldr	r3, [r3, #0]
 800b7b2:	689b      	ldr	r3, [r3, #8]
 800b7b4:	617b      	str	r3, [r7, #20]
 800b7b6:	697b      	ldr	r3, [r7, #20]
 800b7b8:	e000      	b.n	800b7bc <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800b7ba:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800b7bc:	68fb      	ldr	r3, [r7, #12]
 800b7be:	2201      	movs	r2, #1
 800b7c0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800b7c4:	68fb      	ldr	r3, [r7, #12]
 800b7c6:	2200      	movs	r2, #0
 800b7c8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800b7cc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800b7d0:	4618      	mov	r0, r3
 800b7d2:	3730      	adds	r7, #48	; 0x30
 800b7d4:	46bd      	mov	sp, r7
 800b7d6:	bd80      	pop	{r7, pc}

0800b7d8 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800b7d8:	b580      	push	{r7, lr}
 800b7da:	b088      	sub	sp, #32
 800b7dc:	af00      	add	r7, sp, #0
 800b7de:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	681b      	ldr	r3, [r3, #0]
 800b7e4:	685b      	ldr	r3, [r3, #4]
 800b7e6:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	681b      	ldr	r3, [r3, #0]
 800b7ec:	689b      	ldr	r3, [r3, #8]
 800b7ee:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800b7f0:	69bb      	ldr	r3, [r7, #24]
 800b7f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b7f6:	2b00      	cmp	r3, #0
 800b7f8:	d10e      	bne.n	800b818 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800b7fa:	69bb      	ldr	r3, [r7, #24]
 800b7fc:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800b800:	2b00      	cmp	r3, #0
 800b802:	d009      	beq.n	800b818 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800b804:	69fb      	ldr	r3, [r7, #28]
 800b806:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b80a:	2b00      	cmp	r3, #0
 800b80c:	d004      	beq.n	800b818 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b812:	6878      	ldr	r0, [r7, #4]
 800b814:	4798      	blx	r3
    return;
 800b816:	e0ce      	b.n	800b9b6 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800b818:	69bb      	ldr	r3, [r7, #24]
 800b81a:	f003 0302 	and.w	r3, r3, #2
 800b81e:	2b00      	cmp	r3, #0
 800b820:	d009      	beq.n	800b836 <HAL_SPI_IRQHandler+0x5e>
 800b822:	69fb      	ldr	r3, [r7, #28]
 800b824:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b828:	2b00      	cmp	r3, #0
 800b82a:	d004      	beq.n	800b836 <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b830:	6878      	ldr	r0, [r7, #4]
 800b832:	4798      	blx	r3
    return;
 800b834:	e0bf      	b.n	800b9b6 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800b836:	69bb      	ldr	r3, [r7, #24]
 800b838:	f003 0320 	and.w	r3, r3, #32
 800b83c:	2b00      	cmp	r3, #0
 800b83e:	d10a      	bne.n	800b856 <HAL_SPI_IRQHandler+0x7e>
 800b840:	69bb      	ldr	r3, [r7, #24]
 800b842:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b846:	2b00      	cmp	r3, #0
 800b848:	d105      	bne.n	800b856 <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800b84a:	69bb      	ldr	r3, [r7, #24]
 800b84c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b850:	2b00      	cmp	r3, #0
 800b852:	f000 80b0 	beq.w	800b9b6 <HAL_SPI_IRQHandler+0x1de>
 800b856:	69fb      	ldr	r3, [r7, #28]
 800b858:	f003 0320 	and.w	r3, r3, #32
 800b85c:	2b00      	cmp	r3, #0
 800b85e:	f000 80aa 	beq.w	800b9b6 <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800b862:	69bb      	ldr	r3, [r7, #24]
 800b864:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b868:	2b00      	cmp	r3, #0
 800b86a:	d023      	beq.n	800b8b4 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b872:	b2db      	uxtb	r3, r3
 800b874:	2b03      	cmp	r3, #3
 800b876:	d011      	beq.n	800b89c <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b87c:	f043 0204 	orr.w	r2, r3, #4
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800b884:	2300      	movs	r3, #0
 800b886:	617b      	str	r3, [r7, #20]
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	681b      	ldr	r3, [r3, #0]
 800b88c:	68db      	ldr	r3, [r3, #12]
 800b88e:	617b      	str	r3, [r7, #20]
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	681b      	ldr	r3, [r3, #0]
 800b894:	689b      	ldr	r3, [r3, #8]
 800b896:	617b      	str	r3, [r7, #20]
 800b898:	697b      	ldr	r3, [r7, #20]
 800b89a:	e00b      	b.n	800b8b4 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800b89c:	2300      	movs	r3, #0
 800b89e:	613b      	str	r3, [r7, #16]
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	681b      	ldr	r3, [r3, #0]
 800b8a4:	68db      	ldr	r3, [r3, #12]
 800b8a6:	613b      	str	r3, [r7, #16]
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	681b      	ldr	r3, [r3, #0]
 800b8ac:	689b      	ldr	r3, [r3, #8]
 800b8ae:	613b      	str	r3, [r7, #16]
 800b8b0:	693b      	ldr	r3, [r7, #16]
        return;
 800b8b2:	e080      	b.n	800b9b6 <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800b8b4:	69bb      	ldr	r3, [r7, #24]
 800b8b6:	f003 0320 	and.w	r3, r3, #32
 800b8ba:	2b00      	cmp	r3, #0
 800b8bc:	d014      	beq.n	800b8e8 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b8c2:	f043 0201 	orr.w	r2, r3, #1
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800b8ca:	2300      	movs	r3, #0
 800b8cc:	60fb      	str	r3, [r7, #12]
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	681b      	ldr	r3, [r3, #0]
 800b8d2:	689b      	ldr	r3, [r3, #8]
 800b8d4:	60fb      	str	r3, [r7, #12]
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	681b      	ldr	r3, [r3, #0]
 800b8da:	681a      	ldr	r2, [r3, #0]
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	681b      	ldr	r3, [r3, #0]
 800b8e0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b8e4:	601a      	str	r2, [r3, #0]
 800b8e6:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800b8e8:	69bb      	ldr	r3, [r7, #24]
 800b8ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b8ee:	2b00      	cmp	r3, #0
 800b8f0:	d00c      	beq.n	800b90c <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b8f6:	f043 0208 	orr.w	r2, r3, #8
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800b8fe:	2300      	movs	r3, #0
 800b900:	60bb      	str	r3, [r7, #8]
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	681b      	ldr	r3, [r3, #0]
 800b906:	689b      	ldr	r3, [r3, #8]
 800b908:	60bb      	str	r3, [r7, #8]
 800b90a:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b910:	2b00      	cmp	r3, #0
 800b912:	d04f      	beq.n	800b9b4 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	681b      	ldr	r3, [r3, #0]
 800b918:	685a      	ldr	r2, [r3, #4]
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	681b      	ldr	r3, [r3, #0]
 800b91e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800b922:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	2201      	movs	r2, #1
 800b928:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800b92c:	69fb      	ldr	r3, [r7, #28]
 800b92e:	f003 0302 	and.w	r3, r3, #2
 800b932:	2b00      	cmp	r3, #0
 800b934:	d104      	bne.n	800b940 <HAL_SPI_IRQHandler+0x168>
 800b936:	69fb      	ldr	r3, [r7, #28]
 800b938:	f003 0301 	and.w	r3, r3, #1
 800b93c:	2b00      	cmp	r3, #0
 800b93e:	d034      	beq.n	800b9aa <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	681b      	ldr	r3, [r3, #0]
 800b944:	685a      	ldr	r2, [r3, #4]
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	681b      	ldr	r3, [r3, #0]
 800b94a:	f022 0203 	bic.w	r2, r2, #3
 800b94e:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b954:	2b00      	cmp	r3, #0
 800b956:	d011      	beq.n	800b97c <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b95c:	4a17      	ldr	r2, [pc, #92]	; (800b9bc <HAL_SPI_IRQHandler+0x1e4>)
 800b95e:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b964:	4618      	mov	r0, r3
 800b966:	f7fd f983 	bl	8008c70 <HAL_DMA_Abort_IT>
 800b96a:	4603      	mov	r3, r0
 800b96c:	2b00      	cmp	r3, #0
 800b96e:	d005      	beq.n	800b97c <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b974:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b980:	2b00      	cmp	r3, #0
 800b982:	d016      	beq.n	800b9b2 <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b988:	4a0c      	ldr	r2, [pc, #48]	; (800b9bc <HAL_SPI_IRQHandler+0x1e4>)
 800b98a:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b990:	4618      	mov	r0, r3
 800b992:	f7fd f96d 	bl	8008c70 <HAL_DMA_Abort_IT>
 800b996:	4603      	mov	r3, r0
 800b998:	2b00      	cmp	r3, #0
 800b99a:	d00a      	beq.n	800b9b2 <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b9a0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 800b9a8:	e003      	b.n	800b9b2 <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800b9aa:	6878      	ldr	r0, [r7, #4]
 800b9ac:	f000 f808 	bl	800b9c0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800b9b0:	e000      	b.n	800b9b4 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 800b9b2:	bf00      	nop
    return;
 800b9b4:	bf00      	nop
  }
}
 800b9b6:	3720      	adds	r7, #32
 800b9b8:	46bd      	mov	sp, r7
 800b9ba:	bd80      	pop	{r7, pc}
 800b9bc:	0800b9d5 	.word	0x0800b9d5

0800b9c0 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800b9c0:	b480      	push	{r7}
 800b9c2:	b083      	sub	sp, #12
 800b9c4:	af00      	add	r7, sp, #0
 800b9c6:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800b9c8:	bf00      	nop
 800b9ca:	370c      	adds	r7, #12
 800b9cc:	46bd      	mov	sp, r7
 800b9ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9d2:	4770      	bx	lr

0800b9d4 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b9d4:	b580      	push	{r7, lr}
 800b9d6:	b084      	sub	sp, #16
 800b9d8:	af00      	add	r7, sp, #0
 800b9da:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b9e0:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800b9e2:	68fb      	ldr	r3, [r7, #12]
 800b9e4:	2200      	movs	r2, #0
 800b9e6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 800b9e8:	68fb      	ldr	r3, [r7, #12]
 800b9ea:	2200      	movs	r2, #0
 800b9ec:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800b9ee:	68f8      	ldr	r0, [r7, #12]
 800b9f0:	f7ff ffe6 	bl	800b9c0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800b9f4:	bf00      	nop
 800b9f6:	3710      	adds	r7, #16
 800b9f8:	46bd      	mov	sp, r7
 800b9fa:	bd80      	pop	{r7, pc}

0800b9fc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800b9fc:	b580      	push	{r7, lr}
 800b9fe:	b088      	sub	sp, #32
 800ba00:	af00      	add	r7, sp, #0
 800ba02:	60f8      	str	r0, [r7, #12]
 800ba04:	60b9      	str	r1, [r7, #8]
 800ba06:	603b      	str	r3, [r7, #0]
 800ba08:	4613      	mov	r3, r2
 800ba0a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800ba0c:	f7fc f828 	bl	8007a60 <HAL_GetTick>
 800ba10:	4602      	mov	r2, r0
 800ba12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba14:	1a9b      	subs	r3, r3, r2
 800ba16:	683a      	ldr	r2, [r7, #0]
 800ba18:	4413      	add	r3, r2
 800ba1a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800ba1c:	f7fc f820 	bl	8007a60 <HAL_GetTick>
 800ba20:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800ba22:	4b39      	ldr	r3, [pc, #228]	; (800bb08 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800ba24:	681b      	ldr	r3, [r3, #0]
 800ba26:	015b      	lsls	r3, r3, #5
 800ba28:	0d1b      	lsrs	r3, r3, #20
 800ba2a:	69fa      	ldr	r2, [r7, #28]
 800ba2c:	fb02 f303 	mul.w	r3, r2, r3
 800ba30:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800ba32:	e054      	b.n	800bade <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800ba34:	683b      	ldr	r3, [r7, #0]
 800ba36:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ba3a:	d050      	beq.n	800bade <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800ba3c:	f7fc f810 	bl	8007a60 <HAL_GetTick>
 800ba40:	4602      	mov	r2, r0
 800ba42:	69bb      	ldr	r3, [r7, #24]
 800ba44:	1ad3      	subs	r3, r2, r3
 800ba46:	69fa      	ldr	r2, [r7, #28]
 800ba48:	429a      	cmp	r2, r3
 800ba4a:	d902      	bls.n	800ba52 <SPI_WaitFlagStateUntilTimeout+0x56>
 800ba4c:	69fb      	ldr	r3, [r7, #28]
 800ba4e:	2b00      	cmp	r3, #0
 800ba50:	d13d      	bne.n	800bace <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800ba52:	68fb      	ldr	r3, [r7, #12]
 800ba54:	681b      	ldr	r3, [r3, #0]
 800ba56:	685a      	ldr	r2, [r3, #4]
 800ba58:	68fb      	ldr	r3, [r7, #12]
 800ba5a:	681b      	ldr	r3, [r3, #0]
 800ba5c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800ba60:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ba62:	68fb      	ldr	r3, [r7, #12]
 800ba64:	685b      	ldr	r3, [r3, #4]
 800ba66:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800ba6a:	d111      	bne.n	800ba90 <SPI_WaitFlagStateUntilTimeout+0x94>
 800ba6c:	68fb      	ldr	r3, [r7, #12]
 800ba6e:	689b      	ldr	r3, [r3, #8]
 800ba70:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ba74:	d004      	beq.n	800ba80 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800ba76:	68fb      	ldr	r3, [r7, #12]
 800ba78:	689b      	ldr	r3, [r3, #8]
 800ba7a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ba7e:	d107      	bne.n	800ba90 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800ba80:	68fb      	ldr	r3, [r7, #12]
 800ba82:	681b      	ldr	r3, [r3, #0]
 800ba84:	681a      	ldr	r2, [r3, #0]
 800ba86:	68fb      	ldr	r3, [r7, #12]
 800ba88:	681b      	ldr	r3, [r3, #0]
 800ba8a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ba8e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800ba90:	68fb      	ldr	r3, [r7, #12]
 800ba92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ba94:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ba98:	d10f      	bne.n	800baba <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800ba9a:	68fb      	ldr	r3, [r7, #12]
 800ba9c:	681b      	ldr	r3, [r3, #0]
 800ba9e:	681a      	ldr	r2, [r3, #0]
 800baa0:	68fb      	ldr	r3, [r7, #12]
 800baa2:	681b      	ldr	r3, [r3, #0]
 800baa4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800baa8:	601a      	str	r2, [r3, #0]
 800baaa:	68fb      	ldr	r3, [r7, #12]
 800baac:	681b      	ldr	r3, [r3, #0]
 800baae:	681a      	ldr	r2, [r3, #0]
 800bab0:	68fb      	ldr	r3, [r7, #12]
 800bab2:	681b      	ldr	r3, [r3, #0]
 800bab4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800bab8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800baba:	68fb      	ldr	r3, [r7, #12]
 800babc:	2201      	movs	r2, #1
 800babe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800bac2:	68fb      	ldr	r3, [r7, #12]
 800bac4:	2200      	movs	r2, #0
 800bac6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800baca:	2303      	movs	r3, #3
 800bacc:	e017      	b.n	800bafe <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800bace:	697b      	ldr	r3, [r7, #20]
 800bad0:	2b00      	cmp	r3, #0
 800bad2:	d101      	bne.n	800bad8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800bad4:	2300      	movs	r3, #0
 800bad6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800bad8:	697b      	ldr	r3, [r7, #20]
 800bada:	3b01      	subs	r3, #1
 800badc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800bade:	68fb      	ldr	r3, [r7, #12]
 800bae0:	681b      	ldr	r3, [r3, #0]
 800bae2:	689a      	ldr	r2, [r3, #8]
 800bae4:	68bb      	ldr	r3, [r7, #8]
 800bae6:	4013      	ands	r3, r2
 800bae8:	68ba      	ldr	r2, [r7, #8]
 800baea:	429a      	cmp	r2, r3
 800baec:	bf0c      	ite	eq
 800baee:	2301      	moveq	r3, #1
 800baf0:	2300      	movne	r3, #0
 800baf2:	b2db      	uxtb	r3, r3
 800baf4:	461a      	mov	r2, r3
 800baf6:	79fb      	ldrb	r3, [r7, #7]
 800baf8:	429a      	cmp	r2, r3
 800bafa:	d19b      	bne.n	800ba34 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800bafc:	2300      	movs	r3, #0
}
 800bafe:	4618      	mov	r0, r3
 800bb00:	3720      	adds	r7, #32
 800bb02:	46bd      	mov	sp, r7
 800bb04:	bd80      	pop	{r7, pc}
 800bb06:	bf00      	nop
 800bb08:	20000000 	.word	0x20000000

0800bb0c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800bb0c:	b580      	push	{r7, lr}
 800bb0e:	b086      	sub	sp, #24
 800bb10:	af02      	add	r7, sp, #8
 800bb12:	60f8      	str	r0, [r7, #12]
 800bb14:	60b9      	str	r1, [r7, #8]
 800bb16:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800bb18:	68fb      	ldr	r3, [r7, #12]
 800bb1a:	685b      	ldr	r3, [r3, #4]
 800bb1c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800bb20:	d111      	bne.n	800bb46 <SPI_EndRxTransaction+0x3a>
 800bb22:	68fb      	ldr	r3, [r7, #12]
 800bb24:	689b      	ldr	r3, [r3, #8]
 800bb26:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bb2a:	d004      	beq.n	800bb36 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800bb2c:	68fb      	ldr	r3, [r7, #12]
 800bb2e:	689b      	ldr	r3, [r3, #8]
 800bb30:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bb34:	d107      	bne.n	800bb46 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800bb36:	68fb      	ldr	r3, [r7, #12]
 800bb38:	681b      	ldr	r3, [r3, #0]
 800bb3a:	681a      	ldr	r2, [r3, #0]
 800bb3c:	68fb      	ldr	r3, [r7, #12]
 800bb3e:	681b      	ldr	r3, [r3, #0]
 800bb40:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800bb44:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800bb46:	68fb      	ldr	r3, [r7, #12]
 800bb48:	685b      	ldr	r3, [r3, #4]
 800bb4a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800bb4e:	d12a      	bne.n	800bba6 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800bb50:	68fb      	ldr	r3, [r7, #12]
 800bb52:	689b      	ldr	r3, [r3, #8]
 800bb54:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bb58:	d012      	beq.n	800bb80 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	9300      	str	r3, [sp, #0]
 800bb5e:	68bb      	ldr	r3, [r7, #8]
 800bb60:	2200      	movs	r2, #0
 800bb62:	2180      	movs	r1, #128	; 0x80
 800bb64:	68f8      	ldr	r0, [r7, #12]
 800bb66:	f7ff ff49 	bl	800b9fc <SPI_WaitFlagStateUntilTimeout>
 800bb6a:	4603      	mov	r3, r0
 800bb6c:	2b00      	cmp	r3, #0
 800bb6e:	d02d      	beq.n	800bbcc <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800bb70:	68fb      	ldr	r3, [r7, #12]
 800bb72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bb74:	f043 0220 	orr.w	r2, r3, #32
 800bb78:	68fb      	ldr	r3, [r7, #12]
 800bb7a:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800bb7c:	2303      	movs	r3, #3
 800bb7e:	e026      	b.n	800bbce <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	9300      	str	r3, [sp, #0]
 800bb84:	68bb      	ldr	r3, [r7, #8]
 800bb86:	2200      	movs	r2, #0
 800bb88:	2101      	movs	r1, #1
 800bb8a:	68f8      	ldr	r0, [r7, #12]
 800bb8c:	f7ff ff36 	bl	800b9fc <SPI_WaitFlagStateUntilTimeout>
 800bb90:	4603      	mov	r3, r0
 800bb92:	2b00      	cmp	r3, #0
 800bb94:	d01a      	beq.n	800bbcc <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800bb96:	68fb      	ldr	r3, [r7, #12]
 800bb98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bb9a:	f043 0220 	orr.w	r2, r3, #32
 800bb9e:	68fb      	ldr	r3, [r7, #12]
 800bba0:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800bba2:	2303      	movs	r3, #3
 800bba4:	e013      	b.n	800bbce <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	9300      	str	r3, [sp, #0]
 800bbaa:	68bb      	ldr	r3, [r7, #8]
 800bbac:	2200      	movs	r2, #0
 800bbae:	2101      	movs	r1, #1
 800bbb0:	68f8      	ldr	r0, [r7, #12]
 800bbb2:	f7ff ff23 	bl	800b9fc <SPI_WaitFlagStateUntilTimeout>
 800bbb6:	4603      	mov	r3, r0
 800bbb8:	2b00      	cmp	r3, #0
 800bbba:	d007      	beq.n	800bbcc <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800bbbc:	68fb      	ldr	r3, [r7, #12]
 800bbbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bbc0:	f043 0220 	orr.w	r2, r3, #32
 800bbc4:	68fb      	ldr	r3, [r7, #12]
 800bbc6:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800bbc8:	2303      	movs	r3, #3
 800bbca:	e000      	b.n	800bbce <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800bbcc:	2300      	movs	r3, #0
}
 800bbce:	4618      	mov	r0, r3
 800bbd0:	3710      	adds	r7, #16
 800bbd2:	46bd      	mov	sp, r7
 800bbd4:	bd80      	pop	{r7, pc}
	...

0800bbd8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800bbd8:	b580      	push	{r7, lr}
 800bbda:	b088      	sub	sp, #32
 800bbdc:	af02      	add	r7, sp, #8
 800bbde:	60f8      	str	r0, [r7, #12]
 800bbe0:	60b9      	str	r1, [r7, #8]
 800bbe2:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800bbe4:	4b1b      	ldr	r3, [pc, #108]	; (800bc54 <SPI_EndRxTxTransaction+0x7c>)
 800bbe6:	681b      	ldr	r3, [r3, #0]
 800bbe8:	4a1b      	ldr	r2, [pc, #108]	; (800bc58 <SPI_EndRxTxTransaction+0x80>)
 800bbea:	fba2 2303 	umull	r2, r3, r2, r3
 800bbee:	0d5b      	lsrs	r3, r3, #21
 800bbf0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800bbf4:	fb02 f303 	mul.w	r3, r2, r3
 800bbf8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800bbfa:	68fb      	ldr	r3, [r7, #12]
 800bbfc:	685b      	ldr	r3, [r3, #4]
 800bbfe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800bc02:	d112      	bne.n	800bc2a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	9300      	str	r3, [sp, #0]
 800bc08:	68bb      	ldr	r3, [r7, #8]
 800bc0a:	2200      	movs	r2, #0
 800bc0c:	2180      	movs	r1, #128	; 0x80
 800bc0e:	68f8      	ldr	r0, [r7, #12]
 800bc10:	f7ff fef4 	bl	800b9fc <SPI_WaitFlagStateUntilTimeout>
 800bc14:	4603      	mov	r3, r0
 800bc16:	2b00      	cmp	r3, #0
 800bc18:	d016      	beq.n	800bc48 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800bc1a:	68fb      	ldr	r3, [r7, #12]
 800bc1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bc1e:	f043 0220 	orr.w	r2, r3, #32
 800bc22:	68fb      	ldr	r3, [r7, #12]
 800bc24:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800bc26:	2303      	movs	r3, #3
 800bc28:	e00f      	b.n	800bc4a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800bc2a:	697b      	ldr	r3, [r7, #20]
 800bc2c:	2b00      	cmp	r3, #0
 800bc2e:	d00a      	beq.n	800bc46 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800bc30:	697b      	ldr	r3, [r7, #20]
 800bc32:	3b01      	subs	r3, #1
 800bc34:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800bc36:	68fb      	ldr	r3, [r7, #12]
 800bc38:	681b      	ldr	r3, [r3, #0]
 800bc3a:	689b      	ldr	r3, [r3, #8]
 800bc3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bc40:	2b80      	cmp	r3, #128	; 0x80
 800bc42:	d0f2      	beq.n	800bc2a <SPI_EndRxTxTransaction+0x52>
 800bc44:	e000      	b.n	800bc48 <SPI_EndRxTxTransaction+0x70>
        break;
 800bc46:	bf00      	nop
  }

  return HAL_OK;
 800bc48:	2300      	movs	r3, #0
}
 800bc4a:	4618      	mov	r0, r3
 800bc4c:	3718      	adds	r7, #24
 800bc4e:	46bd      	mov	sp, r7
 800bc50:	bd80      	pop	{r7, pc}
 800bc52:	bf00      	nop
 800bc54:	20000000 	.word	0x20000000
 800bc58:	165e9f81 	.word	0x165e9f81

0800bc5c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800bc5c:	b580      	push	{r7, lr}
 800bc5e:	b082      	sub	sp, #8
 800bc60:	af00      	add	r7, sp, #0
 800bc62:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	2b00      	cmp	r3, #0
 800bc68:	d101      	bne.n	800bc6e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800bc6a:	2301      	movs	r3, #1
 800bc6c:	e041      	b.n	800bcf2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bc74:	b2db      	uxtb	r3, r3
 800bc76:	2b00      	cmp	r3, #0
 800bc78:	d106      	bne.n	800bc88 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	2200      	movs	r2, #0
 800bc7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800bc82:	6878      	ldr	r0, [r7, #4]
 800bc84:	f7f7 f9c2 	bl	800300c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	2202      	movs	r2, #2
 800bc8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	681a      	ldr	r2, [r3, #0]
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	3304      	adds	r3, #4
 800bc98:	4619      	mov	r1, r3
 800bc9a:	4610      	mov	r0, r2
 800bc9c:	f000 fd82 	bl	800c7a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	2201      	movs	r2, #1
 800bca4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	2201      	movs	r2, #1
 800bcac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	2201      	movs	r2, #1
 800bcb4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	2201      	movs	r2, #1
 800bcbc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	2201      	movs	r2, #1
 800bcc4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	2201      	movs	r2, #1
 800bccc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	2201      	movs	r2, #1
 800bcd4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	2201      	movs	r2, #1
 800bcdc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	2201      	movs	r2, #1
 800bce4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	2201      	movs	r2, #1
 800bcec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800bcf0:	2300      	movs	r3, #0
}
 800bcf2:	4618      	mov	r0, r3
 800bcf4:	3708      	adds	r7, #8
 800bcf6:	46bd      	mov	sp, r7
 800bcf8:	bd80      	pop	{r7, pc}
	...

0800bcfc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800bcfc:	b480      	push	{r7}
 800bcfe:	b085      	sub	sp, #20
 800bd00:	af00      	add	r7, sp, #0
 800bd02:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bd0a:	b2db      	uxtb	r3, r3
 800bd0c:	2b01      	cmp	r3, #1
 800bd0e:	d001      	beq.n	800bd14 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800bd10:	2301      	movs	r3, #1
 800bd12:	e046      	b.n	800bda2 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	2202      	movs	r2, #2
 800bd18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	681b      	ldr	r3, [r3, #0]
 800bd20:	4a23      	ldr	r2, [pc, #140]	; (800bdb0 <HAL_TIM_Base_Start+0xb4>)
 800bd22:	4293      	cmp	r3, r2
 800bd24:	d022      	beq.n	800bd6c <HAL_TIM_Base_Start+0x70>
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	681b      	ldr	r3, [r3, #0]
 800bd2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bd2e:	d01d      	beq.n	800bd6c <HAL_TIM_Base_Start+0x70>
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	681b      	ldr	r3, [r3, #0]
 800bd34:	4a1f      	ldr	r2, [pc, #124]	; (800bdb4 <HAL_TIM_Base_Start+0xb8>)
 800bd36:	4293      	cmp	r3, r2
 800bd38:	d018      	beq.n	800bd6c <HAL_TIM_Base_Start+0x70>
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	681b      	ldr	r3, [r3, #0]
 800bd3e:	4a1e      	ldr	r2, [pc, #120]	; (800bdb8 <HAL_TIM_Base_Start+0xbc>)
 800bd40:	4293      	cmp	r3, r2
 800bd42:	d013      	beq.n	800bd6c <HAL_TIM_Base_Start+0x70>
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	681b      	ldr	r3, [r3, #0]
 800bd48:	4a1c      	ldr	r2, [pc, #112]	; (800bdbc <HAL_TIM_Base_Start+0xc0>)
 800bd4a:	4293      	cmp	r3, r2
 800bd4c:	d00e      	beq.n	800bd6c <HAL_TIM_Base_Start+0x70>
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	681b      	ldr	r3, [r3, #0]
 800bd52:	4a1b      	ldr	r2, [pc, #108]	; (800bdc0 <HAL_TIM_Base_Start+0xc4>)
 800bd54:	4293      	cmp	r3, r2
 800bd56:	d009      	beq.n	800bd6c <HAL_TIM_Base_Start+0x70>
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	681b      	ldr	r3, [r3, #0]
 800bd5c:	4a19      	ldr	r2, [pc, #100]	; (800bdc4 <HAL_TIM_Base_Start+0xc8>)
 800bd5e:	4293      	cmp	r3, r2
 800bd60:	d004      	beq.n	800bd6c <HAL_TIM_Base_Start+0x70>
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	681b      	ldr	r3, [r3, #0]
 800bd66:	4a18      	ldr	r2, [pc, #96]	; (800bdc8 <HAL_TIM_Base_Start+0xcc>)
 800bd68:	4293      	cmp	r3, r2
 800bd6a:	d111      	bne.n	800bd90 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	681b      	ldr	r3, [r3, #0]
 800bd70:	689b      	ldr	r3, [r3, #8]
 800bd72:	f003 0307 	and.w	r3, r3, #7
 800bd76:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bd78:	68fb      	ldr	r3, [r7, #12]
 800bd7a:	2b06      	cmp	r3, #6
 800bd7c:	d010      	beq.n	800bda0 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	681b      	ldr	r3, [r3, #0]
 800bd82:	681a      	ldr	r2, [r3, #0]
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	681b      	ldr	r3, [r3, #0]
 800bd88:	f042 0201 	orr.w	r2, r2, #1
 800bd8c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bd8e:	e007      	b.n	800bda0 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	681b      	ldr	r3, [r3, #0]
 800bd94:	681a      	ldr	r2, [r3, #0]
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	681b      	ldr	r3, [r3, #0]
 800bd9a:	f042 0201 	orr.w	r2, r2, #1
 800bd9e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800bda0:	2300      	movs	r3, #0
}
 800bda2:	4618      	mov	r0, r3
 800bda4:	3714      	adds	r7, #20
 800bda6:	46bd      	mov	sp, r7
 800bda8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdac:	4770      	bx	lr
 800bdae:	bf00      	nop
 800bdb0:	40010000 	.word	0x40010000
 800bdb4:	40000400 	.word	0x40000400
 800bdb8:	40000800 	.word	0x40000800
 800bdbc:	40000c00 	.word	0x40000c00
 800bdc0:	40010400 	.word	0x40010400
 800bdc4:	40014000 	.word	0x40014000
 800bdc8:	40001800 	.word	0x40001800

0800bdcc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800bdcc:	b480      	push	{r7}
 800bdce:	b085      	sub	sp, #20
 800bdd0:	af00      	add	r7, sp, #0
 800bdd2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bdda:	b2db      	uxtb	r3, r3
 800bddc:	2b01      	cmp	r3, #1
 800bdde:	d001      	beq.n	800bde4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800bde0:	2301      	movs	r3, #1
 800bde2:	e04e      	b.n	800be82 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	2202      	movs	r2, #2
 800bde8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	681b      	ldr	r3, [r3, #0]
 800bdf0:	68da      	ldr	r2, [r3, #12]
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	681b      	ldr	r3, [r3, #0]
 800bdf6:	f042 0201 	orr.w	r2, r2, #1
 800bdfa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	681b      	ldr	r3, [r3, #0]
 800be00:	4a23      	ldr	r2, [pc, #140]	; (800be90 <HAL_TIM_Base_Start_IT+0xc4>)
 800be02:	4293      	cmp	r3, r2
 800be04:	d022      	beq.n	800be4c <HAL_TIM_Base_Start_IT+0x80>
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	681b      	ldr	r3, [r3, #0]
 800be0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800be0e:	d01d      	beq.n	800be4c <HAL_TIM_Base_Start_IT+0x80>
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	681b      	ldr	r3, [r3, #0]
 800be14:	4a1f      	ldr	r2, [pc, #124]	; (800be94 <HAL_TIM_Base_Start_IT+0xc8>)
 800be16:	4293      	cmp	r3, r2
 800be18:	d018      	beq.n	800be4c <HAL_TIM_Base_Start_IT+0x80>
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	681b      	ldr	r3, [r3, #0]
 800be1e:	4a1e      	ldr	r2, [pc, #120]	; (800be98 <HAL_TIM_Base_Start_IT+0xcc>)
 800be20:	4293      	cmp	r3, r2
 800be22:	d013      	beq.n	800be4c <HAL_TIM_Base_Start_IT+0x80>
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	681b      	ldr	r3, [r3, #0]
 800be28:	4a1c      	ldr	r2, [pc, #112]	; (800be9c <HAL_TIM_Base_Start_IT+0xd0>)
 800be2a:	4293      	cmp	r3, r2
 800be2c:	d00e      	beq.n	800be4c <HAL_TIM_Base_Start_IT+0x80>
 800be2e:	687b      	ldr	r3, [r7, #4]
 800be30:	681b      	ldr	r3, [r3, #0]
 800be32:	4a1b      	ldr	r2, [pc, #108]	; (800bea0 <HAL_TIM_Base_Start_IT+0xd4>)
 800be34:	4293      	cmp	r3, r2
 800be36:	d009      	beq.n	800be4c <HAL_TIM_Base_Start_IT+0x80>
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	681b      	ldr	r3, [r3, #0]
 800be3c:	4a19      	ldr	r2, [pc, #100]	; (800bea4 <HAL_TIM_Base_Start_IT+0xd8>)
 800be3e:	4293      	cmp	r3, r2
 800be40:	d004      	beq.n	800be4c <HAL_TIM_Base_Start_IT+0x80>
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	681b      	ldr	r3, [r3, #0]
 800be46:	4a18      	ldr	r2, [pc, #96]	; (800bea8 <HAL_TIM_Base_Start_IT+0xdc>)
 800be48:	4293      	cmp	r3, r2
 800be4a:	d111      	bne.n	800be70 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	681b      	ldr	r3, [r3, #0]
 800be50:	689b      	ldr	r3, [r3, #8]
 800be52:	f003 0307 	and.w	r3, r3, #7
 800be56:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800be58:	68fb      	ldr	r3, [r7, #12]
 800be5a:	2b06      	cmp	r3, #6
 800be5c:	d010      	beq.n	800be80 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	681b      	ldr	r3, [r3, #0]
 800be62:	681a      	ldr	r2, [r3, #0]
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	681b      	ldr	r3, [r3, #0]
 800be68:	f042 0201 	orr.w	r2, r2, #1
 800be6c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800be6e:	e007      	b.n	800be80 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	681b      	ldr	r3, [r3, #0]
 800be74:	681a      	ldr	r2, [r3, #0]
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	681b      	ldr	r3, [r3, #0]
 800be7a:	f042 0201 	orr.w	r2, r2, #1
 800be7e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800be80:	2300      	movs	r3, #0
}
 800be82:	4618      	mov	r0, r3
 800be84:	3714      	adds	r7, #20
 800be86:	46bd      	mov	sp, r7
 800be88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be8c:	4770      	bx	lr
 800be8e:	bf00      	nop
 800be90:	40010000 	.word	0x40010000
 800be94:	40000400 	.word	0x40000400
 800be98:	40000800 	.word	0x40000800
 800be9c:	40000c00 	.word	0x40000c00
 800bea0:	40010400 	.word	0x40010400
 800bea4:	40014000 	.word	0x40014000
 800bea8:	40001800 	.word	0x40001800

0800beac <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 800beac:	b580      	push	{r7, lr}
 800beae:	b082      	sub	sp, #8
 800beb0:	af00      	add	r7, sp, #0
 800beb2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	2b00      	cmp	r3, #0
 800beb8:	d101      	bne.n	800bebe <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800beba:	2301      	movs	r3, #1
 800bebc:	e041      	b.n	800bf42 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800bebe:	687b      	ldr	r3, [r7, #4]
 800bec0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bec4:	b2db      	uxtb	r3, r3
 800bec6:	2b00      	cmp	r3, #0
 800bec8:	d106      	bne.n	800bed8 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	2200      	movs	r2, #0
 800bece:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800bed2:	6878      	ldr	r0, [r7, #4]
 800bed4:	f7f7 f824 	bl	8002f20 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	2202      	movs	r2, #2
 800bedc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	681a      	ldr	r2, [r3, #0]
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	3304      	adds	r3, #4
 800bee8:	4619      	mov	r1, r3
 800beea:	4610      	mov	r0, r2
 800beec:	f000 fc5a 	bl	800c7a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	2201      	movs	r2, #1
 800bef4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	2201      	movs	r2, #1
 800befc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	2201      	movs	r2, #1
 800bf04:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	2201      	movs	r2, #1
 800bf0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	2201      	movs	r2, #1
 800bf14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	2201      	movs	r2, #1
 800bf1c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	2201      	movs	r2, #1
 800bf24:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	2201      	movs	r2, #1
 800bf2c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	2201      	movs	r2, #1
 800bf34:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	2201      	movs	r2, #1
 800bf3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800bf40:	2300      	movs	r3, #0
}
 800bf42:	4618      	mov	r0, r3
 800bf44:	3708      	adds	r7, #8
 800bf46:	46bd      	mov	sp, r7
 800bf48:	bd80      	pop	{r7, pc}

0800bf4a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800bf4a:	b580      	push	{r7, lr}
 800bf4c:	b082      	sub	sp, #8
 800bf4e:	af00      	add	r7, sp, #0
 800bf50:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	2b00      	cmp	r3, #0
 800bf56:	d101      	bne.n	800bf5c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800bf58:	2301      	movs	r3, #1
 800bf5a:	e041      	b.n	800bfe0 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bf62:	b2db      	uxtb	r3, r3
 800bf64:	2b00      	cmp	r3, #0
 800bf66:	d106      	bne.n	800bf76 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	2200      	movs	r2, #0
 800bf6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800bf70:	6878      	ldr	r0, [r7, #4]
 800bf72:	f7f7 f813 	bl	8002f9c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	2202      	movs	r2, #2
 800bf7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	681a      	ldr	r2, [r3, #0]
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	3304      	adds	r3, #4
 800bf86:	4619      	mov	r1, r3
 800bf88:	4610      	mov	r0, r2
 800bf8a:	f000 fc0b 	bl	800c7a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	2201      	movs	r2, #1
 800bf92:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	2201      	movs	r2, #1
 800bf9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800bf9e:	687b      	ldr	r3, [r7, #4]
 800bfa0:	2201      	movs	r2, #1
 800bfa2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	2201      	movs	r2, #1
 800bfaa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800bfae:	687b      	ldr	r3, [r7, #4]
 800bfb0:	2201      	movs	r2, #1
 800bfb2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	2201      	movs	r2, #1
 800bfba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	2201      	movs	r2, #1
 800bfc2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	2201      	movs	r2, #1
 800bfca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	2201      	movs	r2, #1
 800bfd2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	2201      	movs	r2, #1
 800bfda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800bfde:	2300      	movs	r3, #0
}
 800bfe0:	4618      	mov	r0, r3
 800bfe2:	3708      	adds	r7, #8
 800bfe4:	46bd      	mov	sp, r7
 800bfe6:	bd80      	pop	{r7, pc}

0800bfe8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800bfe8:	b580      	push	{r7, lr}
 800bfea:	b084      	sub	sp, #16
 800bfec:	af00      	add	r7, sp, #0
 800bfee:	6078      	str	r0, [r7, #4]
 800bff0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800bff2:	683b      	ldr	r3, [r7, #0]
 800bff4:	2b00      	cmp	r3, #0
 800bff6:	d109      	bne.n	800c00c <HAL_TIM_PWM_Start+0x24>
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800bffe:	b2db      	uxtb	r3, r3
 800c000:	2b01      	cmp	r3, #1
 800c002:	bf14      	ite	ne
 800c004:	2301      	movne	r3, #1
 800c006:	2300      	moveq	r3, #0
 800c008:	b2db      	uxtb	r3, r3
 800c00a:	e022      	b.n	800c052 <HAL_TIM_PWM_Start+0x6a>
 800c00c:	683b      	ldr	r3, [r7, #0]
 800c00e:	2b04      	cmp	r3, #4
 800c010:	d109      	bne.n	800c026 <HAL_TIM_PWM_Start+0x3e>
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800c018:	b2db      	uxtb	r3, r3
 800c01a:	2b01      	cmp	r3, #1
 800c01c:	bf14      	ite	ne
 800c01e:	2301      	movne	r3, #1
 800c020:	2300      	moveq	r3, #0
 800c022:	b2db      	uxtb	r3, r3
 800c024:	e015      	b.n	800c052 <HAL_TIM_PWM_Start+0x6a>
 800c026:	683b      	ldr	r3, [r7, #0]
 800c028:	2b08      	cmp	r3, #8
 800c02a:	d109      	bne.n	800c040 <HAL_TIM_PWM_Start+0x58>
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c032:	b2db      	uxtb	r3, r3
 800c034:	2b01      	cmp	r3, #1
 800c036:	bf14      	ite	ne
 800c038:	2301      	movne	r3, #1
 800c03a:	2300      	moveq	r3, #0
 800c03c:	b2db      	uxtb	r3, r3
 800c03e:	e008      	b.n	800c052 <HAL_TIM_PWM_Start+0x6a>
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c046:	b2db      	uxtb	r3, r3
 800c048:	2b01      	cmp	r3, #1
 800c04a:	bf14      	ite	ne
 800c04c:	2301      	movne	r3, #1
 800c04e:	2300      	moveq	r3, #0
 800c050:	b2db      	uxtb	r3, r3
 800c052:	2b00      	cmp	r3, #0
 800c054:	d001      	beq.n	800c05a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800c056:	2301      	movs	r3, #1
 800c058:	e07c      	b.n	800c154 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800c05a:	683b      	ldr	r3, [r7, #0]
 800c05c:	2b00      	cmp	r3, #0
 800c05e:	d104      	bne.n	800c06a <HAL_TIM_PWM_Start+0x82>
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	2202      	movs	r2, #2
 800c064:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c068:	e013      	b.n	800c092 <HAL_TIM_PWM_Start+0xaa>
 800c06a:	683b      	ldr	r3, [r7, #0]
 800c06c:	2b04      	cmp	r3, #4
 800c06e:	d104      	bne.n	800c07a <HAL_TIM_PWM_Start+0x92>
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	2202      	movs	r2, #2
 800c074:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c078:	e00b      	b.n	800c092 <HAL_TIM_PWM_Start+0xaa>
 800c07a:	683b      	ldr	r3, [r7, #0]
 800c07c:	2b08      	cmp	r3, #8
 800c07e:	d104      	bne.n	800c08a <HAL_TIM_PWM_Start+0xa2>
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	2202      	movs	r2, #2
 800c084:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c088:	e003      	b.n	800c092 <HAL_TIM_PWM_Start+0xaa>
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	2202      	movs	r2, #2
 800c08e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800c092:	687b      	ldr	r3, [r7, #4]
 800c094:	681b      	ldr	r3, [r3, #0]
 800c096:	2201      	movs	r2, #1
 800c098:	6839      	ldr	r1, [r7, #0]
 800c09a:	4618      	mov	r0, r3
 800c09c:	f000 fe6c 	bl	800cd78 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	681b      	ldr	r3, [r3, #0]
 800c0a4:	4a2d      	ldr	r2, [pc, #180]	; (800c15c <HAL_TIM_PWM_Start+0x174>)
 800c0a6:	4293      	cmp	r3, r2
 800c0a8:	d004      	beq.n	800c0b4 <HAL_TIM_PWM_Start+0xcc>
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	681b      	ldr	r3, [r3, #0]
 800c0ae:	4a2c      	ldr	r2, [pc, #176]	; (800c160 <HAL_TIM_PWM_Start+0x178>)
 800c0b0:	4293      	cmp	r3, r2
 800c0b2:	d101      	bne.n	800c0b8 <HAL_TIM_PWM_Start+0xd0>
 800c0b4:	2301      	movs	r3, #1
 800c0b6:	e000      	b.n	800c0ba <HAL_TIM_PWM_Start+0xd2>
 800c0b8:	2300      	movs	r3, #0
 800c0ba:	2b00      	cmp	r3, #0
 800c0bc:	d007      	beq.n	800c0ce <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	681b      	ldr	r3, [r3, #0]
 800c0c2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	681b      	ldr	r3, [r3, #0]
 800c0c8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800c0cc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	681b      	ldr	r3, [r3, #0]
 800c0d2:	4a22      	ldr	r2, [pc, #136]	; (800c15c <HAL_TIM_PWM_Start+0x174>)
 800c0d4:	4293      	cmp	r3, r2
 800c0d6:	d022      	beq.n	800c11e <HAL_TIM_PWM_Start+0x136>
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	681b      	ldr	r3, [r3, #0]
 800c0dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c0e0:	d01d      	beq.n	800c11e <HAL_TIM_PWM_Start+0x136>
 800c0e2:	687b      	ldr	r3, [r7, #4]
 800c0e4:	681b      	ldr	r3, [r3, #0]
 800c0e6:	4a1f      	ldr	r2, [pc, #124]	; (800c164 <HAL_TIM_PWM_Start+0x17c>)
 800c0e8:	4293      	cmp	r3, r2
 800c0ea:	d018      	beq.n	800c11e <HAL_TIM_PWM_Start+0x136>
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	681b      	ldr	r3, [r3, #0]
 800c0f0:	4a1d      	ldr	r2, [pc, #116]	; (800c168 <HAL_TIM_PWM_Start+0x180>)
 800c0f2:	4293      	cmp	r3, r2
 800c0f4:	d013      	beq.n	800c11e <HAL_TIM_PWM_Start+0x136>
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	681b      	ldr	r3, [r3, #0]
 800c0fa:	4a1c      	ldr	r2, [pc, #112]	; (800c16c <HAL_TIM_PWM_Start+0x184>)
 800c0fc:	4293      	cmp	r3, r2
 800c0fe:	d00e      	beq.n	800c11e <HAL_TIM_PWM_Start+0x136>
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	681b      	ldr	r3, [r3, #0]
 800c104:	4a16      	ldr	r2, [pc, #88]	; (800c160 <HAL_TIM_PWM_Start+0x178>)
 800c106:	4293      	cmp	r3, r2
 800c108:	d009      	beq.n	800c11e <HAL_TIM_PWM_Start+0x136>
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	681b      	ldr	r3, [r3, #0]
 800c10e:	4a18      	ldr	r2, [pc, #96]	; (800c170 <HAL_TIM_PWM_Start+0x188>)
 800c110:	4293      	cmp	r3, r2
 800c112:	d004      	beq.n	800c11e <HAL_TIM_PWM_Start+0x136>
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	681b      	ldr	r3, [r3, #0]
 800c118:	4a16      	ldr	r2, [pc, #88]	; (800c174 <HAL_TIM_PWM_Start+0x18c>)
 800c11a:	4293      	cmp	r3, r2
 800c11c:	d111      	bne.n	800c142 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c11e:	687b      	ldr	r3, [r7, #4]
 800c120:	681b      	ldr	r3, [r3, #0]
 800c122:	689b      	ldr	r3, [r3, #8]
 800c124:	f003 0307 	and.w	r3, r3, #7
 800c128:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c12a:	68fb      	ldr	r3, [r7, #12]
 800c12c:	2b06      	cmp	r3, #6
 800c12e:	d010      	beq.n	800c152 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	681b      	ldr	r3, [r3, #0]
 800c134:	681a      	ldr	r2, [r3, #0]
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	681b      	ldr	r3, [r3, #0]
 800c13a:	f042 0201 	orr.w	r2, r2, #1
 800c13e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c140:	e007      	b.n	800c152 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c142:	687b      	ldr	r3, [r7, #4]
 800c144:	681b      	ldr	r3, [r3, #0]
 800c146:	681a      	ldr	r2, [r3, #0]
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	681b      	ldr	r3, [r3, #0]
 800c14c:	f042 0201 	orr.w	r2, r2, #1
 800c150:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800c152:	2300      	movs	r3, #0
}
 800c154:	4618      	mov	r0, r3
 800c156:	3710      	adds	r7, #16
 800c158:	46bd      	mov	sp, r7
 800c15a:	bd80      	pop	{r7, pc}
 800c15c:	40010000 	.word	0x40010000
 800c160:	40010400 	.word	0x40010400
 800c164:	40000400 	.word	0x40000400
 800c168:	40000800 	.word	0x40000800
 800c16c:	40000c00 	.word	0x40000c00
 800c170:	40014000 	.word	0x40014000
 800c174:	40001800 	.word	0x40001800

0800c178 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800c178:	b580      	push	{r7, lr}
 800c17a:	b082      	sub	sp, #8
 800c17c:	af00      	add	r7, sp, #0
 800c17e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	681b      	ldr	r3, [r3, #0]
 800c184:	691b      	ldr	r3, [r3, #16]
 800c186:	f003 0302 	and.w	r3, r3, #2
 800c18a:	2b02      	cmp	r3, #2
 800c18c:	d122      	bne.n	800c1d4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	681b      	ldr	r3, [r3, #0]
 800c192:	68db      	ldr	r3, [r3, #12]
 800c194:	f003 0302 	and.w	r3, r3, #2
 800c198:	2b02      	cmp	r3, #2
 800c19a:	d11b      	bne.n	800c1d4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	681b      	ldr	r3, [r3, #0]
 800c1a0:	f06f 0202 	mvn.w	r2, #2
 800c1a4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	2201      	movs	r2, #1
 800c1aa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	681b      	ldr	r3, [r3, #0]
 800c1b0:	699b      	ldr	r3, [r3, #24]
 800c1b2:	f003 0303 	and.w	r3, r3, #3
 800c1b6:	2b00      	cmp	r3, #0
 800c1b8:	d003      	beq.n	800c1c2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800c1ba:	6878      	ldr	r0, [r7, #4]
 800c1bc:	f000 fad3 	bl	800c766 <HAL_TIM_IC_CaptureCallback>
 800c1c0:	e005      	b.n	800c1ce <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800c1c2:	6878      	ldr	r0, [r7, #4]
 800c1c4:	f000 fac5 	bl	800c752 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c1c8:	6878      	ldr	r0, [r7, #4]
 800c1ca:	f000 fad6 	bl	800c77a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c1ce:	687b      	ldr	r3, [r7, #4]
 800c1d0:	2200      	movs	r2, #0
 800c1d2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	681b      	ldr	r3, [r3, #0]
 800c1d8:	691b      	ldr	r3, [r3, #16]
 800c1da:	f003 0304 	and.w	r3, r3, #4
 800c1de:	2b04      	cmp	r3, #4
 800c1e0:	d122      	bne.n	800c228 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800c1e2:	687b      	ldr	r3, [r7, #4]
 800c1e4:	681b      	ldr	r3, [r3, #0]
 800c1e6:	68db      	ldr	r3, [r3, #12]
 800c1e8:	f003 0304 	and.w	r3, r3, #4
 800c1ec:	2b04      	cmp	r3, #4
 800c1ee:	d11b      	bne.n	800c228 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	681b      	ldr	r3, [r3, #0]
 800c1f4:	f06f 0204 	mvn.w	r2, #4
 800c1f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	2202      	movs	r2, #2
 800c1fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	681b      	ldr	r3, [r3, #0]
 800c204:	699b      	ldr	r3, [r3, #24]
 800c206:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c20a:	2b00      	cmp	r3, #0
 800c20c:	d003      	beq.n	800c216 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c20e:	6878      	ldr	r0, [r7, #4]
 800c210:	f000 faa9 	bl	800c766 <HAL_TIM_IC_CaptureCallback>
 800c214:	e005      	b.n	800c222 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c216:	6878      	ldr	r0, [r7, #4]
 800c218:	f000 fa9b 	bl	800c752 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c21c:	6878      	ldr	r0, [r7, #4]
 800c21e:	f000 faac 	bl	800c77a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	2200      	movs	r2, #0
 800c226:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	681b      	ldr	r3, [r3, #0]
 800c22c:	691b      	ldr	r3, [r3, #16]
 800c22e:	f003 0308 	and.w	r3, r3, #8
 800c232:	2b08      	cmp	r3, #8
 800c234:	d122      	bne.n	800c27c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800c236:	687b      	ldr	r3, [r7, #4]
 800c238:	681b      	ldr	r3, [r3, #0]
 800c23a:	68db      	ldr	r3, [r3, #12]
 800c23c:	f003 0308 	and.w	r3, r3, #8
 800c240:	2b08      	cmp	r3, #8
 800c242:	d11b      	bne.n	800c27c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	681b      	ldr	r3, [r3, #0]
 800c248:	f06f 0208 	mvn.w	r2, #8
 800c24c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	2204      	movs	r2, #4
 800c252:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	681b      	ldr	r3, [r3, #0]
 800c258:	69db      	ldr	r3, [r3, #28]
 800c25a:	f003 0303 	and.w	r3, r3, #3
 800c25e:	2b00      	cmp	r3, #0
 800c260:	d003      	beq.n	800c26a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c262:	6878      	ldr	r0, [r7, #4]
 800c264:	f000 fa7f 	bl	800c766 <HAL_TIM_IC_CaptureCallback>
 800c268:	e005      	b.n	800c276 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c26a:	6878      	ldr	r0, [r7, #4]
 800c26c:	f000 fa71 	bl	800c752 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c270:	6878      	ldr	r0, [r7, #4]
 800c272:	f000 fa82 	bl	800c77a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c276:	687b      	ldr	r3, [r7, #4]
 800c278:	2200      	movs	r2, #0
 800c27a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	681b      	ldr	r3, [r3, #0]
 800c280:	691b      	ldr	r3, [r3, #16]
 800c282:	f003 0310 	and.w	r3, r3, #16
 800c286:	2b10      	cmp	r3, #16
 800c288:	d122      	bne.n	800c2d0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	681b      	ldr	r3, [r3, #0]
 800c28e:	68db      	ldr	r3, [r3, #12]
 800c290:	f003 0310 	and.w	r3, r3, #16
 800c294:	2b10      	cmp	r3, #16
 800c296:	d11b      	bne.n	800c2d0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	681b      	ldr	r3, [r3, #0]
 800c29c:	f06f 0210 	mvn.w	r2, #16
 800c2a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	2208      	movs	r2, #8
 800c2a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	681b      	ldr	r3, [r3, #0]
 800c2ac:	69db      	ldr	r3, [r3, #28]
 800c2ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c2b2:	2b00      	cmp	r3, #0
 800c2b4:	d003      	beq.n	800c2be <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c2b6:	6878      	ldr	r0, [r7, #4]
 800c2b8:	f000 fa55 	bl	800c766 <HAL_TIM_IC_CaptureCallback>
 800c2bc:	e005      	b.n	800c2ca <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c2be:	6878      	ldr	r0, [r7, #4]
 800c2c0:	f000 fa47 	bl	800c752 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c2c4:	6878      	ldr	r0, [r7, #4]
 800c2c6:	f000 fa58 	bl	800c77a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	2200      	movs	r2, #0
 800c2ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800c2d0:	687b      	ldr	r3, [r7, #4]
 800c2d2:	681b      	ldr	r3, [r3, #0]
 800c2d4:	691b      	ldr	r3, [r3, #16]
 800c2d6:	f003 0301 	and.w	r3, r3, #1
 800c2da:	2b01      	cmp	r3, #1
 800c2dc:	d10e      	bne.n	800c2fc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	681b      	ldr	r3, [r3, #0]
 800c2e2:	68db      	ldr	r3, [r3, #12]
 800c2e4:	f003 0301 	and.w	r3, r3, #1
 800c2e8:	2b01      	cmp	r3, #1
 800c2ea:	d107      	bne.n	800c2fc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	681b      	ldr	r3, [r3, #0]
 800c2f0:	f06f 0201 	mvn.w	r2, #1
 800c2f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800c2f6:	6878      	ldr	r0, [r7, #4]
 800c2f8:	f7f6 f94a 	bl	8002590 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	681b      	ldr	r3, [r3, #0]
 800c300:	691b      	ldr	r3, [r3, #16]
 800c302:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c306:	2b80      	cmp	r3, #128	; 0x80
 800c308:	d10e      	bne.n	800c328 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800c30a:	687b      	ldr	r3, [r7, #4]
 800c30c:	681b      	ldr	r3, [r3, #0]
 800c30e:	68db      	ldr	r3, [r3, #12]
 800c310:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c314:	2b80      	cmp	r3, #128	; 0x80
 800c316:	d107      	bne.n	800c328 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	681b      	ldr	r3, [r3, #0]
 800c31c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800c320:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800c322:	6878      	ldr	r0, [r7, #4]
 800c324:	f000 fe26 	bl	800cf74 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	681b      	ldr	r3, [r3, #0]
 800c32c:	691b      	ldr	r3, [r3, #16]
 800c32e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c332:	2b40      	cmp	r3, #64	; 0x40
 800c334:	d10e      	bne.n	800c354 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800c336:	687b      	ldr	r3, [r7, #4]
 800c338:	681b      	ldr	r3, [r3, #0]
 800c33a:	68db      	ldr	r3, [r3, #12]
 800c33c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c340:	2b40      	cmp	r3, #64	; 0x40
 800c342:	d107      	bne.n	800c354 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800c344:	687b      	ldr	r3, [r7, #4]
 800c346:	681b      	ldr	r3, [r3, #0]
 800c348:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800c34c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800c34e:	6878      	ldr	r0, [r7, #4]
 800c350:	f000 fa1d 	bl	800c78e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	681b      	ldr	r3, [r3, #0]
 800c358:	691b      	ldr	r3, [r3, #16]
 800c35a:	f003 0320 	and.w	r3, r3, #32
 800c35e:	2b20      	cmp	r3, #32
 800c360:	d10e      	bne.n	800c380 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800c362:	687b      	ldr	r3, [r7, #4]
 800c364:	681b      	ldr	r3, [r3, #0]
 800c366:	68db      	ldr	r3, [r3, #12]
 800c368:	f003 0320 	and.w	r3, r3, #32
 800c36c:	2b20      	cmp	r3, #32
 800c36e:	d107      	bne.n	800c380 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	681b      	ldr	r3, [r3, #0]
 800c374:	f06f 0220 	mvn.w	r2, #32
 800c378:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800c37a:	6878      	ldr	r0, [r7, #4]
 800c37c:	f000 fdf0 	bl	800cf60 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800c380:	bf00      	nop
 800c382:	3708      	adds	r7, #8
 800c384:	46bd      	mov	sp, r7
 800c386:	bd80      	pop	{r7, pc}

0800c388 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 800c388:	b580      	push	{r7, lr}
 800c38a:	b086      	sub	sp, #24
 800c38c:	af00      	add	r7, sp, #0
 800c38e:	60f8      	str	r0, [r7, #12]
 800c390:	60b9      	str	r1, [r7, #8]
 800c392:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c394:	2300      	movs	r3, #0
 800c396:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 800c398:	68fb      	ldr	r3, [r7, #12]
 800c39a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c39e:	2b01      	cmp	r3, #1
 800c3a0:	d101      	bne.n	800c3a6 <HAL_TIM_OC_ConfigChannel+0x1e>
 800c3a2:	2302      	movs	r3, #2
 800c3a4:	e048      	b.n	800c438 <HAL_TIM_OC_ConfigChannel+0xb0>
 800c3a6:	68fb      	ldr	r3, [r7, #12]
 800c3a8:	2201      	movs	r2, #1
 800c3aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	2b0c      	cmp	r3, #12
 800c3b2:	d839      	bhi.n	800c428 <HAL_TIM_OC_ConfigChannel+0xa0>
 800c3b4:	a201      	add	r2, pc, #4	; (adr r2, 800c3bc <HAL_TIM_OC_ConfigChannel+0x34>)
 800c3b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c3ba:	bf00      	nop
 800c3bc:	0800c3f1 	.word	0x0800c3f1
 800c3c0:	0800c429 	.word	0x0800c429
 800c3c4:	0800c429 	.word	0x0800c429
 800c3c8:	0800c429 	.word	0x0800c429
 800c3cc:	0800c3ff 	.word	0x0800c3ff
 800c3d0:	0800c429 	.word	0x0800c429
 800c3d4:	0800c429 	.word	0x0800c429
 800c3d8:	0800c429 	.word	0x0800c429
 800c3dc:	0800c40d 	.word	0x0800c40d
 800c3e0:	0800c429 	.word	0x0800c429
 800c3e4:	0800c429 	.word	0x0800c429
 800c3e8:	0800c429 	.word	0x0800c429
 800c3ec:	0800c41b 	.word	0x0800c41b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800c3f0:	68fb      	ldr	r3, [r7, #12]
 800c3f2:	681b      	ldr	r3, [r3, #0]
 800c3f4:	68b9      	ldr	r1, [r7, #8]
 800c3f6:	4618      	mov	r0, r3
 800c3f8:	f000 fa74 	bl	800c8e4 <TIM_OC1_SetConfig>
      break;
 800c3fc:	e017      	b.n	800c42e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800c3fe:	68fb      	ldr	r3, [r7, #12]
 800c400:	681b      	ldr	r3, [r3, #0]
 800c402:	68b9      	ldr	r1, [r7, #8]
 800c404:	4618      	mov	r0, r3
 800c406:	f000 fadd 	bl	800c9c4 <TIM_OC2_SetConfig>
      break;
 800c40a:	e010      	b.n	800c42e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800c40c:	68fb      	ldr	r3, [r7, #12]
 800c40e:	681b      	ldr	r3, [r3, #0]
 800c410:	68b9      	ldr	r1, [r7, #8]
 800c412:	4618      	mov	r0, r3
 800c414:	f000 fb4c 	bl	800cab0 <TIM_OC3_SetConfig>
      break;
 800c418:	e009      	b.n	800c42e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800c41a:	68fb      	ldr	r3, [r7, #12]
 800c41c:	681b      	ldr	r3, [r3, #0]
 800c41e:	68b9      	ldr	r1, [r7, #8]
 800c420:	4618      	mov	r0, r3
 800c422:	f000 fbb9 	bl	800cb98 <TIM_OC4_SetConfig>
      break;
 800c426:	e002      	b.n	800c42e <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 800c428:	2301      	movs	r3, #1
 800c42a:	75fb      	strb	r3, [r7, #23]
      break;
 800c42c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800c42e:	68fb      	ldr	r3, [r7, #12]
 800c430:	2200      	movs	r2, #0
 800c432:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800c436:	7dfb      	ldrb	r3, [r7, #23]
}
 800c438:	4618      	mov	r0, r3
 800c43a:	3718      	adds	r7, #24
 800c43c:	46bd      	mov	sp, r7
 800c43e:	bd80      	pop	{r7, pc}

0800c440 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800c440:	b580      	push	{r7, lr}
 800c442:	b086      	sub	sp, #24
 800c444:	af00      	add	r7, sp, #0
 800c446:	60f8      	str	r0, [r7, #12]
 800c448:	60b9      	str	r1, [r7, #8]
 800c44a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c44c:	2300      	movs	r3, #0
 800c44e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800c450:	68fb      	ldr	r3, [r7, #12]
 800c452:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c456:	2b01      	cmp	r3, #1
 800c458:	d101      	bne.n	800c45e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800c45a:	2302      	movs	r3, #2
 800c45c:	e0ae      	b.n	800c5bc <HAL_TIM_PWM_ConfigChannel+0x17c>
 800c45e:	68fb      	ldr	r3, [r7, #12]
 800c460:	2201      	movs	r2, #1
 800c462:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	2b0c      	cmp	r3, #12
 800c46a:	f200 809f 	bhi.w	800c5ac <HAL_TIM_PWM_ConfigChannel+0x16c>
 800c46e:	a201      	add	r2, pc, #4	; (adr r2, 800c474 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800c470:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c474:	0800c4a9 	.word	0x0800c4a9
 800c478:	0800c5ad 	.word	0x0800c5ad
 800c47c:	0800c5ad 	.word	0x0800c5ad
 800c480:	0800c5ad 	.word	0x0800c5ad
 800c484:	0800c4e9 	.word	0x0800c4e9
 800c488:	0800c5ad 	.word	0x0800c5ad
 800c48c:	0800c5ad 	.word	0x0800c5ad
 800c490:	0800c5ad 	.word	0x0800c5ad
 800c494:	0800c52b 	.word	0x0800c52b
 800c498:	0800c5ad 	.word	0x0800c5ad
 800c49c:	0800c5ad 	.word	0x0800c5ad
 800c4a0:	0800c5ad 	.word	0x0800c5ad
 800c4a4:	0800c56b 	.word	0x0800c56b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800c4a8:	68fb      	ldr	r3, [r7, #12]
 800c4aa:	681b      	ldr	r3, [r3, #0]
 800c4ac:	68b9      	ldr	r1, [r7, #8]
 800c4ae:	4618      	mov	r0, r3
 800c4b0:	f000 fa18 	bl	800c8e4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800c4b4:	68fb      	ldr	r3, [r7, #12]
 800c4b6:	681b      	ldr	r3, [r3, #0]
 800c4b8:	699a      	ldr	r2, [r3, #24]
 800c4ba:	68fb      	ldr	r3, [r7, #12]
 800c4bc:	681b      	ldr	r3, [r3, #0]
 800c4be:	f042 0208 	orr.w	r2, r2, #8
 800c4c2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800c4c4:	68fb      	ldr	r3, [r7, #12]
 800c4c6:	681b      	ldr	r3, [r3, #0]
 800c4c8:	699a      	ldr	r2, [r3, #24]
 800c4ca:	68fb      	ldr	r3, [r7, #12]
 800c4cc:	681b      	ldr	r3, [r3, #0]
 800c4ce:	f022 0204 	bic.w	r2, r2, #4
 800c4d2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800c4d4:	68fb      	ldr	r3, [r7, #12]
 800c4d6:	681b      	ldr	r3, [r3, #0]
 800c4d8:	6999      	ldr	r1, [r3, #24]
 800c4da:	68bb      	ldr	r3, [r7, #8]
 800c4dc:	691a      	ldr	r2, [r3, #16]
 800c4de:	68fb      	ldr	r3, [r7, #12]
 800c4e0:	681b      	ldr	r3, [r3, #0]
 800c4e2:	430a      	orrs	r2, r1
 800c4e4:	619a      	str	r2, [r3, #24]
      break;
 800c4e6:	e064      	b.n	800c5b2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800c4e8:	68fb      	ldr	r3, [r7, #12]
 800c4ea:	681b      	ldr	r3, [r3, #0]
 800c4ec:	68b9      	ldr	r1, [r7, #8]
 800c4ee:	4618      	mov	r0, r3
 800c4f0:	f000 fa68 	bl	800c9c4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800c4f4:	68fb      	ldr	r3, [r7, #12]
 800c4f6:	681b      	ldr	r3, [r3, #0]
 800c4f8:	699a      	ldr	r2, [r3, #24]
 800c4fa:	68fb      	ldr	r3, [r7, #12]
 800c4fc:	681b      	ldr	r3, [r3, #0]
 800c4fe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c502:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800c504:	68fb      	ldr	r3, [r7, #12]
 800c506:	681b      	ldr	r3, [r3, #0]
 800c508:	699a      	ldr	r2, [r3, #24]
 800c50a:	68fb      	ldr	r3, [r7, #12]
 800c50c:	681b      	ldr	r3, [r3, #0]
 800c50e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c512:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800c514:	68fb      	ldr	r3, [r7, #12]
 800c516:	681b      	ldr	r3, [r3, #0]
 800c518:	6999      	ldr	r1, [r3, #24]
 800c51a:	68bb      	ldr	r3, [r7, #8]
 800c51c:	691b      	ldr	r3, [r3, #16]
 800c51e:	021a      	lsls	r2, r3, #8
 800c520:	68fb      	ldr	r3, [r7, #12]
 800c522:	681b      	ldr	r3, [r3, #0]
 800c524:	430a      	orrs	r2, r1
 800c526:	619a      	str	r2, [r3, #24]
      break;
 800c528:	e043      	b.n	800c5b2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800c52a:	68fb      	ldr	r3, [r7, #12]
 800c52c:	681b      	ldr	r3, [r3, #0]
 800c52e:	68b9      	ldr	r1, [r7, #8]
 800c530:	4618      	mov	r0, r3
 800c532:	f000 fabd 	bl	800cab0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800c536:	68fb      	ldr	r3, [r7, #12]
 800c538:	681b      	ldr	r3, [r3, #0]
 800c53a:	69da      	ldr	r2, [r3, #28]
 800c53c:	68fb      	ldr	r3, [r7, #12]
 800c53e:	681b      	ldr	r3, [r3, #0]
 800c540:	f042 0208 	orr.w	r2, r2, #8
 800c544:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800c546:	68fb      	ldr	r3, [r7, #12]
 800c548:	681b      	ldr	r3, [r3, #0]
 800c54a:	69da      	ldr	r2, [r3, #28]
 800c54c:	68fb      	ldr	r3, [r7, #12]
 800c54e:	681b      	ldr	r3, [r3, #0]
 800c550:	f022 0204 	bic.w	r2, r2, #4
 800c554:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800c556:	68fb      	ldr	r3, [r7, #12]
 800c558:	681b      	ldr	r3, [r3, #0]
 800c55a:	69d9      	ldr	r1, [r3, #28]
 800c55c:	68bb      	ldr	r3, [r7, #8]
 800c55e:	691a      	ldr	r2, [r3, #16]
 800c560:	68fb      	ldr	r3, [r7, #12]
 800c562:	681b      	ldr	r3, [r3, #0]
 800c564:	430a      	orrs	r2, r1
 800c566:	61da      	str	r2, [r3, #28]
      break;
 800c568:	e023      	b.n	800c5b2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800c56a:	68fb      	ldr	r3, [r7, #12]
 800c56c:	681b      	ldr	r3, [r3, #0]
 800c56e:	68b9      	ldr	r1, [r7, #8]
 800c570:	4618      	mov	r0, r3
 800c572:	f000 fb11 	bl	800cb98 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800c576:	68fb      	ldr	r3, [r7, #12]
 800c578:	681b      	ldr	r3, [r3, #0]
 800c57a:	69da      	ldr	r2, [r3, #28]
 800c57c:	68fb      	ldr	r3, [r7, #12]
 800c57e:	681b      	ldr	r3, [r3, #0]
 800c580:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c584:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800c586:	68fb      	ldr	r3, [r7, #12]
 800c588:	681b      	ldr	r3, [r3, #0]
 800c58a:	69da      	ldr	r2, [r3, #28]
 800c58c:	68fb      	ldr	r3, [r7, #12]
 800c58e:	681b      	ldr	r3, [r3, #0]
 800c590:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c594:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800c596:	68fb      	ldr	r3, [r7, #12]
 800c598:	681b      	ldr	r3, [r3, #0]
 800c59a:	69d9      	ldr	r1, [r3, #28]
 800c59c:	68bb      	ldr	r3, [r7, #8]
 800c59e:	691b      	ldr	r3, [r3, #16]
 800c5a0:	021a      	lsls	r2, r3, #8
 800c5a2:	68fb      	ldr	r3, [r7, #12]
 800c5a4:	681b      	ldr	r3, [r3, #0]
 800c5a6:	430a      	orrs	r2, r1
 800c5a8:	61da      	str	r2, [r3, #28]
      break;
 800c5aa:	e002      	b.n	800c5b2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800c5ac:	2301      	movs	r3, #1
 800c5ae:	75fb      	strb	r3, [r7, #23]
      break;
 800c5b0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800c5b2:	68fb      	ldr	r3, [r7, #12]
 800c5b4:	2200      	movs	r2, #0
 800c5b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800c5ba:	7dfb      	ldrb	r3, [r7, #23]
}
 800c5bc:	4618      	mov	r0, r3
 800c5be:	3718      	adds	r7, #24
 800c5c0:	46bd      	mov	sp, r7
 800c5c2:	bd80      	pop	{r7, pc}

0800c5c4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800c5c4:	b580      	push	{r7, lr}
 800c5c6:	b084      	sub	sp, #16
 800c5c8:	af00      	add	r7, sp, #0
 800c5ca:	6078      	str	r0, [r7, #4]
 800c5cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800c5ce:	2300      	movs	r3, #0
 800c5d0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800c5d2:	687b      	ldr	r3, [r7, #4]
 800c5d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c5d8:	2b01      	cmp	r3, #1
 800c5da:	d101      	bne.n	800c5e0 <HAL_TIM_ConfigClockSource+0x1c>
 800c5dc:	2302      	movs	r3, #2
 800c5de:	e0b4      	b.n	800c74a <HAL_TIM_ConfigClockSource+0x186>
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	2201      	movs	r2, #1
 800c5e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	2202      	movs	r2, #2
 800c5ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	681b      	ldr	r3, [r3, #0]
 800c5f4:	689b      	ldr	r3, [r3, #8]
 800c5f6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800c5f8:	68bb      	ldr	r3, [r7, #8]
 800c5fa:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800c5fe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c600:	68bb      	ldr	r3, [r7, #8]
 800c602:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800c606:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800c608:	687b      	ldr	r3, [r7, #4]
 800c60a:	681b      	ldr	r3, [r3, #0]
 800c60c:	68ba      	ldr	r2, [r7, #8]
 800c60e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800c610:	683b      	ldr	r3, [r7, #0]
 800c612:	681b      	ldr	r3, [r3, #0]
 800c614:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c618:	d03e      	beq.n	800c698 <HAL_TIM_ConfigClockSource+0xd4>
 800c61a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c61e:	f200 8087 	bhi.w	800c730 <HAL_TIM_ConfigClockSource+0x16c>
 800c622:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c626:	f000 8086 	beq.w	800c736 <HAL_TIM_ConfigClockSource+0x172>
 800c62a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c62e:	d87f      	bhi.n	800c730 <HAL_TIM_ConfigClockSource+0x16c>
 800c630:	2b70      	cmp	r3, #112	; 0x70
 800c632:	d01a      	beq.n	800c66a <HAL_TIM_ConfigClockSource+0xa6>
 800c634:	2b70      	cmp	r3, #112	; 0x70
 800c636:	d87b      	bhi.n	800c730 <HAL_TIM_ConfigClockSource+0x16c>
 800c638:	2b60      	cmp	r3, #96	; 0x60
 800c63a:	d050      	beq.n	800c6de <HAL_TIM_ConfigClockSource+0x11a>
 800c63c:	2b60      	cmp	r3, #96	; 0x60
 800c63e:	d877      	bhi.n	800c730 <HAL_TIM_ConfigClockSource+0x16c>
 800c640:	2b50      	cmp	r3, #80	; 0x50
 800c642:	d03c      	beq.n	800c6be <HAL_TIM_ConfigClockSource+0xfa>
 800c644:	2b50      	cmp	r3, #80	; 0x50
 800c646:	d873      	bhi.n	800c730 <HAL_TIM_ConfigClockSource+0x16c>
 800c648:	2b40      	cmp	r3, #64	; 0x40
 800c64a:	d058      	beq.n	800c6fe <HAL_TIM_ConfigClockSource+0x13a>
 800c64c:	2b40      	cmp	r3, #64	; 0x40
 800c64e:	d86f      	bhi.n	800c730 <HAL_TIM_ConfigClockSource+0x16c>
 800c650:	2b30      	cmp	r3, #48	; 0x30
 800c652:	d064      	beq.n	800c71e <HAL_TIM_ConfigClockSource+0x15a>
 800c654:	2b30      	cmp	r3, #48	; 0x30
 800c656:	d86b      	bhi.n	800c730 <HAL_TIM_ConfigClockSource+0x16c>
 800c658:	2b20      	cmp	r3, #32
 800c65a:	d060      	beq.n	800c71e <HAL_TIM_ConfigClockSource+0x15a>
 800c65c:	2b20      	cmp	r3, #32
 800c65e:	d867      	bhi.n	800c730 <HAL_TIM_ConfigClockSource+0x16c>
 800c660:	2b00      	cmp	r3, #0
 800c662:	d05c      	beq.n	800c71e <HAL_TIM_ConfigClockSource+0x15a>
 800c664:	2b10      	cmp	r3, #16
 800c666:	d05a      	beq.n	800c71e <HAL_TIM_ConfigClockSource+0x15a>
 800c668:	e062      	b.n	800c730 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	6818      	ldr	r0, [r3, #0]
 800c66e:	683b      	ldr	r3, [r7, #0]
 800c670:	6899      	ldr	r1, [r3, #8]
 800c672:	683b      	ldr	r3, [r7, #0]
 800c674:	685a      	ldr	r2, [r3, #4]
 800c676:	683b      	ldr	r3, [r7, #0]
 800c678:	68db      	ldr	r3, [r3, #12]
 800c67a:	f000 fb5d 	bl	800cd38 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800c67e:	687b      	ldr	r3, [r7, #4]
 800c680:	681b      	ldr	r3, [r3, #0]
 800c682:	689b      	ldr	r3, [r3, #8]
 800c684:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800c686:	68bb      	ldr	r3, [r7, #8]
 800c688:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800c68c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800c68e:	687b      	ldr	r3, [r7, #4]
 800c690:	681b      	ldr	r3, [r3, #0]
 800c692:	68ba      	ldr	r2, [r7, #8]
 800c694:	609a      	str	r2, [r3, #8]
      break;
 800c696:	e04f      	b.n	800c738 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	6818      	ldr	r0, [r3, #0]
 800c69c:	683b      	ldr	r3, [r7, #0]
 800c69e:	6899      	ldr	r1, [r3, #8]
 800c6a0:	683b      	ldr	r3, [r7, #0]
 800c6a2:	685a      	ldr	r2, [r3, #4]
 800c6a4:	683b      	ldr	r3, [r7, #0]
 800c6a6:	68db      	ldr	r3, [r3, #12]
 800c6a8:	f000 fb46 	bl	800cd38 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	681b      	ldr	r3, [r3, #0]
 800c6b0:	689a      	ldr	r2, [r3, #8]
 800c6b2:	687b      	ldr	r3, [r7, #4]
 800c6b4:	681b      	ldr	r3, [r3, #0]
 800c6b6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800c6ba:	609a      	str	r2, [r3, #8]
      break;
 800c6bc:	e03c      	b.n	800c738 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c6be:	687b      	ldr	r3, [r7, #4]
 800c6c0:	6818      	ldr	r0, [r3, #0]
 800c6c2:	683b      	ldr	r3, [r7, #0]
 800c6c4:	6859      	ldr	r1, [r3, #4]
 800c6c6:	683b      	ldr	r3, [r7, #0]
 800c6c8:	68db      	ldr	r3, [r3, #12]
 800c6ca:	461a      	mov	r2, r3
 800c6cc:	f000 faba 	bl	800cc44 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	681b      	ldr	r3, [r3, #0]
 800c6d4:	2150      	movs	r1, #80	; 0x50
 800c6d6:	4618      	mov	r0, r3
 800c6d8:	f000 fb13 	bl	800cd02 <TIM_ITRx_SetConfig>
      break;
 800c6dc:	e02c      	b.n	800c738 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	6818      	ldr	r0, [r3, #0]
 800c6e2:	683b      	ldr	r3, [r7, #0]
 800c6e4:	6859      	ldr	r1, [r3, #4]
 800c6e6:	683b      	ldr	r3, [r7, #0]
 800c6e8:	68db      	ldr	r3, [r3, #12]
 800c6ea:	461a      	mov	r2, r3
 800c6ec:	f000 fad9 	bl	800cca2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	681b      	ldr	r3, [r3, #0]
 800c6f4:	2160      	movs	r1, #96	; 0x60
 800c6f6:	4618      	mov	r0, r3
 800c6f8:	f000 fb03 	bl	800cd02 <TIM_ITRx_SetConfig>
      break;
 800c6fc:	e01c      	b.n	800c738 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c6fe:	687b      	ldr	r3, [r7, #4]
 800c700:	6818      	ldr	r0, [r3, #0]
 800c702:	683b      	ldr	r3, [r7, #0]
 800c704:	6859      	ldr	r1, [r3, #4]
 800c706:	683b      	ldr	r3, [r7, #0]
 800c708:	68db      	ldr	r3, [r3, #12]
 800c70a:	461a      	mov	r2, r3
 800c70c:	f000 fa9a 	bl	800cc44 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	681b      	ldr	r3, [r3, #0]
 800c714:	2140      	movs	r1, #64	; 0x40
 800c716:	4618      	mov	r0, r3
 800c718:	f000 faf3 	bl	800cd02 <TIM_ITRx_SetConfig>
      break;
 800c71c:	e00c      	b.n	800c738 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800c71e:	687b      	ldr	r3, [r7, #4]
 800c720:	681a      	ldr	r2, [r3, #0]
 800c722:	683b      	ldr	r3, [r7, #0]
 800c724:	681b      	ldr	r3, [r3, #0]
 800c726:	4619      	mov	r1, r3
 800c728:	4610      	mov	r0, r2
 800c72a:	f000 faea 	bl	800cd02 <TIM_ITRx_SetConfig>
      break;
 800c72e:	e003      	b.n	800c738 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800c730:	2301      	movs	r3, #1
 800c732:	73fb      	strb	r3, [r7, #15]
      break;
 800c734:	e000      	b.n	800c738 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800c736:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	2201      	movs	r2, #1
 800c73c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	2200      	movs	r2, #0
 800c744:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800c748:	7bfb      	ldrb	r3, [r7, #15]
}
 800c74a:	4618      	mov	r0, r3
 800c74c:	3710      	adds	r7, #16
 800c74e:	46bd      	mov	sp, r7
 800c750:	bd80      	pop	{r7, pc}

0800c752 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800c752:	b480      	push	{r7}
 800c754:	b083      	sub	sp, #12
 800c756:	af00      	add	r7, sp, #0
 800c758:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800c75a:	bf00      	nop
 800c75c:	370c      	adds	r7, #12
 800c75e:	46bd      	mov	sp, r7
 800c760:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c764:	4770      	bx	lr

0800c766 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800c766:	b480      	push	{r7}
 800c768:	b083      	sub	sp, #12
 800c76a:	af00      	add	r7, sp, #0
 800c76c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800c76e:	bf00      	nop
 800c770:	370c      	adds	r7, #12
 800c772:	46bd      	mov	sp, r7
 800c774:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c778:	4770      	bx	lr

0800c77a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800c77a:	b480      	push	{r7}
 800c77c:	b083      	sub	sp, #12
 800c77e:	af00      	add	r7, sp, #0
 800c780:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800c782:	bf00      	nop
 800c784:	370c      	adds	r7, #12
 800c786:	46bd      	mov	sp, r7
 800c788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c78c:	4770      	bx	lr

0800c78e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800c78e:	b480      	push	{r7}
 800c790:	b083      	sub	sp, #12
 800c792:	af00      	add	r7, sp, #0
 800c794:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800c796:	bf00      	nop
 800c798:	370c      	adds	r7, #12
 800c79a:	46bd      	mov	sp, r7
 800c79c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7a0:	4770      	bx	lr
	...

0800c7a4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800c7a4:	b480      	push	{r7}
 800c7a6:	b085      	sub	sp, #20
 800c7a8:	af00      	add	r7, sp, #0
 800c7aa:	6078      	str	r0, [r7, #4]
 800c7ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800c7ae:	687b      	ldr	r3, [r7, #4]
 800c7b0:	681b      	ldr	r3, [r3, #0]
 800c7b2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c7b4:	687b      	ldr	r3, [r7, #4]
 800c7b6:	4a40      	ldr	r2, [pc, #256]	; (800c8b8 <TIM_Base_SetConfig+0x114>)
 800c7b8:	4293      	cmp	r3, r2
 800c7ba:	d013      	beq.n	800c7e4 <TIM_Base_SetConfig+0x40>
 800c7bc:	687b      	ldr	r3, [r7, #4]
 800c7be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c7c2:	d00f      	beq.n	800c7e4 <TIM_Base_SetConfig+0x40>
 800c7c4:	687b      	ldr	r3, [r7, #4]
 800c7c6:	4a3d      	ldr	r2, [pc, #244]	; (800c8bc <TIM_Base_SetConfig+0x118>)
 800c7c8:	4293      	cmp	r3, r2
 800c7ca:	d00b      	beq.n	800c7e4 <TIM_Base_SetConfig+0x40>
 800c7cc:	687b      	ldr	r3, [r7, #4]
 800c7ce:	4a3c      	ldr	r2, [pc, #240]	; (800c8c0 <TIM_Base_SetConfig+0x11c>)
 800c7d0:	4293      	cmp	r3, r2
 800c7d2:	d007      	beq.n	800c7e4 <TIM_Base_SetConfig+0x40>
 800c7d4:	687b      	ldr	r3, [r7, #4]
 800c7d6:	4a3b      	ldr	r2, [pc, #236]	; (800c8c4 <TIM_Base_SetConfig+0x120>)
 800c7d8:	4293      	cmp	r3, r2
 800c7da:	d003      	beq.n	800c7e4 <TIM_Base_SetConfig+0x40>
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	4a3a      	ldr	r2, [pc, #232]	; (800c8c8 <TIM_Base_SetConfig+0x124>)
 800c7e0:	4293      	cmp	r3, r2
 800c7e2:	d108      	bne.n	800c7f6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c7e4:	68fb      	ldr	r3, [r7, #12]
 800c7e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c7ea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800c7ec:	683b      	ldr	r3, [r7, #0]
 800c7ee:	685b      	ldr	r3, [r3, #4]
 800c7f0:	68fa      	ldr	r2, [r7, #12]
 800c7f2:	4313      	orrs	r3, r2
 800c7f4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c7f6:	687b      	ldr	r3, [r7, #4]
 800c7f8:	4a2f      	ldr	r2, [pc, #188]	; (800c8b8 <TIM_Base_SetConfig+0x114>)
 800c7fa:	4293      	cmp	r3, r2
 800c7fc:	d02b      	beq.n	800c856 <TIM_Base_SetConfig+0xb2>
 800c7fe:	687b      	ldr	r3, [r7, #4]
 800c800:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c804:	d027      	beq.n	800c856 <TIM_Base_SetConfig+0xb2>
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	4a2c      	ldr	r2, [pc, #176]	; (800c8bc <TIM_Base_SetConfig+0x118>)
 800c80a:	4293      	cmp	r3, r2
 800c80c:	d023      	beq.n	800c856 <TIM_Base_SetConfig+0xb2>
 800c80e:	687b      	ldr	r3, [r7, #4]
 800c810:	4a2b      	ldr	r2, [pc, #172]	; (800c8c0 <TIM_Base_SetConfig+0x11c>)
 800c812:	4293      	cmp	r3, r2
 800c814:	d01f      	beq.n	800c856 <TIM_Base_SetConfig+0xb2>
 800c816:	687b      	ldr	r3, [r7, #4]
 800c818:	4a2a      	ldr	r2, [pc, #168]	; (800c8c4 <TIM_Base_SetConfig+0x120>)
 800c81a:	4293      	cmp	r3, r2
 800c81c:	d01b      	beq.n	800c856 <TIM_Base_SetConfig+0xb2>
 800c81e:	687b      	ldr	r3, [r7, #4]
 800c820:	4a29      	ldr	r2, [pc, #164]	; (800c8c8 <TIM_Base_SetConfig+0x124>)
 800c822:	4293      	cmp	r3, r2
 800c824:	d017      	beq.n	800c856 <TIM_Base_SetConfig+0xb2>
 800c826:	687b      	ldr	r3, [r7, #4]
 800c828:	4a28      	ldr	r2, [pc, #160]	; (800c8cc <TIM_Base_SetConfig+0x128>)
 800c82a:	4293      	cmp	r3, r2
 800c82c:	d013      	beq.n	800c856 <TIM_Base_SetConfig+0xb2>
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	4a27      	ldr	r2, [pc, #156]	; (800c8d0 <TIM_Base_SetConfig+0x12c>)
 800c832:	4293      	cmp	r3, r2
 800c834:	d00f      	beq.n	800c856 <TIM_Base_SetConfig+0xb2>
 800c836:	687b      	ldr	r3, [r7, #4]
 800c838:	4a26      	ldr	r2, [pc, #152]	; (800c8d4 <TIM_Base_SetConfig+0x130>)
 800c83a:	4293      	cmp	r3, r2
 800c83c:	d00b      	beq.n	800c856 <TIM_Base_SetConfig+0xb2>
 800c83e:	687b      	ldr	r3, [r7, #4]
 800c840:	4a25      	ldr	r2, [pc, #148]	; (800c8d8 <TIM_Base_SetConfig+0x134>)
 800c842:	4293      	cmp	r3, r2
 800c844:	d007      	beq.n	800c856 <TIM_Base_SetConfig+0xb2>
 800c846:	687b      	ldr	r3, [r7, #4]
 800c848:	4a24      	ldr	r2, [pc, #144]	; (800c8dc <TIM_Base_SetConfig+0x138>)
 800c84a:	4293      	cmp	r3, r2
 800c84c:	d003      	beq.n	800c856 <TIM_Base_SetConfig+0xb2>
 800c84e:	687b      	ldr	r3, [r7, #4]
 800c850:	4a23      	ldr	r2, [pc, #140]	; (800c8e0 <TIM_Base_SetConfig+0x13c>)
 800c852:	4293      	cmp	r3, r2
 800c854:	d108      	bne.n	800c868 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800c856:	68fb      	ldr	r3, [r7, #12]
 800c858:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c85c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c85e:	683b      	ldr	r3, [r7, #0]
 800c860:	68db      	ldr	r3, [r3, #12]
 800c862:	68fa      	ldr	r2, [r7, #12]
 800c864:	4313      	orrs	r3, r2
 800c866:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c868:	68fb      	ldr	r3, [r7, #12]
 800c86a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800c86e:	683b      	ldr	r3, [r7, #0]
 800c870:	695b      	ldr	r3, [r3, #20]
 800c872:	4313      	orrs	r3, r2
 800c874:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800c876:	687b      	ldr	r3, [r7, #4]
 800c878:	68fa      	ldr	r2, [r7, #12]
 800c87a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c87c:	683b      	ldr	r3, [r7, #0]
 800c87e:	689a      	ldr	r2, [r3, #8]
 800c880:	687b      	ldr	r3, [r7, #4]
 800c882:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800c884:	683b      	ldr	r3, [r7, #0]
 800c886:	681a      	ldr	r2, [r3, #0]
 800c888:	687b      	ldr	r3, [r7, #4]
 800c88a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c88c:	687b      	ldr	r3, [r7, #4]
 800c88e:	4a0a      	ldr	r2, [pc, #40]	; (800c8b8 <TIM_Base_SetConfig+0x114>)
 800c890:	4293      	cmp	r3, r2
 800c892:	d003      	beq.n	800c89c <TIM_Base_SetConfig+0xf8>
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	4a0c      	ldr	r2, [pc, #48]	; (800c8c8 <TIM_Base_SetConfig+0x124>)
 800c898:	4293      	cmp	r3, r2
 800c89a:	d103      	bne.n	800c8a4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800c89c:	683b      	ldr	r3, [r7, #0]
 800c89e:	691a      	ldr	r2, [r3, #16]
 800c8a0:	687b      	ldr	r3, [r7, #4]
 800c8a2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c8a4:	687b      	ldr	r3, [r7, #4]
 800c8a6:	2201      	movs	r2, #1
 800c8a8:	615a      	str	r2, [r3, #20]
}
 800c8aa:	bf00      	nop
 800c8ac:	3714      	adds	r7, #20
 800c8ae:	46bd      	mov	sp, r7
 800c8b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8b4:	4770      	bx	lr
 800c8b6:	bf00      	nop
 800c8b8:	40010000 	.word	0x40010000
 800c8bc:	40000400 	.word	0x40000400
 800c8c0:	40000800 	.word	0x40000800
 800c8c4:	40000c00 	.word	0x40000c00
 800c8c8:	40010400 	.word	0x40010400
 800c8cc:	40014000 	.word	0x40014000
 800c8d0:	40014400 	.word	0x40014400
 800c8d4:	40014800 	.word	0x40014800
 800c8d8:	40001800 	.word	0x40001800
 800c8dc:	40001c00 	.word	0x40001c00
 800c8e0:	40002000 	.word	0x40002000

0800c8e4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c8e4:	b480      	push	{r7}
 800c8e6:	b087      	sub	sp, #28
 800c8e8:	af00      	add	r7, sp, #0
 800c8ea:	6078      	str	r0, [r7, #4]
 800c8ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	6a1b      	ldr	r3, [r3, #32]
 800c8f2:	f023 0201 	bic.w	r2, r3, #1
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	6a1b      	ldr	r3, [r3, #32]
 800c8fe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c900:	687b      	ldr	r3, [r7, #4]
 800c902:	685b      	ldr	r3, [r3, #4]
 800c904:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c906:	687b      	ldr	r3, [r7, #4]
 800c908:	699b      	ldr	r3, [r3, #24]
 800c90a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800c90c:	68fb      	ldr	r3, [r7, #12]
 800c90e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c912:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800c914:	68fb      	ldr	r3, [r7, #12]
 800c916:	f023 0303 	bic.w	r3, r3, #3
 800c91a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c91c:	683b      	ldr	r3, [r7, #0]
 800c91e:	681b      	ldr	r3, [r3, #0]
 800c920:	68fa      	ldr	r2, [r7, #12]
 800c922:	4313      	orrs	r3, r2
 800c924:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800c926:	697b      	ldr	r3, [r7, #20]
 800c928:	f023 0302 	bic.w	r3, r3, #2
 800c92c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800c92e:	683b      	ldr	r3, [r7, #0]
 800c930:	689b      	ldr	r3, [r3, #8]
 800c932:	697a      	ldr	r2, [r7, #20]
 800c934:	4313      	orrs	r3, r2
 800c936:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800c938:	687b      	ldr	r3, [r7, #4]
 800c93a:	4a20      	ldr	r2, [pc, #128]	; (800c9bc <TIM_OC1_SetConfig+0xd8>)
 800c93c:	4293      	cmp	r3, r2
 800c93e:	d003      	beq.n	800c948 <TIM_OC1_SetConfig+0x64>
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	4a1f      	ldr	r2, [pc, #124]	; (800c9c0 <TIM_OC1_SetConfig+0xdc>)
 800c944:	4293      	cmp	r3, r2
 800c946:	d10c      	bne.n	800c962 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800c948:	697b      	ldr	r3, [r7, #20]
 800c94a:	f023 0308 	bic.w	r3, r3, #8
 800c94e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800c950:	683b      	ldr	r3, [r7, #0]
 800c952:	68db      	ldr	r3, [r3, #12]
 800c954:	697a      	ldr	r2, [r7, #20]
 800c956:	4313      	orrs	r3, r2
 800c958:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800c95a:	697b      	ldr	r3, [r7, #20]
 800c95c:	f023 0304 	bic.w	r3, r3, #4
 800c960:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	4a15      	ldr	r2, [pc, #84]	; (800c9bc <TIM_OC1_SetConfig+0xd8>)
 800c966:	4293      	cmp	r3, r2
 800c968:	d003      	beq.n	800c972 <TIM_OC1_SetConfig+0x8e>
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	4a14      	ldr	r2, [pc, #80]	; (800c9c0 <TIM_OC1_SetConfig+0xdc>)
 800c96e:	4293      	cmp	r3, r2
 800c970:	d111      	bne.n	800c996 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800c972:	693b      	ldr	r3, [r7, #16]
 800c974:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c978:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800c97a:	693b      	ldr	r3, [r7, #16]
 800c97c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800c980:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800c982:	683b      	ldr	r3, [r7, #0]
 800c984:	695b      	ldr	r3, [r3, #20]
 800c986:	693a      	ldr	r2, [r7, #16]
 800c988:	4313      	orrs	r3, r2
 800c98a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800c98c:	683b      	ldr	r3, [r7, #0]
 800c98e:	699b      	ldr	r3, [r3, #24]
 800c990:	693a      	ldr	r2, [r7, #16]
 800c992:	4313      	orrs	r3, r2
 800c994:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c996:	687b      	ldr	r3, [r7, #4]
 800c998:	693a      	ldr	r2, [r7, #16]
 800c99a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	68fa      	ldr	r2, [r7, #12]
 800c9a0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800c9a2:	683b      	ldr	r3, [r7, #0]
 800c9a4:	685a      	ldr	r2, [r3, #4]
 800c9a6:	687b      	ldr	r3, [r7, #4]
 800c9a8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c9aa:	687b      	ldr	r3, [r7, #4]
 800c9ac:	697a      	ldr	r2, [r7, #20]
 800c9ae:	621a      	str	r2, [r3, #32]
}
 800c9b0:	bf00      	nop
 800c9b2:	371c      	adds	r7, #28
 800c9b4:	46bd      	mov	sp, r7
 800c9b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9ba:	4770      	bx	lr
 800c9bc:	40010000 	.word	0x40010000
 800c9c0:	40010400 	.word	0x40010400

0800c9c4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c9c4:	b480      	push	{r7}
 800c9c6:	b087      	sub	sp, #28
 800c9c8:	af00      	add	r7, sp, #0
 800c9ca:	6078      	str	r0, [r7, #4]
 800c9cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c9ce:	687b      	ldr	r3, [r7, #4]
 800c9d0:	6a1b      	ldr	r3, [r3, #32]
 800c9d2:	f023 0210 	bic.w	r2, r3, #16
 800c9d6:	687b      	ldr	r3, [r7, #4]
 800c9d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c9da:	687b      	ldr	r3, [r7, #4]
 800c9dc:	6a1b      	ldr	r3, [r3, #32]
 800c9de:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c9e0:	687b      	ldr	r3, [r7, #4]
 800c9e2:	685b      	ldr	r3, [r3, #4]
 800c9e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c9e6:	687b      	ldr	r3, [r7, #4]
 800c9e8:	699b      	ldr	r3, [r3, #24]
 800c9ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800c9ec:	68fb      	ldr	r3, [r7, #12]
 800c9ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c9f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800c9f4:	68fb      	ldr	r3, [r7, #12]
 800c9f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c9fa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c9fc:	683b      	ldr	r3, [r7, #0]
 800c9fe:	681b      	ldr	r3, [r3, #0]
 800ca00:	021b      	lsls	r3, r3, #8
 800ca02:	68fa      	ldr	r2, [r7, #12]
 800ca04:	4313      	orrs	r3, r2
 800ca06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800ca08:	697b      	ldr	r3, [r7, #20]
 800ca0a:	f023 0320 	bic.w	r3, r3, #32
 800ca0e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800ca10:	683b      	ldr	r3, [r7, #0]
 800ca12:	689b      	ldr	r3, [r3, #8]
 800ca14:	011b      	lsls	r3, r3, #4
 800ca16:	697a      	ldr	r2, [r7, #20]
 800ca18:	4313      	orrs	r3, r2
 800ca1a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800ca1c:	687b      	ldr	r3, [r7, #4]
 800ca1e:	4a22      	ldr	r2, [pc, #136]	; (800caa8 <TIM_OC2_SetConfig+0xe4>)
 800ca20:	4293      	cmp	r3, r2
 800ca22:	d003      	beq.n	800ca2c <TIM_OC2_SetConfig+0x68>
 800ca24:	687b      	ldr	r3, [r7, #4]
 800ca26:	4a21      	ldr	r2, [pc, #132]	; (800caac <TIM_OC2_SetConfig+0xe8>)
 800ca28:	4293      	cmp	r3, r2
 800ca2a:	d10d      	bne.n	800ca48 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800ca2c:	697b      	ldr	r3, [r7, #20]
 800ca2e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ca32:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800ca34:	683b      	ldr	r3, [r7, #0]
 800ca36:	68db      	ldr	r3, [r3, #12]
 800ca38:	011b      	lsls	r3, r3, #4
 800ca3a:	697a      	ldr	r2, [r7, #20]
 800ca3c:	4313      	orrs	r3, r2
 800ca3e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800ca40:	697b      	ldr	r3, [r7, #20]
 800ca42:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ca46:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	4a17      	ldr	r2, [pc, #92]	; (800caa8 <TIM_OC2_SetConfig+0xe4>)
 800ca4c:	4293      	cmp	r3, r2
 800ca4e:	d003      	beq.n	800ca58 <TIM_OC2_SetConfig+0x94>
 800ca50:	687b      	ldr	r3, [r7, #4]
 800ca52:	4a16      	ldr	r2, [pc, #88]	; (800caac <TIM_OC2_SetConfig+0xe8>)
 800ca54:	4293      	cmp	r3, r2
 800ca56:	d113      	bne.n	800ca80 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800ca58:	693b      	ldr	r3, [r7, #16]
 800ca5a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800ca5e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800ca60:	693b      	ldr	r3, [r7, #16]
 800ca62:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800ca66:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800ca68:	683b      	ldr	r3, [r7, #0]
 800ca6a:	695b      	ldr	r3, [r3, #20]
 800ca6c:	009b      	lsls	r3, r3, #2
 800ca6e:	693a      	ldr	r2, [r7, #16]
 800ca70:	4313      	orrs	r3, r2
 800ca72:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800ca74:	683b      	ldr	r3, [r7, #0]
 800ca76:	699b      	ldr	r3, [r3, #24]
 800ca78:	009b      	lsls	r3, r3, #2
 800ca7a:	693a      	ldr	r2, [r7, #16]
 800ca7c:	4313      	orrs	r3, r2
 800ca7e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ca80:	687b      	ldr	r3, [r7, #4]
 800ca82:	693a      	ldr	r2, [r7, #16]
 800ca84:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ca86:	687b      	ldr	r3, [r7, #4]
 800ca88:	68fa      	ldr	r2, [r7, #12]
 800ca8a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800ca8c:	683b      	ldr	r3, [r7, #0]
 800ca8e:	685a      	ldr	r2, [r3, #4]
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ca94:	687b      	ldr	r3, [r7, #4]
 800ca96:	697a      	ldr	r2, [r7, #20]
 800ca98:	621a      	str	r2, [r3, #32]
}
 800ca9a:	bf00      	nop
 800ca9c:	371c      	adds	r7, #28
 800ca9e:	46bd      	mov	sp, r7
 800caa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caa4:	4770      	bx	lr
 800caa6:	bf00      	nop
 800caa8:	40010000 	.word	0x40010000
 800caac:	40010400 	.word	0x40010400

0800cab0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800cab0:	b480      	push	{r7}
 800cab2:	b087      	sub	sp, #28
 800cab4:	af00      	add	r7, sp, #0
 800cab6:	6078      	str	r0, [r7, #4]
 800cab8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800caba:	687b      	ldr	r3, [r7, #4]
 800cabc:	6a1b      	ldr	r3, [r3, #32]
 800cabe:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800cac2:	687b      	ldr	r3, [r7, #4]
 800cac4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cac6:	687b      	ldr	r3, [r7, #4]
 800cac8:	6a1b      	ldr	r3, [r3, #32]
 800caca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	685b      	ldr	r3, [r3, #4]
 800cad0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800cad2:	687b      	ldr	r3, [r7, #4]
 800cad4:	69db      	ldr	r3, [r3, #28]
 800cad6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800cad8:	68fb      	ldr	r3, [r7, #12]
 800cada:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cade:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800cae0:	68fb      	ldr	r3, [r7, #12]
 800cae2:	f023 0303 	bic.w	r3, r3, #3
 800cae6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800cae8:	683b      	ldr	r3, [r7, #0]
 800caea:	681b      	ldr	r3, [r3, #0]
 800caec:	68fa      	ldr	r2, [r7, #12]
 800caee:	4313      	orrs	r3, r2
 800caf0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800caf2:	697b      	ldr	r3, [r7, #20]
 800caf4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800caf8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800cafa:	683b      	ldr	r3, [r7, #0]
 800cafc:	689b      	ldr	r3, [r3, #8]
 800cafe:	021b      	lsls	r3, r3, #8
 800cb00:	697a      	ldr	r2, [r7, #20]
 800cb02:	4313      	orrs	r3, r2
 800cb04:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800cb06:	687b      	ldr	r3, [r7, #4]
 800cb08:	4a21      	ldr	r2, [pc, #132]	; (800cb90 <TIM_OC3_SetConfig+0xe0>)
 800cb0a:	4293      	cmp	r3, r2
 800cb0c:	d003      	beq.n	800cb16 <TIM_OC3_SetConfig+0x66>
 800cb0e:	687b      	ldr	r3, [r7, #4]
 800cb10:	4a20      	ldr	r2, [pc, #128]	; (800cb94 <TIM_OC3_SetConfig+0xe4>)
 800cb12:	4293      	cmp	r3, r2
 800cb14:	d10d      	bne.n	800cb32 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800cb16:	697b      	ldr	r3, [r7, #20]
 800cb18:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800cb1c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800cb1e:	683b      	ldr	r3, [r7, #0]
 800cb20:	68db      	ldr	r3, [r3, #12]
 800cb22:	021b      	lsls	r3, r3, #8
 800cb24:	697a      	ldr	r2, [r7, #20]
 800cb26:	4313      	orrs	r3, r2
 800cb28:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800cb2a:	697b      	ldr	r3, [r7, #20]
 800cb2c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800cb30:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cb32:	687b      	ldr	r3, [r7, #4]
 800cb34:	4a16      	ldr	r2, [pc, #88]	; (800cb90 <TIM_OC3_SetConfig+0xe0>)
 800cb36:	4293      	cmp	r3, r2
 800cb38:	d003      	beq.n	800cb42 <TIM_OC3_SetConfig+0x92>
 800cb3a:	687b      	ldr	r3, [r7, #4]
 800cb3c:	4a15      	ldr	r2, [pc, #84]	; (800cb94 <TIM_OC3_SetConfig+0xe4>)
 800cb3e:	4293      	cmp	r3, r2
 800cb40:	d113      	bne.n	800cb6a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800cb42:	693b      	ldr	r3, [r7, #16]
 800cb44:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800cb48:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800cb4a:	693b      	ldr	r3, [r7, #16]
 800cb4c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800cb50:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800cb52:	683b      	ldr	r3, [r7, #0]
 800cb54:	695b      	ldr	r3, [r3, #20]
 800cb56:	011b      	lsls	r3, r3, #4
 800cb58:	693a      	ldr	r2, [r7, #16]
 800cb5a:	4313      	orrs	r3, r2
 800cb5c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800cb5e:	683b      	ldr	r3, [r7, #0]
 800cb60:	699b      	ldr	r3, [r3, #24]
 800cb62:	011b      	lsls	r3, r3, #4
 800cb64:	693a      	ldr	r2, [r7, #16]
 800cb66:	4313      	orrs	r3, r2
 800cb68:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cb6a:	687b      	ldr	r3, [r7, #4]
 800cb6c:	693a      	ldr	r2, [r7, #16]
 800cb6e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800cb70:	687b      	ldr	r3, [r7, #4]
 800cb72:	68fa      	ldr	r2, [r7, #12]
 800cb74:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800cb76:	683b      	ldr	r3, [r7, #0]
 800cb78:	685a      	ldr	r2, [r3, #4]
 800cb7a:	687b      	ldr	r3, [r7, #4]
 800cb7c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cb7e:	687b      	ldr	r3, [r7, #4]
 800cb80:	697a      	ldr	r2, [r7, #20]
 800cb82:	621a      	str	r2, [r3, #32]
}
 800cb84:	bf00      	nop
 800cb86:	371c      	adds	r7, #28
 800cb88:	46bd      	mov	sp, r7
 800cb8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb8e:	4770      	bx	lr
 800cb90:	40010000 	.word	0x40010000
 800cb94:	40010400 	.word	0x40010400

0800cb98 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800cb98:	b480      	push	{r7}
 800cb9a:	b087      	sub	sp, #28
 800cb9c:	af00      	add	r7, sp, #0
 800cb9e:	6078      	str	r0, [r7, #4]
 800cba0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800cba2:	687b      	ldr	r3, [r7, #4]
 800cba4:	6a1b      	ldr	r3, [r3, #32]
 800cba6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800cbaa:	687b      	ldr	r3, [r7, #4]
 800cbac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cbae:	687b      	ldr	r3, [r7, #4]
 800cbb0:	6a1b      	ldr	r3, [r3, #32]
 800cbb2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cbb4:	687b      	ldr	r3, [r7, #4]
 800cbb6:	685b      	ldr	r3, [r3, #4]
 800cbb8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800cbba:	687b      	ldr	r3, [r7, #4]
 800cbbc:	69db      	ldr	r3, [r3, #28]
 800cbbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800cbc0:	68fb      	ldr	r3, [r7, #12]
 800cbc2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800cbc6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800cbc8:	68fb      	ldr	r3, [r7, #12]
 800cbca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800cbce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800cbd0:	683b      	ldr	r3, [r7, #0]
 800cbd2:	681b      	ldr	r3, [r3, #0]
 800cbd4:	021b      	lsls	r3, r3, #8
 800cbd6:	68fa      	ldr	r2, [r7, #12]
 800cbd8:	4313      	orrs	r3, r2
 800cbda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800cbdc:	693b      	ldr	r3, [r7, #16]
 800cbde:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800cbe2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800cbe4:	683b      	ldr	r3, [r7, #0]
 800cbe6:	689b      	ldr	r3, [r3, #8]
 800cbe8:	031b      	lsls	r3, r3, #12
 800cbea:	693a      	ldr	r2, [r7, #16]
 800cbec:	4313      	orrs	r3, r2
 800cbee:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cbf0:	687b      	ldr	r3, [r7, #4]
 800cbf2:	4a12      	ldr	r2, [pc, #72]	; (800cc3c <TIM_OC4_SetConfig+0xa4>)
 800cbf4:	4293      	cmp	r3, r2
 800cbf6:	d003      	beq.n	800cc00 <TIM_OC4_SetConfig+0x68>
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	4a11      	ldr	r2, [pc, #68]	; (800cc40 <TIM_OC4_SetConfig+0xa8>)
 800cbfc:	4293      	cmp	r3, r2
 800cbfe:	d109      	bne.n	800cc14 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800cc00:	697b      	ldr	r3, [r7, #20]
 800cc02:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800cc06:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800cc08:	683b      	ldr	r3, [r7, #0]
 800cc0a:	695b      	ldr	r3, [r3, #20]
 800cc0c:	019b      	lsls	r3, r3, #6
 800cc0e:	697a      	ldr	r2, [r7, #20]
 800cc10:	4313      	orrs	r3, r2
 800cc12:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cc14:	687b      	ldr	r3, [r7, #4]
 800cc16:	697a      	ldr	r2, [r7, #20]
 800cc18:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800cc1a:	687b      	ldr	r3, [r7, #4]
 800cc1c:	68fa      	ldr	r2, [r7, #12]
 800cc1e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800cc20:	683b      	ldr	r3, [r7, #0]
 800cc22:	685a      	ldr	r2, [r3, #4]
 800cc24:	687b      	ldr	r3, [r7, #4]
 800cc26:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cc28:	687b      	ldr	r3, [r7, #4]
 800cc2a:	693a      	ldr	r2, [r7, #16]
 800cc2c:	621a      	str	r2, [r3, #32]
}
 800cc2e:	bf00      	nop
 800cc30:	371c      	adds	r7, #28
 800cc32:	46bd      	mov	sp, r7
 800cc34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc38:	4770      	bx	lr
 800cc3a:	bf00      	nop
 800cc3c:	40010000 	.word	0x40010000
 800cc40:	40010400 	.word	0x40010400

0800cc44 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800cc44:	b480      	push	{r7}
 800cc46:	b087      	sub	sp, #28
 800cc48:	af00      	add	r7, sp, #0
 800cc4a:	60f8      	str	r0, [r7, #12]
 800cc4c:	60b9      	str	r1, [r7, #8]
 800cc4e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800cc50:	68fb      	ldr	r3, [r7, #12]
 800cc52:	6a1b      	ldr	r3, [r3, #32]
 800cc54:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800cc56:	68fb      	ldr	r3, [r7, #12]
 800cc58:	6a1b      	ldr	r3, [r3, #32]
 800cc5a:	f023 0201 	bic.w	r2, r3, #1
 800cc5e:	68fb      	ldr	r3, [r7, #12]
 800cc60:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800cc62:	68fb      	ldr	r3, [r7, #12]
 800cc64:	699b      	ldr	r3, [r3, #24]
 800cc66:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800cc68:	693b      	ldr	r3, [r7, #16]
 800cc6a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800cc6e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800cc70:	687b      	ldr	r3, [r7, #4]
 800cc72:	011b      	lsls	r3, r3, #4
 800cc74:	693a      	ldr	r2, [r7, #16]
 800cc76:	4313      	orrs	r3, r2
 800cc78:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800cc7a:	697b      	ldr	r3, [r7, #20]
 800cc7c:	f023 030a 	bic.w	r3, r3, #10
 800cc80:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800cc82:	697a      	ldr	r2, [r7, #20]
 800cc84:	68bb      	ldr	r3, [r7, #8]
 800cc86:	4313      	orrs	r3, r2
 800cc88:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800cc8a:	68fb      	ldr	r3, [r7, #12]
 800cc8c:	693a      	ldr	r2, [r7, #16]
 800cc8e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800cc90:	68fb      	ldr	r3, [r7, #12]
 800cc92:	697a      	ldr	r2, [r7, #20]
 800cc94:	621a      	str	r2, [r3, #32]
}
 800cc96:	bf00      	nop
 800cc98:	371c      	adds	r7, #28
 800cc9a:	46bd      	mov	sp, r7
 800cc9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cca0:	4770      	bx	lr

0800cca2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800cca2:	b480      	push	{r7}
 800cca4:	b087      	sub	sp, #28
 800cca6:	af00      	add	r7, sp, #0
 800cca8:	60f8      	str	r0, [r7, #12]
 800ccaa:	60b9      	str	r1, [r7, #8]
 800ccac:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ccae:	68fb      	ldr	r3, [r7, #12]
 800ccb0:	6a1b      	ldr	r3, [r3, #32]
 800ccb2:	f023 0210 	bic.w	r2, r3, #16
 800ccb6:	68fb      	ldr	r3, [r7, #12]
 800ccb8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ccba:	68fb      	ldr	r3, [r7, #12]
 800ccbc:	699b      	ldr	r3, [r3, #24]
 800ccbe:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800ccc0:	68fb      	ldr	r3, [r7, #12]
 800ccc2:	6a1b      	ldr	r3, [r3, #32]
 800ccc4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800ccc6:	697b      	ldr	r3, [r7, #20]
 800ccc8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800cccc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800ccce:	687b      	ldr	r3, [r7, #4]
 800ccd0:	031b      	lsls	r3, r3, #12
 800ccd2:	697a      	ldr	r2, [r7, #20]
 800ccd4:	4313      	orrs	r3, r2
 800ccd6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800ccd8:	693b      	ldr	r3, [r7, #16]
 800ccda:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800ccde:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800cce0:	68bb      	ldr	r3, [r7, #8]
 800cce2:	011b      	lsls	r3, r3, #4
 800cce4:	693a      	ldr	r2, [r7, #16]
 800cce6:	4313      	orrs	r3, r2
 800cce8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800ccea:	68fb      	ldr	r3, [r7, #12]
 800ccec:	697a      	ldr	r2, [r7, #20]
 800ccee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ccf0:	68fb      	ldr	r3, [r7, #12]
 800ccf2:	693a      	ldr	r2, [r7, #16]
 800ccf4:	621a      	str	r2, [r3, #32]
}
 800ccf6:	bf00      	nop
 800ccf8:	371c      	adds	r7, #28
 800ccfa:	46bd      	mov	sp, r7
 800ccfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd00:	4770      	bx	lr

0800cd02 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800cd02:	b480      	push	{r7}
 800cd04:	b085      	sub	sp, #20
 800cd06:	af00      	add	r7, sp, #0
 800cd08:	6078      	str	r0, [r7, #4]
 800cd0a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800cd0c:	687b      	ldr	r3, [r7, #4]
 800cd0e:	689b      	ldr	r3, [r3, #8]
 800cd10:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800cd12:	68fb      	ldr	r3, [r7, #12]
 800cd14:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cd18:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800cd1a:	683a      	ldr	r2, [r7, #0]
 800cd1c:	68fb      	ldr	r3, [r7, #12]
 800cd1e:	4313      	orrs	r3, r2
 800cd20:	f043 0307 	orr.w	r3, r3, #7
 800cd24:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800cd26:	687b      	ldr	r3, [r7, #4]
 800cd28:	68fa      	ldr	r2, [r7, #12]
 800cd2a:	609a      	str	r2, [r3, #8]
}
 800cd2c:	bf00      	nop
 800cd2e:	3714      	adds	r7, #20
 800cd30:	46bd      	mov	sp, r7
 800cd32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd36:	4770      	bx	lr

0800cd38 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800cd38:	b480      	push	{r7}
 800cd3a:	b087      	sub	sp, #28
 800cd3c:	af00      	add	r7, sp, #0
 800cd3e:	60f8      	str	r0, [r7, #12]
 800cd40:	60b9      	str	r1, [r7, #8]
 800cd42:	607a      	str	r2, [r7, #4]
 800cd44:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800cd46:	68fb      	ldr	r3, [r7, #12]
 800cd48:	689b      	ldr	r3, [r3, #8]
 800cd4a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800cd4c:	697b      	ldr	r3, [r7, #20]
 800cd4e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800cd52:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800cd54:	683b      	ldr	r3, [r7, #0]
 800cd56:	021a      	lsls	r2, r3, #8
 800cd58:	687b      	ldr	r3, [r7, #4]
 800cd5a:	431a      	orrs	r2, r3
 800cd5c:	68bb      	ldr	r3, [r7, #8]
 800cd5e:	4313      	orrs	r3, r2
 800cd60:	697a      	ldr	r2, [r7, #20]
 800cd62:	4313      	orrs	r3, r2
 800cd64:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800cd66:	68fb      	ldr	r3, [r7, #12]
 800cd68:	697a      	ldr	r2, [r7, #20]
 800cd6a:	609a      	str	r2, [r3, #8]
}
 800cd6c:	bf00      	nop
 800cd6e:	371c      	adds	r7, #28
 800cd70:	46bd      	mov	sp, r7
 800cd72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd76:	4770      	bx	lr

0800cd78 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800cd78:	b480      	push	{r7}
 800cd7a:	b087      	sub	sp, #28
 800cd7c:	af00      	add	r7, sp, #0
 800cd7e:	60f8      	str	r0, [r7, #12]
 800cd80:	60b9      	str	r1, [r7, #8]
 800cd82:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800cd84:	68bb      	ldr	r3, [r7, #8]
 800cd86:	f003 031f 	and.w	r3, r3, #31
 800cd8a:	2201      	movs	r2, #1
 800cd8c:	fa02 f303 	lsl.w	r3, r2, r3
 800cd90:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800cd92:	68fb      	ldr	r3, [r7, #12]
 800cd94:	6a1a      	ldr	r2, [r3, #32]
 800cd96:	697b      	ldr	r3, [r7, #20]
 800cd98:	43db      	mvns	r3, r3
 800cd9a:	401a      	ands	r2, r3
 800cd9c:	68fb      	ldr	r3, [r7, #12]
 800cd9e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800cda0:	68fb      	ldr	r3, [r7, #12]
 800cda2:	6a1a      	ldr	r2, [r3, #32]
 800cda4:	68bb      	ldr	r3, [r7, #8]
 800cda6:	f003 031f 	and.w	r3, r3, #31
 800cdaa:	6879      	ldr	r1, [r7, #4]
 800cdac:	fa01 f303 	lsl.w	r3, r1, r3
 800cdb0:	431a      	orrs	r2, r3
 800cdb2:	68fb      	ldr	r3, [r7, #12]
 800cdb4:	621a      	str	r2, [r3, #32]
}
 800cdb6:	bf00      	nop
 800cdb8:	371c      	adds	r7, #28
 800cdba:	46bd      	mov	sp, r7
 800cdbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdc0:	4770      	bx	lr
	...

0800cdc4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800cdc4:	b480      	push	{r7}
 800cdc6:	b085      	sub	sp, #20
 800cdc8:	af00      	add	r7, sp, #0
 800cdca:	6078      	str	r0, [r7, #4]
 800cdcc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800cdce:	687b      	ldr	r3, [r7, #4]
 800cdd0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800cdd4:	2b01      	cmp	r3, #1
 800cdd6:	d101      	bne.n	800cddc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800cdd8:	2302      	movs	r3, #2
 800cdda:	e05a      	b.n	800ce92 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800cddc:	687b      	ldr	r3, [r7, #4]
 800cdde:	2201      	movs	r2, #1
 800cde0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cde4:	687b      	ldr	r3, [r7, #4]
 800cde6:	2202      	movs	r2, #2
 800cde8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800cdec:	687b      	ldr	r3, [r7, #4]
 800cdee:	681b      	ldr	r3, [r3, #0]
 800cdf0:	685b      	ldr	r3, [r3, #4]
 800cdf2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800cdf4:	687b      	ldr	r3, [r7, #4]
 800cdf6:	681b      	ldr	r3, [r3, #0]
 800cdf8:	689b      	ldr	r3, [r3, #8]
 800cdfa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800cdfc:	68fb      	ldr	r3, [r7, #12]
 800cdfe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ce02:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800ce04:	683b      	ldr	r3, [r7, #0]
 800ce06:	681b      	ldr	r3, [r3, #0]
 800ce08:	68fa      	ldr	r2, [r7, #12]
 800ce0a:	4313      	orrs	r3, r2
 800ce0c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800ce0e:	687b      	ldr	r3, [r7, #4]
 800ce10:	681b      	ldr	r3, [r3, #0]
 800ce12:	68fa      	ldr	r2, [r7, #12]
 800ce14:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ce16:	687b      	ldr	r3, [r7, #4]
 800ce18:	681b      	ldr	r3, [r3, #0]
 800ce1a:	4a21      	ldr	r2, [pc, #132]	; (800cea0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800ce1c:	4293      	cmp	r3, r2
 800ce1e:	d022      	beq.n	800ce66 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ce20:	687b      	ldr	r3, [r7, #4]
 800ce22:	681b      	ldr	r3, [r3, #0]
 800ce24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ce28:	d01d      	beq.n	800ce66 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ce2a:	687b      	ldr	r3, [r7, #4]
 800ce2c:	681b      	ldr	r3, [r3, #0]
 800ce2e:	4a1d      	ldr	r2, [pc, #116]	; (800cea4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800ce30:	4293      	cmp	r3, r2
 800ce32:	d018      	beq.n	800ce66 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ce34:	687b      	ldr	r3, [r7, #4]
 800ce36:	681b      	ldr	r3, [r3, #0]
 800ce38:	4a1b      	ldr	r2, [pc, #108]	; (800cea8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800ce3a:	4293      	cmp	r3, r2
 800ce3c:	d013      	beq.n	800ce66 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ce3e:	687b      	ldr	r3, [r7, #4]
 800ce40:	681b      	ldr	r3, [r3, #0]
 800ce42:	4a1a      	ldr	r2, [pc, #104]	; (800ceac <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800ce44:	4293      	cmp	r3, r2
 800ce46:	d00e      	beq.n	800ce66 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ce48:	687b      	ldr	r3, [r7, #4]
 800ce4a:	681b      	ldr	r3, [r3, #0]
 800ce4c:	4a18      	ldr	r2, [pc, #96]	; (800ceb0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800ce4e:	4293      	cmp	r3, r2
 800ce50:	d009      	beq.n	800ce66 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ce52:	687b      	ldr	r3, [r7, #4]
 800ce54:	681b      	ldr	r3, [r3, #0]
 800ce56:	4a17      	ldr	r2, [pc, #92]	; (800ceb4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800ce58:	4293      	cmp	r3, r2
 800ce5a:	d004      	beq.n	800ce66 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ce5c:	687b      	ldr	r3, [r7, #4]
 800ce5e:	681b      	ldr	r3, [r3, #0]
 800ce60:	4a15      	ldr	r2, [pc, #84]	; (800ceb8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800ce62:	4293      	cmp	r3, r2
 800ce64:	d10c      	bne.n	800ce80 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800ce66:	68bb      	ldr	r3, [r7, #8]
 800ce68:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ce6c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800ce6e:	683b      	ldr	r3, [r7, #0]
 800ce70:	685b      	ldr	r3, [r3, #4]
 800ce72:	68ba      	ldr	r2, [r7, #8]
 800ce74:	4313      	orrs	r3, r2
 800ce76:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800ce78:	687b      	ldr	r3, [r7, #4]
 800ce7a:	681b      	ldr	r3, [r3, #0]
 800ce7c:	68ba      	ldr	r2, [r7, #8]
 800ce7e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800ce80:	687b      	ldr	r3, [r7, #4]
 800ce82:	2201      	movs	r2, #1
 800ce84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ce88:	687b      	ldr	r3, [r7, #4]
 800ce8a:	2200      	movs	r2, #0
 800ce8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ce90:	2300      	movs	r3, #0
}
 800ce92:	4618      	mov	r0, r3
 800ce94:	3714      	adds	r7, #20
 800ce96:	46bd      	mov	sp, r7
 800ce98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce9c:	4770      	bx	lr
 800ce9e:	bf00      	nop
 800cea0:	40010000 	.word	0x40010000
 800cea4:	40000400 	.word	0x40000400
 800cea8:	40000800 	.word	0x40000800
 800ceac:	40000c00 	.word	0x40000c00
 800ceb0:	40010400 	.word	0x40010400
 800ceb4:	40014000 	.word	0x40014000
 800ceb8:	40001800 	.word	0x40001800

0800cebc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800cebc:	b480      	push	{r7}
 800cebe:	b085      	sub	sp, #20
 800cec0:	af00      	add	r7, sp, #0
 800cec2:	6078      	str	r0, [r7, #4]
 800cec4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800cec6:	2300      	movs	r3, #0
 800cec8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800ceca:	687b      	ldr	r3, [r7, #4]
 800cecc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ced0:	2b01      	cmp	r3, #1
 800ced2:	d101      	bne.n	800ced8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800ced4:	2302      	movs	r3, #2
 800ced6:	e03d      	b.n	800cf54 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800ced8:	687b      	ldr	r3, [r7, #4]
 800ceda:	2201      	movs	r2, #1
 800cedc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800cee0:	68fb      	ldr	r3, [r7, #12]
 800cee2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800cee6:	683b      	ldr	r3, [r7, #0]
 800cee8:	68db      	ldr	r3, [r3, #12]
 800ceea:	4313      	orrs	r3, r2
 800ceec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800ceee:	68fb      	ldr	r3, [r7, #12]
 800cef0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800cef4:	683b      	ldr	r3, [r7, #0]
 800cef6:	689b      	ldr	r3, [r3, #8]
 800cef8:	4313      	orrs	r3, r2
 800cefa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800cefc:	68fb      	ldr	r3, [r7, #12]
 800cefe:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800cf02:	683b      	ldr	r3, [r7, #0]
 800cf04:	685b      	ldr	r3, [r3, #4]
 800cf06:	4313      	orrs	r3, r2
 800cf08:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800cf0a:	68fb      	ldr	r3, [r7, #12]
 800cf0c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800cf10:	683b      	ldr	r3, [r7, #0]
 800cf12:	681b      	ldr	r3, [r3, #0]
 800cf14:	4313      	orrs	r3, r2
 800cf16:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800cf18:	68fb      	ldr	r3, [r7, #12]
 800cf1a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800cf1e:	683b      	ldr	r3, [r7, #0]
 800cf20:	691b      	ldr	r3, [r3, #16]
 800cf22:	4313      	orrs	r3, r2
 800cf24:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800cf26:	68fb      	ldr	r3, [r7, #12]
 800cf28:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800cf2c:	683b      	ldr	r3, [r7, #0]
 800cf2e:	695b      	ldr	r3, [r3, #20]
 800cf30:	4313      	orrs	r3, r2
 800cf32:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800cf34:	68fb      	ldr	r3, [r7, #12]
 800cf36:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800cf3a:	683b      	ldr	r3, [r7, #0]
 800cf3c:	69db      	ldr	r3, [r3, #28]
 800cf3e:	4313      	orrs	r3, r2
 800cf40:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800cf42:	687b      	ldr	r3, [r7, #4]
 800cf44:	681b      	ldr	r3, [r3, #0]
 800cf46:	68fa      	ldr	r2, [r7, #12]
 800cf48:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800cf4a:	687b      	ldr	r3, [r7, #4]
 800cf4c:	2200      	movs	r2, #0
 800cf4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800cf52:	2300      	movs	r3, #0
}
 800cf54:	4618      	mov	r0, r3
 800cf56:	3714      	adds	r7, #20
 800cf58:	46bd      	mov	sp, r7
 800cf5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf5e:	4770      	bx	lr

0800cf60 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800cf60:	b480      	push	{r7}
 800cf62:	b083      	sub	sp, #12
 800cf64:	af00      	add	r7, sp, #0
 800cf66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800cf68:	bf00      	nop
 800cf6a:	370c      	adds	r7, #12
 800cf6c:	46bd      	mov	sp, r7
 800cf6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf72:	4770      	bx	lr

0800cf74 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800cf74:	b480      	push	{r7}
 800cf76:	b083      	sub	sp, #12
 800cf78:	af00      	add	r7, sp, #0
 800cf7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800cf7c:	bf00      	nop
 800cf7e:	370c      	adds	r7, #12
 800cf80:	46bd      	mov	sp, r7
 800cf82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf86:	4770      	bx	lr

0800cf88 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800cf88:	b580      	push	{r7, lr}
 800cf8a:	b082      	sub	sp, #8
 800cf8c:	af00      	add	r7, sp, #0
 800cf8e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800cf90:	687b      	ldr	r3, [r7, #4]
 800cf92:	2b00      	cmp	r3, #0
 800cf94:	d101      	bne.n	800cf9a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800cf96:	2301      	movs	r3, #1
 800cf98:	e03f      	b.n	800d01a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800cf9a:	687b      	ldr	r3, [r7, #4]
 800cf9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800cfa0:	b2db      	uxtb	r3, r3
 800cfa2:	2b00      	cmp	r3, #0
 800cfa4:	d106      	bne.n	800cfb4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800cfa6:	687b      	ldr	r3, [r7, #4]
 800cfa8:	2200      	movs	r2, #0
 800cfaa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800cfae:	6878      	ldr	r0, [r7, #4]
 800cfb0:	f7f6 f930 	bl	8003214 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800cfb4:	687b      	ldr	r3, [r7, #4]
 800cfb6:	2224      	movs	r2, #36	; 0x24
 800cfb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800cfbc:	687b      	ldr	r3, [r7, #4]
 800cfbe:	681b      	ldr	r3, [r3, #0]
 800cfc0:	68da      	ldr	r2, [r3, #12]
 800cfc2:	687b      	ldr	r3, [r7, #4]
 800cfc4:	681b      	ldr	r3, [r3, #0]
 800cfc6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800cfca:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800cfcc:	6878      	ldr	r0, [r7, #4]
 800cfce:	f000 fc7b 	bl	800d8c8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800cfd2:	687b      	ldr	r3, [r7, #4]
 800cfd4:	681b      	ldr	r3, [r3, #0]
 800cfd6:	691a      	ldr	r2, [r3, #16]
 800cfd8:	687b      	ldr	r3, [r7, #4]
 800cfda:	681b      	ldr	r3, [r3, #0]
 800cfdc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800cfe0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800cfe2:	687b      	ldr	r3, [r7, #4]
 800cfe4:	681b      	ldr	r3, [r3, #0]
 800cfe6:	695a      	ldr	r2, [r3, #20]
 800cfe8:	687b      	ldr	r3, [r7, #4]
 800cfea:	681b      	ldr	r3, [r3, #0]
 800cfec:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800cff0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800cff2:	687b      	ldr	r3, [r7, #4]
 800cff4:	681b      	ldr	r3, [r3, #0]
 800cff6:	68da      	ldr	r2, [r3, #12]
 800cff8:	687b      	ldr	r3, [r7, #4]
 800cffa:	681b      	ldr	r3, [r3, #0]
 800cffc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800d000:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d002:	687b      	ldr	r3, [r7, #4]
 800d004:	2200      	movs	r2, #0
 800d006:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800d008:	687b      	ldr	r3, [r7, #4]
 800d00a:	2220      	movs	r2, #32
 800d00c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800d010:	687b      	ldr	r3, [r7, #4]
 800d012:	2220      	movs	r2, #32
 800d014:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800d018:	2300      	movs	r3, #0
}
 800d01a:	4618      	mov	r0, r3
 800d01c:	3708      	adds	r7, #8
 800d01e:	46bd      	mov	sp, r7
 800d020:	bd80      	pop	{r7, pc}
	...

0800d024 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800d024:	b580      	push	{r7, lr}
 800d026:	b0ba      	sub	sp, #232	; 0xe8
 800d028:	af00      	add	r7, sp, #0
 800d02a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800d02c:	687b      	ldr	r3, [r7, #4]
 800d02e:	681b      	ldr	r3, [r3, #0]
 800d030:	681b      	ldr	r3, [r3, #0]
 800d032:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800d036:	687b      	ldr	r3, [r7, #4]
 800d038:	681b      	ldr	r3, [r3, #0]
 800d03a:	68db      	ldr	r3, [r3, #12]
 800d03c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800d040:	687b      	ldr	r3, [r7, #4]
 800d042:	681b      	ldr	r3, [r3, #0]
 800d044:	695b      	ldr	r3, [r3, #20]
 800d046:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800d04a:	2300      	movs	r3, #0
 800d04c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800d050:	2300      	movs	r3, #0
 800d052:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800d056:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d05a:	f003 030f 	and.w	r3, r3, #15
 800d05e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800d062:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800d066:	2b00      	cmp	r3, #0
 800d068:	d10f      	bne.n	800d08a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800d06a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d06e:	f003 0320 	and.w	r3, r3, #32
 800d072:	2b00      	cmp	r3, #0
 800d074:	d009      	beq.n	800d08a <HAL_UART_IRQHandler+0x66>
 800d076:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d07a:	f003 0320 	and.w	r3, r3, #32
 800d07e:	2b00      	cmp	r3, #0
 800d080:	d003      	beq.n	800d08a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800d082:	6878      	ldr	r0, [r7, #4]
 800d084:	f000 fb65 	bl	800d752 <UART_Receive_IT>
      return;
 800d088:	e256      	b.n	800d538 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800d08a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800d08e:	2b00      	cmp	r3, #0
 800d090:	f000 80de 	beq.w	800d250 <HAL_UART_IRQHandler+0x22c>
 800d094:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d098:	f003 0301 	and.w	r3, r3, #1
 800d09c:	2b00      	cmp	r3, #0
 800d09e:	d106      	bne.n	800d0ae <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800d0a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d0a4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800d0a8:	2b00      	cmp	r3, #0
 800d0aa:	f000 80d1 	beq.w	800d250 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800d0ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d0b2:	f003 0301 	and.w	r3, r3, #1
 800d0b6:	2b00      	cmp	r3, #0
 800d0b8:	d00b      	beq.n	800d0d2 <HAL_UART_IRQHandler+0xae>
 800d0ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d0be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d0c2:	2b00      	cmp	r3, #0
 800d0c4:	d005      	beq.n	800d0d2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800d0c6:	687b      	ldr	r3, [r7, #4]
 800d0c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d0ca:	f043 0201 	orr.w	r2, r3, #1
 800d0ce:	687b      	ldr	r3, [r7, #4]
 800d0d0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800d0d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d0d6:	f003 0304 	and.w	r3, r3, #4
 800d0da:	2b00      	cmp	r3, #0
 800d0dc:	d00b      	beq.n	800d0f6 <HAL_UART_IRQHandler+0xd2>
 800d0de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d0e2:	f003 0301 	and.w	r3, r3, #1
 800d0e6:	2b00      	cmp	r3, #0
 800d0e8:	d005      	beq.n	800d0f6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800d0ea:	687b      	ldr	r3, [r7, #4]
 800d0ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d0ee:	f043 0202 	orr.w	r2, r3, #2
 800d0f2:	687b      	ldr	r3, [r7, #4]
 800d0f4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800d0f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d0fa:	f003 0302 	and.w	r3, r3, #2
 800d0fe:	2b00      	cmp	r3, #0
 800d100:	d00b      	beq.n	800d11a <HAL_UART_IRQHandler+0xf6>
 800d102:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d106:	f003 0301 	and.w	r3, r3, #1
 800d10a:	2b00      	cmp	r3, #0
 800d10c:	d005      	beq.n	800d11a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800d10e:	687b      	ldr	r3, [r7, #4]
 800d110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d112:	f043 0204 	orr.w	r2, r3, #4
 800d116:	687b      	ldr	r3, [r7, #4]
 800d118:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800d11a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d11e:	f003 0308 	and.w	r3, r3, #8
 800d122:	2b00      	cmp	r3, #0
 800d124:	d011      	beq.n	800d14a <HAL_UART_IRQHandler+0x126>
 800d126:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d12a:	f003 0320 	and.w	r3, r3, #32
 800d12e:	2b00      	cmp	r3, #0
 800d130:	d105      	bne.n	800d13e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800d132:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d136:	f003 0301 	and.w	r3, r3, #1
 800d13a:	2b00      	cmp	r3, #0
 800d13c:	d005      	beq.n	800d14a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800d13e:	687b      	ldr	r3, [r7, #4]
 800d140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d142:	f043 0208 	orr.w	r2, r3, #8
 800d146:	687b      	ldr	r3, [r7, #4]
 800d148:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800d14a:	687b      	ldr	r3, [r7, #4]
 800d14c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d14e:	2b00      	cmp	r3, #0
 800d150:	f000 81ed 	beq.w	800d52e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800d154:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d158:	f003 0320 	and.w	r3, r3, #32
 800d15c:	2b00      	cmp	r3, #0
 800d15e:	d008      	beq.n	800d172 <HAL_UART_IRQHandler+0x14e>
 800d160:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d164:	f003 0320 	and.w	r3, r3, #32
 800d168:	2b00      	cmp	r3, #0
 800d16a:	d002      	beq.n	800d172 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800d16c:	6878      	ldr	r0, [r7, #4]
 800d16e:	f000 faf0 	bl	800d752 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800d172:	687b      	ldr	r3, [r7, #4]
 800d174:	681b      	ldr	r3, [r3, #0]
 800d176:	695b      	ldr	r3, [r3, #20]
 800d178:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d17c:	2b40      	cmp	r3, #64	; 0x40
 800d17e:	bf0c      	ite	eq
 800d180:	2301      	moveq	r3, #1
 800d182:	2300      	movne	r3, #0
 800d184:	b2db      	uxtb	r3, r3
 800d186:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800d18a:	687b      	ldr	r3, [r7, #4]
 800d18c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d18e:	f003 0308 	and.w	r3, r3, #8
 800d192:	2b00      	cmp	r3, #0
 800d194:	d103      	bne.n	800d19e <HAL_UART_IRQHandler+0x17a>
 800d196:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800d19a:	2b00      	cmp	r3, #0
 800d19c:	d04f      	beq.n	800d23e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800d19e:	6878      	ldr	r0, [r7, #4]
 800d1a0:	f000 f9f8 	bl	800d594 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d1a4:	687b      	ldr	r3, [r7, #4]
 800d1a6:	681b      	ldr	r3, [r3, #0]
 800d1a8:	695b      	ldr	r3, [r3, #20]
 800d1aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d1ae:	2b40      	cmp	r3, #64	; 0x40
 800d1b0:	d141      	bne.n	800d236 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d1b2:	687b      	ldr	r3, [r7, #4]
 800d1b4:	681b      	ldr	r3, [r3, #0]
 800d1b6:	3314      	adds	r3, #20
 800d1b8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d1bc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800d1c0:	e853 3f00 	ldrex	r3, [r3]
 800d1c4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800d1c8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800d1cc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d1d0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800d1d4:	687b      	ldr	r3, [r7, #4]
 800d1d6:	681b      	ldr	r3, [r3, #0]
 800d1d8:	3314      	adds	r3, #20
 800d1da:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800d1de:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800d1e2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d1e6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800d1ea:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800d1ee:	e841 2300 	strex	r3, r2, [r1]
 800d1f2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800d1f6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800d1fa:	2b00      	cmp	r3, #0
 800d1fc:	d1d9      	bne.n	800d1b2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800d1fe:	687b      	ldr	r3, [r7, #4]
 800d200:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d202:	2b00      	cmp	r3, #0
 800d204:	d013      	beq.n	800d22e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800d206:	687b      	ldr	r3, [r7, #4]
 800d208:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d20a:	4a7d      	ldr	r2, [pc, #500]	; (800d400 <HAL_UART_IRQHandler+0x3dc>)
 800d20c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800d20e:	687b      	ldr	r3, [r7, #4]
 800d210:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d212:	4618      	mov	r0, r3
 800d214:	f7fb fd2c 	bl	8008c70 <HAL_DMA_Abort_IT>
 800d218:	4603      	mov	r3, r0
 800d21a:	2b00      	cmp	r3, #0
 800d21c:	d016      	beq.n	800d24c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800d21e:	687b      	ldr	r3, [r7, #4]
 800d220:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d222:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d224:	687a      	ldr	r2, [r7, #4]
 800d226:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800d228:	4610      	mov	r0, r2
 800d22a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d22c:	e00e      	b.n	800d24c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800d22e:	6878      	ldr	r0, [r7, #4]
 800d230:	f000 f99a 	bl	800d568 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d234:	e00a      	b.n	800d24c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800d236:	6878      	ldr	r0, [r7, #4]
 800d238:	f000 f996 	bl	800d568 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d23c:	e006      	b.n	800d24c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800d23e:	6878      	ldr	r0, [r7, #4]
 800d240:	f000 f992 	bl	800d568 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d244:	687b      	ldr	r3, [r7, #4]
 800d246:	2200      	movs	r2, #0
 800d248:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800d24a:	e170      	b.n	800d52e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d24c:	bf00      	nop
    return;
 800d24e:	e16e      	b.n	800d52e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d250:	687b      	ldr	r3, [r7, #4]
 800d252:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d254:	2b01      	cmp	r3, #1
 800d256:	f040 814a 	bne.w	800d4ee <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800d25a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d25e:	f003 0310 	and.w	r3, r3, #16
 800d262:	2b00      	cmp	r3, #0
 800d264:	f000 8143 	beq.w	800d4ee <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800d268:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d26c:	f003 0310 	and.w	r3, r3, #16
 800d270:	2b00      	cmp	r3, #0
 800d272:	f000 813c 	beq.w	800d4ee <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800d276:	2300      	movs	r3, #0
 800d278:	60bb      	str	r3, [r7, #8]
 800d27a:	687b      	ldr	r3, [r7, #4]
 800d27c:	681b      	ldr	r3, [r3, #0]
 800d27e:	681b      	ldr	r3, [r3, #0]
 800d280:	60bb      	str	r3, [r7, #8]
 800d282:	687b      	ldr	r3, [r7, #4]
 800d284:	681b      	ldr	r3, [r3, #0]
 800d286:	685b      	ldr	r3, [r3, #4]
 800d288:	60bb      	str	r3, [r7, #8]
 800d28a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d28c:	687b      	ldr	r3, [r7, #4]
 800d28e:	681b      	ldr	r3, [r3, #0]
 800d290:	695b      	ldr	r3, [r3, #20]
 800d292:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d296:	2b40      	cmp	r3, #64	; 0x40
 800d298:	f040 80b4 	bne.w	800d404 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800d29c:	687b      	ldr	r3, [r7, #4]
 800d29e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d2a0:	681b      	ldr	r3, [r3, #0]
 800d2a2:	685b      	ldr	r3, [r3, #4]
 800d2a4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800d2a8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800d2ac:	2b00      	cmp	r3, #0
 800d2ae:	f000 8140 	beq.w	800d532 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800d2b2:	687b      	ldr	r3, [r7, #4]
 800d2b4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800d2b6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800d2ba:	429a      	cmp	r2, r3
 800d2bc:	f080 8139 	bcs.w	800d532 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800d2c0:	687b      	ldr	r3, [r7, #4]
 800d2c2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800d2c6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800d2c8:	687b      	ldr	r3, [r7, #4]
 800d2ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d2cc:	69db      	ldr	r3, [r3, #28]
 800d2ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d2d2:	f000 8088 	beq.w	800d3e6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d2d6:	687b      	ldr	r3, [r7, #4]
 800d2d8:	681b      	ldr	r3, [r3, #0]
 800d2da:	330c      	adds	r3, #12
 800d2dc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d2e0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800d2e4:	e853 3f00 	ldrex	r3, [r3]
 800d2e8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800d2ec:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800d2f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d2f4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800d2f8:	687b      	ldr	r3, [r7, #4]
 800d2fa:	681b      	ldr	r3, [r3, #0]
 800d2fc:	330c      	adds	r3, #12
 800d2fe:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800d302:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800d306:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d30a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800d30e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800d312:	e841 2300 	strex	r3, r2, [r1]
 800d316:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800d31a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d31e:	2b00      	cmp	r3, #0
 800d320:	d1d9      	bne.n	800d2d6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d322:	687b      	ldr	r3, [r7, #4]
 800d324:	681b      	ldr	r3, [r3, #0]
 800d326:	3314      	adds	r3, #20
 800d328:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d32a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d32c:	e853 3f00 	ldrex	r3, [r3]
 800d330:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800d332:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d334:	f023 0301 	bic.w	r3, r3, #1
 800d338:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800d33c:	687b      	ldr	r3, [r7, #4]
 800d33e:	681b      	ldr	r3, [r3, #0]
 800d340:	3314      	adds	r3, #20
 800d342:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800d346:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800d34a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d34c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800d34e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800d352:	e841 2300 	strex	r3, r2, [r1]
 800d356:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800d358:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d35a:	2b00      	cmp	r3, #0
 800d35c:	d1e1      	bne.n	800d322 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d35e:	687b      	ldr	r3, [r7, #4]
 800d360:	681b      	ldr	r3, [r3, #0]
 800d362:	3314      	adds	r3, #20
 800d364:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d366:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d368:	e853 3f00 	ldrex	r3, [r3]
 800d36c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800d36e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d370:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d374:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800d378:	687b      	ldr	r3, [r7, #4]
 800d37a:	681b      	ldr	r3, [r3, #0]
 800d37c:	3314      	adds	r3, #20
 800d37e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800d382:	66fa      	str	r2, [r7, #108]	; 0x6c
 800d384:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d386:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800d388:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800d38a:	e841 2300 	strex	r3, r2, [r1]
 800d38e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800d390:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d392:	2b00      	cmp	r3, #0
 800d394:	d1e3      	bne.n	800d35e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800d396:	687b      	ldr	r3, [r7, #4]
 800d398:	2220      	movs	r2, #32
 800d39a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d39e:	687b      	ldr	r3, [r7, #4]
 800d3a0:	2200      	movs	r2, #0
 800d3a2:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d3a4:	687b      	ldr	r3, [r7, #4]
 800d3a6:	681b      	ldr	r3, [r3, #0]
 800d3a8:	330c      	adds	r3, #12
 800d3aa:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d3ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d3ae:	e853 3f00 	ldrex	r3, [r3]
 800d3b2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800d3b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d3b6:	f023 0310 	bic.w	r3, r3, #16
 800d3ba:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800d3be:	687b      	ldr	r3, [r7, #4]
 800d3c0:	681b      	ldr	r3, [r3, #0]
 800d3c2:	330c      	adds	r3, #12
 800d3c4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800d3c8:	65ba      	str	r2, [r7, #88]	; 0x58
 800d3ca:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d3cc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800d3ce:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d3d0:	e841 2300 	strex	r3, r2, [r1]
 800d3d4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800d3d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d3d8:	2b00      	cmp	r3, #0
 800d3da:	d1e3      	bne.n	800d3a4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800d3dc:	687b      	ldr	r3, [r7, #4]
 800d3de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d3e0:	4618      	mov	r0, r3
 800d3e2:	f7fb fbd5 	bl	8008b90 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800d3e6:	687b      	ldr	r3, [r7, #4]
 800d3e8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800d3ea:	687b      	ldr	r3, [r7, #4]
 800d3ec:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800d3ee:	b29b      	uxth	r3, r3
 800d3f0:	1ad3      	subs	r3, r2, r3
 800d3f2:	b29b      	uxth	r3, r3
 800d3f4:	4619      	mov	r1, r3
 800d3f6:	6878      	ldr	r0, [r7, #4]
 800d3f8:	f000 f8c0 	bl	800d57c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800d3fc:	e099      	b.n	800d532 <HAL_UART_IRQHandler+0x50e>
 800d3fe:	bf00      	nop
 800d400:	0800d65b 	.word	0x0800d65b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800d404:	687b      	ldr	r3, [r7, #4]
 800d406:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800d408:	687b      	ldr	r3, [r7, #4]
 800d40a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800d40c:	b29b      	uxth	r3, r3
 800d40e:	1ad3      	subs	r3, r2, r3
 800d410:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800d414:	687b      	ldr	r3, [r7, #4]
 800d416:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800d418:	b29b      	uxth	r3, r3
 800d41a:	2b00      	cmp	r3, #0
 800d41c:	f000 808b 	beq.w	800d536 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800d420:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800d424:	2b00      	cmp	r3, #0
 800d426:	f000 8086 	beq.w	800d536 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800d42a:	687b      	ldr	r3, [r7, #4]
 800d42c:	681b      	ldr	r3, [r3, #0]
 800d42e:	330c      	adds	r3, #12
 800d430:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d432:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d434:	e853 3f00 	ldrex	r3, [r3]
 800d438:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800d43a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d43c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800d440:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800d444:	687b      	ldr	r3, [r7, #4]
 800d446:	681b      	ldr	r3, [r3, #0]
 800d448:	330c      	adds	r3, #12
 800d44a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800d44e:	647a      	str	r2, [r7, #68]	; 0x44
 800d450:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d452:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800d454:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d456:	e841 2300 	strex	r3, r2, [r1]
 800d45a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800d45c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d45e:	2b00      	cmp	r3, #0
 800d460:	d1e3      	bne.n	800d42a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d462:	687b      	ldr	r3, [r7, #4]
 800d464:	681b      	ldr	r3, [r3, #0]
 800d466:	3314      	adds	r3, #20
 800d468:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d46a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d46c:	e853 3f00 	ldrex	r3, [r3]
 800d470:	623b      	str	r3, [r7, #32]
   return(result);
 800d472:	6a3b      	ldr	r3, [r7, #32]
 800d474:	f023 0301 	bic.w	r3, r3, #1
 800d478:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800d47c:	687b      	ldr	r3, [r7, #4]
 800d47e:	681b      	ldr	r3, [r3, #0]
 800d480:	3314      	adds	r3, #20
 800d482:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800d486:	633a      	str	r2, [r7, #48]	; 0x30
 800d488:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d48a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d48c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d48e:	e841 2300 	strex	r3, r2, [r1]
 800d492:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800d494:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d496:	2b00      	cmp	r3, #0
 800d498:	d1e3      	bne.n	800d462 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800d49a:	687b      	ldr	r3, [r7, #4]
 800d49c:	2220      	movs	r2, #32
 800d49e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d4a2:	687b      	ldr	r3, [r7, #4]
 800d4a4:	2200      	movs	r2, #0
 800d4a6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d4a8:	687b      	ldr	r3, [r7, #4]
 800d4aa:	681b      	ldr	r3, [r3, #0]
 800d4ac:	330c      	adds	r3, #12
 800d4ae:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d4b0:	693b      	ldr	r3, [r7, #16]
 800d4b2:	e853 3f00 	ldrex	r3, [r3]
 800d4b6:	60fb      	str	r3, [r7, #12]
   return(result);
 800d4b8:	68fb      	ldr	r3, [r7, #12]
 800d4ba:	f023 0310 	bic.w	r3, r3, #16
 800d4be:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800d4c2:	687b      	ldr	r3, [r7, #4]
 800d4c4:	681b      	ldr	r3, [r3, #0]
 800d4c6:	330c      	adds	r3, #12
 800d4c8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800d4cc:	61fa      	str	r2, [r7, #28]
 800d4ce:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d4d0:	69b9      	ldr	r1, [r7, #24]
 800d4d2:	69fa      	ldr	r2, [r7, #28]
 800d4d4:	e841 2300 	strex	r3, r2, [r1]
 800d4d8:	617b      	str	r3, [r7, #20]
   return(result);
 800d4da:	697b      	ldr	r3, [r7, #20]
 800d4dc:	2b00      	cmp	r3, #0
 800d4de:	d1e3      	bne.n	800d4a8 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800d4e0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800d4e4:	4619      	mov	r1, r3
 800d4e6:	6878      	ldr	r0, [r7, #4]
 800d4e8:	f000 f848 	bl	800d57c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800d4ec:	e023      	b.n	800d536 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800d4ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d4f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d4f6:	2b00      	cmp	r3, #0
 800d4f8:	d009      	beq.n	800d50e <HAL_UART_IRQHandler+0x4ea>
 800d4fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d4fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d502:	2b00      	cmp	r3, #0
 800d504:	d003      	beq.n	800d50e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800d506:	6878      	ldr	r0, [r7, #4]
 800d508:	f000 f8bb 	bl	800d682 <UART_Transmit_IT>
    return;
 800d50c:	e014      	b.n	800d538 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800d50e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d512:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d516:	2b00      	cmp	r3, #0
 800d518:	d00e      	beq.n	800d538 <HAL_UART_IRQHandler+0x514>
 800d51a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d51e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d522:	2b00      	cmp	r3, #0
 800d524:	d008      	beq.n	800d538 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800d526:	6878      	ldr	r0, [r7, #4]
 800d528:	f000 f8fb 	bl	800d722 <UART_EndTransmit_IT>
    return;
 800d52c:	e004      	b.n	800d538 <HAL_UART_IRQHandler+0x514>
    return;
 800d52e:	bf00      	nop
 800d530:	e002      	b.n	800d538 <HAL_UART_IRQHandler+0x514>
      return;
 800d532:	bf00      	nop
 800d534:	e000      	b.n	800d538 <HAL_UART_IRQHandler+0x514>
      return;
 800d536:	bf00      	nop
  }
}
 800d538:	37e8      	adds	r7, #232	; 0xe8
 800d53a:	46bd      	mov	sp, r7
 800d53c:	bd80      	pop	{r7, pc}
 800d53e:	bf00      	nop

0800d540 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800d540:	b480      	push	{r7}
 800d542:	b083      	sub	sp, #12
 800d544:	af00      	add	r7, sp, #0
 800d546:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800d548:	bf00      	nop
 800d54a:	370c      	adds	r7, #12
 800d54c:	46bd      	mov	sp, r7
 800d54e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d552:	4770      	bx	lr

0800d554 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800d554:	b480      	push	{r7}
 800d556:	b083      	sub	sp, #12
 800d558:	af00      	add	r7, sp, #0
 800d55a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800d55c:	bf00      	nop
 800d55e:	370c      	adds	r7, #12
 800d560:	46bd      	mov	sp, r7
 800d562:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d566:	4770      	bx	lr

0800d568 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800d568:	b480      	push	{r7}
 800d56a:	b083      	sub	sp, #12
 800d56c:	af00      	add	r7, sp, #0
 800d56e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800d570:	bf00      	nop
 800d572:	370c      	adds	r7, #12
 800d574:	46bd      	mov	sp, r7
 800d576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d57a:	4770      	bx	lr

0800d57c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800d57c:	b480      	push	{r7}
 800d57e:	b083      	sub	sp, #12
 800d580:	af00      	add	r7, sp, #0
 800d582:	6078      	str	r0, [r7, #4]
 800d584:	460b      	mov	r3, r1
 800d586:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800d588:	bf00      	nop
 800d58a:	370c      	adds	r7, #12
 800d58c:	46bd      	mov	sp, r7
 800d58e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d592:	4770      	bx	lr

0800d594 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800d594:	b480      	push	{r7}
 800d596:	b095      	sub	sp, #84	; 0x54
 800d598:	af00      	add	r7, sp, #0
 800d59a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800d59c:	687b      	ldr	r3, [r7, #4]
 800d59e:	681b      	ldr	r3, [r3, #0]
 800d5a0:	330c      	adds	r3, #12
 800d5a2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d5a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d5a6:	e853 3f00 	ldrex	r3, [r3]
 800d5aa:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800d5ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d5ae:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800d5b2:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d5b4:	687b      	ldr	r3, [r7, #4]
 800d5b6:	681b      	ldr	r3, [r3, #0]
 800d5b8:	330c      	adds	r3, #12
 800d5ba:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800d5bc:	643a      	str	r2, [r7, #64]	; 0x40
 800d5be:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d5c0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800d5c2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d5c4:	e841 2300 	strex	r3, r2, [r1]
 800d5c8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800d5ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d5cc:	2b00      	cmp	r3, #0
 800d5ce:	d1e5      	bne.n	800d59c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d5d0:	687b      	ldr	r3, [r7, #4]
 800d5d2:	681b      	ldr	r3, [r3, #0]
 800d5d4:	3314      	adds	r3, #20
 800d5d6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d5d8:	6a3b      	ldr	r3, [r7, #32]
 800d5da:	e853 3f00 	ldrex	r3, [r3]
 800d5de:	61fb      	str	r3, [r7, #28]
   return(result);
 800d5e0:	69fb      	ldr	r3, [r7, #28]
 800d5e2:	f023 0301 	bic.w	r3, r3, #1
 800d5e6:	64bb      	str	r3, [r7, #72]	; 0x48
 800d5e8:	687b      	ldr	r3, [r7, #4]
 800d5ea:	681b      	ldr	r3, [r3, #0]
 800d5ec:	3314      	adds	r3, #20
 800d5ee:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d5f0:	62fa      	str	r2, [r7, #44]	; 0x2c
 800d5f2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d5f4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d5f6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d5f8:	e841 2300 	strex	r3, r2, [r1]
 800d5fc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d5fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d600:	2b00      	cmp	r3, #0
 800d602:	d1e5      	bne.n	800d5d0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d604:	687b      	ldr	r3, [r7, #4]
 800d606:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d608:	2b01      	cmp	r3, #1
 800d60a:	d119      	bne.n	800d640 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d60c:	687b      	ldr	r3, [r7, #4]
 800d60e:	681b      	ldr	r3, [r3, #0]
 800d610:	330c      	adds	r3, #12
 800d612:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d614:	68fb      	ldr	r3, [r7, #12]
 800d616:	e853 3f00 	ldrex	r3, [r3]
 800d61a:	60bb      	str	r3, [r7, #8]
   return(result);
 800d61c:	68bb      	ldr	r3, [r7, #8]
 800d61e:	f023 0310 	bic.w	r3, r3, #16
 800d622:	647b      	str	r3, [r7, #68]	; 0x44
 800d624:	687b      	ldr	r3, [r7, #4]
 800d626:	681b      	ldr	r3, [r3, #0]
 800d628:	330c      	adds	r3, #12
 800d62a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d62c:	61ba      	str	r2, [r7, #24]
 800d62e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d630:	6979      	ldr	r1, [r7, #20]
 800d632:	69ba      	ldr	r2, [r7, #24]
 800d634:	e841 2300 	strex	r3, r2, [r1]
 800d638:	613b      	str	r3, [r7, #16]
   return(result);
 800d63a:	693b      	ldr	r3, [r7, #16]
 800d63c:	2b00      	cmp	r3, #0
 800d63e:	d1e5      	bne.n	800d60c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800d640:	687b      	ldr	r3, [r7, #4]
 800d642:	2220      	movs	r2, #32
 800d644:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d648:	687b      	ldr	r3, [r7, #4]
 800d64a:	2200      	movs	r2, #0
 800d64c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800d64e:	bf00      	nop
 800d650:	3754      	adds	r7, #84	; 0x54
 800d652:	46bd      	mov	sp, r7
 800d654:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d658:	4770      	bx	lr

0800d65a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800d65a:	b580      	push	{r7, lr}
 800d65c:	b084      	sub	sp, #16
 800d65e:	af00      	add	r7, sp, #0
 800d660:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800d662:	687b      	ldr	r3, [r7, #4]
 800d664:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d666:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800d668:	68fb      	ldr	r3, [r7, #12]
 800d66a:	2200      	movs	r2, #0
 800d66c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800d66e:	68fb      	ldr	r3, [r7, #12]
 800d670:	2200      	movs	r2, #0
 800d672:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800d674:	68f8      	ldr	r0, [r7, #12]
 800d676:	f7ff ff77 	bl	800d568 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d67a:	bf00      	nop
 800d67c:	3710      	adds	r7, #16
 800d67e:	46bd      	mov	sp, r7
 800d680:	bd80      	pop	{r7, pc}

0800d682 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800d682:	b480      	push	{r7}
 800d684:	b085      	sub	sp, #20
 800d686:	af00      	add	r7, sp, #0
 800d688:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800d68a:	687b      	ldr	r3, [r7, #4]
 800d68c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d690:	b2db      	uxtb	r3, r3
 800d692:	2b21      	cmp	r3, #33	; 0x21
 800d694:	d13e      	bne.n	800d714 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d696:	687b      	ldr	r3, [r7, #4]
 800d698:	689b      	ldr	r3, [r3, #8]
 800d69a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d69e:	d114      	bne.n	800d6ca <UART_Transmit_IT+0x48>
 800d6a0:	687b      	ldr	r3, [r7, #4]
 800d6a2:	691b      	ldr	r3, [r3, #16]
 800d6a4:	2b00      	cmp	r3, #0
 800d6a6:	d110      	bne.n	800d6ca <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800d6a8:	687b      	ldr	r3, [r7, #4]
 800d6aa:	6a1b      	ldr	r3, [r3, #32]
 800d6ac:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800d6ae:	68fb      	ldr	r3, [r7, #12]
 800d6b0:	881b      	ldrh	r3, [r3, #0]
 800d6b2:	461a      	mov	r2, r3
 800d6b4:	687b      	ldr	r3, [r7, #4]
 800d6b6:	681b      	ldr	r3, [r3, #0]
 800d6b8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800d6bc:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800d6be:	687b      	ldr	r3, [r7, #4]
 800d6c0:	6a1b      	ldr	r3, [r3, #32]
 800d6c2:	1c9a      	adds	r2, r3, #2
 800d6c4:	687b      	ldr	r3, [r7, #4]
 800d6c6:	621a      	str	r2, [r3, #32]
 800d6c8:	e008      	b.n	800d6dc <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800d6ca:	687b      	ldr	r3, [r7, #4]
 800d6cc:	6a1b      	ldr	r3, [r3, #32]
 800d6ce:	1c59      	adds	r1, r3, #1
 800d6d0:	687a      	ldr	r2, [r7, #4]
 800d6d2:	6211      	str	r1, [r2, #32]
 800d6d4:	781a      	ldrb	r2, [r3, #0]
 800d6d6:	687b      	ldr	r3, [r7, #4]
 800d6d8:	681b      	ldr	r3, [r3, #0]
 800d6da:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800d6dc:	687b      	ldr	r3, [r7, #4]
 800d6de:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800d6e0:	b29b      	uxth	r3, r3
 800d6e2:	3b01      	subs	r3, #1
 800d6e4:	b29b      	uxth	r3, r3
 800d6e6:	687a      	ldr	r2, [r7, #4]
 800d6e8:	4619      	mov	r1, r3
 800d6ea:	84d1      	strh	r1, [r2, #38]	; 0x26
 800d6ec:	2b00      	cmp	r3, #0
 800d6ee:	d10f      	bne.n	800d710 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800d6f0:	687b      	ldr	r3, [r7, #4]
 800d6f2:	681b      	ldr	r3, [r3, #0]
 800d6f4:	68da      	ldr	r2, [r3, #12]
 800d6f6:	687b      	ldr	r3, [r7, #4]
 800d6f8:	681b      	ldr	r3, [r3, #0]
 800d6fa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800d6fe:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800d700:	687b      	ldr	r3, [r7, #4]
 800d702:	681b      	ldr	r3, [r3, #0]
 800d704:	68da      	ldr	r2, [r3, #12]
 800d706:	687b      	ldr	r3, [r7, #4]
 800d708:	681b      	ldr	r3, [r3, #0]
 800d70a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d70e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800d710:	2300      	movs	r3, #0
 800d712:	e000      	b.n	800d716 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800d714:	2302      	movs	r3, #2
  }
}
 800d716:	4618      	mov	r0, r3
 800d718:	3714      	adds	r7, #20
 800d71a:	46bd      	mov	sp, r7
 800d71c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d720:	4770      	bx	lr

0800d722 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800d722:	b580      	push	{r7, lr}
 800d724:	b082      	sub	sp, #8
 800d726:	af00      	add	r7, sp, #0
 800d728:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800d72a:	687b      	ldr	r3, [r7, #4]
 800d72c:	681b      	ldr	r3, [r3, #0]
 800d72e:	68da      	ldr	r2, [r3, #12]
 800d730:	687b      	ldr	r3, [r7, #4]
 800d732:	681b      	ldr	r3, [r3, #0]
 800d734:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d738:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800d73a:	687b      	ldr	r3, [r7, #4]
 800d73c:	2220      	movs	r2, #32
 800d73e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800d742:	6878      	ldr	r0, [r7, #4]
 800d744:	f7ff fefc 	bl	800d540 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800d748:	2300      	movs	r3, #0
}
 800d74a:	4618      	mov	r0, r3
 800d74c:	3708      	adds	r7, #8
 800d74e:	46bd      	mov	sp, r7
 800d750:	bd80      	pop	{r7, pc}

0800d752 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800d752:	b580      	push	{r7, lr}
 800d754:	b08c      	sub	sp, #48	; 0x30
 800d756:	af00      	add	r7, sp, #0
 800d758:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800d75a:	687b      	ldr	r3, [r7, #4]
 800d75c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800d760:	b2db      	uxtb	r3, r3
 800d762:	2b22      	cmp	r3, #34	; 0x22
 800d764:	f040 80ab 	bne.w	800d8be <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d768:	687b      	ldr	r3, [r7, #4]
 800d76a:	689b      	ldr	r3, [r3, #8]
 800d76c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d770:	d117      	bne.n	800d7a2 <UART_Receive_IT+0x50>
 800d772:	687b      	ldr	r3, [r7, #4]
 800d774:	691b      	ldr	r3, [r3, #16]
 800d776:	2b00      	cmp	r3, #0
 800d778:	d113      	bne.n	800d7a2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800d77a:	2300      	movs	r3, #0
 800d77c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800d77e:	687b      	ldr	r3, [r7, #4]
 800d780:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d782:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800d784:	687b      	ldr	r3, [r7, #4]
 800d786:	681b      	ldr	r3, [r3, #0]
 800d788:	685b      	ldr	r3, [r3, #4]
 800d78a:	b29b      	uxth	r3, r3
 800d78c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d790:	b29a      	uxth	r2, r3
 800d792:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d794:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800d796:	687b      	ldr	r3, [r7, #4]
 800d798:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d79a:	1c9a      	adds	r2, r3, #2
 800d79c:	687b      	ldr	r3, [r7, #4]
 800d79e:	629a      	str	r2, [r3, #40]	; 0x28
 800d7a0:	e026      	b.n	800d7f0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800d7a2:	687b      	ldr	r3, [r7, #4]
 800d7a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d7a6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800d7a8:	2300      	movs	r3, #0
 800d7aa:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800d7ac:	687b      	ldr	r3, [r7, #4]
 800d7ae:	689b      	ldr	r3, [r3, #8]
 800d7b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d7b4:	d007      	beq.n	800d7c6 <UART_Receive_IT+0x74>
 800d7b6:	687b      	ldr	r3, [r7, #4]
 800d7b8:	689b      	ldr	r3, [r3, #8]
 800d7ba:	2b00      	cmp	r3, #0
 800d7bc:	d10a      	bne.n	800d7d4 <UART_Receive_IT+0x82>
 800d7be:	687b      	ldr	r3, [r7, #4]
 800d7c0:	691b      	ldr	r3, [r3, #16]
 800d7c2:	2b00      	cmp	r3, #0
 800d7c4:	d106      	bne.n	800d7d4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800d7c6:	687b      	ldr	r3, [r7, #4]
 800d7c8:	681b      	ldr	r3, [r3, #0]
 800d7ca:	685b      	ldr	r3, [r3, #4]
 800d7cc:	b2da      	uxtb	r2, r3
 800d7ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d7d0:	701a      	strb	r2, [r3, #0]
 800d7d2:	e008      	b.n	800d7e6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800d7d4:	687b      	ldr	r3, [r7, #4]
 800d7d6:	681b      	ldr	r3, [r3, #0]
 800d7d8:	685b      	ldr	r3, [r3, #4]
 800d7da:	b2db      	uxtb	r3, r3
 800d7dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d7e0:	b2da      	uxtb	r2, r3
 800d7e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d7e4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800d7e6:	687b      	ldr	r3, [r7, #4]
 800d7e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d7ea:	1c5a      	adds	r2, r3, #1
 800d7ec:	687b      	ldr	r3, [r7, #4]
 800d7ee:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800d7f0:	687b      	ldr	r3, [r7, #4]
 800d7f2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800d7f4:	b29b      	uxth	r3, r3
 800d7f6:	3b01      	subs	r3, #1
 800d7f8:	b29b      	uxth	r3, r3
 800d7fa:	687a      	ldr	r2, [r7, #4]
 800d7fc:	4619      	mov	r1, r3
 800d7fe:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800d800:	2b00      	cmp	r3, #0
 800d802:	d15a      	bne.n	800d8ba <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800d804:	687b      	ldr	r3, [r7, #4]
 800d806:	681b      	ldr	r3, [r3, #0]
 800d808:	68da      	ldr	r2, [r3, #12]
 800d80a:	687b      	ldr	r3, [r7, #4]
 800d80c:	681b      	ldr	r3, [r3, #0]
 800d80e:	f022 0220 	bic.w	r2, r2, #32
 800d812:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800d814:	687b      	ldr	r3, [r7, #4]
 800d816:	681b      	ldr	r3, [r3, #0]
 800d818:	68da      	ldr	r2, [r3, #12]
 800d81a:	687b      	ldr	r3, [r7, #4]
 800d81c:	681b      	ldr	r3, [r3, #0]
 800d81e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800d822:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800d824:	687b      	ldr	r3, [r7, #4]
 800d826:	681b      	ldr	r3, [r3, #0]
 800d828:	695a      	ldr	r2, [r3, #20]
 800d82a:	687b      	ldr	r3, [r7, #4]
 800d82c:	681b      	ldr	r3, [r3, #0]
 800d82e:	f022 0201 	bic.w	r2, r2, #1
 800d832:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800d834:	687b      	ldr	r3, [r7, #4]
 800d836:	2220      	movs	r2, #32
 800d838:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d83c:	687b      	ldr	r3, [r7, #4]
 800d83e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d840:	2b01      	cmp	r3, #1
 800d842:	d135      	bne.n	800d8b0 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d844:	687b      	ldr	r3, [r7, #4]
 800d846:	2200      	movs	r2, #0
 800d848:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d84a:	687b      	ldr	r3, [r7, #4]
 800d84c:	681b      	ldr	r3, [r3, #0]
 800d84e:	330c      	adds	r3, #12
 800d850:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d852:	697b      	ldr	r3, [r7, #20]
 800d854:	e853 3f00 	ldrex	r3, [r3]
 800d858:	613b      	str	r3, [r7, #16]
   return(result);
 800d85a:	693b      	ldr	r3, [r7, #16]
 800d85c:	f023 0310 	bic.w	r3, r3, #16
 800d860:	627b      	str	r3, [r7, #36]	; 0x24
 800d862:	687b      	ldr	r3, [r7, #4]
 800d864:	681b      	ldr	r3, [r3, #0]
 800d866:	330c      	adds	r3, #12
 800d868:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d86a:	623a      	str	r2, [r7, #32]
 800d86c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d86e:	69f9      	ldr	r1, [r7, #28]
 800d870:	6a3a      	ldr	r2, [r7, #32]
 800d872:	e841 2300 	strex	r3, r2, [r1]
 800d876:	61bb      	str	r3, [r7, #24]
   return(result);
 800d878:	69bb      	ldr	r3, [r7, #24]
 800d87a:	2b00      	cmp	r3, #0
 800d87c:	d1e5      	bne.n	800d84a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800d87e:	687b      	ldr	r3, [r7, #4]
 800d880:	681b      	ldr	r3, [r3, #0]
 800d882:	681b      	ldr	r3, [r3, #0]
 800d884:	f003 0310 	and.w	r3, r3, #16
 800d888:	2b10      	cmp	r3, #16
 800d88a:	d10a      	bne.n	800d8a2 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800d88c:	2300      	movs	r3, #0
 800d88e:	60fb      	str	r3, [r7, #12]
 800d890:	687b      	ldr	r3, [r7, #4]
 800d892:	681b      	ldr	r3, [r3, #0]
 800d894:	681b      	ldr	r3, [r3, #0]
 800d896:	60fb      	str	r3, [r7, #12]
 800d898:	687b      	ldr	r3, [r7, #4]
 800d89a:	681b      	ldr	r3, [r3, #0]
 800d89c:	685b      	ldr	r3, [r3, #4]
 800d89e:	60fb      	str	r3, [r7, #12]
 800d8a0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800d8a2:	687b      	ldr	r3, [r7, #4]
 800d8a4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800d8a6:	4619      	mov	r1, r3
 800d8a8:	6878      	ldr	r0, [r7, #4]
 800d8aa:	f7ff fe67 	bl	800d57c <HAL_UARTEx_RxEventCallback>
 800d8ae:	e002      	b.n	800d8b6 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800d8b0:	6878      	ldr	r0, [r7, #4]
 800d8b2:	f7ff fe4f 	bl	800d554 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800d8b6:	2300      	movs	r3, #0
 800d8b8:	e002      	b.n	800d8c0 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800d8ba:	2300      	movs	r3, #0
 800d8bc:	e000      	b.n	800d8c0 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800d8be:	2302      	movs	r3, #2
  }
}
 800d8c0:	4618      	mov	r0, r3
 800d8c2:	3730      	adds	r7, #48	; 0x30
 800d8c4:	46bd      	mov	sp, r7
 800d8c6:	bd80      	pop	{r7, pc}

0800d8c8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800d8c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d8cc:	b0c0      	sub	sp, #256	; 0x100
 800d8ce:	af00      	add	r7, sp, #0
 800d8d0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800d8d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d8d8:	681b      	ldr	r3, [r3, #0]
 800d8da:	691b      	ldr	r3, [r3, #16]
 800d8dc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800d8e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d8e4:	68d9      	ldr	r1, [r3, #12]
 800d8e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d8ea:	681a      	ldr	r2, [r3, #0]
 800d8ec:	ea40 0301 	orr.w	r3, r0, r1
 800d8f0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800d8f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d8f6:	689a      	ldr	r2, [r3, #8]
 800d8f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d8fc:	691b      	ldr	r3, [r3, #16]
 800d8fe:	431a      	orrs	r2, r3
 800d900:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d904:	695b      	ldr	r3, [r3, #20]
 800d906:	431a      	orrs	r2, r3
 800d908:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d90c:	69db      	ldr	r3, [r3, #28]
 800d90e:	4313      	orrs	r3, r2
 800d910:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800d914:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d918:	681b      	ldr	r3, [r3, #0]
 800d91a:	68db      	ldr	r3, [r3, #12]
 800d91c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800d920:	f021 010c 	bic.w	r1, r1, #12
 800d924:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d928:	681a      	ldr	r2, [r3, #0]
 800d92a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800d92e:	430b      	orrs	r3, r1
 800d930:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800d932:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d936:	681b      	ldr	r3, [r3, #0]
 800d938:	695b      	ldr	r3, [r3, #20]
 800d93a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800d93e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d942:	6999      	ldr	r1, [r3, #24]
 800d944:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d948:	681a      	ldr	r2, [r3, #0]
 800d94a:	ea40 0301 	orr.w	r3, r0, r1
 800d94e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800d950:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d954:	681a      	ldr	r2, [r3, #0]
 800d956:	4b8f      	ldr	r3, [pc, #572]	; (800db94 <UART_SetConfig+0x2cc>)
 800d958:	429a      	cmp	r2, r3
 800d95a:	d005      	beq.n	800d968 <UART_SetConfig+0xa0>
 800d95c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d960:	681a      	ldr	r2, [r3, #0]
 800d962:	4b8d      	ldr	r3, [pc, #564]	; (800db98 <UART_SetConfig+0x2d0>)
 800d964:	429a      	cmp	r2, r3
 800d966:	d104      	bne.n	800d972 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800d968:	f7fd fbb4 	bl	800b0d4 <HAL_RCC_GetPCLK2Freq>
 800d96c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800d970:	e003      	b.n	800d97a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800d972:	f7fd fb9b 	bl	800b0ac <HAL_RCC_GetPCLK1Freq>
 800d976:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800d97a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d97e:	69db      	ldr	r3, [r3, #28]
 800d980:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d984:	f040 810c 	bne.w	800dba0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800d988:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800d98c:	2200      	movs	r2, #0
 800d98e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800d992:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800d996:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800d99a:	4622      	mov	r2, r4
 800d99c:	462b      	mov	r3, r5
 800d99e:	1891      	adds	r1, r2, r2
 800d9a0:	65b9      	str	r1, [r7, #88]	; 0x58
 800d9a2:	415b      	adcs	r3, r3
 800d9a4:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d9a6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800d9aa:	4621      	mov	r1, r4
 800d9ac:	eb12 0801 	adds.w	r8, r2, r1
 800d9b0:	4629      	mov	r1, r5
 800d9b2:	eb43 0901 	adc.w	r9, r3, r1
 800d9b6:	f04f 0200 	mov.w	r2, #0
 800d9ba:	f04f 0300 	mov.w	r3, #0
 800d9be:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800d9c2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800d9c6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800d9ca:	4690      	mov	r8, r2
 800d9cc:	4699      	mov	r9, r3
 800d9ce:	4623      	mov	r3, r4
 800d9d0:	eb18 0303 	adds.w	r3, r8, r3
 800d9d4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800d9d8:	462b      	mov	r3, r5
 800d9da:	eb49 0303 	adc.w	r3, r9, r3
 800d9de:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800d9e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d9e6:	685b      	ldr	r3, [r3, #4]
 800d9e8:	2200      	movs	r2, #0
 800d9ea:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800d9ee:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800d9f2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800d9f6:	460b      	mov	r3, r1
 800d9f8:	18db      	adds	r3, r3, r3
 800d9fa:	653b      	str	r3, [r7, #80]	; 0x50
 800d9fc:	4613      	mov	r3, r2
 800d9fe:	eb42 0303 	adc.w	r3, r2, r3
 800da02:	657b      	str	r3, [r7, #84]	; 0x54
 800da04:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800da08:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800da0c:	f7f3 f8f4 	bl	8000bf8 <__aeabi_uldivmod>
 800da10:	4602      	mov	r2, r0
 800da12:	460b      	mov	r3, r1
 800da14:	4b61      	ldr	r3, [pc, #388]	; (800db9c <UART_SetConfig+0x2d4>)
 800da16:	fba3 2302 	umull	r2, r3, r3, r2
 800da1a:	095b      	lsrs	r3, r3, #5
 800da1c:	011c      	lsls	r4, r3, #4
 800da1e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800da22:	2200      	movs	r2, #0
 800da24:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800da28:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800da2c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800da30:	4642      	mov	r2, r8
 800da32:	464b      	mov	r3, r9
 800da34:	1891      	adds	r1, r2, r2
 800da36:	64b9      	str	r1, [r7, #72]	; 0x48
 800da38:	415b      	adcs	r3, r3
 800da3a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800da3c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800da40:	4641      	mov	r1, r8
 800da42:	eb12 0a01 	adds.w	sl, r2, r1
 800da46:	4649      	mov	r1, r9
 800da48:	eb43 0b01 	adc.w	fp, r3, r1
 800da4c:	f04f 0200 	mov.w	r2, #0
 800da50:	f04f 0300 	mov.w	r3, #0
 800da54:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800da58:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800da5c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800da60:	4692      	mov	sl, r2
 800da62:	469b      	mov	fp, r3
 800da64:	4643      	mov	r3, r8
 800da66:	eb1a 0303 	adds.w	r3, sl, r3
 800da6a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800da6e:	464b      	mov	r3, r9
 800da70:	eb4b 0303 	adc.w	r3, fp, r3
 800da74:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800da78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800da7c:	685b      	ldr	r3, [r3, #4]
 800da7e:	2200      	movs	r2, #0
 800da80:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800da84:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800da88:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800da8c:	460b      	mov	r3, r1
 800da8e:	18db      	adds	r3, r3, r3
 800da90:	643b      	str	r3, [r7, #64]	; 0x40
 800da92:	4613      	mov	r3, r2
 800da94:	eb42 0303 	adc.w	r3, r2, r3
 800da98:	647b      	str	r3, [r7, #68]	; 0x44
 800da9a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800da9e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800daa2:	f7f3 f8a9 	bl	8000bf8 <__aeabi_uldivmod>
 800daa6:	4602      	mov	r2, r0
 800daa8:	460b      	mov	r3, r1
 800daaa:	4611      	mov	r1, r2
 800daac:	4b3b      	ldr	r3, [pc, #236]	; (800db9c <UART_SetConfig+0x2d4>)
 800daae:	fba3 2301 	umull	r2, r3, r3, r1
 800dab2:	095b      	lsrs	r3, r3, #5
 800dab4:	2264      	movs	r2, #100	; 0x64
 800dab6:	fb02 f303 	mul.w	r3, r2, r3
 800daba:	1acb      	subs	r3, r1, r3
 800dabc:	00db      	lsls	r3, r3, #3
 800dabe:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800dac2:	4b36      	ldr	r3, [pc, #216]	; (800db9c <UART_SetConfig+0x2d4>)
 800dac4:	fba3 2302 	umull	r2, r3, r3, r2
 800dac8:	095b      	lsrs	r3, r3, #5
 800daca:	005b      	lsls	r3, r3, #1
 800dacc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800dad0:	441c      	add	r4, r3
 800dad2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800dad6:	2200      	movs	r2, #0
 800dad8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800dadc:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800dae0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800dae4:	4642      	mov	r2, r8
 800dae6:	464b      	mov	r3, r9
 800dae8:	1891      	adds	r1, r2, r2
 800daea:	63b9      	str	r1, [r7, #56]	; 0x38
 800daec:	415b      	adcs	r3, r3
 800daee:	63fb      	str	r3, [r7, #60]	; 0x3c
 800daf0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800daf4:	4641      	mov	r1, r8
 800daf6:	1851      	adds	r1, r2, r1
 800daf8:	6339      	str	r1, [r7, #48]	; 0x30
 800dafa:	4649      	mov	r1, r9
 800dafc:	414b      	adcs	r3, r1
 800dafe:	637b      	str	r3, [r7, #52]	; 0x34
 800db00:	f04f 0200 	mov.w	r2, #0
 800db04:	f04f 0300 	mov.w	r3, #0
 800db08:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800db0c:	4659      	mov	r1, fp
 800db0e:	00cb      	lsls	r3, r1, #3
 800db10:	4651      	mov	r1, sl
 800db12:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800db16:	4651      	mov	r1, sl
 800db18:	00ca      	lsls	r2, r1, #3
 800db1a:	4610      	mov	r0, r2
 800db1c:	4619      	mov	r1, r3
 800db1e:	4603      	mov	r3, r0
 800db20:	4642      	mov	r2, r8
 800db22:	189b      	adds	r3, r3, r2
 800db24:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800db28:	464b      	mov	r3, r9
 800db2a:	460a      	mov	r2, r1
 800db2c:	eb42 0303 	adc.w	r3, r2, r3
 800db30:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800db34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800db38:	685b      	ldr	r3, [r3, #4]
 800db3a:	2200      	movs	r2, #0
 800db3c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800db40:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800db44:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800db48:	460b      	mov	r3, r1
 800db4a:	18db      	adds	r3, r3, r3
 800db4c:	62bb      	str	r3, [r7, #40]	; 0x28
 800db4e:	4613      	mov	r3, r2
 800db50:	eb42 0303 	adc.w	r3, r2, r3
 800db54:	62fb      	str	r3, [r7, #44]	; 0x2c
 800db56:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800db5a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800db5e:	f7f3 f84b 	bl	8000bf8 <__aeabi_uldivmod>
 800db62:	4602      	mov	r2, r0
 800db64:	460b      	mov	r3, r1
 800db66:	4b0d      	ldr	r3, [pc, #52]	; (800db9c <UART_SetConfig+0x2d4>)
 800db68:	fba3 1302 	umull	r1, r3, r3, r2
 800db6c:	095b      	lsrs	r3, r3, #5
 800db6e:	2164      	movs	r1, #100	; 0x64
 800db70:	fb01 f303 	mul.w	r3, r1, r3
 800db74:	1ad3      	subs	r3, r2, r3
 800db76:	00db      	lsls	r3, r3, #3
 800db78:	3332      	adds	r3, #50	; 0x32
 800db7a:	4a08      	ldr	r2, [pc, #32]	; (800db9c <UART_SetConfig+0x2d4>)
 800db7c:	fba2 2303 	umull	r2, r3, r2, r3
 800db80:	095b      	lsrs	r3, r3, #5
 800db82:	f003 0207 	and.w	r2, r3, #7
 800db86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800db8a:	681b      	ldr	r3, [r3, #0]
 800db8c:	4422      	add	r2, r4
 800db8e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800db90:	e106      	b.n	800dda0 <UART_SetConfig+0x4d8>
 800db92:	bf00      	nop
 800db94:	40011000 	.word	0x40011000
 800db98:	40011400 	.word	0x40011400
 800db9c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800dba0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800dba4:	2200      	movs	r2, #0
 800dba6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800dbaa:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800dbae:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800dbb2:	4642      	mov	r2, r8
 800dbb4:	464b      	mov	r3, r9
 800dbb6:	1891      	adds	r1, r2, r2
 800dbb8:	6239      	str	r1, [r7, #32]
 800dbba:	415b      	adcs	r3, r3
 800dbbc:	627b      	str	r3, [r7, #36]	; 0x24
 800dbbe:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800dbc2:	4641      	mov	r1, r8
 800dbc4:	1854      	adds	r4, r2, r1
 800dbc6:	4649      	mov	r1, r9
 800dbc8:	eb43 0501 	adc.w	r5, r3, r1
 800dbcc:	f04f 0200 	mov.w	r2, #0
 800dbd0:	f04f 0300 	mov.w	r3, #0
 800dbd4:	00eb      	lsls	r3, r5, #3
 800dbd6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800dbda:	00e2      	lsls	r2, r4, #3
 800dbdc:	4614      	mov	r4, r2
 800dbde:	461d      	mov	r5, r3
 800dbe0:	4643      	mov	r3, r8
 800dbe2:	18e3      	adds	r3, r4, r3
 800dbe4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800dbe8:	464b      	mov	r3, r9
 800dbea:	eb45 0303 	adc.w	r3, r5, r3
 800dbee:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800dbf2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800dbf6:	685b      	ldr	r3, [r3, #4]
 800dbf8:	2200      	movs	r2, #0
 800dbfa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800dbfe:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800dc02:	f04f 0200 	mov.w	r2, #0
 800dc06:	f04f 0300 	mov.w	r3, #0
 800dc0a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800dc0e:	4629      	mov	r1, r5
 800dc10:	008b      	lsls	r3, r1, #2
 800dc12:	4621      	mov	r1, r4
 800dc14:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800dc18:	4621      	mov	r1, r4
 800dc1a:	008a      	lsls	r2, r1, #2
 800dc1c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800dc20:	f7f2 ffea 	bl	8000bf8 <__aeabi_uldivmod>
 800dc24:	4602      	mov	r2, r0
 800dc26:	460b      	mov	r3, r1
 800dc28:	4b60      	ldr	r3, [pc, #384]	; (800ddac <UART_SetConfig+0x4e4>)
 800dc2a:	fba3 2302 	umull	r2, r3, r3, r2
 800dc2e:	095b      	lsrs	r3, r3, #5
 800dc30:	011c      	lsls	r4, r3, #4
 800dc32:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800dc36:	2200      	movs	r2, #0
 800dc38:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800dc3c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800dc40:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800dc44:	4642      	mov	r2, r8
 800dc46:	464b      	mov	r3, r9
 800dc48:	1891      	adds	r1, r2, r2
 800dc4a:	61b9      	str	r1, [r7, #24]
 800dc4c:	415b      	adcs	r3, r3
 800dc4e:	61fb      	str	r3, [r7, #28]
 800dc50:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800dc54:	4641      	mov	r1, r8
 800dc56:	1851      	adds	r1, r2, r1
 800dc58:	6139      	str	r1, [r7, #16]
 800dc5a:	4649      	mov	r1, r9
 800dc5c:	414b      	adcs	r3, r1
 800dc5e:	617b      	str	r3, [r7, #20]
 800dc60:	f04f 0200 	mov.w	r2, #0
 800dc64:	f04f 0300 	mov.w	r3, #0
 800dc68:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800dc6c:	4659      	mov	r1, fp
 800dc6e:	00cb      	lsls	r3, r1, #3
 800dc70:	4651      	mov	r1, sl
 800dc72:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800dc76:	4651      	mov	r1, sl
 800dc78:	00ca      	lsls	r2, r1, #3
 800dc7a:	4610      	mov	r0, r2
 800dc7c:	4619      	mov	r1, r3
 800dc7e:	4603      	mov	r3, r0
 800dc80:	4642      	mov	r2, r8
 800dc82:	189b      	adds	r3, r3, r2
 800dc84:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800dc88:	464b      	mov	r3, r9
 800dc8a:	460a      	mov	r2, r1
 800dc8c:	eb42 0303 	adc.w	r3, r2, r3
 800dc90:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800dc94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800dc98:	685b      	ldr	r3, [r3, #4]
 800dc9a:	2200      	movs	r2, #0
 800dc9c:	67bb      	str	r3, [r7, #120]	; 0x78
 800dc9e:	67fa      	str	r2, [r7, #124]	; 0x7c
 800dca0:	f04f 0200 	mov.w	r2, #0
 800dca4:	f04f 0300 	mov.w	r3, #0
 800dca8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800dcac:	4649      	mov	r1, r9
 800dcae:	008b      	lsls	r3, r1, #2
 800dcb0:	4641      	mov	r1, r8
 800dcb2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800dcb6:	4641      	mov	r1, r8
 800dcb8:	008a      	lsls	r2, r1, #2
 800dcba:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800dcbe:	f7f2 ff9b 	bl	8000bf8 <__aeabi_uldivmod>
 800dcc2:	4602      	mov	r2, r0
 800dcc4:	460b      	mov	r3, r1
 800dcc6:	4611      	mov	r1, r2
 800dcc8:	4b38      	ldr	r3, [pc, #224]	; (800ddac <UART_SetConfig+0x4e4>)
 800dcca:	fba3 2301 	umull	r2, r3, r3, r1
 800dcce:	095b      	lsrs	r3, r3, #5
 800dcd0:	2264      	movs	r2, #100	; 0x64
 800dcd2:	fb02 f303 	mul.w	r3, r2, r3
 800dcd6:	1acb      	subs	r3, r1, r3
 800dcd8:	011b      	lsls	r3, r3, #4
 800dcda:	3332      	adds	r3, #50	; 0x32
 800dcdc:	4a33      	ldr	r2, [pc, #204]	; (800ddac <UART_SetConfig+0x4e4>)
 800dcde:	fba2 2303 	umull	r2, r3, r2, r3
 800dce2:	095b      	lsrs	r3, r3, #5
 800dce4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800dce8:	441c      	add	r4, r3
 800dcea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800dcee:	2200      	movs	r2, #0
 800dcf0:	673b      	str	r3, [r7, #112]	; 0x70
 800dcf2:	677a      	str	r2, [r7, #116]	; 0x74
 800dcf4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800dcf8:	4642      	mov	r2, r8
 800dcfa:	464b      	mov	r3, r9
 800dcfc:	1891      	adds	r1, r2, r2
 800dcfe:	60b9      	str	r1, [r7, #8]
 800dd00:	415b      	adcs	r3, r3
 800dd02:	60fb      	str	r3, [r7, #12]
 800dd04:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800dd08:	4641      	mov	r1, r8
 800dd0a:	1851      	adds	r1, r2, r1
 800dd0c:	6039      	str	r1, [r7, #0]
 800dd0e:	4649      	mov	r1, r9
 800dd10:	414b      	adcs	r3, r1
 800dd12:	607b      	str	r3, [r7, #4]
 800dd14:	f04f 0200 	mov.w	r2, #0
 800dd18:	f04f 0300 	mov.w	r3, #0
 800dd1c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800dd20:	4659      	mov	r1, fp
 800dd22:	00cb      	lsls	r3, r1, #3
 800dd24:	4651      	mov	r1, sl
 800dd26:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800dd2a:	4651      	mov	r1, sl
 800dd2c:	00ca      	lsls	r2, r1, #3
 800dd2e:	4610      	mov	r0, r2
 800dd30:	4619      	mov	r1, r3
 800dd32:	4603      	mov	r3, r0
 800dd34:	4642      	mov	r2, r8
 800dd36:	189b      	adds	r3, r3, r2
 800dd38:	66bb      	str	r3, [r7, #104]	; 0x68
 800dd3a:	464b      	mov	r3, r9
 800dd3c:	460a      	mov	r2, r1
 800dd3e:	eb42 0303 	adc.w	r3, r2, r3
 800dd42:	66fb      	str	r3, [r7, #108]	; 0x6c
 800dd44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800dd48:	685b      	ldr	r3, [r3, #4]
 800dd4a:	2200      	movs	r2, #0
 800dd4c:	663b      	str	r3, [r7, #96]	; 0x60
 800dd4e:	667a      	str	r2, [r7, #100]	; 0x64
 800dd50:	f04f 0200 	mov.w	r2, #0
 800dd54:	f04f 0300 	mov.w	r3, #0
 800dd58:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800dd5c:	4649      	mov	r1, r9
 800dd5e:	008b      	lsls	r3, r1, #2
 800dd60:	4641      	mov	r1, r8
 800dd62:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800dd66:	4641      	mov	r1, r8
 800dd68:	008a      	lsls	r2, r1, #2
 800dd6a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800dd6e:	f7f2 ff43 	bl	8000bf8 <__aeabi_uldivmod>
 800dd72:	4602      	mov	r2, r0
 800dd74:	460b      	mov	r3, r1
 800dd76:	4b0d      	ldr	r3, [pc, #52]	; (800ddac <UART_SetConfig+0x4e4>)
 800dd78:	fba3 1302 	umull	r1, r3, r3, r2
 800dd7c:	095b      	lsrs	r3, r3, #5
 800dd7e:	2164      	movs	r1, #100	; 0x64
 800dd80:	fb01 f303 	mul.w	r3, r1, r3
 800dd84:	1ad3      	subs	r3, r2, r3
 800dd86:	011b      	lsls	r3, r3, #4
 800dd88:	3332      	adds	r3, #50	; 0x32
 800dd8a:	4a08      	ldr	r2, [pc, #32]	; (800ddac <UART_SetConfig+0x4e4>)
 800dd8c:	fba2 2303 	umull	r2, r3, r2, r3
 800dd90:	095b      	lsrs	r3, r3, #5
 800dd92:	f003 020f 	and.w	r2, r3, #15
 800dd96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800dd9a:	681b      	ldr	r3, [r3, #0]
 800dd9c:	4422      	add	r2, r4
 800dd9e:	609a      	str	r2, [r3, #8]
}
 800dda0:	bf00      	nop
 800dda2:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800dda6:	46bd      	mov	sp, r7
 800dda8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ddac:	51eb851f 	.word	0x51eb851f

0800ddb0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800ddb0:	b084      	sub	sp, #16
 800ddb2:	b580      	push	{r7, lr}
 800ddb4:	b084      	sub	sp, #16
 800ddb6:	af00      	add	r7, sp, #0
 800ddb8:	6078      	str	r0, [r7, #4]
 800ddba:	f107 001c 	add.w	r0, r7, #28
 800ddbe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800ddc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ddc4:	2b01      	cmp	r3, #1
 800ddc6:	d122      	bne.n	800de0e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800ddc8:	687b      	ldr	r3, [r7, #4]
 800ddca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ddcc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800ddd0:	687b      	ldr	r3, [r7, #4]
 800ddd2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800ddd4:	687b      	ldr	r3, [r7, #4]
 800ddd6:	68db      	ldr	r3, [r3, #12]
 800ddd8:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800dddc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800dde0:	687a      	ldr	r2, [r7, #4]
 800dde2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800dde4:	687b      	ldr	r3, [r7, #4]
 800dde6:	68db      	ldr	r3, [r3, #12]
 800dde8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800ddec:	687b      	ldr	r3, [r7, #4]
 800ddee:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800ddf0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ddf2:	2b01      	cmp	r3, #1
 800ddf4:	d105      	bne.n	800de02 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800ddf6:	687b      	ldr	r3, [r7, #4]
 800ddf8:	68db      	ldr	r3, [r3, #12]
 800ddfa:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800ddfe:	687b      	ldr	r3, [r7, #4]
 800de00:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800de02:	6878      	ldr	r0, [r7, #4]
 800de04:	f001 fb1c 	bl	800f440 <USB_CoreReset>
 800de08:	4603      	mov	r3, r0
 800de0a:	73fb      	strb	r3, [r7, #15]
 800de0c:	e01a      	b.n	800de44 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800de0e:	687b      	ldr	r3, [r7, #4]
 800de10:	68db      	ldr	r3, [r3, #12]
 800de12:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800de16:	687b      	ldr	r3, [r7, #4]
 800de18:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800de1a:	6878      	ldr	r0, [r7, #4]
 800de1c:	f001 fb10 	bl	800f440 <USB_CoreReset>
 800de20:	4603      	mov	r3, r0
 800de22:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800de24:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800de26:	2b00      	cmp	r3, #0
 800de28:	d106      	bne.n	800de38 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800de2a:	687b      	ldr	r3, [r7, #4]
 800de2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800de2e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800de32:	687b      	ldr	r3, [r7, #4]
 800de34:	639a      	str	r2, [r3, #56]	; 0x38
 800de36:	e005      	b.n	800de44 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800de38:	687b      	ldr	r3, [r7, #4]
 800de3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800de3c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800de40:	687b      	ldr	r3, [r7, #4]
 800de42:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800de44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de46:	2b01      	cmp	r3, #1
 800de48:	d10b      	bne.n	800de62 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800de4a:	687b      	ldr	r3, [r7, #4]
 800de4c:	689b      	ldr	r3, [r3, #8]
 800de4e:	f043 0206 	orr.w	r2, r3, #6
 800de52:	687b      	ldr	r3, [r7, #4]
 800de54:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800de56:	687b      	ldr	r3, [r7, #4]
 800de58:	689b      	ldr	r3, [r3, #8]
 800de5a:	f043 0220 	orr.w	r2, r3, #32
 800de5e:	687b      	ldr	r3, [r7, #4]
 800de60:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800de62:	7bfb      	ldrb	r3, [r7, #15]
}
 800de64:	4618      	mov	r0, r3
 800de66:	3710      	adds	r7, #16
 800de68:	46bd      	mov	sp, r7
 800de6a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800de6e:	b004      	add	sp, #16
 800de70:	4770      	bx	lr
	...

0800de74 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800de74:	b480      	push	{r7}
 800de76:	b087      	sub	sp, #28
 800de78:	af00      	add	r7, sp, #0
 800de7a:	60f8      	str	r0, [r7, #12]
 800de7c:	60b9      	str	r1, [r7, #8]
 800de7e:	4613      	mov	r3, r2
 800de80:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800de82:	79fb      	ldrb	r3, [r7, #7]
 800de84:	2b02      	cmp	r3, #2
 800de86:	d165      	bne.n	800df54 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800de88:	68bb      	ldr	r3, [r7, #8]
 800de8a:	4a41      	ldr	r2, [pc, #260]	; (800df90 <USB_SetTurnaroundTime+0x11c>)
 800de8c:	4293      	cmp	r3, r2
 800de8e:	d906      	bls.n	800de9e <USB_SetTurnaroundTime+0x2a>
 800de90:	68bb      	ldr	r3, [r7, #8]
 800de92:	4a40      	ldr	r2, [pc, #256]	; (800df94 <USB_SetTurnaroundTime+0x120>)
 800de94:	4293      	cmp	r3, r2
 800de96:	d202      	bcs.n	800de9e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800de98:	230f      	movs	r3, #15
 800de9a:	617b      	str	r3, [r7, #20]
 800de9c:	e062      	b.n	800df64 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800de9e:	68bb      	ldr	r3, [r7, #8]
 800dea0:	4a3c      	ldr	r2, [pc, #240]	; (800df94 <USB_SetTurnaroundTime+0x120>)
 800dea2:	4293      	cmp	r3, r2
 800dea4:	d306      	bcc.n	800deb4 <USB_SetTurnaroundTime+0x40>
 800dea6:	68bb      	ldr	r3, [r7, #8]
 800dea8:	4a3b      	ldr	r2, [pc, #236]	; (800df98 <USB_SetTurnaroundTime+0x124>)
 800deaa:	4293      	cmp	r3, r2
 800deac:	d202      	bcs.n	800deb4 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800deae:	230e      	movs	r3, #14
 800deb0:	617b      	str	r3, [r7, #20]
 800deb2:	e057      	b.n	800df64 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800deb4:	68bb      	ldr	r3, [r7, #8]
 800deb6:	4a38      	ldr	r2, [pc, #224]	; (800df98 <USB_SetTurnaroundTime+0x124>)
 800deb8:	4293      	cmp	r3, r2
 800deba:	d306      	bcc.n	800deca <USB_SetTurnaroundTime+0x56>
 800debc:	68bb      	ldr	r3, [r7, #8]
 800debe:	4a37      	ldr	r2, [pc, #220]	; (800df9c <USB_SetTurnaroundTime+0x128>)
 800dec0:	4293      	cmp	r3, r2
 800dec2:	d202      	bcs.n	800deca <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800dec4:	230d      	movs	r3, #13
 800dec6:	617b      	str	r3, [r7, #20]
 800dec8:	e04c      	b.n	800df64 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800deca:	68bb      	ldr	r3, [r7, #8]
 800decc:	4a33      	ldr	r2, [pc, #204]	; (800df9c <USB_SetTurnaroundTime+0x128>)
 800dece:	4293      	cmp	r3, r2
 800ded0:	d306      	bcc.n	800dee0 <USB_SetTurnaroundTime+0x6c>
 800ded2:	68bb      	ldr	r3, [r7, #8]
 800ded4:	4a32      	ldr	r2, [pc, #200]	; (800dfa0 <USB_SetTurnaroundTime+0x12c>)
 800ded6:	4293      	cmp	r3, r2
 800ded8:	d802      	bhi.n	800dee0 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800deda:	230c      	movs	r3, #12
 800dedc:	617b      	str	r3, [r7, #20]
 800dede:	e041      	b.n	800df64 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800dee0:	68bb      	ldr	r3, [r7, #8]
 800dee2:	4a2f      	ldr	r2, [pc, #188]	; (800dfa0 <USB_SetTurnaroundTime+0x12c>)
 800dee4:	4293      	cmp	r3, r2
 800dee6:	d906      	bls.n	800def6 <USB_SetTurnaroundTime+0x82>
 800dee8:	68bb      	ldr	r3, [r7, #8]
 800deea:	4a2e      	ldr	r2, [pc, #184]	; (800dfa4 <USB_SetTurnaroundTime+0x130>)
 800deec:	4293      	cmp	r3, r2
 800deee:	d802      	bhi.n	800def6 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800def0:	230b      	movs	r3, #11
 800def2:	617b      	str	r3, [r7, #20]
 800def4:	e036      	b.n	800df64 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800def6:	68bb      	ldr	r3, [r7, #8]
 800def8:	4a2a      	ldr	r2, [pc, #168]	; (800dfa4 <USB_SetTurnaroundTime+0x130>)
 800defa:	4293      	cmp	r3, r2
 800defc:	d906      	bls.n	800df0c <USB_SetTurnaroundTime+0x98>
 800defe:	68bb      	ldr	r3, [r7, #8]
 800df00:	4a29      	ldr	r2, [pc, #164]	; (800dfa8 <USB_SetTurnaroundTime+0x134>)
 800df02:	4293      	cmp	r3, r2
 800df04:	d802      	bhi.n	800df0c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800df06:	230a      	movs	r3, #10
 800df08:	617b      	str	r3, [r7, #20]
 800df0a:	e02b      	b.n	800df64 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800df0c:	68bb      	ldr	r3, [r7, #8]
 800df0e:	4a26      	ldr	r2, [pc, #152]	; (800dfa8 <USB_SetTurnaroundTime+0x134>)
 800df10:	4293      	cmp	r3, r2
 800df12:	d906      	bls.n	800df22 <USB_SetTurnaroundTime+0xae>
 800df14:	68bb      	ldr	r3, [r7, #8]
 800df16:	4a25      	ldr	r2, [pc, #148]	; (800dfac <USB_SetTurnaroundTime+0x138>)
 800df18:	4293      	cmp	r3, r2
 800df1a:	d202      	bcs.n	800df22 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800df1c:	2309      	movs	r3, #9
 800df1e:	617b      	str	r3, [r7, #20]
 800df20:	e020      	b.n	800df64 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800df22:	68bb      	ldr	r3, [r7, #8]
 800df24:	4a21      	ldr	r2, [pc, #132]	; (800dfac <USB_SetTurnaroundTime+0x138>)
 800df26:	4293      	cmp	r3, r2
 800df28:	d306      	bcc.n	800df38 <USB_SetTurnaroundTime+0xc4>
 800df2a:	68bb      	ldr	r3, [r7, #8]
 800df2c:	4a20      	ldr	r2, [pc, #128]	; (800dfb0 <USB_SetTurnaroundTime+0x13c>)
 800df2e:	4293      	cmp	r3, r2
 800df30:	d802      	bhi.n	800df38 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800df32:	2308      	movs	r3, #8
 800df34:	617b      	str	r3, [r7, #20]
 800df36:	e015      	b.n	800df64 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800df38:	68bb      	ldr	r3, [r7, #8]
 800df3a:	4a1d      	ldr	r2, [pc, #116]	; (800dfb0 <USB_SetTurnaroundTime+0x13c>)
 800df3c:	4293      	cmp	r3, r2
 800df3e:	d906      	bls.n	800df4e <USB_SetTurnaroundTime+0xda>
 800df40:	68bb      	ldr	r3, [r7, #8]
 800df42:	4a1c      	ldr	r2, [pc, #112]	; (800dfb4 <USB_SetTurnaroundTime+0x140>)
 800df44:	4293      	cmp	r3, r2
 800df46:	d202      	bcs.n	800df4e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800df48:	2307      	movs	r3, #7
 800df4a:	617b      	str	r3, [r7, #20]
 800df4c:	e00a      	b.n	800df64 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800df4e:	2306      	movs	r3, #6
 800df50:	617b      	str	r3, [r7, #20]
 800df52:	e007      	b.n	800df64 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800df54:	79fb      	ldrb	r3, [r7, #7]
 800df56:	2b00      	cmp	r3, #0
 800df58:	d102      	bne.n	800df60 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800df5a:	2309      	movs	r3, #9
 800df5c:	617b      	str	r3, [r7, #20]
 800df5e:	e001      	b.n	800df64 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800df60:	2309      	movs	r3, #9
 800df62:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800df64:	68fb      	ldr	r3, [r7, #12]
 800df66:	68db      	ldr	r3, [r3, #12]
 800df68:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800df6c:	68fb      	ldr	r3, [r7, #12]
 800df6e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800df70:	68fb      	ldr	r3, [r7, #12]
 800df72:	68da      	ldr	r2, [r3, #12]
 800df74:	697b      	ldr	r3, [r7, #20]
 800df76:	029b      	lsls	r3, r3, #10
 800df78:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800df7c:	431a      	orrs	r2, r3
 800df7e:	68fb      	ldr	r3, [r7, #12]
 800df80:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800df82:	2300      	movs	r3, #0
}
 800df84:	4618      	mov	r0, r3
 800df86:	371c      	adds	r7, #28
 800df88:	46bd      	mov	sp, r7
 800df8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df8e:	4770      	bx	lr
 800df90:	00d8acbf 	.word	0x00d8acbf
 800df94:	00e4e1c0 	.word	0x00e4e1c0
 800df98:	00f42400 	.word	0x00f42400
 800df9c:	01067380 	.word	0x01067380
 800dfa0:	011a499f 	.word	0x011a499f
 800dfa4:	01312cff 	.word	0x01312cff
 800dfa8:	014ca43f 	.word	0x014ca43f
 800dfac:	016e3600 	.word	0x016e3600
 800dfb0:	01a6ab1f 	.word	0x01a6ab1f
 800dfb4:	01e84800 	.word	0x01e84800

0800dfb8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800dfb8:	b480      	push	{r7}
 800dfba:	b083      	sub	sp, #12
 800dfbc:	af00      	add	r7, sp, #0
 800dfbe:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800dfc0:	687b      	ldr	r3, [r7, #4]
 800dfc2:	689b      	ldr	r3, [r3, #8]
 800dfc4:	f043 0201 	orr.w	r2, r3, #1
 800dfc8:	687b      	ldr	r3, [r7, #4]
 800dfca:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800dfcc:	2300      	movs	r3, #0
}
 800dfce:	4618      	mov	r0, r3
 800dfd0:	370c      	adds	r7, #12
 800dfd2:	46bd      	mov	sp, r7
 800dfd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfd8:	4770      	bx	lr

0800dfda <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800dfda:	b480      	push	{r7}
 800dfdc:	b083      	sub	sp, #12
 800dfde:	af00      	add	r7, sp, #0
 800dfe0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800dfe2:	687b      	ldr	r3, [r7, #4]
 800dfe4:	689b      	ldr	r3, [r3, #8]
 800dfe6:	f023 0201 	bic.w	r2, r3, #1
 800dfea:	687b      	ldr	r3, [r7, #4]
 800dfec:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800dfee:	2300      	movs	r3, #0
}
 800dff0:	4618      	mov	r0, r3
 800dff2:	370c      	adds	r7, #12
 800dff4:	46bd      	mov	sp, r7
 800dff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dffa:	4770      	bx	lr

0800dffc <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800dffc:	b580      	push	{r7, lr}
 800dffe:	b084      	sub	sp, #16
 800e000:	af00      	add	r7, sp, #0
 800e002:	6078      	str	r0, [r7, #4]
 800e004:	460b      	mov	r3, r1
 800e006:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800e008:	2300      	movs	r3, #0
 800e00a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800e00c:	687b      	ldr	r3, [r7, #4]
 800e00e:	68db      	ldr	r3, [r3, #12]
 800e010:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800e014:	687b      	ldr	r3, [r7, #4]
 800e016:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800e018:	78fb      	ldrb	r3, [r7, #3]
 800e01a:	2b01      	cmp	r3, #1
 800e01c:	d115      	bne.n	800e04a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800e01e:	687b      	ldr	r3, [r7, #4]
 800e020:	68db      	ldr	r3, [r3, #12]
 800e022:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800e026:	687b      	ldr	r3, [r7, #4]
 800e028:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800e02a:	2001      	movs	r0, #1
 800e02c:	f7f9 fd24 	bl	8007a78 <HAL_Delay>
      ms++;
 800e030:	68fb      	ldr	r3, [r7, #12]
 800e032:	3301      	adds	r3, #1
 800e034:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800e036:	6878      	ldr	r0, [r7, #4]
 800e038:	f001 f972 	bl	800f320 <USB_GetMode>
 800e03c:	4603      	mov	r3, r0
 800e03e:	2b01      	cmp	r3, #1
 800e040:	d01e      	beq.n	800e080 <USB_SetCurrentMode+0x84>
 800e042:	68fb      	ldr	r3, [r7, #12]
 800e044:	2b31      	cmp	r3, #49	; 0x31
 800e046:	d9f0      	bls.n	800e02a <USB_SetCurrentMode+0x2e>
 800e048:	e01a      	b.n	800e080 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800e04a:	78fb      	ldrb	r3, [r7, #3]
 800e04c:	2b00      	cmp	r3, #0
 800e04e:	d115      	bne.n	800e07c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800e050:	687b      	ldr	r3, [r7, #4]
 800e052:	68db      	ldr	r3, [r3, #12]
 800e054:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800e058:	687b      	ldr	r3, [r7, #4]
 800e05a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800e05c:	2001      	movs	r0, #1
 800e05e:	f7f9 fd0b 	bl	8007a78 <HAL_Delay>
      ms++;
 800e062:	68fb      	ldr	r3, [r7, #12]
 800e064:	3301      	adds	r3, #1
 800e066:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800e068:	6878      	ldr	r0, [r7, #4]
 800e06a:	f001 f959 	bl	800f320 <USB_GetMode>
 800e06e:	4603      	mov	r3, r0
 800e070:	2b00      	cmp	r3, #0
 800e072:	d005      	beq.n	800e080 <USB_SetCurrentMode+0x84>
 800e074:	68fb      	ldr	r3, [r7, #12]
 800e076:	2b31      	cmp	r3, #49	; 0x31
 800e078:	d9f0      	bls.n	800e05c <USB_SetCurrentMode+0x60>
 800e07a:	e001      	b.n	800e080 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800e07c:	2301      	movs	r3, #1
 800e07e:	e005      	b.n	800e08c <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800e080:	68fb      	ldr	r3, [r7, #12]
 800e082:	2b32      	cmp	r3, #50	; 0x32
 800e084:	d101      	bne.n	800e08a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800e086:	2301      	movs	r3, #1
 800e088:	e000      	b.n	800e08c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800e08a:	2300      	movs	r3, #0
}
 800e08c:	4618      	mov	r0, r3
 800e08e:	3710      	adds	r7, #16
 800e090:	46bd      	mov	sp, r7
 800e092:	bd80      	pop	{r7, pc}

0800e094 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800e094:	b084      	sub	sp, #16
 800e096:	b580      	push	{r7, lr}
 800e098:	b086      	sub	sp, #24
 800e09a:	af00      	add	r7, sp, #0
 800e09c:	6078      	str	r0, [r7, #4]
 800e09e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800e0a2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800e0a6:	2300      	movs	r3, #0
 800e0a8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e0aa:	687b      	ldr	r3, [r7, #4]
 800e0ac:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800e0ae:	2300      	movs	r3, #0
 800e0b0:	613b      	str	r3, [r7, #16]
 800e0b2:	e009      	b.n	800e0c8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800e0b4:	687a      	ldr	r2, [r7, #4]
 800e0b6:	693b      	ldr	r3, [r7, #16]
 800e0b8:	3340      	adds	r3, #64	; 0x40
 800e0ba:	009b      	lsls	r3, r3, #2
 800e0bc:	4413      	add	r3, r2
 800e0be:	2200      	movs	r2, #0
 800e0c0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800e0c2:	693b      	ldr	r3, [r7, #16]
 800e0c4:	3301      	adds	r3, #1
 800e0c6:	613b      	str	r3, [r7, #16]
 800e0c8:	693b      	ldr	r3, [r7, #16]
 800e0ca:	2b0e      	cmp	r3, #14
 800e0cc:	d9f2      	bls.n	800e0b4 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800e0ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e0d0:	2b00      	cmp	r3, #0
 800e0d2:	d11c      	bne.n	800e10e <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800e0d4:	68fb      	ldr	r3, [r7, #12]
 800e0d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e0da:	685b      	ldr	r3, [r3, #4]
 800e0dc:	68fa      	ldr	r2, [r7, #12]
 800e0de:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800e0e2:	f043 0302 	orr.w	r3, r3, #2
 800e0e6:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800e0e8:	687b      	ldr	r3, [r7, #4]
 800e0ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e0ec:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800e0f0:	687b      	ldr	r3, [r7, #4]
 800e0f2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800e0f4:	687b      	ldr	r3, [r7, #4]
 800e0f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e0f8:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800e0fc:	687b      	ldr	r3, [r7, #4]
 800e0fe:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800e100:	687b      	ldr	r3, [r7, #4]
 800e102:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e104:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800e108:	687b      	ldr	r3, [r7, #4]
 800e10a:	639a      	str	r2, [r3, #56]	; 0x38
 800e10c:	e00b      	b.n	800e126 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800e10e:	687b      	ldr	r3, [r7, #4]
 800e110:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e112:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800e116:	687b      	ldr	r3, [r7, #4]
 800e118:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800e11a:	687b      	ldr	r3, [r7, #4]
 800e11c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e11e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800e122:	687b      	ldr	r3, [r7, #4]
 800e124:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800e126:	68fb      	ldr	r3, [r7, #12]
 800e128:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800e12c:	461a      	mov	r2, r3
 800e12e:	2300      	movs	r3, #0
 800e130:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800e132:	68fb      	ldr	r3, [r7, #12]
 800e134:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e138:	4619      	mov	r1, r3
 800e13a:	68fb      	ldr	r3, [r7, #12]
 800e13c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e140:	461a      	mov	r2, r3
 800e142:	680b      	ldr	r3, [r1, #0]
 800e144:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800e146:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e148:	2b01      	cmp	r3, #1
 800e14a:	d10c      	bne.n	800e166 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800e14c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e14e:	2b00      	cmp	r3, #0
 800e150:	d104      	bne.n	800e15c <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800e152:	2100      	movs	r1, #0
 800e154:	6878      	ldr	r0, [r7, #4]
 800e156:	f000 f945 	bl	800e3e4 <USB_SetDevSpeed>
 800e15a:	e008      	b.n	800e16e <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800e15c:	2101      	movs	r1, #1
 800e15e:	6878      	ldr	r0, [r7, #4]
 800e160:	f000 f940 	bl	800e3e4 <USB_SetDevSpeed>
 800e164:	e003      	b.n	800e16e <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800e166:	2103      	movs	r1, #3
 800e168:	6878      	ldr	r0, [r7, #4]
 800e16a:	f000 f93b 	bl	800e3e4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800e16e:	2110      	movs	r1, #16
 800e170:	6878      	ldr	r0, [r7, #4]
 800e172:	f000 f8f3 	bl	800e35c <USB_FlushTxFifo>
 800e176:	4603      	mov	r3, r0
 800e178:	2b00      	cmp	r3, #0
 800e17a:	d001      	beq.n	800e180 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 800e17c:	2301      	movs	r3, #1
 800e17e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800e180:	6878      	ldr	r0, [r7, #4]
 800e182:	f000 f90f 	bl	800e3a4 <USB_FlushRxFifo>
 800e186:	4603      	mov	r3, r0
 800e188:	2b00      	cmp	r3, #0
 800e18a:	d001      	beq.n	800e190 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 800e18c:	2301      	movs	r3, #1
 800e18e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800e190:	68fb      	ldr	r3, [r7, #12]
 800e192:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e196:	461a      	mov	r2, r3
 800e198:	2300      	movs	r3, #0
 800e19a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800e19c:	68fb      	ldr	r3, [r7, #12]
 800e19e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e1a2:	461a      	mov	r2, r3
 800e1a4:	2300      	movs	r3, #0
 800e1a6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800e1a8:	68fb      	ldr	r3, [r7, #12]
 800e1aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e1ae:	461a      	mov	r2, r3
 800e1b0:	2300      	movs	r3, #0
 800e1b2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800e1b4:	2300      	movs	r3, #0
 800e1b6:	613b      	str	r3, [r7, #16]
 800e1b8:	e043      	b.n	800e242 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800e1ba:	693b      	ldr	r3, [r7, #16]
 800e1bc:	015a      	lsls	r2, r3, #5
 800e1be:	68fb      	ldr	r3, [r7, #12]
 800e1c0:	4413      	add	r3, r2
 800e1c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e1c6:	681b      	ldr	r3, [r3, #0]
 800e1c8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800e1cc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800e1d0:	d118      	bne.n	800e204 <USB_DevInit+0x170>
    {
      if (i == 0U)
 800e1d2:	693b      	ldr	r3, [r7, #16]
 800e1d4:	2b00      	cmp	r3, #0
 800e1d6:	d10a      	bne.n	800e1ee <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800e1d8:	693b      	ldr	r3, [r7, #16]
 800e1da:	015a      	lsls	r2, r3, #5
 800e1dc:	68fb      	ldr	r3, [r7, #12]
 800e1de:	4413      	add	r3, r2
 800e1e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e1e4:	461a      	mov	r2, r3
 800e1e6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800e1ea:	6013      	str	r3, [r2, #0]
 800e1ec:	e013      	b.n	800e216 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800e1ee:	693b      	ldr	r3, [r7, #16]
 800e1f0:	015a      	lsls	r2, r3, #5
 800e1f2:	68fb      	ldr	r3, [r7, #12]
 800e1f4:	4413      	add	r3, r2
 800e1f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e1fa:	461a      	mov	r2, r3
 800e1fc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800e200:	6013      	str	r3, [r2, #0]
 800e202:	e008      	b.n	800e216 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800e204:	693b      	ldr	r3, [r7, #16]
 800e206:	015a      	lsls	r2, r3, #5
 800e208:	68fb      	ldr	r3, [r7, #12]
 800e20a:	4413      	add	r3, r2
 800e20c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e210:	461a      	mov	r2, r3
 800e212:	2300      	movs	r3, #0
 800e214:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800e216:	693b      	ldr	r3, [r7, #16]
 800e218:	015a      	lsls	r2, r3, #5
 800e21a:	68fb      	ldr	r3, [r7, #12]
 800e21c:	4413      	add	r3, r2
 800e21e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e222:	461a      	mov	r2, r3
 800e224:	2300      	movs	r3, #0
 800e226:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800e228:	693b      	ldr	r3, [r7, #16]
 800e22a:	015a      	lsls	r2, r3, #5
 800e22c:	68fb      	ldr	r3, [r7, #12]
 800e22e:	4413      	add	r3, r2
 800e230:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e234:	461a      	mov	r2, r3
 800e236:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800e23a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800e23c:	693b      	ldr	r3, [r7, #16]
 800e23e:	3301      	adds	r3, #1
 800e240:	613b      	str	r3, [r7, #16]
 800e242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e244:	693a      	ldr	r2, [r7, #16]
 800e246:	429a      	cmp	r2, r3
 800e248:	d3b7      	bcc.n	800e1ba <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800e24a:	2300      	movs	r3, #0
 800e24c:	613b      	str	r3, [r7, #16]
 800e24e:	e043      	b.n	800e2d8 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800e250:	693b      	ldr	r3, [r7, #16]
 800e252:	015a      	lsls	r2, r3, #5
 800e254:	68fb      	ldr	r3, [r7, #12]
 800e256:	4413      	add	r3, r2
 800e258:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e25c:	681b      	ldr	r3, [r3, #0]
 800e25e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800e262:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800e266:	d118      	bne.n	800e29a <USB_DevInit+0x206>
    {
      if (i == 0U)
 800e268:	693b      	ldr	r3, [r7, #16]
 800e26a:	2b00      	cmp	r3, #0
 800e26c:	d10a      	bne.n	800e284 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800e26e:	693b      	ldr	r3, [r7, #16]
 800e270:	015a      	lsls	r2, r3, #5
 800e272:	68fb      	ldr	r3, [r7, #12]
 800e274:	4413      	add	r3, r2
 800e276:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e27a:	461a      	mov	r2, r3
 800e27c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800e280:	6013      	str	r3, [r2, #0]
 800e282:	e013      	b.n	800e2ac <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800e284:	693b      	ldr	r3, [r7, #16]
 800e286:	015a      	lsls	r2, r3, #5
 800e288:	68fb      	ldr	r3, [r7, #12]
 800e28a:	4413      	add	r3, r2
 800e28c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e290:	461a      	mov	r2, r3
 800e292:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800e296:	6013      	str	r3, [r2, #0]
 800e298:	e008      	b.n	800e2ac <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800e29a:	693b      	ldr	r3, [r7, #16]
 800e29c:	015a      	lsls	r2, r3, #5
 800e29e:	68fb      	ldr	r3, [r7, #12]
 800e2a0:	4413      	add	r3, r2
 800e2a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e2a6:	461a      	mov	r2, r3
 800e2a8:	2300      	movs	r3, #0
 800e2aa:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800e2ac:	693b      	ldr	r3, [r7, #16]
 800e2ae:	015a      	lsls	r2, r3, #5
 800e2b0:	68fb      	ldr	r3, [r7, #12]
 800e2b2:	4413      	add	r3, r2
 800e2b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e2b8:	461a      	mov	r2, r3
 800e2ba:	2300      	movs	r3, #0
 800e2bc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800e2be:	693b      	ldr	r3, [r7, #16]
 800e2c0:	015a      	lsls	r2, r3, #5
 800e2c2:	68fb      	ldr	r3, [r7, #12]
 800e2c4:	4413      	add	r3, r2
 800e2c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e2ca:	461a      	mov	r2, r3
 800e2cc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800e2d0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800e2d2:	693b      	ldr	r3, [r7, #16]
 800e2d4:	3301      	adds	r3, #1
 800e2d6:	613b      	str	r3, [r7, #16]
 800e2d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2da:	693a      	ldr	r2, [r7, #16]
 800e2dc:	429a      	cmp	r2, r3
 800e2de:	d3b7      	bcc.n	800e250 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800e2e0:	68fb      	ldr	r3, [r7, #12]
 800e2e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e2e6:	691b      	ldr	r3, [r3, #16]
 800e2e8:	68fa      	ldr	r2, [r7, #12]
 800e2ea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800e2ee:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e2f2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800e2f4:	687b      	ldr	r3, [r7, #4]
 800e2f6:	2200      	movs	r2, #0
 800e2f8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800e2fa:	687b      	ldr	r3, [r7, #4]
 800e2fc:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800e300:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800e302:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e304:	2b00      	cmp	r3, #0
 800e306:	d105      	bne.n	800e314 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800e308:	687b      	ldr	r3, [r7, #4]
 800e30a:	699b      	ldr	r3, [r3, #24]
 800e30c:	f043 0210 	orr.w	r2, r3, #16
 800e310:	687b      	ldr	r3, [r7, #4]
 800e312:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800e314:	687b      	ldr	r3, [r7, #4]
 800e316:	699a      	ldr	r2, [r3, #24]
 800e318:	4b0f      	ldr	r3, [pc, #60]	; (800e358 <USB_DevInit+0x2c4>)
 800e31a:	4313      	orrs	r3, r2
 800e31c:	687a      	ldr	r2, [r7, #4]
 800e31e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800e320:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e322:	2b00      	cmp	r3, #0
 800e324:	d005      	beq.n	800e332 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800e326:	687b      	ldr	r3, [r7, #4]
 800e328:	699b      	ldr	r3, [r3, #24]
 800e32a:	f043 0208 	orr.w	r2, r3, #8
 800e32e:	687b      	ldr	r3, [r7, #4]
 800e330:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800e332:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e334:	2b01      	cmp	r3, #1
 800e336:	d107      	bne.n	800e348 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800e338:	687b      	ldr	r3, [r7, #4]
 800e33a:	699b      	ldr	r3, [r3, #24]
 800e33c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800e340:	f043 0304 	orr.w	r3, r3, #4
 800e344:	687a      	ldr	r2, [r7, #4]
 800e346:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800e348:	7dfb      	ldrb	r3, [r7, #23]
}
 800e34a:	4618      	mov	r0, r3
 800e34c:	3718      	adds	r7, #24
 800e34e:	46bd      	mov	sp, r7
 800e350:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800e354:	b004      	add	sp, #16
 800e356:	4770      	bx	lr
 800e358:	803c3800 	.word	0x803c3800

0800e35c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800e35c:	b480      	push	{r7}
 800e35e:	b085      	sub	sp, #20
 800e360:	af00      	add	r7, sp, #0
 800e362:	6078      	str	r0, [r7, #4]
 800e364:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800e366:	2300      	movs	r3, #0
 800e368:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800e36a:	683b      	ldr	r3, [r7, #0]
 800e36c:	019b      	lsls	r3, r3, #6
 800e36e:	f043 0220 	orr.w	r2, r3, #32
 800e372:	687b      	ldr	r3, [r7, #4]
 800e374:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800e376:	68fb      	ldr	r3, [r7, #12]
 800e378:	3301      	adds	r3, #1
 800e37a:	60fb      	str	r3, [r7, #12]
 800e37c:	4a08      	ldr	r2, [pc, #32]	; (800e3a0 <USB_FlushTxFifo+0x44>)
 800e37e:	4293      	cmp	r3, r2
 800e380:	d901      	bls.n	800e386 <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 800e382:	2303      	movs	r3, #3
 800e384:	e006      	b.n	800e394 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800e386:	687b      	ldr	r3, [r7, #4]
 800e388:	691b      	ldr	r3, [r3, #16]
 800e38a:	f003 0320 	and.w	r3, r3, #32
 800e38e:	2b20      	cmp	r3, #32
 800e390:	d0f1      	beq.n	800e376 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800e392:	2300      	movs	r3, #0
}
 800e394:	4618      	mov	r0, r3
 800e396:	3714      	adds	r7, #20
 800e398:	46bd      	mov	sp, r7
 800e39a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e39e:	4770      	bx	lr
 800e3a0:	00030d40 	.word	0x00030d40

0800e3a4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800e3a4:	b480      	push	{r7}
 800e3a6:	b085      	sub	sp, #20
 800e3a8:	af00      	add	r7, sp, #0
 800e3aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800e3ac:	2300      	movs	r3, #0
 800e3ae:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800e3b0:	687b      	ldr	r3, [r7, #4]
 800e3b2:	2210      	movs	r2, #16
 800e3b4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800e3b6:	68fb      	ldr	r3, [r7, #12]
 800e3b8:	3301      	adds	r3, #1
 800e3ba:	60fb      	str	r3, [r7, #12]
 800e3bc:	4a08      	ldr	r2, [pc, #32]	; (800e3e0 <USB_FlushRxFifo+0x3c>)
 800e3be:	4293      	cmp	r3, r2
 800e3c0:	d901      	bls.n	800e3c6 <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 800e3c2:	2303      	movs	r3, #3
 800e3c4:	e006      	b.n	800e3d4 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800e3c6:	687b      	ldr	r3, [r7, #4]
 800e3c8:	691b      	ldr	r3, [r3, #16]
 800e3ca:	f003 0310 	and.w	r3, r3, #16
 800e3ce:	2b10      	cmp	r3, #16
 800e3d0:	d0f1      	beq.n	800e3b6 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800e3d2:	2300      	movs	r3, #0
}
 800e3d4:	4618      	mov	r0, r3
 800e3d6:	3714      	adds	r7, #20
 800e3d8:	46bd      	mov	sp, r7
 800e3da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3de:	4770      	bx	lr
 800e3e0:	00030d40 	.word	0x00030d40

0800e3e4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800e3e4:	b480      	push	{r7}
 800e3e6:	b085      	sub	sp, #20
 800e3e8:	af00      	add	r7, sp, #0
 800e3ea:	6078      	str	r0, [r7, #4]
 800e3ec:	460b      	mov	r3, r1
 800e3ee:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e3f0:	687b      	ldr	r3, [r7, #4]
 800e3f2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800e3f4:	68fb      	ldr	r3, [r7, #12]
 800e3f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e3fa:	681a      	ldr	r2, [r3, #0]
 800e3fc:	78fb      	ldrb	r3, [r7, #3]
 800e3fe:	68f9      	ldr	r1, [r7, #12]
 800e400:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800e404:	4313      	orrs	r3, r2
 800e406:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800e408:	2300      	movs	r3, #0
}
 800e40a:	4618      	mov	r0, r3
 800e40c:	3714      	adds	r7, #20
 800e40e:	46bd      	mov	sp, r7
 800e410:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e414:	4770      	bx	lr

0800e416 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800e416:	b480      	push	{r7}
 800e418:	b087      	sub	sp, #28
 800e41a:	af00      	add	r7, sp, #0
 800e41c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e41e:	687b      	ldr	r3, [r7, #4]
 800e420:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800e422:	693b      	ldr	r3, [r7, #16]
 800e424:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e428:	689b      	ldr	r3, [r3, #8]
 800e42a:	f003 0306 	and.w	r3, r3, #6
 800e42e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800e430:	68fb      	ldr	r3, [r7, #12]
 800e432:	2b00      	cmp	r3, #0
 800e434:	d102      	bne.n	800e43c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800e436:	2300      	movs	r3, #0
 800e438:	75fb      	strb	r3, [r7, #23]
 800e43a:	e00a      	b.n	800e452 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800e43c:	68fb      	ldr	r3, [r7, #12]
 800e43e:	2b02      	cmp	r3, #2
 800e440:	d002      	beq.n	800e448 <USB_GetDevSpeed+0x32>
 800e442:	68fb      	ldr	r3, [r7, #12]
 800e444:	2b06      	cmp	r3, #6
 800e446:	d102      	bne.n	800e44e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800e448:	2302      	movs	r3, #2
 800e44a:	75fb      	strb	r3, [r7, #23]
 800e44c:	e001      	b.n	800e452 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800e44e:	230f      	movs	r3, #15
 800e450:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800e452:	7dfb      	ldrb	r3, [r7, #23]
}
 800e454:	4618      	mov	r0, r3
 800e456:	371c      	adds	r7, #28
 800e458:	46bd      	mov	sp, r7
 800e45a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e45e:	4770      	bx	lr

0800e460 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800e460:	b480      	push	{r7}
 800e462:	b085      	sub	sp, #20
 800e464:	af00      	add	r7, sp, #0
 800e466:	6078      	str	r0, [r7, #4]
 800e468:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e46a:	687b      	ldr	r3, [r7, #4]
 800e46c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800e46e:	683b      	ldr	r3, [r7, #0]
 800e470:	781b      	ldrb	r3, [r3, #0]
 800e472:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800e474:	683b      	ldr	r3, [r7, #0]
 800e476:	785b      	ldrb	r3, [r3, #1]
 800e478:	2b01      	cmp	r3, #1
 800e47a:	d13a      	bne.n	800e4f2 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800e47c:	68fb      	ldr	r3, [r7, #12]
 800e47e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e482:	69da      	ldr	r2, [r3, #28]
 800e484:	683b      	ldr	r3, [r7, #0]
 800e486:	781b      	ldrb	r3, [r3, #0]
 800e488:	f003 030f 	and.w	r3, r3, #15
 800e48c:	2101      	movs	r1, #1
 800e48e:	fa01 f303 	lsl.w	r3, r1, r3
 800e492:	b29b      	uxth	r3, r3
 800e494:	68f9      	ldr	r1, [r7, #12]
 800e496:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800e49a:	4313      	orrs	r3, r2
 800e49c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800e49e:	68bb      	ldr	r3, [r7, #8]
 800e4a0:	015a      	lsls	r2, r3, #5
 800e4a2:	68fb      	ldr	r3, [r7, #12]
 800e4a4:	4413      	add	r3, r2
 800e4a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e4aa:	681b      	ldr	r3, [r3, #0]
 800e4ac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e4b0:	2b00      	cmp	r3, #0
 800e4b2:	d155      	bne.n	800e560 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800e4b4:	68bb      	ldr	r3, [r7, #8]
 800e4b6:	015a      	lsls	r2, r3, #5
 800e4b8:	68fb      	ldr	r3, [r7, #12]
 800e4ba:	4413      	add	r3, r2
 800e4bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e4c0:	681a      	ldr	r2, [r3, #0]
 800e4c2:	683b      	ldr	r3, [r7, #0]
 800e4c4:	689b      	ldr	r3, [r3, #8]
 800e4c6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800e4ca:	683b      	ldr	r3, [r7, #0]
 800e4cc:	78db      	ldrb	r3, [r3, #3]
 800e4ce:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800e4d0:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800e4d2:	68bb      	ldr	r3, [r7, #8]
 800e4d4:	059b      	lsls	r3, r3, #22
 800e4d6:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800e4d8:	4313      	orrs	r3, r2
 800e4da:	68ba      	ldr	r2, [r7, #8]
 800e4dc:	0151      	lsls	r1, r2, #5
 800e4de:	68fa      	ldr	r2, [r7, #12]
 800e4e0:	440a      	add	r2, r1
 800e4e2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e4e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e4ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800e4ee:	6013      	str	r3, [r2, #0]
 800e4f0:	e036      	b.n	800e560 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800e4f2:	68fb      	ldr	r3, [r7, #12]
 800e4f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e4f8:	69da      	ldr	r2, [r3, #28]
 800e4fa:	683b      	ldr	r3, [r7, #0]
 800e4fc:	781b      	ldrb	r3, [r3, #0]
 800e4fe:	f003 030f 	and.w	r3, r3, #15
 800e502:	2101      	movs	r1, #1
 800e504:	fa01 f303 	lsl.w	r3, r1, r3
 800e508:	041b      	lsls	r3, r3, #16
 800e50a:	68f9      	ldr	r1, [r7, #12]
 800e50c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800e510:	4313      	orrs	r3, r2
 800e512:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800e514:	68bb      	ldr	r3, [r7, #8]
 800e516:	015a      	lsls	r2, r3, #5
 800e518:	68fb      	ldr	r3, [r7, #12]
 800e51a:	4413      	add	r3, r2
 800e51c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e520:	681b      	ldr	r3, [r3, #0]
 800e522:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e526:	2b00      	cmp	r3, #0
 800e528:	d11a      	bne.n	800e560 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800e52a:	68bb      	ldr	r3, [r7, #8]
 800e52c:	015a      	lsls	r2, r3, #5
 800e52e:	68fb      	ldr	r3, [r7, #12]
 800e530:	4413      	add	r3, r2
 800e532:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e536:	681a      	ldr	r2, [r3, #0]
 800e538:	683b      	ldr	r3, [r7, #0]
 800e53a:	689b      	ldr	r3, [r3, #8]
 800e53c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800e540:	683b      	ldr	r3, [r7, #0]
 800e542:	78db      	ldrb	r3, [r3, #3]
 800e544:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800e546:	430b      	orrs	r3, r1
 800e548:	4313      	orrs	r3, r2
 800e54a:	68ba      	ldr	r2, [r7, #8]
 800e54c:	0151      	lsls	r1, r2, #5
 800e54e:	68fa      	ldr	r2, [r7, #12]
 800e550:	440a      	add	r2, r1
 800e552:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e556:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e55a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800e55e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800e560:	2300      	movs	r3, #0
}
 800e562:	4618      	mov	r0, r3
 800e564:	3714      	adds	r7, #20
 800e566:	46bd      	mov	sp, r7
 800e568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e56c:	4770      	bx	lr
	...

0800e570 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800e570:	b480      	push	{r7}
 800e572:	b085      	sub	sp, #20
 800e574:	af00      	add	r7, sp, #0
 800e576:	6078      	str	r0, [r7, #4]
 800e578:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e57a:	687b      	ldr	r3, [r7, #4]
 800e57c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800e57e:	683b      	ldr	r3, [r7, #0]
 800e580:	781b      	ldrb	r3, [r3, #0]
 800e582:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800e584:	683b      	ldr	r3, [r7, #0]
 800e586:	785b      	ldrb	r3, [r3, #1]
 800e588:	2b01      	cmp	r3, #1
 800e58a:	d161      	bne.n	800e650 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800e58c:	68bb      	ldr	r3, [r7, #8]
 800e58e:	015a      	lsls	r2, r3, #5
 800e590:	68fb      	ldr	r3, [r7, #12]
 800e592:	4413      	add	r3, r2
 800e594:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e598:	681b      	ldr	r3, [r3, #0]
 800e59a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800e59e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800e5a2:	d11f      	bne.n	800e5e4 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800e5a4:	68bb      	ldr	r3, [r7, #8]
 800e5a6:	015a      	lsls	r2, r3, #5
 800e5a8:	68fb      	ldr	r3, [r7, #12]
 800e5aa:	4413      	add	r3, r2
 800e5ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e5b0:	681b      	ldr	r3, [r3, #0]
 800e5b2:	68ba      	ldr	r2, [r7, #8]
 800e5b4:	0151      	lsls	r1, r2, #5
 800e5b6:	68fa      	ldr	r2, [r7, #12]
 800e5b8:	440a      	add	r2, r1
 800e5ba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e5be:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800e5c2:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800e5c4:	68bb      	ldr	r3, [r7, #8]
 800e5c6:	015a      	lsls	r2, r3, #5
 800e5c8:	68fb      	ldr	r3, [r7, #12]
 800e5ca:	4413      	add	r3, r2
 800e5cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e5d0:	681b      	ldr	r3, [r3, #0]
 800e5d2:	68ba      	ldr	r2, [r7, #8]
 800e5d4:	0151      	lsls	r1, r2, #5
 800e5d6:	68fa      	ldr	r2, [r7, #12]
 800e5d8:	440a      	add	r2, r1
 800e5da:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e5de:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800e5e2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800e5e4:	68fb      	ldr	r3, [r7, #12]
 800e5e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e5ea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e5ec:	683b      	ldr	r3, [r7, #0]
 800e5ee:	781b      	ldrb	r3, [r3, #0]
 800e5f0:	f003 030f 	and.w	r3, r3, #15
 800e5f4:	2101      	movs	r1, #1
 800e5f6:	fa01 f303 	lsl.w	r3, r1, r3
 800e5fa:	b29b      	uxth	r3, r3
 800e5fc:	43db      	mvns	r3, r3
 800e5fe:	68f9      	ldr	r1, [r7, #12]
 800e600:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800e604:	4013      	ands	r3, r2
 800e606:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800e608:	68fb      	ldr	r3, [r7, #12]
 800e60a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e60e:	69da      	ldr	r2, [r3, #28]
 800e610:	683b      	ldr	r3, [r7, #0]
 800e612:	781b      	ldrb	r3, [r3, #0]
 800e614:	f003 030f 	and.w	r3, r3, #15
 800e618:	2101      	movs	r1, #1
 800e61a:	fa01 f303 	lsl.w	r3, r1, r3
 800e61e:	b29b      	uxth	r3, r3
 800e620:	43db      	mvns	r3, r3
 800e622:	68f9      	ldr	r1, [r7, #12]
 800e624:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800e628:	4013      	ands	r3, r2
 800e62a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800e62c:	68bb      	ldr	r3, [r7, #8]
 800e62e:	015a      	lsls	r2, r3, #5
 800e630:	68fb      	ldr	r3, [r7, #12]
 800e632:	4413      	add	r3, r2
 800e634:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e638:	681a      	ldr	r2, [r3, #0]
 800e63a:	68bb      	ldr	r3, [r7, #8]
 800e63c:	0159      	lsls	r1, r3, #5
 800e63e:	68fb      	ldr	r3, [r7, #12]
 800e640:	440b      	add	r3, r1
 800e642:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e646:	4619      	mov	r1, r3
 800e648:	4b35      	ldr	r3, [pc, #212]	; (800e720 <USB_DeactivateEndpoint+0x1b0>)
 800e64a:	4013      	ands	r3, r2
 800e64c:	600b      	str	r3, [r1, #0]
 800e64e:	e060      	b.n	800e712 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800e650:	68bb      	ldr	r3, [r7, #8]
 800e652:	015a      	lsls	r2, r3, #5
 800e654:	68fb      	ldr	r3, [r7, #12]
 800e656:	4413      	add	r3, r2
 800e658:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e65c:	681b      	ldr	r3, [r3, #0]
 800e65e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800e662:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800e666:	d11f      	bne.n	800e6a8 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800e668:	68bb      	ldr	r3, [r7, #8]
 800e66a:	015a      	lsls	r2, r3, #5
 800e66c:	68fb      	ldr	r3, [r7, #12]
 800e66e:	4413      	add	r3, r2
 800e670:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e674:	681b      	ldr	r3, [r3, #0]
 800e676:	68ba      	ldr	r2, [r7, #8]
 800e678:	0151      	lsls	r1, r2, #5
 800e67a:	68fa      	ldr	r2, [r7, #12]
 800e67c:	440a      	add	r2, r1
 800e67e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e682:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800e686:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800e688:	68bb      	ldr	r3, [r7, #8]
 800e68a:	015a      	lsls	r2, r3, #5
 800e68c:	68fb      	ldr	r3, [r7, #12]
 800e68e:	4413      	add	r3, r2
 800e690:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e694:	681b      	ldr	r3, [r3, #0]
 800e696:	68ba      	ldr	r2, [r7, #8]
 800e698:	0151      	lsls	r1, r2, #5
 800e69a:	68fa      	ldr	r2, [r7, #12]
 800e69c:	440a      	add	r2, r1
 800e69e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e6a2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800e6a6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800e6a8:	68fb      	ldr	r3, [r7, #12]
 800e6aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e6ae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e6b0:	683b      	ldr	r3, [r7, #0]
 800e6b2:	781b      	ldrb	r3, [r3, #0]
 800e6b4:	f003 030f 	and.w	r3, r3, #15
 800e6b8:	2101      	movs	r1, #1
 800e6ba:	fa01 f303 	lsl.w	r3, r1, r3
 800e6be:	041b      	lsls	r3, r3, #16
 800e6c0:	43db      	mvns	r3, r3
 800e6c2:	68f9      	ldr	r1, [r7, #12]
 800e6c4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800e6c8:	4013      	ands	r3, r2
 800e6ca:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800e6cc:	68fb      	ldr	r3, [r7, #12]
 800e6ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e6d2:	69da      	ldr	r2, [r3, #28]
 800e6d4:	683b      	ldr	r3, [r7, #0]
 800e6d6:	781b      	ldrb	r3, [r3, #0]
 800e6d8:	f003 030f 	and.w	r3, r3, #15
 800e6dc:	2101      	movs	r1, #1
 800e6de:	fa01 f303 	lsl.w	r3, r1, r3
 800e6e2:	041b      	lsls	r3, r3, #16
 800e6e4:	43db      	mvns	r3, r3
 800e6e6:	68f9      	ldr	r1, [r7, #12]
 800e6e8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800e6ec:	4013      	ands	r3, r2
 800e6ee:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800e6f0:	68bb      	ldr	r3, [r7, #8]
 800e6f2:	015a      	lsls	r2, r3, #5
 800e6f4:	68fb      	ldr	r3, [r7, #12]
 800e6f6:	4413      	add	r3, r2
 800e6f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e6fc:	681a      	ldr	r2, [r3, #0]
 800e6fe:	68bb      	ldr	r3, [r7, #8]
 800e700:	0159      	lsls	r1, r3, #5
 800e702:	68fb      	ldr	r3, [r7, #12]
 800e704:	440b      	add	r3, r1
 800e706:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e70a:	4619      	mov	r1, r3
 800e70c:	4b05      	ldr	r3, [pc, #20]	; (800e724 <USB_DeactivateEndpoint+0x1b4>)
 800e70e:	4013      	ands	r3, r2
 800e710:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800e712:	2300      	movs	r3, #0
}
 800e714:	4618      	mov	r0, r3
 800e716:	3714      	adds	r7, #20
 800e718:	46bd      	mov	sp, r7
 800e71a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e71e:	4770      	bx	lr
 800e720:	ec337800 	.word	0xec337800
 800e724:	eff37800 	.word	0xeff37800

0800e728 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800e728:	b580      	push	{r7, lr}
 800e72a:	b08a      	sub	sp, #40	; 0x28
 800e72c:	af02      	add	r7, sp, #8
 800e72e:	60f8      	str	r0, [r7, #12]
 800e730:	60b9      	str	r1, [r7, #8]
 800e732:	4613      	mov	r3, r2
 800e734:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e736:	68fb      	ldr	r3, [r7, #12]
 800e738:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800e73a:	68bb      	ldr	r3, [r7, #8]
 800e73c:	781b      	ldrb	r3, [r3, #0]
 800e73e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800e740:	68bb      	ldr	r3, [r7, #8]
 800e742:	785b      	ldrb	r3, [r3, #1]
 800e744:	2b01      	cmp	r3, #1
 800e746:	f040 815c 	bne.w	800ea02 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800e74a:	68bb      	ldr	r3, [r7, #8]
 800e74c:	695b      	ldr	r3, [r3, #20]
 800e74e:	2b00      	cmp	r3, #0
 800e750:	d132      	bne.n	800e7b8 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800e752:	69bb      	ldr	r3, [r7, #24]
 800e754:	015a      	lsls	r2, r3, #5
 800e756:	69fb      	ldr	r3, [r7, #28]
 800e758:	4413      	add	r3, r2
 800e75a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e75e:	691b      	ldr	r3, [r3, #16]
 800e760:	69ba      	ldr	r2, [r7, #24]
 800e762:	0151      	lsls	r1, r2, #5
 800e764:	69fa      	ldr	r2, [r7, #28]
 800e766:	440a      	add	r2, r1
 800e768:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e76c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800e770:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800e774:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800e776:	69bb      	ldr	r3, [r7, #24]
 800e778:	015a      	lsls	r2, r3, #5
 800e77a:	69fb      	ldr	r3, [r7, #28]
 800e77c:	4413      	add	r3, r2
 800e77e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e782:	691b      	ldr	r3, [r3, #16]
 800e784:	69ba      	ldr	r2, [r7, #24]
 800e786:	0151      	lsls	r1, r2, #5
 800e788:	69fa      	ldr	r2, [r7, #28]
 800e78a:	440a      	add	r2, r1
 800e78c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e790:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800e794:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800e796:	69bb      	ldr	r3, [r7, #24]
 800e798:	015a      	lsls	r2, r3, #5
 800e79a:	69fb      	ldr	r3, [r7, #28]
 800e79c:	4413      	add	r3, r2
 800e79e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e7a2:	691b      	ldr	r3, [r3, #16]
 800e7a4:	69ba      	ldr	r2, [r7, #24]
 800e7a6:	0151      	lsls	r1, r2, #5
 800e7a8:	69fa      	ldr	r2, [r7, #28]
 800e7aa:	440a      	add	r2, r1
 800e7ac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e7b0:	0cdb      	lsrs	r3, r3, #19
 800e7b2:	04db      	lsls	r3, r3, #19
 800e7b4:	6113      	str	r3, [r2, #16]
 800e7b6:	e074      	b.n	800e8a2 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800e7b8:	69bb      	ldr	r3, [r7, #24]
 800e7ba:	015a      	lsls	r2, r3, #5
 800e7bc:	69fb      	ldr	r3, [r7, #28]
 800e7be:	4413      	add	r3, r2
 800e7c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e7c4:	691b      	ldr	r3, [r3, #16]
 800e7c6:	69ba      	ldr	r2, [r7, #24]
 800e7c8:	0151      	lsls	r1, r2, #5
 800e7ca:	69fa      	ldr	r2, [r7, #28]
 800e7cc:	440a      	add	r2, r1
 800e7ce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e7d2:	0cdb      	lsrs	r3, r3, #19
 800e7d4:	04db      	lsls	r3, r3, #19
 800e7d6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800e7d8:	69bb      	ldr	r3, [r7, #24]
 800e7da:	015a      	lsls	r2, r3, #5
 800e7dc:	69fb      	ldr	r3, [r7, #28]
 800e7de:	4413      	add	r3, r2
 800e7e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e7e4:	691b      	ldr	r3, [r3, #16]
 800e7e6:	69ba      	ldr	r2, [r7, #24]
 800e7e8:	0151      	lsls	r1, r2, #5
 800e7ea:	69fa      	ldr	r2, [r7, #28]
 800e7ec:	440a      	add	r2, r1
 800e7ee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e7f2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800e7f6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800e7fa:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800e7fc:	69bb      	ldr	r3, [r7, #24]
 800e7fe:	015a      	lsls	r2, r3, #5
 800e800:	69fb      	ldr	r3, [r7, #28]
 800e802:	4413      	add	r3, r2
 800e804:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e808:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800e80a:	68bb      	ldr	r3, [r7, #8]
 800e80c:	6959      	ldr	r1, [r3, #20]
 800e80e:	68bb      	ldr	r3, [r7, #8]
 800e810:	689b      	ldr	r3, [r3, #8]
 800e812:	440b      	add	r3, r1
 800e814:	1e59      	subs	r1, r3, #1
 800e816:	68bb      	ldr	r3, [r7, #8]
 800e818:	689b      	ldr	r3, [r3, #8]
 800e81a:	fbb1 f3f3 	udiv	r3, r1, r3
 800e81e:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800e820:	4b9d      	ldr	r3, [pc, #628]	; (800ea98 <USB_EPStartXfer+0x370>)
 800e822:	400b      	ands	r3, r1
 800e824:	69b9      	ldr	r1, [r7, #24]
 800e826:	0148      	lsls	r0, r1, #5
 800e828:	69f9      	ldr	r1, [r7, #28]
 800e82a:	4401      	add	r1, r0
 800e82c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800e830:	4313      	orrs	r3, r2
 800e832:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800e834:	69bb      	ldr	r3, [r7, #24]
 800e836:	015a      	lsls	r2, r3, #5
 800e838:	69fb      	ldr	r3, [r7, #28]
 800e83a:	4413      	add	r3, r2
 800e83c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e840:	691a      	ldr	r2, [r3, #16]
 800e842:	68bb      	ldr	r3, [r7, #8]
 800e844:	695b      	ldr	r3, [r3, #20]
 800e846:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800e84a:	69b9      	ldr	r1, [r7, #24]
 800e84c:	0148      	lsls	r0, r1, #5
 800e84e:	69f9      	ldr	r1, [r7, #28]
 800e850:	4401      	add	r1, r0
 800e852:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800e856:	4313      	orrs	r3, r2
 800e858:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800e85a:	68bb      	ldr	r3, [r7, #8]
 800e85c:	78db      	ldrb	r3, [r3, #3]
 800e85e:	2b01      	cmp	r3, #1
 800e860:	d11f      	bne.n	800e8a2 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800e862:	69bb      	ldr	r3, [r7, #24]
 800e864:	015a      	lsls	r2, r3, #5
 800e866:	69fb      	ldr	r3, [r7, #28]
 800e868:	4413      	add	r3, r2
 800e86a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e86e:	691b      	ldr	r3, [r3, #16]
 800e870:	69ba      	ldr	r2, [r7, #24]
 800e872:	0151      	lsls	r1, r2, #5
 800e874:	69fa      	ldr	r2, [r7, #28]
 800e876:	440a      	add	r2, r1
 800e878:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e87c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800e880:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800e882:	69bb      	ldr	r3, [r7, #24]
 800e884:	015a      	lsls	r2, r3, #5
 800e886:	69fb      	ldr	r3, [r7, #28]
 800e888:	4413      	add	r3, r2
 800e88a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e88e:	691b      	ldr	r3, [r3, #16]
 800e890:	69ba      	ldr	r2, [r7, #24]
 800e892:	0151      	lsls	r1, r2, #5
 800e894:	69fa      	ldr	r2, [r7, #28]
 800e896:	440a      	add	r2, r1
 800e898:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e89c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800e8a0:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800e8a2:	79fb      	ldrb	r3, [r7, #7]
 800e8a4:	2b01      	cmp	r3, #1
 800e8a6:	d14b      	bne.n	800e940 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800e8a8:	68bb      	ldr	r3, [r7, #8]
 800e8aa:	691b      	ldr	r3, [r3, #16]
 800e8ac:	2b00      	cmp	r3, #0
 800e8ae:	d009      	beq.n	800e8c4 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800e8b0:	69bb      	ldr	r3, [r7, #24]
 800e8b2:	015a      	lsls	r2, r3, #5
 800e8b4:	69fb      	ldr	r3, [r7, #28]
 800e8b6:	4413      	add	r3, r2
 800e8b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e8bc:	461a      	mov	r2, r3
 800e8be:	68bb      	ldr	r3, [r7, #8]
 800e8c0:	691b      	ldr	r3, [r3, #16]
 800e8c2:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800e8c4:	68bb      	ldr	r3, [r7, #8]
 800e8c6:	78db      	ldrb	r3, [r3, #3]
 800e8c8:	2b01      	cmp	r3, #1
 800e8ca:	d128      	bne.n	800e91e <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800e8cc:	69fb      	ldr	r3, [r7, #28]
 800e8ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e8d2:	689b      	ldr	r3, [r3, #8]
 800e8d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e8d8:	2b00      	cmp	r3, #0
 800e8da:	d110      	bne.n	800e8fe <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800e8dc:	69bb      	ldr	r3, [r7, #24]
 800e8de:	015a      	lsls	r2, r3, #5
 800e8e0:	69fb      	ldr	r3, [r7, #28]
 800e8e2:	4413      	add	r3, r2
 800e8e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e8e8:	681b      	ldr	r3, [r3, #0]
 800e8ea:	69ba      	ldr	r2, [r7, #24]
 800e8ec:	0151      	lsls	r1, r2, #5
 800e8ee:	69fa      	ldr	r2, [r7, #28]
 800e8f0:	440a      	add	r2, r1
 800e8f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e8f6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800e8fa:	6013      	str	r3, [r2, #0]
 800e8fc:	e00f      	b.n	800e91e <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800e8fe:	69bb      	ldr	r3, [r7, #24]
 800e900:	015a      	lsls	r2, r3, #5
 800e902:	69fb      	ldr	r3, [r7, #28]
 800e904:	4413      	add	r3, r2
 800e906:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e90a:	681b      	ldr	r3, [r3, #0]
 800e90c:	69ba      	ldr	r2, [r7, #24]
 800e90e:	0151      	lsls	r1, r2, #5
 800e910:	69fa      	ldr	r2, [r7, #28]
 800e912:	440a      	add	r2, r1
 800e914:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e918:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e91c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800e91e:	69bb      	ldr	r3, [r7, #24]
 800e920:	015a      	lsls	r2, r3, #5
 800e922:	69fb      	ldr	r3, [r7, #28]
 800e924:	4413      	add	r3, r2
 800e926:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e92a:	681b      	ldr	r3, [r3, #0]
 800e92c:	69ba      	ldr	r2, [r7, #24]
 800e92e:	0151      	lsls	r1, r2, #5
 800e930:	69fa      	ldr	r2, [r7, #28]
 800e932:	440a      	add	r2, r1
 800e934:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e938:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800e93c:	6013      	str	r3, [r2, #0]
 800e93e:	e12f      	b.n	800eba0 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800e940:	69bb      	ldr	r3, [r7, #24]
 800e942:	015a      	lsls	r2, r3, #5
 800e944:	69fb      	ldr	r3, [r7, #28]
 800e946:	4413      	add	r3, r2
 800e948:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e94c:	681b      	ldr	r3, [r3, #0]
 800e94e:	69ba      	ldr	r2, [r7, #24]
 800e950:	0151      	lsls	r1, r2, #5
 800e952:	69fa      	ldr	r2, [r7, #28]
 800e954:	440a      	add	r2, r1
 800e956:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e95a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800e95e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800e960:	68bb      	ldr	r3, [r7, #8]
 800e962:	78db      	ldrb	r3, [r3, #3]
 800e964:	2b01      	cmp	r3, #1
 800e966:	d015      	beq.n	800e994 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800e968:	68bb      	ldr	r3, [r7, #8]
 800e96a:	695b      	ldr	r3, [r3, #20]
 800e96c:	2b00      	cmp	r3, #0
 800e96e:	f000 8117 	beq.w	800eba0 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800e972:	69fb      	ldr	r3, [r7, #28]
 800e974:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e978:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e97a:	68bb      	ldr	r3, [r7, #8]
 800e97c:	781b      	ldrb	r3, [r3, #0]
 800e97e:	f003 030f 	and.w	r3, r3, #15
 800e982:	2101      	movs	r1, #1
 800e984:	fa01 f303 	lsl.w	r3, r1, r3
 800e988:	69f9      	ldr	r1, [r7, #28]
 800e98a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800e98e:	4313      	orrs	r3, r2
 800e990:	634b      	str	r3, [r1, #52]	; 0x34
 800e992:	e105      	b.n	800eba0 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800e994:	69fb      	ldr	r3, [r7, #28]
 800e996:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e99a:	689b      	ldr	r3, [r3, #8]
 800e99c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e9a0:	2b00      	cmp	r3, #0
 800e9a2:	d110      	bne.n	800e9c6 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800e9a4:	69bb      	ldr	r3, [r7, #24]
 800e9a6:	015a      	lsls	r2, r3, #5
 800e9a8:	69fb      	ldr	r3, [r7, #28]
 800e9aa:	4413      	add	r3, r2
 800e9ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e9b0:	681b      	ldr	r3, [r3, #0]
 800e9b2:	69ba      	ldr	r2, [r7, #24]
 800e9b4:	0151      	lsls	r1, r2, #5
 800e9b6:	69fa      	ldr	r2, [r7, #28]
 800e9b8:	440a      	add	r2, r1
 800e9ba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e9be:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800e9c2:	6013      	str	r3, [r2, #0]
 800e9c4:	e00f      	b.n	800e9e6 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800e9c6:	69bb      	ldr	r3, [r7, #24]
 800e9c8:	015a      	lsls	r2, r3, #5
 800e9ca:	69fb      	ldr	r3, [r7, #28]
 800e9cc:	4413      	add	r3, r2
 800e9ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e9d2:	681b      	ldr	r3, [r3, #0]
 800e9d4:	69ba      	ldr	r2, [r7, #24]
 800e9d6:	0151      	lsls	r1, r2, #5
 800e9d8:	69fa      	ldr	r2, [r7, #28]
 800e9da:	440a      	add	r2, r1
 800e9dc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e9e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e9e4:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800e9e6:	68bb      	ldr	r3, [r7, #8]
 800e9e8:	68d9      	ldr	r1, [r3, #12]
 800e9ea:	68bb      	ldr	r3, [r7, #8]
 800e9ec:	781a      	ldrb	r2, [r3, #0]
 800e9ee:	68bb      	ldr	r3, [r7, #8]
 800e9f0:	695b      	ldr	r3, [r3, #20]
 800e9f2:	b298      	uxth	r0, r3
 800e9f4:	79fb      	ldrb	r3, [r7, #7]
 800e9f6:	9300      	str	r3, [sp, #0]
 800e9f8:	4603      	mov	r3, r0
 800e9fa:	68f8      	ldr	r0, [r7, #12]
 800e9fc:	f000 fa2b 	bl	800ee56 <USB_WritePacket>
 800ea00:	e0ce      	b.n	800eba0 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800ea02:	69bb      	ldr	r3, [r7, #24]
 800ea04:	015a      	lsls	r2, r3, #5
 800ea06:	69fb      	ldr	r3, [r7, #28]
 800ea08:	4413      	add	r3, r2
 800ea0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ea0e:	691b      	ldr	r3, [r3, #16]
 800ea10:	69ba      	ldr	r2, [r7, #24]
 800ea12:	0151      	lsls	r1, r2, #5
 800ea14:	69fa      	ldr	r2, [r7, #28]
 800ea16:	440a      	add	r2, r1
 800ea18:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ea1c:	0cdb      	lsrs	r3, r3, #19
 800ea1e:	04db      	lsls	r3, r3, #19
 800ea20:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800ea22:	69bb      	ldr	r3, [r7, #24]
 800ea24:	015a      	lsls	r2, r3, #5
 800ea26:	69fb      	ldr	r3, [r7, #28]
 800ea28:	4413      	add	r3, r2
 800ea2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ea2e:	691b      	ldr	r3, [r3, #16]
 800ea30:	69ba      	ldr	r2, [r7, #24]
 800ea32:	0151      	lsls	r1, r2, #5
 800ea34:	69fa      	ldr	r2, [r7, #28]
 800ea36:	440a      	add	r2, r1
 800ea38:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ea3c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800ea40:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800ea44:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800ea46:	68bb      	ldr	r3, [r7, #8]
 800ea48:	695b      	ldr	r3, [r3, #20]
 800ea4a:	2b00      	cmp	r3, #0
 800ea4c:	d126      	bne.n	800ea9c <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800ea4e:	69bb      	ldr	r3, [r7, #24]
 800ea50:	015a      	lsls	r2, r3, #5
 800ea52:	69fb      	ldr	r3, [r7, #28]
 800ea54:	4413      	add	r3, r2
 800ea56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ea5a:	691a      	ldr	r2, [r3, #16]
 800ea5c:	68bb      	ldr	r3, [r7, #8]
 800ea5e:	689b      	ldr	r3, [r3, #8]
 800ea60:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ea64:	69b9      	ldr	r1, [r7, #24]
 800ea66:	0148      	lsls	r0, r1, #5
 800ea68:	69f9      	ldr	r1, [r7, #28]
 800ea6a:	4401      	add	r1, r0
 800ea6c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800ea70:	4313      	orrs	r3, r2
 800ea72:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800ea74:	69bb      	ldr	r3, [r7, #24]
 800ea76:	015a      	lsls	r2, r3, #5
 800ea78:	69fb      	ldr	r3, [r7, #28]
 800ea7a:	4413      	add	r3, r2
 800ea7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ea80:	691b      	ldr	r3, [r3, #16]
 800ea82:	69ba      	ldr	r2, [r7, #24]
 800ea84:	0151      	lsls	r1, r2, #5
 800ea86:	69fa      	ldr	r2, [r7, #28]
 800ea88:	440a      	add	r2, r1
 800ea8a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ea8e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800ea92:	6113      	str	r3, [r2, #16]
 800ea94:	e036      	b.n	800eb04 <USB_EPStartXfer+0x3dc>
 800ea96:	bf00      	nop
 800ea98:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800ea9c:	68bb      	ldr	r3, [r7, #8]
 800ea9e:	695a      	ldr	r2, [r3, #20]
 800eaa0:	68bb      	ldr	r3, [r7, #8]
 800eaa2:	689b      	ldr	r3, [r3, #8]
 800eaa4:	4413      	add	r3, r2
 800eaa6:	1e5a      	subs	r2, r3, #1
 800eaa8:	68bb      	ldr	r3, [r7, #8]
 800eaaa:	689b      	ldr	r3, [r3, #8]
 800eaac:	fbb2 f3f3 	udiv	r3, r2, r3
 800eab0:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800eab2:	69bb      	ldr	r3, [r7, #24]
 800eab4:	015a      	lsls	r2, r3, #5
 800eab6:	69fb      	ldr	r3, [r7, #28]
 800eab8:	4413      	add	r3, r2
 800eaba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800eabe:	691a      	ldr	r2, [r3, #16]
 800eac0:	8afb      	ldrh	r3, [r7, #22]
 800eac2:	04d9      	lsls	r1, r3, #19
 800eac4:	4b39      	ldr	r3, [pc, #228]	; (800ebac <USB_EPStartXfer+0x484>)
 800eac6:	400b      	ands	r3, r1
 800eac8:	69b9      	ldr	r1, [r7, #24]
 800eaca:	0148      	lsls	r0, r1, #5
 800eacc:	69f9      	ldr	r1, [r7, #28]
 800eace:	4401      	add	r1, r0
 800ead0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800ead4:	4313      	orrs	r3, r2
 800ead6:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800ead8:	69bb      	ldr	r3, [r7, #24]
 800eada:	015a      	lsls	r2, r3, #5
 800eadc:	69fb      	ldr	r3, [r7, #28]
 800eade:	4413      	add	r3, r2
 800eae0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800eae4:	691a      	ldr	r2, [r3, #16]
 800eae6:	68bb      	ldr	r3, [r7, #8]
 800eae8:	689b      	ldr	r3, [r3, #8]
 800eaea:	8af9      	ldrh	r1, [r7, #22]
 800eaec:	fb01 f303 	mul.w	r3, r1, r3
 800eaf0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800eaf4:	69b9      	ldr	r1, [r7, #24]
 800eaf6:	0148      	lsls	r0, r1, #5
 800eaf8:	69f9      	ldr	r1, [r7, #28]
 800eafa:	4401      	add	r1, r0
 800eafc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800eb00:	4313      	orrs	r3, r2
 800eb02:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800eb04:	79fb      	ldrb	r3, [r7, #7]
 800eb06:	2b01      	cmp	r3, #1
 800eb08:	d10d      	bne.n	800eb26 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800eb0a:	68bb      	ldr	r3, [r7, #8]
 800eb0c:	68db      	ldr	r3, [r3, #12]
 800eb0e:	2b00      	cmp	r3, #0
 800eb10:	d009      	beq.n	800eb26 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800eb12:	68bb      	ldr	r3, [r7, #8]
 800eb14:	68d9      	ldr	r1, [r3, #12]
 800eb16:	69bb      	ldr	r3, [r7, #24]
 800eb18:	015a      	lsls	r2, r3, #5
 800eb1a:	69fb      	ldr	r3, [r7, #28]
 800eb1c:	4413      	add	r3, r2
 800eb1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800eb22:	460a      	mov	r2, r1
 800eb24:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800eb26:	68bb      	ldr	r3, [r7, #8]
 800eb28:	78db      	ldrb	r3, [r3, #3]
 800eb2a:	2b01      	cmp	r3, #1
 800eb2c:	d128      	bne.n	800eb80 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800eb2e:	69fb      	ldr	r3, [r7, #28]
 800eb30:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800eb34:	689b      	ldr	r3, [r3, #8]
 800eb36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800eb3a:	2b00      	cmp	r3, #0
 800eb3c:	d110      	bne.n	800eb60 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800eb3e:	69bb      	ldr	r3, [r7, #24]
 800eb40:	015a      	lsls	r2, r3, #5
 800eb42:	69fb      	ldr	r3, [r7, #28]
 800eb44:	4413      	add	r3, r2
 800eb46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800eb4a:	681b      	ldr	r3, [r3, #0]
 800eb4c:	69ba      	ldr	r2, [r7, #24]
 800eb4e:	0151      	lsls	r1, r2, #5
 800eb50:	69fa      	ldr	r2, [r7, #28]
 800eb52:	440a      	add	r2, r1
 800eb54:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800eb58:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800eb5c:	6013      	str	r3, [r2, #0]
 800eb5e:	e00f      	b.n	800eb80 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800eb60:	69bb      	ldr	r3, [r7, #24]
 800eb62:	015a      	lsls	r2, r3, #5
 800eb64:	69fb      	ldr	r3, [r7, #28]
 800eb66:	4413      	add	r3, r2
 800eb68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800eb6c:	681b      	ldr	r3, [r3, #0]
 800eb6e:	69ba      	ldr	r2, [r7, #24]
 800eb70:	0151      	lsls	r1, r2, #5
 800eb72:	69fa      	ldr	r2, [r7, #28]
 800eb74:	440a      	add	r2, r1
 800eb76:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800eb7a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800eb7e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800eb80:	69bb      	ldr	r3, [r7, #24]
 800eb82:	015a      	lsls	r2, r3, #5
 800eb84:	69fb      	ldr	r3, [r7, #28]
 800eb86:	4413      	add	r3, r2
 800eb88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800eb8c:	681b      	ldr	r3, [r3, #0]
 800eb8e:	69ba      	ldr	r2, [r7, #24]
 800eb90:	0151      	lsls	r1, r2, #5
 800eb92:	69fa      	ldr	r2, [r7, #28]
 800eb94:	440a      	add	r2, r1
 800eb96:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800eb9a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800eb9e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800eba0:	2300      	movs	r3, #0
}
 800eba2:	4618      	mov	r0, r3
 800eba4:	3720      	adds	r7, #32
 800eba6:	46bd      	mov	sp, r7
 800eba8:	bd80      	pop	{r7, pc}
 800ebaa:	bf00      	nop
 800ebac:	1ff80000 	.word	0x1ff80000

0800ebb0 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800ebb0:	b480      	push	{r7}
 800ebb2:	b087      	sub	sp, #28
 800ebb4:	af00      	add	r7, sp, #0
 800ebb6:	60f8      	str	r0, [r7, #12]
 800ebb8:	60b9      	str	r1, [r7, #8]
 800ebba:	4613      	mov	r3, r2
 800ebbc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ebbe:	68fb      	ldr	r3, [r7, #12]
 800ebc0:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800ebc2:	68bb      	ldr	r3, [r7, #8]
 800ebc4:	781b      	ldrb	r3, [r3, #0]
 800ebc6:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800ebc8:	68bb      	ldr	r3, [r7, #8]
 800ebca:	785b      	ldrb	r3, [r3, #1]
 800ebcc:	2b01      	cmp	r3, #1
 800ebce:	f040 80cd 	bne.w	800ed6c <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800ebd2:	68bb      	ldr	r3, [r7, #8]
 800ebd4:	695b      	ldr	r3, [r3, #20]
 800ebd6:	2b00      	cmp	r3, #0
 800ebd8:	d132      	bne.n	800ec40 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800ebda:	693b      	ldr	r3, [r7, #16]
 800ebdc:	015a      	lsls	r2, r3, #5
 800ebde:	697b      	ldr	r3, [r7, #20]
 800ebe0:	4413      	add	r3, r2
 800ebe2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ebe6:	691b      	ldr	r3, [r3, #16]
 800ebe8:	693a      	ldr	r2, [r7, #16]
 800ebea:	0151      	lsls	r1, r2, #5
 800ebec:	697a      	ldr	r2, [r7, #20]
 800ebee:	440a      	add	r2, r1
 800ebf0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ebf4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800ebf8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800ebfc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800ebfe:	693b      	ldr	r3, [r7, #16]
 800ec00:	015a      	lsls	r2, r3, #5
 800ec02:	697b      	ldr	r3, [r7, #20]
 800ec04:	4413      	add	r3, r2
 800ec06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ec0a:	691b      	ldr	r3, [r3, #16]
 800ec0c:	693a      	ldr	r2, [r7, #16]
 800ec0e:	0151      	lsls	r1, r2, #5
 800ec10:	697a      	ldr	r2, [r7, #20]
 800ec12:	440a      	add	r2, r1
 800ec14:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ec18:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800ec1c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800ec1e:	693b      	ldr	r3, [r7, #16]
 800ec20:	015a      	lsls	r2, r3, #5
 800ec22:	697b      	ldr	r3, [r7, #20]
 800ec24:	4413      	add	r3, r2
 800ec26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ec2a:	691b      	ldr	r3, [r3, #16]
 800ec2c:	693a      	ldr	r2, [r7, #16]
 800ec2e:	0151      	lsls	r1, r2, #5
 800ec30:	697a      	ldr	r2, [r7, #20]
 800ec32:	440a      	add	r2, r1
 800ec34:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ec38:	0cdb      	lsrs	r3, r3, #19
 800ec3a:	04db      	lsls	r3, r3, #19
 800ec3c:	6113      	str	r3, [r2, #16]
 800ec3e:	e04e      	b.n	800ecde <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800ec40:	693b      	ldr	r3, [r7, #16]
 800ec42:	015a      	lsls	r2, r3, #5
 800ec44:	697b      	ldr	r3, [r7, #20]
 800ec46:	4413      	add	r3, r2
 800ec48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ec4c:	691b      	ldr	r3, [r3, #16]
 800ec4e:	693a      	ldr	r2, [r7, #16]
 800ec50:	0151      	lsls	r1, r2, #5
 800ec52:	697a      	ldr	r2, [r7, #20]
 800ec54:	440a      	add	r2, r1
 800ec56:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ec5a:	0cdb      	lsrs	r3, r3, #19
 800ec5c:	04db      	lsls	r3, r3, #19
 800ec5e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800ec60:	693b      	ldr	r3, [r7, #16]
 800ec62:	015a      	lsls	r2, r3, #5
 800ec64:	697b      	ldr	r3, [r7, #20]
 800ec66:	4413      	add	r3, r2
 800ec68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ec6c:	691b      	ldr	r3, [r3, #16]
 800ec6e:	693a      	ldr	r2, [r7, #16]
 800ec70:	0151      	lsls	r1, r2, #5
 800ec72:	697a      	ldr	r2, [r7, #20]
 800ec74:	440a      	add	r2, r1
 800ec76:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ec7a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800ec7e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800ec82:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800ec84:	68bb      	ldr	r3, [r7, #8]
 800ec86:	695a      	ldr	r2, [r3, #20]
 800ec88:	68bb      	ldr	r3, [r7, #8]
 800ec8a:	689b      	ldr	r3, [r3, #8]
 800ec8c:	429a      	cmp	r2, r3
 800ec8e:	d903      	bls.n	800ec98 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800ec90:	68bb      	ldr	r3, [r7, #8]
 800ec92:	689a      	ldr	r2, [r3, #8]
 800ec94:	68bb      	ldr	r3, [r7, #8]
 800ec96:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800ec98:	693b      	ldr	r3, [r7, #16]
 800ec9a:	015a      	lsls	r2, r3, #5
 800ec9c:	697b      	ldr	r3, [r7, #20]
 800ec9e:	4413      	add	r3, r2
 800eca0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800eca4:	691b      	ldr	r3, [r3, #16]
 800eca6:	693a      	ldr	r2, [r7, #16]
 800eca8:	0151      	lsls	r1, r2, #5
 800ecaa:	697a      	ldr	r2, [r7, #20]
 800ecac:	440a      	add	r2, r1
 800ecae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ecb2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800ecb6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800ecb8:	693b      	ldr	r3, [r7, #16]
 800ecba:	015a      	lsls	r2, r3, #5
 800ecbc:	697b      	ldr	r3, [r7, #20]
 800ecbe:	4413      	add	r3, r2
 800ecc0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ecc4:	691a      	ldr	r2, [r3, #16]
 800ecc6:	68bb      	ldr	r3, [r7, #8]
 800ecc8:	695b      	ldr	r3, [r3, #20]
 800ecca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ecce:	6939      	ldr	r1, [r7, #16]
 800ecd0:	0148      	lsls	r0, r1, #5
 800ecd2:	6979      	ldr	r1, [r7, #20]
 800ecd4:	4401      	add	r1, r0
 800ecd6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800ecda:	4313      	orrs	r3, r2
 800ecdc:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800ecde:	79fb      	ldrb	r3, [r7, #7]
 800ece0:	2b01      	cmp	r3, #1
 800ece2:	d11e      	bne.n	800ed22 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800ece4:	68bb      	ldr	r3, [r7, #8]
 800ece6:	691b      	ldr	r3, [r3, #16]
 800ece8:	2b00      	cmp	r3, #0
 800ecea:	d009      	beq.n	800ed00 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800ecec:	693b      	ldr	r3, [r7, #16]
 800ecee:	015a      	lsls	r2, r3, #5
 800ecf0:	697b      	ldr	r3, [r7, #20]
 800ecf2:	4413      	add	r3, r2
 800ecf4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ecf8:	461a      	mov	r2, r3
 800ecfa:	68bb      	ldr	r3, [r7, #8]
 800ecfc:	691b      	ldr	r3, [r3, #16]
 800ecfe:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800ed00:	693b      	ldr	r3, [r7, #16]
 800ed02:	015a      	lsls	r2, r3, #5
 800ed04:	697b      	ldr	r3, [r7, #20]
 800ed06:	4413      	add	r3, r2
 800ed08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ed0c:	681b      	ldr	r3, [r3, #0]
 800ed0e:	693a      	ldr	r2, [r7, #16]
 800ed10:	0151      	lsls	r1, r2, #5
 800ed12:	697a      	ldr	r2, [r7, #20]
 800ed14:	440a      	add	r2, r1
 800ed16:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ed1a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800ed1e:	6013      	str	r3, [r2, #0]
 800ed20:	e092      	b.n	800ee48 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800ed22:	693b      	ldr	r3, [r7, #16]
 800ed24:	015a      	lsls	r2, r3, #5
 800ed26:	697b      	ldr	r3, [r7, #20]
 800ed28:	4413      	add	r3, r2
 800ed2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ed2e:	681b      	ldr	r3, [r3, #0]
 800ed30:	693a      	ldr	r2, [r7, #16]
 800ed32:	0151      	lsls	r1, r2, #5
 800ed34:	697a      	ldr	r2, [r7, #20]
 800ed36:	440a      	add	r2, r1
 800ed38:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ed3c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800ed40:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800ed42:	68bb      	ldr	r3, [r7, #8]
 800ed44:	695b      	ldr	r3, [r3, #20]
 800ed46:	2b00      	cmp	r3, #0
 800ed48:	d07e      	beq.n	800ee48 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800ed4a:	697b      	ldr	r3, [r7, #20]
 800ed4c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ed50:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ed52:	68bb      	ldr	r3, [r7, #8]
 800ed54:	781b      	ldrb	r3, [r3, #0]
 800ed56:	f003 030f 	and.w	r3, r3, #15
 800ed5a:	2101      	movs	r1, #1
 800ed5c:	fa01 f303 	lsl.w	r3, r1, r3
 800ed60:	6979      	ldr	r1, [r7, #20]
 800ed62:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ed66:	4313      	orrs	r3, r2
 800ed68:	634b      	str	r3, [r1, #52]	; 0x34
 800ed6a:	e06d      	b.n	800ee48 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800ed6c:	693b      	ldr	r3, [r7, #16]
 800ed6e:	015a      	lsls	r2, r3, #5
 800ed70:	697b      	ldr	r3, [r7, #20]
 800ed72:	4413      	add	r3, r2
 800ed74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ed78:	691b      	ldr	r3, [r3, #16]
 800ed7a:	693a      	ldr	r2, [r7, #16]
 800ed7c:	0151      	lsls	r1, r2, #5
 800ed7e:	697a      	ldr	r2, [r7, #20]
 800ed80:	440a      	add	r2, r1
 800ed82:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ed86:	0cdb      	lsrs	r3, r3, #19
 800ed88:	04db      	lsls	r3, r3, #19
 800ed8a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800ed8c:	693b      	ldr	r3, [r7, #16]
 800ed8e:	015a      	lsls	r2, r3, #5
 800ed90:	697b      	ldr	r3, [r7, #20]
 800ed92:	4413      	add	r3, r2
 800ed94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ed98:	691b      	ldr	r3, [r3, #16]
 800ed9a:	693a      	ldr	r2, [r7, #16]
 800ed9c:	0151      	lsls	r1, r2, #5
 800ed9e:	697a      	ldr	r2, [r7, #20]
 800eda0:	440a      	add	r2, r1
 800eda2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800eda6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800edaa:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800edae:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800edb0:	68bb      	ldr	r3, [r7, #8]
 800edb2:	695b      	ldr	r3, [r3, #20]
 800edb4:	2b00      	cmp	r3, #0
 800edb6:	d003      	beq.n	800edc0 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 800edb8:	68bb      	ldr	r3, [r7, #8]
 800edba:	689a      	ldr	r2, [r3, #8]
 800edbc:	68bb      	ldr	r3, [r7, #8]
 800edbe:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800edc0:	693b      	ldr	r3, [r7, #16]
 800edc2:	015a      	lsls	r2, r3, #5
 800edc4:	697b      	ldr	r3, [r7, #20]
 800edc6:	4413      	add	r3, r2
 800edc8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800edcc:	691b      	ldr	r3, [r3, #16]
 800edce:	693a      	ldr	r2, [r7, #16]
 800edd0:	0151      	lsls	r1, r2, #5
 800edd2:	697a      	ldr	r2, [r7, #20]
 800edd4:	440a      	add	r2, r1
 800edd6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800edda:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800edde:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800ede0:	693b      	ldr	r3, [r7, #16]
 800ede2:	015a      	lsls	r2, r3, #5
 800ede4:	697b      	ldr	r3, [r7, #20]
 800ede6:	4413      	add	r3, r2
 800ede8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800edec:	691a      	ldr	r2, [r3, #16]
 800edee:	68bb      	ldr	r3, [r7, #8]
 800edf0:	689b      	ldr	r3, [r3, #8]
 800edf2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800edf6:	6939      	ldr	r1, [r7, #16]
 800edf8:	0148      	lsls	r0, r1, #5
 800edfa:	6979      	ldr	r1, [r7, #20]
 800edfc:	4401      	add	r1, r0
 800edfe:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800ee02:	4313      	orrs	r3, r2
 800ee04:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800ee06:	79fb      	ldrb	r3, [r7, #7]
 800ee08:	2b01      	cmp	r3, #1
 800ee0a:	d10d      	bne.n	800ee28 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800ee0c:	68bb      	ldr	r3, [r7, #8]
 800ee0e:	68db      	ldr	r3, [r3, #12]
 800ee10:	2b00      	cmp	r3, #0
 800ee12:	d009      	beq.n	800ee28 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800ee14:	68bb      	ldr	r3, [r7, #8]
 800ee16:	68d9      	ldr	r1, [r3, #12]
 800ee18:	693b      	ldr	r3, [r7, #16]
 800ee1a:	015a      	lsls	r2, r3, #5
 800ee1c:	697b      	ldr	r3, [r7, #20]
 800ee1e:	4413      	add	r3, r2
 800ee20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ee24:	460a      	mov	r2, r1
 800ee26:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800ee28:	693b      	ldr	r3, [r7, #16]
 800ee2a:	015a      	lsls	r2, r3, #5
 800ee2c:	697b      	ldr	r3, [r7, #20]
 800ee2e:	4413      	add	r3, r2
 800ee30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ee34:	681b      	ldr	r3, [r3, #0]
 800ee36:	693a      	ldr	r2, [r7, #16]
 800ee38:	0151      	lsls	r1, r2, #5
 800ee3a:	697a      	ldr	r2, [r7, #20]
 800ee3c:	440a      	add	r2, r1
 800ee3e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ee42:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800ee46:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800ee48:	2300      	movs	r3, #0
}
 800ee4a:	4618      	mov	r0, r3
 800ee4c:	371c      	adds	r7, #28
 800ee4e:	46bd      	mov	sp, r7
 800ee50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee54:	4770      	bx	lr

0800ee56 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800ee56:	b480      	push	{r7}
 800ee58:	b089      	sub	sp, #36	; 0x24
 800ee5a:	af00      	add	r7, sp, #0
 800ee5c:	60f8      	str	r0, [r7, #12]
 800ee5e:	60b9      	str	r1, [r7, #8]
 800ee60:	4611      	mov	r1, r2
 800ee62:	461a      	mov	r2, r3
 800ee64:	460b      	mov	r3, r1
 800ee66:	71fb      	strb	r3, [r7, #7]
 800ee68:	4613      	mov	r3, r2
 800ee6a:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ee6c:	68fb      	ldr	r3, [r7, #12]
 800ee6e:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800ee70:	68bb      	ldr	r3, [r7, #8]
 800ee72:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800ee74:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800ee78:	2b00      	cmp	r3, #0
 800ee7a:	d123      	bne.n	800eec4 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800ee7c:	88bb      	ldrh	r3, [r7, #4]
 800ee7e:	3303      	adds	r3, #3
 800ee80:	089b      	lsrs	r3, r3, #2
 800ee82:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800ee84:	2300      	movs	r3, #0
 800ee86:	61bb      	str	r3, [r7, #24]
 800ee88:	e018      	b.n	800eebc <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800ee8a:	79fb      	ldrb	r3, [r7, #7]
 800ee8c:	031a      	lsls	r2, r3, #12
 800ee8e:	697b      	ldr	r3, [r7, #20]
 800ee90:	4413      	add	r3, r2
 800ee92:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ee96:	461a      	mov	r2, r3
 800ee98:	69fb      	ldr	r3, [r7, #28]
 800ee9a:	681b      	ldr	r3, [r3, #0]
 800ee9c:	6013      	str	r3, [r2, #0]
      pSrc++;
 800ee9e:	69fb      	ldr	r3, [r7, #28]
 800eea0:	3301      	adds	r3, #1
 800eea2:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800eea4:	69fb      	ldr	r3, [r7, #28]
 800eea6:	3301      	adds	r3, #1
 800eea8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800eeaa:	69fb      	ldr	r3, [r7, #28]
 800eeac:	3301      	adds	r3, #1
 800eeae:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800eeb0:	69fb      	ldr	r3, [r7, #28]
 800eeb2:	3301      	adds	r3, #1
 800eeb4:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800eeb6:	69bb      	ldr	r3, [r7, #24]
 800eeb8:	3301      	adds	r3, #1
 800eeba:	61bb      	str	r3, [r7, #24]
 800eebc:	69ba      	ldr	r2, [r7, #24]
 800eebe:	693b      	ldr	r3, [r7, #16]
 800eec0:	429a      	cmp	r2, r3
 800eec2:	d3e2      	bcc.n	800ee8a <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800eec4:	2300      	movs	r3, #0
}
 800eec6:	4618      	mov	r0, r3
 800eec8:	3724      	adds	r7, #36	; 0x24
 800eeca:	46bd      	mov	sp, r7
 800eecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eed0:	4770      	bx	lr

0800eed2 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800eed2:	b480      	push	{r7}
 800eed4:	b08b      	sub	sp, #44	; 0x2c
 800eed6:	af00      	add	r7, sp, #0
 800eed8:	60f8      	str	r0, [r7, #12]
 800eeda:	60b9      	str	r1, [r7, #8]
 800eedc:	4613      	mov	r3, r2
 800eede:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800eee0:	68fb      	ldr	r3, [r7, #12]
 800eee2:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800eee4:	68bb      	ldr	r3, [r7, #8]
 800eee6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800eee8:	88fb      	ldrh	r3, [r7, #6]
 800eeea:	089b      	lsrs	r3, r3, #2
 800eeec:	b29b      	uxth	r3, r3
 800eeee:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800eef0:	88fb      	ldrh	r3, [r7, #6]
 800eef2:	f003 0303 	and.w	r3, r3, #3
 800eef6:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800eef8:	2300      	movs	r3, #0
 800eefa:	623b      	str	r3, [r7, #32]
 800eefc:	e014      	b.n	800ef28 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800eefe:	69bb      	ldr	r3, [r7, #24]
 800ef00:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ef04:	681a      	ldr	r2, [r3, #0]
 800ef06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef08:	601a      	str	r2, [r3, #0]
    pDest++;
 800ef0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef0c:	3301      	adds	r3, #1
 800ef0e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800ef10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef12:	3301      	adds	r3, #1
 800ef14:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800ef16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef18:	3301      	adds	r3, #1
 800ef1a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800ef1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef1e:	3301      	adds	r3, #1
 800ef20:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800ef22:	6a3b      	ldr	r3, [r7, #32]
 800ef24:	3301      	adds	r3, #1
 800ef26:	623b      	str	r3, [r7, #32]
 800ef28:	6a3a      	ldr	r2, [r7, #32]
 800ef2a:	697b      	ldr	r3, [r7, #20]
 800ef2c:	429a      	cmp	r2, r3
 800ef2e:	d3e6      	bcc.n	800eefe <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800ef30:	8bfb      	ldrh	r3, [r7, #30]
 800ef32:	2b00      	cmp	r3, #0
 800ef34:	d01e      	beq.n	800ef74 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800ef36:	2300      	movs	r3, #0
 800ef38:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800ef3a:	69bb      	ldr	r3, [r7, #24]
 800ef3c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ef40:	461a      	mov	r2, r3
 800ef42:	f107 0310 	add.w	r3, r7, #16
 800ef46:	6812      	ldr	r2, [r2, #0]
 800ef48:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800ef4a:	693a      	ldr	r2, [r7, #16]
 800ef4c:	6a3b      	ldr	r3, [r7, #32]
 800ef4e:	b2db      	uxtb	r3, r3
 800ef50:	00db      	lsls	r3, r3, #3
 800ef52:	fa22 f303 	lsr.w	r3, r2, r3
 800ef56:	b2da      	uxtb	r2, r3
 800ef58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef5a:	701a      	strb	r2, [r3, #0]
      i++;
 800ef5c:	6a3b      	ldr	r3, [r7, #32]
 800ef5e:	3301      	adds	r3, #1
 800ef60:	623b      	str	r3, [r7, #32]
      pDest++;
 800ef62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef64:	3301      	adds	r3, #1
 800ef66:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800ef68:	8bfb      	ldrh	r3, [r7, #30]
 800ef6a:	3b01      	subs	r3, #1
 800ef6c:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800ef6e:	8bfb      	ldrh	r3, [r7, #30]
 800ef70:	2b00      	cmp	r3, #0
 800ef72:	d1ea      	bne.n	800ef4a <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800ef74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800ef76:	4618      	mov	r0, r3
 800ef78:	372c      	adds	r7, #44	; 0x2c
 800ef7a:	46bd      	mov	sp, r7
 800ef7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef80:	4770      	bx	lr

0800ef82 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800ef82:	b480      	push	{r7}
 800ef84:	b085      	sub	sp, #20
 800ef86:	af00      	add	r7, sp, #0
 800ef88:	6078      	str	r0, [r7, #4]
 800ef8a:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ef8c:	687b      	ldr	r3, [r7, #4]
 800ef8e:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800ef90:	683b      	ldr	r3, [r7, #0]
 800ef92:	781b      	ldrb	r3, [r3, #0]
 800ef94:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800ef96:	683b      	ldr	r3, [r7, #0]
 800ef98:	785b      	ldrb	r3, [r3, #1]
 800ef9a:	2b01      	cmp	r3, #1
 800ef9c:	d12c      	bne.n	800eff8 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800ef9e:	68bb      	ldr	r3, [r7, #8]
 800efa0:	015a      	lsls	r2, r3, #5
 800efa2:	68fb      	ldr	r3, [r7, #12]
 800efa4:	4413      	add	r3, r2
 800efa6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800efaa:	681b      	ldr	r3, [r3, #0]
 800efac:	2b00      	cmp	r3, #0
 800efae:	db12      	blt.n	800efd6 <USB_EPSetStall+0x54>
 800efb0:	68bb      	ldr	r3, [r7, #8]
 800efb2:	2b00      	cmp	r3, #0
 800efb4:	d00f      	beq.n	800efd6 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800efb6:	68bb      	ldr	r3, [r7, #8]
 800efb8:	015a      	lsls	r2, r3, #5
 800efba:	68fb      	ldr	r3, [r7, #12]
 800efbc:	4413      	add	r3, r2
 800efbe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800efc2:	681b      	ldr	r3, [r3, #0]
 800efc4:	68ba      	ldr	r2, [r7, #8]
 800efc6:	0151      	lsls	r1, r2, #5
 800efc8:	68fa      	ldr	r2, [r7, #12]
 800efca:	440a      	add	r2, r1
 800efcc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800efd0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800efd4:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800efd6:	68bb      	ldr	r3, [r7, #8]
 800efd8:	015a      	lsls	r2, r3, #5
 800efda:	68fb      	ldr	r3, [r7, #12]
 800efdc:	4413      	add	r3, r2
 800efde:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800efe2:	681b      	ldr	r3, [r3, #0]
 800efe4:	68ba      	ldr	r2, [r7, #8]
 800efe6:	0151      	lsls	r1, r2, #5
 800efe8:	68fa      	ldr	r2, [r7, #12]
 800efea:	440a      	add	r2, r1
 800efec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800eff0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800eff4:	6013      	str	r3, [r2, #0]
 800eff6:	e02b      	b.n	800f050 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800eff8:	68bb      	ldr	r3, [r7, #8]
 800effa:	015a      	lsls	r2, r3, #5
 800effc:	68fb      	ldr	r3, [r7, #12]
 800effe:	4413      	add	r3, r2
 800f000:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f004:	681b      	ldr	r3, [r3, #0]
 800f006:	2b00      	cmp	r3, #0
 800f008:	db12      	blt.n	800f030 <USB_EPSetStall+0xae>
 800f00a:	68bb      	ldr	r3, [r7, #8]
 800f00c:	2b00      	cmp	r3, #0
 800f00e:	d00f      	beq.n	800f030 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800f010:	68bb      	ldr	r3, [r7, #8]
 800f012:	015a      	lsls	r2, r3, #5
 800f014:	68fb      	ldr	r3, [r7, #12]
 800f016:	4413      	add	r3, r2
 800f018:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f01c:	681b      	ldr	r3, [r3, #0]
 800f01e:	68ba      	ldr	r2, [r7, #8]
 800f020:	0151      	lsls	r1, r2, #5
 800f022:	68fa      	ldr	r2, [r7, #12]
 800f024:	440a      	add	r2, r1
 800f026:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f02a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800f02e:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800f030:	68bb      	ldr	r3, [r7, #8]
 800f032:	015a      	lsls	r2, r3, #5
 800f034:	68fb      	ldr	r3, [r7, #12]
 800f036:	4413      	add	r3, r2
 800f038:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f03c:	681b      	ldr	r3, [r3, #0]
 800f03e:	68ba      	ldr	r2, [r7, #8]
 800f040:	0151      	lsls	r1, r2, #5
 800f042:	68fa      	ldr	r2, [r7, #12]
 800f044:	440a      	add	r2, r1
 800f046:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f04a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800f04e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800f050:	2300      	movs	r3, #0
}
 800f052:	4618      	mov	r0, r3
 800f054:	3714      	adds	r7, #20
 800f056:	46bd      	mov	sp, r7
 800f058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f05c:	4770      	bx	lr

0800f05e <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800f05e:	b480      	push	{r7}
 800f060:	b085      	sub	sp, #20
 800f062:	af00      	add	r7, sp, #0
 800f064:	6078      	str	r0, [r7, #4]
 800f066:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f068:	687b      	ldr	r3, [r7, #4]
 800f06a:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800f06c:	683b      	ldr	r3, [r7, #0]
 800f06e:	781b      	ldrb	r3, [r3, #0]
 800f070:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800f072:	683b      	ldr	r3, [r7, #0]
 800f074:	785b      	ldrb	r3, [r3, #1]
 800f076:	2b01      	cmp	r3, #1
 800f078:	d128      	bne.n	800f0cc <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800f07a:	68bb      	ldr	r3, [r7, #8]
 800f07c:	015a      	lsls	r2, r3, #5
 800f07e:	68fb      	ldr	r3, [r7, #12]
 800f080:	4413      	add	r3, r2
 800f082:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f086:	681b      	ldr	r3, [r3, #0]
 800f088:	68ba      	ldr	r2, [r7, #8]
 800f08a:	0151      	lsls	r1, r2, #5
 800f08c:	68fa      	ldr	r2, [r7, #12]
 800f08e:	440a      	add	r2, r1
 800f090:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f094:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800f098:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800f09a:	683b      	ldr	r3, [r7, #0]
 800f09c:	78db      	ldrb	r3, [r3, #3]
 800f09e:	2b03      	cmp	r3, #3
 800f0a0:	d003      	beq.n	800f0aa <USB_EPClearStall+0x4c>
 800f0a2:	683b      	ldr	r3, [r7, #0]
 800f0a4:	78db      	ldrb	r3, [r3, #3]
 800f0a6:	2b02      	cmp	r3, #2
 800f0a8:	d138      	bne.n	800f11c <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800f0aa:	68bb      	ldr	r3, [r7, #8]
 800f0ac:	015a      	lsls	r2, r3, #5
 800f0ae:	68fb      	ldr	r3, [r7, #12]
 800f0b0:	4413      	add	r3, r2
 800f0b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f0b6:	681b      	ldr	r3, [r3, #0]
 800f0b8:	68ba      	ldr	r2, [r7, #8]
 800f0ba:	0151      	lsls	r1, r2, #5
 800f0bc:	68fa      	ldr	r2, [r7, #12]
 800f0be:	440a      	add	r2, r1
 800f0c0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f0c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f0c8:	6013      	str	r3, [r2, #0]
 800f0ca:	e027      	b.n	800f11c <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800f0cc:	68bb      	ldr	r3, [r7, #8]
 800f0ce:	015a      	lsls	r2, r3, #5
 800f0d0:	68fb      	ldr	r3, [r7, #12]
 800f0d2:	4413      	add	r3, r2
 800f0d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f0d8:	681b      	ldr	r3, [r3, #0]
 800f0da:	68ba      	ldr	r2, [r7, #8]
 800f0dc:	0151      	lsls	r1, r2, #5
 800f0de:	68fa      	ldr	r2, [r7, #12]
 800f0e0:	440a      	add	r2, r1
 800f0e2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f0e6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800f0ea:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800f0ec:	683b      	ldr	r3, [r7, #0]
 800f0ee:	78db      	ldrb	r3, [r3, #3]
 800f0f0:	2b03      	cmp	r3, #3
 800f0f2:	d003      	beq.n	800f0fc <USB_EPClearStall+0x9e>
 800f0f4:	683b      	ldr	r3, [r7, #0]
 800f0f6:	78db      	ldrb	r3, [r3, #3]
 800f0f8:	2b02      	cmp	r3, #2
 800f0fa:	d10f      	bne.n	800f11c <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800f0fc:	68bb      	ldr	r3, [r7, #8]
 800f0fe:	015a      	lsls	r2, r3, #5
 800f100:	68fb      	ldr	r3, [r7, #12]
 800f102:	4413      	add	r3, r2
 800f104:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f108:	681b      	ldr	r3, [r3, #0]
 800f10a:	68ba      	ldr	r2, [r7, #8]
 800f10c:	0151      	lsls	r1, r2, #5
 800f10e:	68fa      	ldr	r2, [r7, #12]
 800f110:	440a      	add	r2, r1
 800f112:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f116:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f11a:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800f11c:	2300      	movs	r3, #0
}
 800f11e:	4618      	mov	r0, r3
 800f120:	3714      	adds	r7, #20
 800f122:	46bd      	mov	sp, r7
 800f124:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f128:	4770      	bx	lr

0800f12a <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800f12a:	b480      	push	{r7}
 800f12c:	b085      	sub	sp, #20
 800f12e:	af00      	add	r7, sp, #0
 800f130:	6078      	str	r0, [r7, #4]
 800f132:	460b      	mov	r3, r1
 800f134:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f136:	687b      	ldr	r3, [r7, #4]
 800f138:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800f13a:	68fb      	ldr	r3, [r7, #12]
 800f13c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f140:	681b      	ldr	r3, [r3, #0]
 800f142:	68fa      	ldr	r2, [r7, #12]
 800f144:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800f148:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800f14c:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800f14e:	68fb      	ldr	r3, [r7, #12]
 800f150:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f154:	681a      	ldr	r2, [r3, #0]
 800f156:	78fb      	ldrb	r3, [r7, #3]
 800f158:	011b      	lsls	r3, r3, #4
 800f15a:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800f15e:	68f9      	ldr	r1, [r7, #12]
 800f160:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f164:	4313      	orrs	r3, r2
 800f166:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800f168:	2300      	movs	r3, #0
}
 800f16a:	4618      	mov	r0, r3
 800f16c:	3714      	adds	r7, #20
 800f16e:	46bd      	mov	sp, r7
 800f170:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f174:	4770      	bx	lr

0800f176 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800f176:	b480      	push	{r7}
 800f178:	b085      	sub	sp, #20
 800f17a:	af00      	add	r7, sp, #0
 800f17c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f17e:	687b      	ldr	r3, [r7, #4]
 800f180:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800f182:	68fb      	ldr	r3, [r7, #12]
 800f184:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800f188:	681b      	ldr	r3, [r3, #0]
 800f18a:	68fa      	ldr	r2, [r7, #12]
 800f18c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800f190:	f023 0303 	bic.w	r3, r3, #3
 800f194:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800f196:	68fb      	ldr	r3, [r7, #12]
 800f198:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f19c:	685b      	ldr	r3, [r3, #4]
 800f19e:	68fa      	ldr	r2, [r7, #12]
 800f1a0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800f1a4:	f023 0302 	bic.w	r3, r3, #2
 800f1a8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800f1aa:	2300      	movs	r3, #0
}
 800f1ac:	4618      	mov	r0, r3
 800f1ae:	3714      	adds	r7, #20
 800f1b0:	46bd      	mov	sp, r7
 800f1b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1b6:	4770      	bx	lr

0800f1b8 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800f1b8:	b480      	push	{r7}
 800f1ba:	b085      	sub	sp, #20
 800f1bc:	af00      	add	r7, sp, #0
 800f1be:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f1c0:	687b      	ldr	r3, [r7, #4]
 800f1c2:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800f1c4:	68fb      	ldr	r3, [r7, #12]
 800f1c6:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800f1ca:	681b      	ldr	r3, [r3, #0]
 800f1cc:	68fa      	ldr	r2, [r7, #12]
 800f1ce:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800f1d2:	f023 0303 	bic.w	r3, r3, #3
 800f1d6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800f1d8:	68fb      	ldr	r3, [r7, #12]
 800f1da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f1de:	685b      	ldr	r3, [r3, #4]
 800f1e0:	68fa      	ldr	r2, [r7, #12]
 800f1e2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800f1e6:	f043 0302 	orr.w	r3, r3, #2
 800f1ea:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800f1ec:	2300      	movs	r3, #0
}
 800f1ee:	4618      	mov	r0, r3
 800f1f0:	3714      	adds	r7, #20
 800f1f2:	46bd      	mov	sp, r7
 800f1f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1f8:	4770      	bx	lr

0800f1fa <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800f1fa:	b480      	push	{r7}
 800f1fc:	b085      	sub	sp, #20
 800f1fe:	af00      	add	r7, sp, #0
 800f200:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800f202:	687b      	ldr	r3, [r7, #4]
 800f204:	695b      	ldr	r3, [r3, #20]
 800f206:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800f208:	687b      	ldr	r3, [r7, #4]
 800f20a:	699b      	ldr	r3, [r3, #24]
 800f20c:	68fa      	ldr	r2, [r7, #12]
 800f20e:	4013      	ands	r3, r2
 800f210:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800f212:	68fb      	ldr	r3, [r7, #12]
}
 800f214:	4618      	mov	r0, r3
 800f216:	3714      	adds	r7, #20
 800f218:	46bd      	mov	sp, r7
 800f21a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f21e:	4770      	bx	lr

0800f220 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800f220:	b480      	push	{r7}
 800f222:	b085      	sub	sp, #20
 800f224:	af00      	add	r7, sp, #0
 800f226:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f228:	687b      	ldr	r3, [r7, #4]
 800f22a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800f22c:	68fb      	ldr	r3, [r7, #12]
 800f22e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f232:	699b      	ldr	r3, [r3, #24]
 800f234:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800f236:	68fb      	ldr	r3, [r7, #12]
 800f238:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f23c:	69db      	ldr	r3, [r3, #28]
 800f23e:	68ba      	ldr	r2, [r7, #8]
 800f240:	4013      	ands	r3, r2
 800f242:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800f244:	68bb      	ldr	r3, [r7, #8]
 800f246:	0c1b      	lsrs	r3, r3, #16
}
 800f248:	4618      	mov	r0, r3
 800f24a:	3714      	adds	r7, #20
 800f24c:	46bd      	mov	sp, r7
 800f24e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f252:	4770      	bx	lr

0800f254 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800f254:	b480      	push	{r7}
 800f256:	b085      	sub	sp, #20
 800f258:	af00      	add	r7, sp, #0
 800f25a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f25c:	687b      	ldr	r3, [r7, #4]
 800f25e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800f260:	68fb      	ldr	r3, [r7, #12]
 800f262:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f266:	699b      	ldr	r3, [r3, #24]
 800f268:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800f26a:	68fb      	ldr	r3, [r7, #12]
 800f26c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f270:	69db      	ldr	r3, [r3, #28]
 800f272:	68ba      	ldr	r2, [r7, #8]
 800f274:	4013      	ands	r3, r2
 800f276:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800f278:	68bb      	ldr	r3, [r7, #8]
 800f27a:	b29b      	uxth	r3, r3
}
 800f27c:	4618      	mov	r0, r3
 800f27e:	3714      	adds	r7, #20
 800f280:	46bd      	mov	sp, r7
 800f282:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f286:	4770      	bx	lr

0800f288 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800f288:	b480      	push	{r7}
 800f28a:	b085      	sub	sp, #20
 800f28c:	af00      	add	r7, sp, #0
 800f28e:	6078      	str	r0, [r7, #4]
 800f290:	460b      	mov	r3, r1
 800f292:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f294:	687b      	ldr	r3, [r7, #4]
 800f296:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800f298:	78fb      	ldrb	r3, [r7, #3]
 800f29a:	015a      	lsls	r2, r3, #5
 800f29c:	68fb      	ldr	r3, [r7, #12]
 800f29e:	4413      	add	r3, r2
 800f2a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f2a4:	689b      	ldr	r3, [r3, #8]
 800f2a6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800f2a8:	68fb      	ldr	r3, [r7, #12]
 800f2aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f2ae:	695b      	ldr	r3, [r3, #20]
 800f2b0:	68ba      	ldr	r2, [r7, #8]
 800f2b2:	4013      	ands	r3, r2
 800f2b4:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800f2b6:	68bb      	ldr	r3, [r7, #8]
}
 800f2b8:	4618      	mov	r0, r3
 800f2ba:	3714      	adds	r7, #20
 800f2bc:	46bd      	mov	sp, r7
 800f2be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2c2:	4770      	bx	lr

0800f2c4 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800f2c4:	b480      	push	{r7}
 800f2c6:	b087      	sub	sp, #28
 800f2c8:	af00      	add	r7, sp, #0
 800f2ca:	6078      	str	r0, [r7, #4]
 800f2cc:	460b      	mov	r3, r1
 800f2ce:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f2d0:	687b      	ldr	r3, [r7, #4]
 800f2d2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800f2d4:	697b      	ldr	r3, [r7, #20]
 800f2d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f2da:	691b      	ldr	r3, [r3, #16]
 800f2dc:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800f2de:	697b      	ldr	r3, [r7, #20]
 800f2e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f2e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f2e6:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800f2e8:	78fb      	ldrb	r3, [r7, #3]
 800f2ea:	f003 030f 	and.w	r3, r3, #15
 800f2ee:	68fa      	ldr	r2, [r7, #12]
 800f2f0:	fa22 f303 	lsr.w	r3, r2, r3
 800f2f4:	01db      	lsls	r3, r3, #7
 800f2f6:	b2db      	uxtb	r3, r3
 800f2f8:	693a      	ldr	r2, [r7, #16]
 800f2fa:	4313      	orrs	r3, r2
 800f2fc:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800f2fe:	78fb      	ldrb	r3, [r7, #3]
 800f300:	015a      	lsls	r2, r3, #5
 800f302:	697b      	ldr	r3, [r7, #20]
 800f304:	4413      	add	r3, r2
 800f306:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f30a:	689b      	ldr	r3, [r3, #8]
 800f30c:	693a      	ldr	r2, [r7, #16]
 800f30e:	4013      	ands	r3, r2
 800f310:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800f312:	68bb      	ldr	r3, [r7, #8]
}
 800f314:	4618      	mov	r0, r3
 800f316:	371c      	adds	r7, #28
 800f318:	46bd      	mov	sp, r7
 800f31a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f31e:	4770      	bx	lr

0800f320 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800f320:	b480      	push	{r7}
 800f322:	b083      	sub	sp, #12
 800f324:	af00      	add	r7, sp, #0
 800f326:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800f328:	687b      	ldr	r3, [r7, #4]
 800f32a:	695b      	ldr	r3, [r3, #20]
 800f32c:	f003 0301 	and.w	r3, r3, #1
}
 800f330:	4618      	mov	r0, r3
 800f332:	370c      	adds	r7, #12
 800f334:	46bd      	mov	sp, r7
 800f336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f33a:	4770      	bx	lr

0800f33c <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800f33c:	b480      	push	{r7}
 800f33e:	b085      	sub	sp, #20
 800f340:	af00      	add	r7, sp, #0
 800f342:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f344:	687b      	ldr	r3, [r7, #4]
 800f346:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800f348:	68fb      	ldr	r3, [r7, #12]
 800f34a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f34e:	681b      	ldr	r3, [r3, #0]
 800f350:	68fa      	ldr	r2, [r7, #12]
 800f352:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f356:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800f35a:	f023 0307 	bic.w	r3, r3, #7
 800f35e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800f360:	68fb      	ldr	r3, [r7, #12]
 800f362:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f366:	685b      	ldr	r3, [r3, #4]
 800f368:	68fa      	ldr	r2, [r7, #12]
 800f36a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800f36e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800f372:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800f374:	2300      	movs	r3, #0
}
 800f376:	4618      	mov	r0, r3
 800f378:	3714      	adds	r7, #20
 800f37a:	46bd      	mov	sp, r7
 800f37c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f380:	4770      	bx	lr
	...

0800f384 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800f384:	b480      	push	{r7}
 800f386:	b087      	sub	sp, #28
 800f388:	af00      	add	r7, sp, #0
 800f38a:	60f8      	str	r0, [r7, #12]
 800f38c:	460b      	mov	r3, r1
 800f38e:	607a      	str	r2, [r7, #4]
 800f390:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f392:	68fb      	ldr	r3, [r7, #12]
 800f394:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800f396:	68fb      	ldr	r3, [r7, #12]
 800f398:	333c      	adds	r3, #60	; 0x3c
 800f39a:	3304      	adds	r3, #4
 800f39c:	681b      	ldr	r3, [r3, #0]
 800f39e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800f3a0:	693b      	ldr	r3, [r7, #16]
 800f3a2:	4a26      	ldr	r2, [pc, #152]	; (800f43c <USB_EP0_OutStart+0xb8>)
 800f3a4:	4293      	cmp	r3, r2
 800f3a6:	d90a      	bls.n	800f3be <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800f3a8:	697b      	ldr	r3, [r7, #20]
 800f3aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f3ae:	681b      	ldr	r3, [r3, #0]
 800f3b0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800f3b4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800f3b8:	d101      	bne.n	800f3be <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800f3ba:	2300      	movs	r3, #0
 800f3bc:	e037      	b.n	800f42e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800f3be:	697b      	ldr	r3, [r7, #20]
 800f3c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f3c4:	461a      	mov	r2, r3
 800f3c6:	2300      	movs	r3, #0
 800f3c8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800f3ca:	697b      	ldr	r3, [r7, #20]
 800f3cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f3d0:	691b      	ldr	r3, [r3, #16]
 800f3d2:	697a      	ldr	r2, [r7, #20]
 800f3d4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f3d8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800f3dc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800f3de:	697b      	ldr	r3, [r7, #20]
 800f3e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f3e4:	691b      	ldr	r3, [r3, #16]
 800f3e6:	697a      	ldr	r2, [r7, #20]
 800f3e8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f3ec:	f043 0318 	orr.w	r3, r3, #24
 800f3f0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800f3f2:	697b      	ldr	r3, [r7, #20]
 800f3f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f3f8:	691b      	ldr	r3, [r3, #16]
 800f3fa:	697a      	ldr	r2, [r7, #20]
 800f3fc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f400:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800f404:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800f406:	7afb      	ldrb	r3, [r7, #11]
 800f408:	2b01      	cmp	r3, #1
 800f40a:	d10f      	bne.n	800f42c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800f40c:	697b      	ldr	r3, [r7, #20]
 800f40e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f412:	461a      	mov	r2, r3
 800f414:	687b      	ldr	r3, [r7, #4]
 800f416:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800f418:	697b      	ldr	r3, [r7, #20]
 800f41a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f41e:	681b      	ldr	r3, [r3, #0]
 800f420:	697a      	ldr	r2, [r7, #20]
 800f422:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f426:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800f42a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800f42c:	2300      	movs	r3, #0
}
 800f42e:	4618      	mov	r0, r3
 800f430:	371c      	adds	r7, #28
 800f432:	46bd      	mov	sp, r7
 800f434:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f438:	4770      	bx	lr
 800f43a:	bf00      	nop
 800f43c:	4f54300a 	.word	0x4f54300a

0800f440 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800f440:	b480      	push	{r7}
 800f442:	b085      	sub	sp, #20
 800f444:	af00      	add	r7, sp, #0
 800f446:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800f448:	2300      	movs	r3, #0
 800f44a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800f44c:	68fb      	ldr	r3, [r7, #12]
 800f44e:	3301      	adds	r3, #1
 800f450:	60fb      	str	r3, [r7, #12]
 800f452:	4a13      	ldr	r2, [pc, #76]	; (800f4a0 <USB_CoreReset+0x60>)
 800f454:	4293      	cmp	r3, r2
 800f456:	d901      	bls.n	800f45c <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 800f458:	2303      	movs	r3, #3
 800f45a:	e01a      	b.n	800f492 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800f45c:	687b      	ldr	r3, [r7, #4]
 800f45e:	691b      	ldr	r3, [r3, #16]
 800f460:	2b00      	cmp	r3, #0
 800f462:	daf3      	bge.n	800f44c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800f464:	2300      	movs	r3, #0
 800f466:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800f468:	687b      	ldr	r3, [r7, #4]
 800f46a:	691b      	ldr	r3, [r3, #16]
 800f46c:	f043 0201 	orr.w	r2, r3, #1
 800f470:	687b      	ldr	r3, [r7, #4]
 800f472:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800f474:	68fb      	ldr	r3, [r7, #12]
 800f476:	3301      	adds	r3, #1
 800f478:	60fb      	str	r3, [r7, #12]
 800f47a:	4a09      	ldr	r2, [pc, #36]	; (800f4a0 <USB_CoreReset+0x60>)
 800f47c:	4293      	cmp	r3, r2
 800f47e:	d901      	bls.n	800f484 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 800f480:	2303      	movs	r3, #3
 800f482:	e006      	b.n	800f492 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800f484:	687b      	ldr	r3, [r7, #4]
 800f486:	691b      	ldr	r3, [r3, #16]
 800f488:	f003 0301 	and.w	r3, r3, #1
 800f48c:	2b01      	cmp	r3, #1
 800f48e:	d0f1      	beq.n	800f474 <USB_CoreReset+0x34>

  return HAL_OK;
 800f490:	2300      	movs	r3, #0
}
 800f492:	4618      	mov	r0, r3
 800f494:	3714      	adds	r7, #20
 800f496:	46bd      	mov	sp, r7
 800f498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f49c:	4770      	bx	lr
 800f49e:	bf00      	nop
 800f4a0:	00030d40 	.word	0x00030d40

0800f4a4 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800f4a4:	b580      	push	{r7, lr}
 800f4a6:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 800f4a8:	4904      	ldr	r1, [pc, #16]	; (800f4bc <MX_FATFS_Init+0x18>)
 800f4aa:	4805      	ldr	r0, [pc, #20]	; (800f4c0 <MX_FATFS_Init+0x1c>)
 800f4ac:	f001 fd0e 	bl	8010ecc <FATFS_LinkDriver>
 800f4b0:	4603      	mov	r3, r0
 800f4b2:	461a      	mov	r2, r3
 800f4b4:	4b03      	ldr	r3, [pc, #12]	; (800f4c4 <MX_FATFS_Init+0x20>)
 800f4b6:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800f4b8:	bf00      	nop
 800f4ba:	bd80      	pop	{r7, pc}
 800f4bc:	20002178 	.word	0x20002178
 800f4c0:	20000028 	.word	0x20000028
 800f4c4:	20002174 	.word	0x20002174

0800f4c8 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800f4c8:	b480      	push	{r7}
 800f4ca:	b083      	sub	sp, #12
 800f4cc:	af00      	add	r7, sp, #0
 800f4ce:	4603      	mov	r3, r0
 800f4d0:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    Stat = STA_NOINIT;
 800f4d2:	4b06      	ldr	r3, [pc, #24]	; (800f4ec <USER_initialize+0x24>)
 800f4d4:	2201      	movs	r2, #1
 800f4d6:	701a      	strb	r2, [r3, #0]
    return Stat;
 800f4d8:	4b04      	ldr	r3, [pc, #16]	; (800f4ec <USER_initialize+0x24>)
 800f4da:	781b      	ldrb	r3, [r3, #0]
 800f4dc:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 800f4de:	4618      	mov	r0, r3
 800f4e0:	370c      	adds	r7, #12
 800f4e2:	46bd      	mov	sp, r7
 800f4e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4e8:	4770      	bx	lr
 800f4ea:	bf00      	nop
 800f4ec:	20000025 	.word	0x20000025

0800f4f0 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800f4f0:	b480      	push	{r7}
 800f4f2:	b083      	sub	sp, #12
 800f4f4:	af00      	add	r7, sp, #0
 800f4f6:	4603      	mov	r3, r0
 800f4f8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    Stat = STA_NOINIT;
 800f4fa:	4b06      	ldr	r3, [pc, #24]	; (800f514 <USER_status+0x24>)
 800f4fc:	2201      	movs	r2, #1
 800f4fe:	701a      	strb	r2, [r3, #0]
    return Stat;
 800f500:	4b04      	ldr	r3, [pc, #16]	; (800f514 <USER_status+0x24>)
 800f502:	781b      	ldrb	r3, [r3, #0]
 800f504:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 800f506:	4618      	mov	r0, r3
 800f508:	370c      	adds	r7, #12
 800f50a:	46bd      	mov	sp, r7
 800f50c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f510:	4770      	bx	lr
 800f512:	bf00      	nop
 800f514:	20000025 	.word	0x20000025

0800f518 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800f518:	b480      	push	{r7}
 800f51a:	b085      	sub	sp, #20
 800f51c:	af00      	add	r7, sp, #0
 800f51e:	60b9      	str	r1, [r7, #8]
 800f520:	607a      	str	r2, [r7, #4]
 800f522:	603b      	str	r3, [r7, #0]
 800f524:	4603      	mov	r3, r0
 800f526:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return RES_OK;
 800f528:	2300      	movs	r3, #0
  /* USER CODE END READ */
}
 800f52a:	4618      	mov	r0, r3
 800f52c:	3714      	adds	r7, #20
 800f52e:	46bd      	mov	sp, r7
 800f530:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f534:	4770      	bx	lr

0800f536 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800f536:	b480      	push	{r7}
 800f538:	b085      	sub	sp, #20
 800f53a:	af00      	add	r7, sp, #0
 800f53c:	60b9      	str	r1, [r7, #8]
 800f53e:	607a      	str	r2, [r7, #4]
 800f540:	603b      	str	r3, [r7, #0]
 800f542:	4603      	mov	r3, r0
 800f544:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return RES_OK;
 800f546:	2300      	movs	r3, #0
  /* USER CODE END WRITE */
}
 800f548:	4618      	mov	r0, r3
 800f54a:	3714      	adds	r7, #20
 800f54c:	46bd      	mov	sp, r7
 800f54e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f552:	4770      	bx	lr

0800f554 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800f554:	b480      	push	{r7}
 800f556:	b085      	sub	sp, #20
 800f558:	af00      	add	r7, sp, #0
 800f55a:	4603      	mov	r3, r0
 800f55c:	603a      	str	r2, [r7, #0]
 800f55e:	71fb      	strb	r3, [r7, #7]
 800f560:	460b      	mov	r3, r1
 800f562:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    DRESULT res = RES_ERROR;
 800f564:	2301      	movs	r3, #1
 800f566:	73fb      	strb	r3, [r7, #15]
    return res;
 800f568:	7bfb      	ldrb	r3, [r7, #15]
  /* USER CODE END IOCTL */
}
 800f56a:	4618      	mov	r0, r3
 800f56c:	3714      	adds	r7, #20
 800f56e:	46bd      	mov	sp, r7
 800f570:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f574:	4770      	bx	lr

0800f576 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800f576:	b580      	push	{r7, lr}
 800f578:	b084      	sub	sp, #16
 800f57a:	af00      	add	r7, sp, #0
 800f57c:	6078      	str	r0, [r7, #4]
 800f57e:	460b      	mov	r3, r1
 800f580:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800f582:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800f586:	f005 faa9 	bl	8014adc <USBD_static_malloc>
 800f58a:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800f58c:	68fb      	ldr	r3, [r7, #12]
 800f58e:	2b00      	cmp	r3, #0
 800f590:	d105      	bne.n	800f59e <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 800f592:	687b      	ldr	r3, [r7, #4]
 800f594:	2200      	movs	r2, #0
 800f596:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800f59a:	2302      	movs	r3, #2
 800f59c:	e066      	b.n	800f66c <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 800f59e:	687b      	ldr	r3, [r7, #4]
 800f5a0:	68fa      	ldr	r2, [r7, #12]
 800f5a2:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f5a6:	687b      	ldr	r3, [r7, #4]
 800f5a8:	7c1b      	ldrb	r3, [r3, #16]
 800f5aa:	2b00      	cmp	r3, #0
 800f5ac:	d119      	bne.n	800f5e2 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800f5ae:	f44f 7300 	mov.w	r3, #512	; 0x200
 800f5b2:	2202      	movs	r2, #2
 800f5b4:	2181      	movs	r1, #129	; 0x81
 800f5b6:	6878      	ldr	r0, [r7, #4]
 800f5b8:	f005 f96d 	bl	8014896 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800f5bc:	687b      	ldr	r3, [r7, #4]
 800f5be:	2201      	movs	r2, #1
 800f5c0:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800f5c2:	f44f 7300 	mov.w	r3, #512	; 0x200
 800f5c6:	2202      	movs	r2, #2
 800f5c8:	2101      	movs	r1, #1
 800f5ca:	6878      	ldr	r0, [r7, #4]
 800f5cc:	f005 f963 	bl	8014896 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800f5d0:	687b      	ldr	r3, [r7, #4]
 800f5d2:	2201      	movs	r2, #1
 800f5d4:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800f5d8:	687b      	ldr	r3, [r7, #4]
 800f5da:	2210      	movs	r2, #16
 800f5dc:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800f5e0:	e016      	b.n	800f610 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800f5e2:	2340      	movs	r3, #64	; 0x40
 800f5e4:	2202      	movs	r2, #2
 800f5e6:	2181      	movs	r1, #129	; 0x81
 800f5e8:	6878      	ldr	r0, [r7, #4]
 800f5ea:	f005 f954 	bl	8014896 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800f5ee:	687b      	ldr	r3, [r7, #4]
 800f5f0:	2201      	movs	r2, #1
 800f5f2:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800f5f4:	2340      	movs	r3, #64	; 0x40
 800f5f6:	2202      	movs	r2, #2
 800f5f8:	2101      	movs	r1, #1
 800f5fa:	6878      	ldr	r0, [r7, #4]
 800f5fc:	f005 f94b 	bl	8014896 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800f600:	687b      	ldr	r3, [r7, #4]
 800f602:	2201      	movs	r2, #1
 800f604:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800f608:	687b      	ldr	r3, [r7, #4]
 800f60a:	2210      	movs	r2, #16
 800f60c:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800f610:	2308      	movs	r3, #8
 800f612:	2203      	movs	r2, #3
 800f614:	2182      	movs	r1, #130	; 0x82
 800f616:	6878      	ldr	r0, [r7, #4]
 800f618:	f005 f93d 	bl	8014896 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800f61c:	687b      	ldr	r3, [r7, #4]
 800f61e:	2201      	movs	r2, #1
 800f620:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800f624:	687b      	ldr	r3, [r7, #4]
 800f626:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800f62a:	681b      	ldr	r3, [r3, #0]
 800f62c:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800f62e:	68fb      	ldr	r3, [r7, #12]
 800f630:	2200      	movs	r2, #0
 800f632:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800f636:	68fb      	ldr	r3, [r7, #12]
 800f638:	2200      	movs	r2, #0
 800f63a:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f63e:	687b      	ldr	r3, [r7, #4]
 800f640:	7c1b      	ldrb	r3, [r3, #16]
 800f642:	2b00      	cmp	r3, #0
 800f644:	d109      	bne.n	800f65a <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800f646:	68fb      	ldr	r3, [r7, #12]
 800f648:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800f64c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800f650:	2101      	movs	r1, #1
 800f652:	6878      	ldr	r0, [r7, #4]
 800f654:	f005 fa0e 	bl	8014a74 <USBD_LL_PrepareReceive>
 800f658:	e007      	b.n	800f66a <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800f65a:	68fb      	ldr	r3, [r7, #12]
 800f65c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800f660:	2340      	movs	r3, #64	; 0x40
 800f662:	2101      	movs	r1, #1
 800f664:	6878      	ldr	r0, [r7, #4]
 800f666:	f005 fa05 	bl	8014a74 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800f66a:	2300      	movs	r3, #0
}
 800f66c:	4618      	mov	r0, r3
 800f66e:	3710      	adds	r7, #16
 800f670:	46bd      	mov	sp, r7
 800f672:	bd80      	pop	{r7, pc}

0800f674 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800f674:	b580      	push	{r7, lr}
 800f676:	b082      	sub	sp, #8
 800f678:	af00      	add	r7, sp, #0
 800f67a:	6078      	str	r0, [r7, #4]
 800f67c:	460b      	mov	r3, r1
 800f67e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800f680:	2181      	movs	r1, #129	; 0x81
 800f682:	6878      	ldr	r0, [r7, #4]
 800f684:	f005 f92d 	bl	80148e2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800f688:	687b      	ldr	r3, [r7, #4]
 800f68a:	2200      	movs	r2, #0
 800f68c:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800f68e:	2101      	movs	r1, #1
 800f690:	6878      	ldr	r0, [r7, #4]
 800f692:	f005 f926 	bl	80148e2 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800f696:	687b      	ldr	r3, [r7, #4]
 800f698:	2200      	movs	r2, #0
 800f69a:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800f69e:	2182      	movs	r1, #130	; 0x82
 800f6a0:	6878      	ldr	r0, [r7, #4]
 800f6a2:	f005 f91e 	bl	80148e2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800f6a6:	687b      	ldr	r3, [r7, #4]
 800f6a8:	2200      	movs	r2, #0
 800f6aa:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800f6ae:	687b      	ldr	r3, [r7, #4]
 800f6b0:	2200      	movs	r2, #0
 800f6b2:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800f6b6:	687b      	ldr	r3, [r7, #4]
 800f6b8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f6bc:	2b00      	cmp	r3, #0
 800f6be:	d00e      	beq.n	800f6de <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800f6c0:	687b      	ldr	r3, [r7, #4]
 800f6c2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800f6c6:	685b      	ldr	r3, [r3, #4]
 800f6c8:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800f6ca:	687b      	ldr	r3, [r7, #4]
 800f6cc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f6d0:	4618      	mov	r0, r3
 800f6d2:	f005 fa11 	bl	8014af8 <USBD_static_free>
    pdev->pClassData = NULL;
 800f6d6:	687b      	ldr	r3, [r7, #4]
 800f6d8:	2200      	movs	r2, #0
 800f6da:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800f6de:	2300      	movs	r3, #0
}
 800f6e0:	4618      	mov	r0, r3
 800f6e2:	3708      	adds	r7, #8
 800f6e4:	46bd      	mov	sp, r7
 800f6e6:	bd80      	pop	{r7, pc}

0800f6e8 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800f6e8:	b580      	push	{r7, lr}
 800f6ea:	b086      	sub	sp, #24
 800f6ec:	af00      	add	r7, sp, #0
 800f6ee:	6078      	str	r0, [r7, #4]
 800f6f0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800f6f2:	687b      	ldr	r3, [r7, #4]
 800f6f4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f6f8:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800f6fa:	2300      	movs	r3, #0
 800f6fc:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800f6fe:	2300      	movs	r3, #0
 800f700:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800f702:	2300      	movs	r3, #0
 800f704:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800f706:	693b      	ldr	r3, [r7, #16]
 800f708:	2b00      	cmp	r3, #0
 800f70a:	d101      	bne.n	800f710 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 800f70c:	2303      	movs	r3, #3
 800f70e:	e0af      	b.n	800f870 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f710:	683b      	ldr	r3, [r7, #0]
 800f712:	781b      	ldrb	r3, [r3, #0]
 800f714:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800f718:	2b00      	cmp	r3, #0
 800f71a:	d03f      	beq.n	800f79c <USBD_CDC_Setup+0xb4>
 800f71c:	2b20      	cmp	r3, #32
 800f71e:	f040 809f 	bne.w	800f860 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800f722:	683b      	ldr	r3, [r7, #0]
 800f724:	88db      	ldrh	r3, [r3, #6]
 800f726:	2b00      	cmp	r3, #0
 800f728:	d02e      	beq.n	800f788 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800f72a:	683b      	ldr	r3, [r7, #0]
 800f72c:	781b      	ldrb	r3, [r3, #0]
 800f72e:	b25b      	sxtb	r3, r3
 800f730:	2b00      	cmp	r3, #0
 800f732:	da16      	bge.n	800f762 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800f734:	687b      	ldr	r3, [r7, #4]
 800f736:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800f73a:	689b      	ldr	r3, [r3, #8]
 800f73c:	683a      	ldr	r2, [r7, #0]
 800f73e:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 800f740:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800f742:	683a      	ldr	r2, [r7, #0]
 800f744:	88d2      	ldrh	r2, [r2, #6]
 800f746:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800f748:	683b      	ldr	r3, [r7, #0]
 800f74a:	88db      	ldrh	r3, [r3, #6]
 800f74c:	2b07      	cmp	r3, #7
 800f74e:	bf28      	it	cs
 800f750:	2307      	movcs	r3, #7
 800f752:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800f754:	693b      	ldr	r3, [r7, #16]
 800f756:	89fa      	ldrh	r2, [r7, #14]
 800f758:	4619      	mov	r1, r3
 800f75a:	6878      	ldr	r0, [r7, #4]
 800f75c:	f001 fae9 	bl	8010d32 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 800f760:	e085      	b.n	800f86e <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 800f762:	683b      	ldr	r3, [r7, #0]
 800f764:	785a      	ldrb	r2, [r3, #1]
 800f766:	693b      	ldr	r3, [r7, #16]
 800f768:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800f76c:	683b      	ldr	r3, [r7, #0]
 800f76e:	88db      	ldrh	r3, [r3, #6]
 800f770:	b2da      	uxtb	r2, r3
 800f772:	693b      	ldr	r3, [r7, #16]
 800f774:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800f778:	6939      	ldr	r1, [r7, #16]
 800f77a:	683b      	ldr	r3, [r7, #0]
 800f77c:	88db      	ldrh	r3, [r3, #6]
 800f77e:	461a      	mov	r2, r3
 800f780:	6878      	ldr	r0, [r7, #4]
 800f782:	f001 fb02 	bl	8010d8a <USBD_CtlPrepareRx>
      break;
 800f786:	e072      	b.n	800f86e <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800f788:	687b      	ldr	r3, [r7, #4]
 800f78a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800f78e:	689b      	ldr	r3, [r3, #8]
 800f790:	683a      	ldr	r2, [r7, #0]
 800f792:	7850      	ldrb	r0, [r2, #1]
 800f794:	2200      	movs	r2, #0
 800f796:	6839      	ldr	r1, [r7, #0]
 800f798:	4798      	blx	r3
      break;
 800f79a:	e068      	b.n	800f86e <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800f79c:	683b      	ldr	r3, [r7, #0]
 800f79e:	785b      	ldrb	r3, [r3, #1]
 800f7a0:	2b0b      	cmp	r3, #11
 800f7a2:	d852      	bhi.n	800f84a <USBD_CDC_Setup+0x162>
 800f7a4:	a201      	add	r2, pc, #4	; (adr r2, 800f7ac <USBD_CDC_Setup+0xc4>)
 800f7a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f7aa:	bf00      	nop
 800f7ac:	0800f7dd 	.word	0x0800f7dd
 800f7b0:	0800f859 	.word	0x0800f859
 800f7b4:	0800f84b 	.word	0x0800f84b
 800f7b8:	0800f84b 	.word	0x0800f84b
 800f7bc:	0800f84b 	.word	0x0800f84b
 800f7c0:	0800f84b 	.word	0x0800f84b
 800f7c4:	0800f84b 	.word	0x0800f84b
 800f7c8:	0800f84b 	.word	0x0800f84b
 800f7cc:	0800f84b 	.word	0x0800f84b
 800f7d0:	0800f84b 	.word	0x0800f84b
 800f7d4:	0800f807 	.word	0x0800f807
 800f7d8:	0800f831 	.word	0x0800f831
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f7dc:	687b      	ldr	r3, [r7, #4]
 800f7de:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f7e2:	b2db      	uxtb	r3, r3
 800f7e4:	2b03      	cmp	r3, #3
 800f7e6:	d107      	bne.n	800f7f8 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800f7e8:	f107 030a 	add.w	r3, r7, #10
 800f7ec:	2202      	movs	r2, #2
 800f7ee:	4619      	mov	r1, r3
 800f7f0:	6878      	ldr	r0, [r7, #4]
 800f7f2:	f001 fa9e 	bl	8010d32 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800f7f6:	e032      	b.n	800f85e <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800f7f8:	6839      	ldr	r1, [r7, #0]
 800f7fa:	6878      	ldr	r0, [r7, #4]
 800f7fc:	f001 fa28 	bl	8010c50 <USBD_CtlError>
            ret = USBD_FAIL;
 800f800:	2303      	movs	r3, #3
 800f802:	75fb      	strb	r3, [r7, #23]
          break;
 800f804:	e02b      	b.n	800f85e <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f806:	687b      	ldr	r3, [r7, #4]
 800f808:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f80c:	b2db      	uxtb	r3, r3
 800f80e:	2b03      	cmp	r3, #3
 800f810:	d107      	bne.n	800f822 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800f812:	f107 030d 	add.w	r3, r7, #13
 800f816:	2201      	movs	r2, #1
 800f818:	4619      	mov	r1, r3
 800f81a:	6878      	ldr	r0, [r7, #4]
 800f81c:	f001 fa89 	bl	8010d32 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800f820:	e01d      	b.n	800f85e <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800f822:	6839      	ldr	r1, [r7, #0]
 800f824:	6878      	ldr	r0, [r7, #4]
 800f826:	f001 fa13 	bl	8010c50 <USBD_CtlError>
            ret = USBD_FAIL;
 800f82a:	2303      	movs	r3, #3
 800f82c:	75fb      	strb	r3, [r7, #23]
          break;
 800f82e:	e016      	b.n	800f85e <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800f830:	687b      	ldr	r3, [r7, #4]
 800f832:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f836:	b2db      	uxtb	r3, r3
 800f838:	2b03      	cmp	r3, #3
 800f83a:	d00f      	beq.n	800f85c <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 800f83c:	6839      	ldr	r1, [r7, #0]
 800f83e:	6878      	ldr	r0, [r7, #4]
 800f840:	f001 fa06 	bl	8010c50 <USBD_CtlError>
            ret = USBD_FAIL;
 800f844:	2303      	movs	r3, #3
 800f846:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800f848:	e008      	b.n	800f85c <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800f84a:	6839      	ldr	r1, [r7, #0]
 800f84c:	6878      	ldr	r0, [r7, #4]
 800f84e:	f001 f9ff 	bl	8010c50 <USBD_CtlError>
          ret = USBD_FAIL;
 800f852:	2303      	movs	r3, #3
 800f854:	75fb      	strb	r3, [r7, #23]
          break;
 800f856:	e002      	b.n	800f85e <USBD_CDC_Setup+0x176>
          break;
 800f858:	bf00      	nop
 800f85a:	e008      	b.n	800f86e <USBD_CDC_Setup+0x186>
          break;
 800f85c:	bf00      	nop
      }
      break;
 800f85e:	e006      	b.n	800f86e <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 800f860:	6839      	ldr	r1, [r7, #0]
 800f862:	6878      	ldr	r0, [r7, #4]
 800f864:	f001 f9f4 	bl	8010c50 <USBD_CtlError>
      ret = USBD_FAIL;
 800f868:	2303      	movs	r3, #3
 800f86a:	75fb      	strb	r3, [r7, #23]
      break;
 800f86c:	bf00      	nop
  }

  return (uint8_t)ret;
 800f86e:	7dfb      	ldrb	r3, [r7, #23]
}
 800f870:	4618      	mov	r0, r3
 800f872:	3718      	adds	r7, #24
 800f874:	46bd      	mov	sp, r7
 800f876:	bd80      	pop	{r7, pc}

0800f878 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800f878:	b580      	push	{r7, lr}
 800f87a:	b084      	sub	sp, #16
 800f87c:	af00      	add	r7, sp, #0
 800f87e:	6078      	str	r0, [r7, #4]
 800f880:	460b      	mov	r3, r1
 800f882:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800f884:	687b      	ldr	r3, [r7, #4]
 800f886:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800f88a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800f88c:	687b      	ldr	r3, [r7, #4]
 800f88e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f892:	2b00      	cmp	r3, #0
 800f894:	d101      	bne.n	800f89a <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800f896:	2303      	movs	r3, #3
 800f898:	e04f      	b.n	800f93a <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800f89a:	687b      	ldr	r3, [r7, #4]
 800f89c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f8a0:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800f8a2:	78fa      	ldrb	r2, [r7, #3]
 800f8a4:	6879      	ldr	r1, [r7, #4]
 800f8a6:	4613      	mov	r3, r2
 800f8a8:	009b      	lsls	r3, r3, #2
 800f8aa:	4413      	add	r3, r2
 800f8ac:	009b      	lsls	r3, r3, #2
 800f8ae:	440b      	add	r3, r1
 800f8b0:	3318      	adds	r3, #24
 800f8b2:	681b      	ldr	r3, [r3, #0]
 800f8b4:	2b00      	cmp	r3, #0
 800f8b6:	d029      	beq.n	800f90c <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800f8b8:	78fa      	ldrb	r2, [r7, #3]
 800f8ba:	6879      	ldr	r1, [r7, #4]
 800f8bc:	4613      	mov	r3, r2
 800f8be:	009b      	lsls	r3, r3, #2
 800f8c0:	4413      	add	r3, r2
 800f8c2:	009b      	lsls	r3, r3, #2
 800f8c4:	440b      	add	r3, r1
 800f8c6:	3318      	adds	r3, #24
 800f8c8:	681a      	ldr	r2, [r3, #0]
 800f8ca:	78f9      	ldrb	r1, [r7, #3]
 800f8cc:	68f8      	ldr	r0, [r7, #12]
 800f8ce:	460b      	mov	r3, r1
 800f8d0:	00db      	lsls	r3, r3, #3
 800f8d2:	1a5b      	subs	r3, r3, r1
 800f8d4:	009b      	lsls	r3, r3, #2
 800f8d6:	4403      	add	r3, r0
 800f8d8:	3344      	adds	r3, #68	; 0x44
 800f8da:	681b      	ldr	r3, [r3, #0]
 800f8dc:	fbb2 f1f3 	udiv	r1, r2, r3
 800f8e0:	fb01 f303 	mul.w	r3, r1, r3
 800f8e4:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800f8e6:	2b00      	cmp	r3, #0
 800f8e8:	d110      	bne.n	800f90c <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800f8ea:	78fa      	ldrb	r2, [r7, #3]
 800f8ec:	6879      	ldr	r1, [r7, #4]
 800f8ee:	4613      	mov	r3, r2
 800f8f0:	009b      	lsls	r3, r3, #2
 800f8f2:	4413      	add	r3, r2
 800f8f4:	009b      	lsls	r3, r3, #2
 800f8f6:	440b      	add	r3, r1
 800f8f8:	3318      	adds	r3, #24
 800f8fa:	2200      	movs	r2, #0
 800f8fc:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800f8fe:	78f9      	ldrb	r1, [r7, #3]
 800f900:	2300      	movs	r3, #0
 800f902:	2200      	movs	r2, #0
 800f904:	6878      	ldr	r0, [r7, #4]
 800f906:	f005 f894 	bl	8014a32 <USBD_LL_Transmit>
 800f90a:	e015      	b.n	800f938 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 800f90c:	68bb      	ldr	r3, [r7, #8]
 800f90e:	2200      	movs	r2, #0
 800f910:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800f914:	687b      	ldr	r3, [r7, #4]
 800f916:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800f91a:	691b      	ldr	r3, [r3, #16]
 800f91c:	2b00      	cmp	r3, #0
 800f91e:	d00b      	beq.n	800f938 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800f920:	687b      	ldr	r3, [r7, #4]
 800f922:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800f926:	691b      	ldr	r3, [r3, #16]
 800f928:	68ba      	ldr	r2, [r7, #8]
 800f92a:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800f92e:	68ba      	ldr	r2, [r7, #8]
 800f930:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800f934:	78fa      	ldrb	r2, [r7, #3]
 800f936:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800f938:	2300      	movs	r3, #0
}
 800f93a:	4618      	mov	r0, r3
 800f93c:	3710      	adds	r7, #16
 800f93e:	46bd      	mov	sp, r7
 800f940:	bd80      	pop	{r7, pc}

0800f942 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800f942:	b580      	push	{r7, lr}
 800f944:	b084      	sub	sp, #16
 800f946:	af00      	add	r7, sp, #0
 800f948:	6078      	str	r0, [r7, #4]
 800f94a:	460b      	mov	r3, r1
 800f94c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800f94e:	687b      	ldr	r3, [r7, #4]
 800f950:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f954:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800f956:	687b      	ldr	r3, [r7, #4]
 800f958:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f95c:	2b00      	cmp	r3, #0
 800f95e:	d101      	bne.n	800f964 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800f960:	2303      	movs	r3, #3
 800f962:	e015      	b.n	800f990 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800f964:	78fb      	ldrb	r3, [r7, #3]
 800f966:	4619      	mov	r1, r3
 800f968:	6878      	ldr	r0, [r7, #4]
 800f96a:	f005 f8a4 	bl	8014ab6 <USBD_LL_GetRxDataSize>
 800f96e:	4602      	mov	r2, r0
 800f970:	68fb      	ldr	r3, [r7, #12]
 800f972:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800f976:	687b      	ldr	r3, [r7, #4]
 800f978:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800f97c:	68db      	ldr	r3, [r3, #12]
 800f97e:	68fa      	ldr	r2, [r7, #12]
 800f980:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800f984:	68fa      	ldr	r2, [r7, #12]
 800f986:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800f98a:	4611      	mov	r1, r2
 800f98c:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800f98e:	2300      	movs	r3, #0
}
 800f990:	4618      	mov	r0, r3
 800f992:	3710      	adds	r7, #16
 800f994:	46bd      	mov	sp, r7
 800f996:	bd80      	pop	{r7, pc}

0800f998 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800f998:	b580      	push	{r7, lr}
 800f99a:	b084      	sub	sp, #16
 800f99c:	af00      	add	r7, sp, #0
 800f99e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800f9a0:	687b      	ldr	r3, [r7, #4]
 800f9a2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f9a6:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800f9a8:	68fb      	ldr	r3, [r7, #12]
 800f9aa:	2b00      	cmp	r3, #0
 800f9ac:	d101      	bne.n	800f9b2 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800f9ae:	2303      	movs	r3, #3
 800f9b0:	e01b      	b.n	800f9ea <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800f9b2:	687b      	ldr	r3, [r7, #4]
 800f9b4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800f9b8:	2b00      	cmp	r3, #0
 800f9ba:	d015      	beq.n	800f9e8 <USBD_CDC_EP0_RxReady+0x50>
 800f9bc:	68fb      	ldr	r3, [r7, #12]
 800f9be:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800f9c2:	2bff      	cmp	r3, #255	; 0xff
 800f9c4:	d010      	beq.n	800f9e8 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800f9c6:	687b      	ldr	r3, [r7, #4]
 800f9c8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800f9cc:	689b      	ldr	r3, [r3, #8]
 800f9ce:	68fa      	ldr	r2, [r7, #12]
 800f9d0:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800f9d4:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800f9d6:	68fa      	ldr	r2, [r7, #12]
 800f9d8:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800f9dc:	b292      	uxth	r2, r2
 800f9de:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800f9e0:	68fb      	ldr	r3, [r7, #12]
 800f9e2:	22ff      	movs	r2, #255	; 0xff
 800f9e4:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800f9e8:	2300      	movs	r3, #0
}
 800f9ea:	4618      	mov	r0, r3
 800f9ec:	3710      	adds	r7, #16
 800f9ee:	46bd      	mov	sp, r7
 800f9f0:	bd80      	pop	{r7, pc}
	...

0800f9f4 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800f9f4:	b480      	push	{r7}
 800f9f6:	b083      	sub	sp, #12
 800f9f8:	af00      	add	r7, sp, #0
 800f9fa:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800f9fc:	687b      	ldr	r3, [r7, #4]
 800f9fe:	2243      	movs	r2, #67	; 0x43
 800fa00:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800fa02:	4b03      	ldr	r3, [pc, #12]	; (800fa10 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800fa04:	4618      	mov	r0, r3
 800fa06:	370c      	adds	r7, #12
 800fa08:	46bd      	mov	sp, r7
 800fa0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa0e:	4770      	bx	lr
 800fa10:	200000c4 	.word	0x200000c4

0800fa14 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800fa14:	b480      	push	{r7}
 800fa16:	b083      	sub	sp, #12
 800fa18:	af00      	add	r7, sp, #0
 800fa1a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800fa1c:	687b      	ldr	r3, [r7, #4]
 800fa1e:	2243      	movs	r2, #67	; 0x43
 800fa20:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800fa22:	4b03      	ldr	r3, [pc, #12]	; (800fa30 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800fa24:	4618      	mov	r0, r3
 800fa26:	370c      	adds	r7, #12
 800fa28:	46bd      	mov	sp, r7
 800fa2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa2e:	4770      	bx	lr
 800fa30:	20000080 	.word	0x20000080

0800fa34 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800fa34:	b480      	push	{r7}
 800fa36:	b083      	sub	sp, #12
 800fa38:	af00      	add	r7, sp, #0
 800fa3a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800fa3c:	687b      	ldr	r3, [r7, #4]
 800fa3e:	2243      	movs	r2, #67	; 0x43
 800fa40:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800fa42:	4b03      	ldr	r3, [pc, #12]	; (800fa50 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800fa44:	4618      	mov	r0, r3
 800fa46:	370c      	adds	r7, #12
 800fa48:	46bd      	mov	sp, r7
 800fa4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa4e:	4770      	bx	lr
 800fa50:	20000108 	.word	0x20000108

0800fa54 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800fa54:	b480      	push	{r7}
 800fa56:	b083      	sub	sp, #12
 800fa58:	af00      	add	r7, sp, #0
 800fa5a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800fa5c:	687b      	ldr	r3, [r7, #4]
 800fa5e:	220a      	movs	r2, #10
 800fa60:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800fa62:	4b03      	ldr	r3, [pc, #12]	; (800fa70 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800fa64:	4618      	mov	r0, r3
 800fa66:	370c      	adds	r7, #12
 800fa68:	46bd      	mov	sp, r7
 800fa6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa6e:	4770      	bx	lr
 800fa70:	2000003c 	.word	0x2000003c

0800fa74 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800fa74:	b480      	push	{r7}
 800fa76:	b083      	sub	sp, #12
 800fa78:	af00      	add	r7, sp, #0
 800fa7a:	6078      	str	r0, [r7, #4]
 800fa7c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800fa7e:	683b      	ldr	r3, [r7, #0]
 800fa80:	2b00      	cmp	r3, #0
 800fa82:	d101      	bne.n	800fa88 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800fa84:	2303      	movs	r3, #3
 800fa86:	e004      	b.n	800fa92 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800fa88:	687b      	ldr	r3, [r7, #4]
 800fa8a:	683a      	ldr	r2, [r7, #0]
 800fa8c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800fa90:	2300      	movs	r3, #0
}
 800fa92:	4618      	mov	r0, r3
 800fa94:	370c      	adds	r7, #12
 800fa96:	46bd      	mov	sp, r7
 800fa98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa9c:	4770      	bx	lr

0800fa9e <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800fa9e:	b480      	push	{r7}
 800faa0:	b087      	sub	sp, #28
 800faa2:	af00      	add	r7, sp, #0
 800faa4:	60f8      	str	r0, [r7, #12]
 800faa6:	60b9      	str	r1, [r7, #8]
 800faa8:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800faaa:	68fb      	ldr	r3, [r7, #12]
 800faac:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800fab0:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800fab2:	697b      	ldr	r3, [r7, #20]
 800fab4:	2b00      	cmp	r3, #0
 800fab6:	d101      	bne.n	800fabc <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800fab8:	2303      	movs	r3, #3
 800faba:	e008      	b.n	800face <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 800fabc:	697b      	ldr	r3, [r7, #20]
 800fabe:	68ba      	ldr	r2, [r7, #8]
 800fac0:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800fac4:	697b      	ldr	r3, [r7, #20]
 800fac6:	687a      	ldr	r2, [r7, #4]
 800fac8:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800facc:	2300      	movs	r3, #0
}
 800face:	4618      	mov	r0, r3
 800fad0:	371c      	adds	r7, #28
 800fad2:	46bd      	mov	sp, r7
 800fad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fad8:	4770      	bx	lr

0800fada <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800fada:	b480      	push	{r7}
 800fadc:	b085      	sub	sp, #20
 800fade:	af00      	add	r7, sp, #0
 800fae0:	6078      	str	r0, [r7, #4]
 800fae2:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800fae4:	687b      	ldr	r3, [r7, #4]
 800fae6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800faea:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800faec:	68fb      	ldr	r3, [r7, #12]
 800faee:	2b00      	cmp	r3, #0
 800faf0:	d101      	bne.n	800faf6 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800faf2:	2303      	movs	r3, #3
 800faf4:	e004      	b.n	800fb00 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800faf6:	68fb      	ldr	r3, [r7, #12]
 800faf8:	683a      	ldr	r2, [r7, #0]
 800fafa:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800fafe:	2300      	movs	r3, #0
}
 800fb00:	4618      	mov	r0, r3
 800fb02:	3714      	adds	r7, #20
 800fb04:	46bd      	mov	sp, r7
 800fb06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb0a:	4770      	bx	lr

0800fb0c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800fb0c:	b580      	push	{r7, lr}
 800fb0e:	b084      	sub	sp, #16
 800fb10:	af00      	add	r7, sp, #0
 800fb12:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800fb14:	687b      	ldr	r3, [r7, #4]
 800fb16:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800fb1a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800fb1c:	687b      	ldr	r3, [r7, #4]
 800fb1e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800fb22:	2b00      	cmp	r3, #0
 800fb24:	d101      	bne.n	800fb2a <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800fb26:	2303      	movs	r3, #3
 800fb28:	e016      	b.n	800fb58 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800fb2a:	687b      	ldr	r3, [r7, #4]
 800fb2c:	7c1b      	ldrb	r3, [r3, #16]
 800fb2e:	2b00      	cmp	r3, #0
 800fb30:	d109      	bne.n	800fb46 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800fb32:	68fb      	ldr	r3, [r7, #12]
 800fb34:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800fb38:	f44f 7300 	mov.w	r3, #512	; 0x200
 800fb3c:	2101      	movs	r1, #1
 800fb3e:	6878      	ldr	r0, [r7, #4]
 800fb40:	f004 ff98 	bl	8014a74 <USBD_LL_PrepareReceive>
 800fb44:	e007      	b.n	800fb56 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800fb46:	68fb      	ldr	r3, [r7, #12]
 800fb48:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800fb4c:	2340      	movs	r3, #64	; 0x40
 800fb4e:	2101      	movs	r1, #1
 800fb50:	6878      	ldr	r0, [r7, #4]
 800fb52:	f004 ff8f 	bl	8014a74 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800fb56:	2300      	movs	r3, #0
}
 800fb58:	4618      	mov	r0, r3
 800fb5a:	3710      	adds	r7, #16
 800fb5c:	46bd      	mov	sp, r7
 800fb5e:	bd80      	pop	{r7, pc}

0800fb60 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800fb60:	b580      	push	{r7, lr}
 800fb62:	b086      	sub	sp, #24
 800fb64:	af00      	add	r7, sp, #0
 800fb66:	60f8      	str	r0, [r7, #12]
 800fb68:	60b9      	str	r1, [r7, #8]
 800fb6a:	4613      	mov	r3, r2
 800fb6c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800fb6e:	68fb      	ldr	r3, [r7, #12]
 800fb70:	2b00      	cmp	r3, #0
 800fb72:	d101      	bne.n	800fb78 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800fb74:	2303      	movs	r3, #3
 800fb76:	e01f      	b.n	800fbb8 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800fb78:	68fb      	ldr	r3, [r7, #12]
 800fb7a:	2200      	movs	r2, #0
 800fb7c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 800fb80:	68fb      	ldr	r3, [r7, #12]
 800fb82:	2200      	movs	r2, #0
 800fb84:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 800fb88:	68fb      	ldr	r3, [r7, #12]
 800fb8a:	2200      	movs	r2, #0
 800fb8c:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800fb90:	68bb      	ldr	r3, [r7, #8]
 800fb92:	2b00      	cmp	r3, #0
 800fb94:	d003      	beq.n	800fb9e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800fb96:	68fb      	ldr	r3, [r7, #12]
 800fb98:	68ba      	ldr	r2, [r7, #8]
 800fb9a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800fb9e:	68fb      	ldr	r3, [r7, #12]
 800fba0:	2201      	movs	r2, #1
 800fba2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800fba6:	68fb      	ldr	r3, [r7, #12]
 800fba8:	79fa      	ldrb	r2, [r7, #7]
 800fbaa:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800fbac:	68f8      	ldr	r0, [r7, #12]
 800fbae:	f004 fe0b 	bl	80147c8 <USBD_LL_Init>
 800fbb2:	4603      	mov	r3, r0
 800fbb4:	75fb      	strb	r3, [r7, #23]

  return ret;
 800fbb6:	7dfb      	ldrb	r3, [r7, #23]
}
 800fbb8:	4618      	mov	r0, r3
 800fbba:	3718      	adds	r7, #24
 800fbbc:	46bd      	mov	sp, r7
 800fbbe:	bd80      	pop	{r7, pc}

0800fbc0 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800fbc0:	b580      	push	{r7, lr}
 800fbc2:	b084      	sub	sp, #16
 800fbc4:	af00      	add	r7, sp, #0
 800fbc6:	6078      	str	r0, [r7, #4]
 800fbc8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800fbca:	2300      	movs	r3, #0
 800fbcc:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800fbce:	683b      	ldr	r3, [r7, #0]
 800fbd0:	2b00      	cmp	r3, #0
 800fbd2:	d101      	bne.n	800fbd8 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800fbd4:	2303      	movs	r3, #3
 800fbd6:	e016      	b.n	800fc06 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800fbd8:	687b      	ldr	r3, [r7, #4]
 800fbda:	683a      	ldr	r2, [r7, #0]
 800fbdc:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800fbe0:	687b      	ldr	r3, [r7, #4]
 800fbe2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fbe6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fbe8:	2b00      	cmp	r3, #0
 800fbea:	d00b      	beq.n	800fc04 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800fbec:	687b      	ldr	r3, [r7, #4]
 800fbee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fbf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fbf4:	f107 020e 	add.w	r2, r7, #14
 800fbf8:	4610      	mov	r0, r2
 800fbfa:	4798      	blx	r3
 800fbfc:	4602      	mov	r2, r0
 800fbfe:	687b      	ldr	r3, [r7, #4]
 800fc00:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800fc04:	2300      	movs	r3, #0
}
 800fc06:	4618      	mov	r0, r3
 800fc08:	3710      	adds	r7, #16
 800fc0a:	46bd      	mov	sp, r7
 800fc0c:	bd80      	pop	{r7, pc}

0800fc0e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800fc0e:	b580      	push	{r7, lr}
 800fc10:	b082      	sub	sp, #8
 800fc12:	af00      	add	r7, sp, #0
 800fc14:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800fc16:	6878      	ldr	r0, [r7, #4]
 800fc18:	f004 fe22 	bl	8014860 <USBD_LL_Start>
 800fc1c:	4603      	mov	r3, r0
}
 800fc1e:	4618      	mov	r0, r3
 800fc20:	3708      	adds	r7, #8
 800fc22:	46bd      	mov	sp, r7
 800fc24:	bd80      	pop	{r7, pc}

0800fc26 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800fc26:	b480      	push	{r7}
 800fc28:	b083      	sub	sp, #12
 800fc2a:	af00      	add	r7, sp, #0
 800fc2c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800fc2e:	2300      	movs	r3, #0
}
 800fc30:	4618      	mov	r0, r3
 800fc32:	370c      	adds	r7, #12
 800fc34:	46bd      	mov	sp, r7
 800fc36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc3a:	4770      	bx	lr

0800fc3c <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800fc3c:	b580      	push	{r7, lr}
 800fc3e:	b084      	sub	sp, #16
 800fc40:	af00      	add	r7, sp, #0
 800fc42:	6078      	str	r0, [r7, #4]
 800fc44:	460b      	mov	r3, r1
 800fc46:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800fc48:	2303      	movs	r3, #3
 800fc4a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800fc4c:	687b      	ldr	r3, [r7, #4]
 800fc4e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fc52:	2b00      	cmp	r3, #0
 800fc54:	d009      	beq.n	800fc6a <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800fc56:	687b      	ldr	r3, [r7, #4]
 800fc58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fc5c:	681b      	ldr	r3, [r3, #0]
 800fc5e:	78fa      	ldrb	r2, [r7, #3]
 800fc60:	4611      	mov	r1, r2
 800fc62:	6878      	ldr	r0, [r7, #4]
 800fc64:	4798      	blx	r3
 800fc66:	4603      	mov	r3, r0
 800fc68:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800fc6a:	7bfb      	ldrb	r3, [r7, #15]
}
 800fc6c:	4618      	mov	r0, r3
 800fc6e:	3710      	adds	r7, #16
 800fc70:	46bd      	mov	sp, r7
 800fc72:	bd80      	pop	{r7, pc}

0800fc74 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800fc74:	b580      	push	{r7, lr}
 800fc76:	b082      	sub	sp, #8
 800fc78:	af00      	add	r7, sp, #0
 800fc7a:	6078      	str	r0, [r7, #4]
 800fc7c:	460b      	mov	r3, r1
 800fc7e:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800fc80:	687b      	ldr	r3, [r7, #4]
 800fc82:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fc86:	2b00      	cmp	r3, #0
 800fc88:	d007      	beq.n	800fc9a <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800fc8a:	687b      	ldr	r3, [r7, #4]
 800fc8c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fc90:	685b      	ldr	r3, [r3, #4]
 800fc92:	78fa      	ldrb	r2, [r7, #3]
 800fc94:	4611      	mov	r1, r2
 800fc96:	6878      	ldr	r0, [r7, #4]
 800fc98:	4798      	blx	r3
  }

  return USBD_OK;
 800fc9a:	2300      	movs	r3, #0
}
 800fc9c:	4618      	mov	r0, r3
 800fc9e:	3708      	adds	r7, #8
 800fca0:	46bd      	mov	sp, r7
 800fca2:	bd80      	pop	{r7, pc}

0800fca4 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800fca4:	b580      	push	{r7, lr}
 800fca6:	b084      	sub	sp, #16
 800fca8:	af00      	add	r7, sp, #0
 800fcaa:	6078      	str	r0, [r7, #4]
 800fcac:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800fcae:	687b      	ldr	r3, [r7, #4]
 800fcb0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800fcb4:	6839      	ldr	r1, [r7, #0]
 800fcb6:	4618      	mov	r0, r3
 800fcb8:	f000 ff90 	bl	8010bdc <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800fcbc:	687b      	ldr	r3, [r7, #4]
 800fcbe:	2201      	movs	r2, #1
 800fcc0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800fcc4:	687b      	ldr	r3, [r7, #4]
 800fcc6:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800fcca:	461a      	mov	r2, r3
 800fccc:	687b      	ldr	r3, [r7, #4]
 800fcce:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800fcd2:	687b      	ldr	r3, [r7, #4]
 800fcd4:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800fcd8:	f003 031f 	and.w	r3, r3, #31
 800fcdc:	2b02      	cmp	r3, #2
 800fcde:	d01a      	beq.n	800fd16 <USBD_LL_SetupStage+0x72>
 800fce0:	2b02      	cmp	r3, #2
 800fce2:	d822      	bhi.n	800fd2a <USBD_LL_SetupStage+0x86>
 800fce4:	2b00      	cmp	r3, #0
 800fce6:	d002      	beq.n	800fcee <USBD_LL_SetupStage+0x4a>
 800fce8:	2b01      	cmp	r3, #1
 800fcea:	d00a      	beq.n	800fd02 <USBD_LL_SetupStage+0x5e>
 800fcec:	e01d      	b.n	800fd2a <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800fcee:	687b      	ldr	r3, [r7, #4]
 800fcf0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800fcf4:	4619      	mov	r1, r3
 800fcf6:	6878      	ldr	r0, [r7, #4]
 800fcf8:	f000 fa62 	bl	80101c0 <USBD_StdDevReq>
 800fcfc:	4603      	mov	r3, r0
 800fcfe:	73fb      	strb	r3, [r7, #15]
      break;
 800fd00:	e020      	b.n	800fd44 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800fd02:	687b      	ldr	r3, [r7, #4]
 800fd04:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800fd08:	4619      	mov	r1, r3
 800fd0a:	6878      	ldr	r0, [r7, #4]
 800fd0c:	f000 fac6 	bl	801029c <USBD_StdItfReq>
 800fd10:	4603      	mov	r3, r0
 800fd12:	73fb      	strb	r3, [r7, #15]
      break;
 800fd14:	e016      	b.n	800fd44 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800fd16:	687b      	ldr	r3, [r7, #4]
 800fd18:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800fd1c:	4619      	mov	r1, r3
 800fd1e:	6878      	ldr	r0, [r7, #4]
 800fd20:	f000 fb05 	bl	801032e <USBD_StdEPReq>
 800fd24:	4603      	mov	r3, r0
 800fd26:	73fb      	strb	r3, [r7, #15]
      break;
 800fd28:	e00c      	b.n	800fd44 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800fd2a:	687b      	ldr	r3, [r7, #4]
 800fd2c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800fd30:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800fd34:	b2db      	uxtb	r3, r3
 800fd36:	4619      	mov	r1, r3
 800fd38:	6878      	ldr	r0, [r7, #4]
 800fd3a:	f004 fdf1 	bl	8014920 <USBD_LL_StallEP>
 800fd3e:	4603      	mov	r3, r0
 800fd40:	73fb      	strb	r3, [r7, #15]
      break;
 800fd42:	bf00      	nop
  }

  return ret;
 800fd44:	7bfb      	ldrb	r3, [r7, #15]
}
 800fd46:	4618      	mov	r0, r3
 800fd48:	3710      	adds	r7, #16
 800fd4a:	46bd      	mov	sp, r7
 800fd4c:	bd80      	pop	{r7, pc}

0800fd4e <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800fd4e:	b580      	push	{r7, lr}
 800fd50:	b086      	sub	sp, #24
 800fd52:	af00      	add	r7, sp, #0
 800fd54:	60f8      	str	r0, [r7, #12]
 800fd56:	460b      	mov	r3, r1
 800fd58:	607a      	str	r2, [r7, #4]
 800fd5a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800fd5c:	7afb      	ldrb	r3, [r7, #11]
 800fd5e:	2b00      	cmp	r3, #0
 800fd60:	d138      	bne.n	800fdd4 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800fd62:	68fb      	ldr	r3, [r7, #12]
 800fd64:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800fd68:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800fd6a:	68fb      	ldr	r3, [r7, #12]
 800fd6c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800fd70:	2b03      	cmp	r3, #3
 800fd72:	d14a      	bne.n	800fe0a <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800fd74:	693b      	ldr	r3, [r7, #16]
 800fd76:	689a      	ldr	r2, [r3, #8]
 800fd78:	693b      	ldr	r3, [r7, #16]
 800fd7a:	68db      	ldr	r3, [r3, #12]
 800fd7c:	429a      	cmp	r2, r3
 800fd7e:	d913      	bls.n	800fda8 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800fd80:	693b      	ldr	r3, [r7, #16]
 800fd82:	689a      	ldr	r2, [r3, #8]
 800fd84:	693b      	ldr	r3, [r7, #16]
 800fd86:	68db      	ldr	r3, [r3, #12]
 800fd88:	1ad2      	subs	r2, r2, r3
 800fd8a:	693b      	ldr	r3, [r7, #16]
 800fd8c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800fd8e:	693b      	ldr	r3, [r7, #16]
 800fd90:	68da      	ldr	r2, [r3, #12]
 800fd92:	693b      	ldr	r3, [r7, #16]
 800fd94:	689b      	ldr	r3, [r3, #8]
 800fd96:	4293      	cmp	r3, r2
 800fd98:	bf28      	it	cs
 800fd9a:	4613      	movcs	r3, r2
 800fd9c:	461a      	mov	r2, r3
 800fd9e:	6879      	ldr	r1, [r7, #4]
 800fda0:	68f8      	ldr	r0, [r7, #12]
 800fda2:	f001 f80f 	bl	8010dc4 <USBD_CtlContinueRx>
 800fda6:	e030      	b.n	800fe0a <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fda8:	68fb      	ldr	r3, [r7, #12]
 800fdaa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fdae:	b2db      	uxtb	r3, r3
 800fdb0:	2b03      	cmp	r3, #3
 800fdb2:	d10b      	bne.n	800fdcc <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800fdb4:	68fb      	ldr	r3, [r7, #12]
 800fdb6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fdba:	691b      	ldr	r3, [r3, #16]
 800fdbc:	2b00      	cmp	r3, #0
 800fdbe:	d005      	beq.n	800fdcc <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800fdc0:	68fb      	ldr	r3, [r7, #12]
 800fdc2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fdc6:	691b      	ldr	r3, [r3, #16]
 800fdc8:	68f8      	ldr	r0, [r7, #12]
 800fdca:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800fdcc:	68f8      	ldr	r0, [r7, #12]
 800fdce:	f001 f80a 	bl	8010de6 <USBD_CtlSendStatus>
 800fdd2:	e01a      	b.n	800fe0a <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fdd4:	68fb      	ldr	r3, [r7, #12]
 800fdd6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fdda:	b2db      	uxtb	r3, r3
 800fddc:	2b03      	cmp	r3, #3
 800fdde:	d114      	bne.n	800fe0a <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800fde0:	68fb      	ldr	r3, [r7, #12]
 800fde2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fde6:	699b      	ldr	r3, [r3, #24]
 800fde8:	2b00      	cmp	r3, #0
 800fdea:	d00e      	beq.n	800fe0a <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800fdec:	68fb      	ldr	r3, [r7, #12]
 800fdee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fdf2:	699b      	ldr	r3, [r3, #24]
 800fdf4:	7afa      	ldrb	r2, [r7, #11]
 800fdf6:	4611      	mov	r1, r2
 800fdf8:	68f8      	ldr	r0, [r7, #12]
 800fdfa:	4798      	blx	r3
 800fdfc:	4603      	mov	r3, r0
 800fdfe:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800fe00:	7dfb      	ldrb	r3, [r7, #23]
 800fe02:	2b00      	cmp	r3, #0
 800fe04:	d001      	beq.n	800fe0a <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800fe06:	7dfb      	ldrb	r3, [r7, #23]
 800fe08:	e000      	b.n	800fe0c <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800fe0a:	2300      	movs	r3, #0
}
 800fe0c:	4618      	mov	r0, r3
 800fe0e:	3718      	adds	r7, #24
 800fe10:	46bd      	mov	sp, r7
 800fe12:	bd80      	pop	{r7, pc}

0800fe14 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800fe14:	b580      	push	{r7, lr}
 800fe16:	b086      	sub	sp, #24
 800fe18:	af00      	add	r7, sp, #0
 800fe1a:	60f8      	str	r0, [r7, #12]
 800fe1c:	460b      	mov	r3, r1
 800fe1e:	607a      	str	r2, [r7, #4]
 800fe20:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800fe22:	7afb      	ldrb	r3, [r7, #11]
 800fe24:	2b00      	cmp	r3, #0
 800fe26:	d16b      	bne.n	800ff00 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800fe28:	68fb      	ldr	r3, [r7, #12]
 800fe2a:	3314      	adds	r3, #20
 800fe2c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800fe2e:	68fb      	ldr	r3, [r7, #12]
 800fe30:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800fe34:	2b02      	cmp	r3, #2
 800fe36:	d156      	bne.n	800fee6 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800fe38:	693b      	ldr	r3, [r7, #16]
 800fe3a:	689a      	ldr	r2, [r3, #8]
 800fe3c:	693b      	ldr	r3, [r7, #16]
 800fe3e:	68db      	ldr	r3, [r3, #12]
 800fe40:	429a      	cmp	r2, r3
 800fe42:	d914      	bls.n	800fe6e <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800fe44:	693b      	ldr	r3, [r7, #16]
 800fe46:	689a      	ldr	r2, [r3, #8]
 800fe48:	693b      	ldr	r3, [r7, #16]
 800fe4a:	68db      	ldr	r3, [r3, #12]
 800fe4c:	1ad2      	subs	r2, r2, r3
 800fe4e:	693b      	ldr	r3, [r7, #16]
 800fe50:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800fe52:	693b      	ldr	r3, [r7, #16]
 800fe54:	689b      	ldr	r3, [r3, #8]
 800fe56:	461a      	mov	r2, r3
 800fe58:	6879      	ldr	r1, [r7, #4]
 800fe5a:	68f8      	ldr	r0, [r7, #12]
 800fe5c:	f000 ff84 	bl	8010d68 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800fe60:	2300      	movs	r3, #0
 800fe62:	2200      	movs	r2, #0
 800fe64:	2100      	movs	r1, #0
 800fe66:	68f8      	ldr	r0, [r7, #12]
 800fe68:	f004 fe04 	bl	8014a74 <USBD_LL_PrepareReceive>
 800fe6c:	e03b      	b.n	800fee6 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800fe6e:	693b      	ldr	r3, [r7, #16]
 800fe70:	68da      	ldr	r2, [r3, #12]
 800fe72:	693b      	ldr	r3, [r7, #16]
 800fe74:	689b      	ldr	r3, [r3, #8]
 800fe76:	429a      	cmp	r2, r3
 800fe78:	d11c      	bne.n	800feb4 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800fe7a:	693b      	ldr	r3, [r7, #16]
 800fe7c:	685a      	ldr	r2, [r3, #4]
 800fe7e:	693b      	ldr	r3, [r7, #16]
 800fe80:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800fe82:	429a      	cmp	r2, r3
 800fe84:	d316      	bcc.n	800feb4 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800fe86:	693b      	ldr	r3, [r7, #16]
 800fe88:	685a      	ldr	r2, [r3, #4]
 800fe8a:	68fb      	ldr	r3, [r7, #12]
 800fe8c:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800fe90:	429a      	cmp	r2, r3
 800fe92:	d20f      	bcs.n	800feb4 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800fe94:	2200      	movs	r2, #0
 800fe96:	2100      	movs	r1, #0
 800fe98:	68f8      	ldr	r0, [r7, #12]
 800fe9a:	f000 ff65 	bl	8010d68 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800fe9e:	68fb      	ldr	r3, [r7, #12]
 800fea0:	2200      	movs	r2, #0
 800fea2:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800fea6:	2300      	movs	r3, #0
 800fea8:	2200      	movs	r2, #0
 800feaa:	2100      	movs	r1, #0
 800feac:	68f8      	ldr	r0, [r7, #12]
 800feae:	f004 fde1 	bl	8014a74 <USBD_LL_PrepareReceive>
 800feb2:	e018      	b.n	800fee6 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800feb4:	68fb      	ldr	r3, [r7, #12]
 800feb6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800feba:	b2db      	uxtb	r3, r3
 800febc:	2b03      	cmp	r3, #3
 800febe:	d10b      	bne.n	800fed8 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800fec0:	68fb      	ldr	r3, [r7, #12]
 800fec2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fec6:	68db      	ldr	r3, [r3, #12]
 800fec8:	2b00      	cmp	r3, #0
 800feca:	d005      	beq.n	800fed8 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800fecc:	68fb      	ldr	r3, [r7, #12]
 800fece:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fed2:	68db      	ldr	r3, [r3, #12]
 800fed4:	68f8      	ldr	r0, [r7, #12]
 800fed6:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800fed8:	2180      	movs	r1, #128	; 0x80
 800feda:	68f8      	ldr	r0, [r7, #12]
 800fedc:	f004 fd20 	bl	8014920 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800fee0:	68f8      	ldr	r0, [r7, #12]
 800fee2:	f000 ff93 	bl	8010e0c <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800fee6:	68fb      	ldr	r3, [r7, #12]
 800fee8:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800feec:	2b01      	cmp	r3, #1
 800feee:	d122      	bne.n	800ff36 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800fef0:	68f8      	ldr	r0, [r7, #12]
 800fef2:	f7ff fe98 	bl	800fc26 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800fef6:	68fb      	ldr	r3, [r7, #12]
 800fef8:	2200      	movs	r2, #0
 800fefa:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800fefe:	e01a      	b.n	800ff36 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ff00:	68fb      	ldr	r3, [r7, #12]
 800ff02:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ff06:	b2db      	uxtb	r3, r3
 800ff08:	2b03      	cmp	r3, #3
 800ff0a:	d114      	bne.n	800ff36 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800ff0c:	68fb      	ldr	r3, [r7, #12]
 800ff0e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ff12:	695b      	ldr	r3, [r3, #20]
 800ff14:	2b00      	cmp	r3, #0
 800ff16:	d00e      	beq.n	800ff36 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800ff18:	68fb      	ldr	r3, [r7, #12]
 800ff1a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ff1e:	695b      	ldr	r3, [r3, #20]
 800ff20:	7afa      	ldrb	r2, [r7, #11]
 800ff22:	4611      	mov	r1, r2
 800ff24:	68f8      	ldr	r0, [r7, #12]
 800ff26:	4798      	blx	r3
 800ff28:	4603      	mov	r3, r0
 800ff2a:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800ff2c:	7dfb      	ldrb	r3, [r7, #23]
 800ff2e:	2b00      	cmp	r3, #0
 800ff30:	d001      	beq.n	800ff36 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800ff32:	7dfb      	ldrb	r3, [r7, #23]
 800ff34:	e000      	b.n	800ff38 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800ff36:	2300      	movs	r3, #0
}
 800ff38:	4618      	mov	r0, r3
 800ff3a:	3718      	adds	r7, #24
 800ff3c:	46bd      	mov	sp, r7
 800ff3e:	bd80      	pop	{r7, pc}

0800ff40 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800ff40:	b580      	push	{r7, lr}
 800ff42:	b082      	sub	sp, #8
 800ff44:	af00      	add	r7, sp, #0
 800ff46:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ff48:	687b      	ldr	r3, [r7, #4]
 800ff4a:	2201      	movs	r2, #1
 800ff4c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800ff50:	687b      	ldr	r3, [r7, #4]
 800ff52:	2200      	movs	r2, #0
 800ff54:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800ff58:	687b      	ldr	r3, [r7, #4]
 800ff5a:	2200      	movs	r2, #0
 800ff5c:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800ff5e:	687b      	ldr	r3, [r7, #4]
 800ff60:	2200      	movs	r2, #0
 800ff62:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800ff66:	687b      	ldr	r3, [r7, #4]
 800ff68:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ff6c:	2b00      	cmp	r3, #0
 800ff6e:	d101      	bne.n	800ff74 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800ff70:	2303      	movs	r3, #3
 800ff72:	e02f      	b.n	800ffd4 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800ff74:	687b      	ldr	r3, [r7, #4]
 800ff76:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ff7a:	2b00      	cmp	r3, #0
 800ff7c:	d00f      	beq.n	800ff9e <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800ff7e:	687b      	ldr	r3, [r7, #4]
 800ff80:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ff84:	685b      	ldr	r3, [r3, #4]
 800ff86:	2b00      	cmp	r3, #0
 800ff88:	d009      	beq.n	800ff9e <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800ff8a:	687b      	ldr	r3, [r7, #4]
 800ff8c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ff90:	685b      	ldr	r3, [r3, #4]
 800ff92:	687a      	ldr	r2, [r7, #4]
 800ff94:	6852      	ldr	r2, [r2, #4]
 800ff96:	b2d2      	uxtb	r2, r2
 800ff98:	4611      	mov	r1, r2
 800ff9a:	6878      	ldr	r0, [r7, #4]
 800ff9c:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800ff9e:	2340      	movs	r3, #64	; 0x40
 800ffa0:	2200      	movs	r2, #0
 800ffa2:	2100      	movs	r1, #0
 800ffa4:	6878      	ldr	r0, [r7, #4]
 800ffa6:	f004 fc76 	bl	8014896 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800ffaa:	687b      	ldr	r3, [r7, #4]
 800ffac:	2201      	movs	r2, #1
 800ffae:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800ffb2:	687b      	ldr	r3, [r7, #4]
 800ffb4:	2240      	movs	r2, #64	; 0x40
 800ffb6:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800ffba:	2340      	movs	r3, #64	; 0x40
 800ffbc:	2200      	movs	r2, #0
 800ffbe:	2180      	movs	r1, #128	; 0x80
 800ffc0:	6878      	ldr	r0, [r7, #4]
 800ffc2:	f004 fc68 	bl	8014896 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800ffc6:	687b      	ldr	r3, [r7, #4]
 800ffc8:	2201      	movs	r2, #1
 800ffca:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800ffcc:	687b      	ldr	r3, [r7, #4]
 800ffce:	2240      	movs	r2, #64	; 0x40
 800ffd0:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800ffd2:	2300      	movs	r3, #0
}
 800ffd4:	4618      	mov	r0, r3
 800ffd6:	3708      	adds	r7, #8
 800ffd8:	46bd      	mov	sp, r7
 800ffda:	bd80      	pop	{r7, pc}

0800ffdc <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800ffdc:	b480      	push	{r7}
 800ffde:	b083      	sub	sp, #12
 800ffe0:	af00      	add	r7, sp, #0
 800ffe2:	6078      	str	r0, [r7, #4]
 800ffe4:	460b      	mov	r3, r1
 800ffe6:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800ffe8:	687b      	ldr	r3, [r7, #4]
 800ffea:	78fa      	ldrb	r2, [r7, #3]
 800ffec:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800ffee:	2300      	movs	r3, #0
}
 800fff0:	4618      	mov	r0, r3
 800fff2:	370c      	adds	r7, #12
 800fff4:	46bd      	mov	sp, r7
 800fff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fffa:	4770      	bx	lr

0800fffc <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800fffc:	b480      	push	{r7}
 800fffe:	b083      	sub	sp, #12
 8010000:	af00      	add	r7, sp, #0
 8010002:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8010004:	687b      	ldr	r3, [r7, #4]
 8010006:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801000a:	b2da      	uxtb	r2, r3
 801000c:	687b      	ldr	r3, [r7, #4]
 801000e:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8010012:	687b      	ldr	r3, [r7, #4]
 8010014:	2204      	movs	r2, #4
 8010016:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 801001a:	2300      	movs	r3, #0
}
 801001c:	4618      	mov	r0, r3
 801001e:	370c      	adds	r7, #12
 8010020:	46bd      	mov	sp, r7
 8010022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010026:	4770      	bx	lr

08010028 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8010028:	b480      	push	{r7}
 801002a:	b083      	sub	sp, #12
 801002c:	af00      	add	r7, sp, #0
 801002e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8010030:	687b      	ldr	r3, [r7, #4]
 8010032:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010036:	b2db      	uxtb	r3, r3
 8010038:	2b04      	cmp	r3, #4
 801003a:	d106      	bne.n	801004a <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 801003c:	687b      	ldr	r3, [r7, #4]
 801003e:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8010042:	b2da      	uxtb	r2, r3
 8010044:	687b      	ldr	r3, [r7, #4]
 8010046:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 801004a:	2300      	movs	r3, #0
}
 801004c:	4618      	mov	r0, r3
 801004e:	370c      	adds	r7, #12
 8010050:	46bd      	mov	sp, r7
 8010052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010056:	4770      	bx	lr

08010058 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8010058:	b580      	push	{r7, lr}
 801005a:	b082      	sub	sp, #8
 801005c:	af00      	add	r7, sp, #0
 801005e:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8010060:	687b      	ldr	r3, [r7, #4]
 8010062:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010066:	2b00      	cmp	r3, #0
 8010068:	d101      	bne.n	801006e <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 801006a:	2303      	movs	r3, #3
 801006c:	e012      	b.n	8010094 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801006e:	687b      	ldr	r3, [r7, #4]
 8010070:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010074:	b2db      	uxtb	r3, r3
 8010076:	2b03      	cmp	r3, #3
 8010078:	d10b      	bne.n	8010092 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 801007a:	687b      	ldr	r3, [r7, #4]
 801007c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010080:	69db      	ldr	r3, [r3, #28]
 8010082:	2b00      	cmp	r3, #0
 8010084:	d005      	beq.n	8010092 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8010086:	687b      	ldr	r3, [r7, #4]
 8010088:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801008c:	69db      	ldr	r3, [r3, #28]
 801008e:	6878      	ldr	r0, [r7, #4]
 8010090:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8010092:	2300      	movs	r3, #0
}
 8010094:	4618      	mov	r0, r3
 8010096:	3708      	adds	r7, #8
 8010098:	46bd      	mov	sp, r7
 801009a:	bd80      	pop	{r7, pc}

0801009c <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 801009c:	b580      	push	{r7, lr}
 801009e:	b082      	sub	sp, #8
 80100a0:	af00      	add	r7, sp, #0
 80100a2:	6078      	str	r0, [r7, #4]
 80100a4:	460b      	mov	r3, r1
 80100a6:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 80100a8:	687b      	ldr	r3, [r7, #4]
 80100aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80100ae:	2b00      	cmp	r3, #0
 80100b0:	d101      	bne.n	80100b6 <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 80100b2:	2303      	movs	r3, #3
 80100b4:	e014      	b.n	80100e0 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80100b6:	687b      	ldr	r3, [r7, #4]
 80100b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80100bc:	b2db      	uxtb	r3, r3
 80100be:	2b03      	cmp	r3, #3
 80100c0:	d10d      	bne.n	80100de <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 80100c2:	687b      	ldr	r3, [r7, #4]
 80100c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80100c8:	6a1b      	ldr	r3, [r3, #32]
 80100ca:	2b00      	cmp	r3, #0
 80100cc:	d007      	beq.n	80100de <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 80100ce:	687b      	ldr	r3, [r7, #4]
 80100d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80100d4:	6a1b      	ldr	r3, [r3, #32]
 80100d6:	78fa      	ldrb	r2, [r7, #3]
 80100d8:	4611      	mov	r1, r2
 80100da:	6878      	ldr	r0, [r7, #4]
 80100dc:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80100de:	2300      	movs	r3, #0
}
 80100e0:	4618      	mov	r0, r3
 80100e2:	3708      	adds	r7, #8
 80100e4:	46bd      	mov	sp, r7
 80100e6:	bd80      	pop	{r7, pc}

080100e8 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80100e8:	b580      	push	{r7, lr}
 80100ea:	b082      	sub	sp, #8
 80100ec:	af00      	add	r7, sp, #0
 80100ee:	6078      	str	r0, [r7, #4]
 80100f0:	460b      	mov	r3, r1
 80100f2:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 80100f4:	687b      	ldr	r3, [r7, #4]
 80100f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80100fa:	2b00      	cmp	r3, #0
 80100fc:	d101      	bne.n	8010102 <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 80100fe:	2303      	movs	r3, #3
 8010100:	e014      	b.n	801012c <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010102:	687b      	ldr	r3, [r7, #4]
 8010104:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010108:	b2db      	uxtb	r3, r3
 801010a:	2b03      	cmp	r3, #3
 801010c:	d10d      	bne.n	801012a <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 801010e:	687b      	ldr	r3, [r7, #4]
 8010110:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010116:	2b00      	cmp	r3, #0
 8010118:	d007      	beq.n	801012a <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 801011a:	687b      	ldr	r3, [r7, #4]
 801011c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010120:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010122:	78fa      	ldrb	r2, [r7, #3]
 8010124:	4611      	mov	r1, r2
 8010126:	6878      	ldr	r0, [r7, #4]
 8010128:	4798      	blx	r3
    }
  }

  return USBD_OK;
 801012a:	2300      	movs	r3, #0
}
 801012c:	4618      	mov	r0, r3
 801012e:	3708      	adds	r7, #8
 8010130:	46bd      	mov	sp, r7
 8010132:	bd80      	pop	{r7, pc}

08010134 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8010134:	b480      	push	{r7}
 8010136:	b083      	sub	sp, #12
 8010138:	af00      	add	r7, sp, #0
 801013a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 801013c:	2300      	movs	r3, #0
}
 801013e:	4618      	mov	r0, r3
 8010140:	370c      	adds	r7, #12
 8010142:	46bd      	mov	sp, r7
 8010144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010148:	4770      	bx	lr

0801014a <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 801014a:	b580      	push	{r7, lr}
 801014c:	b082      	sub	sp, #8
 801014e:	af00      	add	r7, sp, #0
 8010150:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8010152:	687b      	ldr	r3, [r7, #4]
 8010154:	2201      	movs	r2, #1
 8010156:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 801015a:	687b      	ldr	r3, [r7, #4]
 801015c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010160:	2b00      	cmp	r3, #0
 8010162:	d009      	beq.n	8010178 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8010164:	687b      	ldr	r3, [r7, #4]
 8010166:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801016a:	685b      	ldr	r3, [r3, #4]
 801016c:	687a      	ldr	r2, [r7, #4]
 801016e:	6852      	ldr	r2, [r2, #4]
 8010170:	b2d2      	uxtb	r2, r2
 8010172:	4611      	mov	r1, r2
 8010174:	6878      	ldr	r0, [r7, #4]
 8010176:	4798      	blx	r3
  }

  return USBD_OK;
 8010178:	2300      	movs	r3, #0
}
 801017a:	4618      	mov	r0, r3
 801017c:	3708      	adds	r7, #8
 801017e:	46bd      	mov	sp, r7
 8010180:	bd80      	pop	{r7, pc}

08010182 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8010182:	b480      	push	{r7}
 8010184:	b087      	sub	sp, #28
 8010186:	af00      	add	r7, sp, #0
 8010188:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 801018a:	687b      	ldr	r3, [r7, #4]
 801018c:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 801018e:	697b      	ldr	r3, [r7, #20]
 8010190:	781b      	ldrb	r3, [r3, #0]
 8010192:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8010194:	697b      	ldr	r3, [r7, #20]
 8010196:	3301      	adds	r3, #1
 8010198:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 801019a:	697b      	ldr	r3, [r7, #20]
 801019c:	781b      	ldrb	r3, [r3, #0]
 801019e:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80101a0:	8a3b      	ldrh	r3, [r7, #16]
 80101a2:	021b      	lsls	r3, r3, #8
 80101a4:	b21a      	sxth	r2, r3
 80101a6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80101aa:	4313      	orrs	r3, r2
 80101ac:	b21b      	sxth	r3, r3
 80101ae:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80101b0:	89fb      	ldrh	r3, [r7, #14]
}
 80101b2:	4618      	mov	r0, r3
 80101b4:	371c      	adds	r7, #28
 80101b6:	46bd      	mov	sp, r7
 80101b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101bc:	4770      	bx	lr
	...

080101c0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80101c0:	b580      	push	{r7, lr}
 80101c2:	b084      	sub	sp, #16
 80101c4:	af00      	add	r7, sp, #0
 80101c6:	6078      	str	r0, [r7, #4]
 80101c8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80101ca:	2300      	movs	r3, #0
 80101cc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80101ce:	683b      	ldr	r3, [r7, #0]
 80101d0:	781b      	ldrb	r3, [r3, #0]
 80101d2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80101d6:	2b40      	cmp	r3, #64	; 0x40
 80101d8:	d005      	beq.n	80101e6 <USBD_StdDevReq+0x26>
 80101da:	2b40      	cmp	r3, #64	; 0x40
 80101dc:	d853      	bhi.n	8010286 <USBD_StdDevReq+0xc6>
 80101de:	2b00      	cmp	r3, #0
 80101e0:	d00b      	beq.n	80101fa <USBD_StdDevReq+0x3a>
 80101e2:	2b20      	cmp	r3, #32
 80101e4:	d14f      	bne.n	8010286 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80101e6:	687b      	ldr	r3, [r7, #4]
 80101e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80101ec:	689b      	ldr	r3, [r3, #8]
 80101ee:	6839      	ldr	r1, [r7, #0]
 80101f0:	6878      	ldr	r0, [r7, #4]
 80101f2:	4798      	blx	r3
 80101f4:	4603      	mov	r3, r0
 80101f6:	73fb      	strb	r3, [r7, #15]
      break;
 80101f8:	e04a      	b.n	8010290 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80101fa:	683b      	ldr	r3, [r7, #0]
 80101fc:	785b      	ldrb	r3, [r3, #1]
 80101fe:	2b09      	cmp	r3, #9
 8010200:	d83b      	bhi.n	801027a <USBD_StdDevReq+0xba>
 8010202:	a201      	add	r2, pc, #4	; (adr r2, 8010208 <USBD_StdDevReq+0x48>)
 8010204:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010208:	0801025d 	.word	0x0801025d
 801020c:	08010271 	.word	0x08010271
 8010210:	0801027b 	.word	0x0801027b
 8010214:	08010267 	.word	0x08010267
 8010218:	0801027b 	.word	0x0801027b
 801021c:	0801023b 	.word	0x0801023b
 8010220:	08010231 	.word	0x08010231
 8010224:	0801027b 	.word	0x0801027b
 8010228:	08010253 	.word	0x08010253
 801022c:	08010245 	.word	0x08010245
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8010230:	6839      	ldr	r1, [r7, #0]
 8010232:	6878      	ldr	r0, [r7, #4]
 8010234:	f000 f9de 	bl	80105f4 <USBD_GetDescriptor>
          break;
 8010238:	e024      	b.n	8010284 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 801023a:	6839      	ldr	r1, [r7, #0]
 801023c:	6878      	ldr	r0, [r7, #4]
 801023e:	f000 fb43 	bl	80108c8 <USBD_SetAddress>
          break;
 8010242:	e01f      	b.n	8010284 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8010244:	6839      	ldr	r1, [r7, #0]
 8010246:	6878      	ldr	r0, [r7, #4]
 8010248:	f000 fb82 	bl	8010950 <USBD_SetConfig>
 801024c:	4603      	mov	r3, r0
 801024e:	73fb      	strb	r3, [r7, #15]
          break;
 8010250:	e018      	b.n	8010284 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8010252:	6839      	ldr	r1, [r7, #0]
 8010254:	6878      	ldr	r0, [r7, #4]
 8010256:	f000 fc21 	bl	8010a9c <USBD_GetConfig>
          break;
 801025a:	e013      	b.n	8010284 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 801025c:	6839      	ldr	r1, [r7, #0]
 801025e:	6878      	ldr	r0, [r7, #4]
 8010260:	f000 fc52 	bl	8010b08 <USBD_GetStatus>
          break;
 8010264:	e00e      	b.n	8010284 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8010266:	6839      	ldr	r1, [r7, #0]
 8010268:	6878      	ldr	r0, [r7, #4]
 801026a:	f000 fc81 	bl	8010b70 <USBD_SetFeature>
          break;
 801026e:	e009      	b.n	8010284 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8010270:	6839      	ldr	r1, [r7, #0]
 8010272:	6878      	ldr	r0, [r7, #4]
 8010274:	f000 fc90 	bl	8010b98 <USBD_ClrFeature>
          break;
 8010278:	e004      	b.n	8010284 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 801027a:	6839      	ldr	r1, [r7, #0]
 801027c:	6878      	ldr	r0, [r7, #4]
 801027e:	f000 fce7 	bl	8010c50 <USBD_CtlError>
          break;
 8010282:	bf00      	nop
      }
      break;
 8010284:	e004      	b.n	8010290 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8010286:	6839      	ldr	r1, [r7, #0]
 8010288:	6878      	ldr	r0, [r7, #4]
 801028a:	f000 fce1 	bl	8010c50 <USBD_CtlError>
      break;
 801028e:	bf00      	nop
  }

  return ret;
 8010290:	7bfb      	ldrb	r3, [r7, #15]
}
 8010292:	4618      	mov	r0, r3
 8010294:	3710      	adds	r7, #16
 8010296:	46bd      	mov	sp, r7
 8010298:	bd80      	pop	{r7, pc}
 801029a:	bf00      	nop

0801029c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801029c:	b580      	push	{r7, lr}
 801029e:	b084      	sub	sp, #16
 80102a0:	af00      	add	r7, sp, #0
 80102a2:	6078      	str	r0, [r7, #4]
 80102a4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80102a6:	2300      	movs	r3, #0
 80102a8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80102aa:	683b      	ldr	r3, [r7, #0]
 80102ac:	781b      	ldrb	r3, [r3, #0]
 80102ae:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80102b2:	2b40      	cmp	r3, #64	; 0x40
 80102b4:	d005      	beq.n	80102c2 <USBD_StdItfReq+0x26>
 80102b6:	2b40      	cmp	r3, #64	; 0x40
 80102b8:	d82f      	bhi.n	801031a <USBD_StdItfReq+0x7e>
 80102ba:	2b00      	cmp	r3, #0
 80102bc:	d001      	beq.n	80102c2 <USBD_StdItfReq+0x26>
 80102be:	2b20      	cmp	r3, #32
 80102c0:	d12b      	bne.n	801031a <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80102c2:	687b      	ldr	r3, [r7, #4]
 80102c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80102c8:	b2db      	uxtb	r3, r3
 80102ca:	3b01      	subs	r3, #1
 80102cc:	2b02      	cmp	r3, #2
 80102ce:	d81d      	bhi.n	801030c <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80102d0:	683b      	ldr	r3, [r7, #0]
 80102d2:	889b      	ldrh	r3, [r3, #4]
 80102d4:	b2db      	uxtb	r3, r3
 80102d6:	2b01      	cmp	r3, #1
 80102d8:	d813      	bhi.n	8010302 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80102da:	687b      	ldr	r3, [r7, #4]
 80102dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80102e0:	689b      	ldr	r3, [r3, #8]
 80102e2:	6839      	ldr	r1, [r7, #0]
 80102e4:	6878      	ldr	r0, [r7, #4]
 80102e6:	4798      	blx	r3
 80102e8:	4603      	mov	r3, r0
 80102ea:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80102ec:	683b      	ldr	r3, [r7, #0]
 80102ee:	88db      	ldrh	r3, [r3, #6]
 80102f0:	2b00      	cmp	r3, #0
 80102f2:	d110      	bne.n	8010316 <USBD_StdItfReq+0x7a>
 80102f4:	7bfb      	ldrb	r3, [r7, #15]
 80102f6:	2b00      	cmp	r3, #0
 80102f8:	d10d      	bne.n	8010316 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 80102fa:	6878      	ldr	r0, [r7, #4]
 80102fc:	f000 fd73 	bl	8010de6 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8010300:	e009      	b.n	8010316 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8010302:	6839      	ldr	r1, [r7, #0]
 8010304:	6878      	ldr	r0, [r7, #4]
 8010306:	f000 fca3 	bl	8010c50 <USBD_CtlError>
          break;
 801030a:	e004      	b.n	8010316 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 801030c:	6839      	ldr	r1, [r7, #0]
 801030e:	6878      	ldr	r0, [r7, #4]
 8010310:	f000 fc9e 	bl	8010c50 <USBD_CtlError>
          break;
 8010314:	e000      	b.n	8010318 <USBD_StdItfReq+0x7c>
          break;
 8010316:	bf00      	nop
      }
      break;
 8010318:	e004      	b.n	8010324 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 801031a:	6839      	ldr	r1, [r7, #0]
 801031c:	6878      	ldr	r0, [r7, #4]
 801031e:	f000 fc97 	bl	8010c50 <USBD_CtlError>
      break;
 8010322:	bf00      	nop
  }

  return ret;
 8010324:	7bfb      	ldrb	r3, [r7, #15]
}
 8010326:	4618      	mov	r0, r3
 8010328:	3710      	adds	r7, #16
 801032a:	46bd      	mov	sp, r7
 801032c:	bd80      	pop	{r7, pc}

0801032e <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801032e:	b580      	push	{r7, lr}
 8010330:	b084      	sub	sp, #16
 8010332:	af00      	add	r7, sp, #0
 8010334:	6078      	str	r0, [r7, #4]
 8010336:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8010338:	2300      	movs	r3, #0
 801033a:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 801033c:	683b      	ldr	r3, [r7, #0]
 801033e:	889b      	ldrh	r3, [r3, #4]
 8010340:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8010342:	683b      	ldr	r3, [r7, #0]
 8010344:	781b      	ldrb	r3, [r3, #0]
 8010346:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801034a:	2b40      	cmp	r3, #64	; 0x40
 801034c:	d007      	beq.n	801035e <USBD_StdEPReq+0x30>
 801034e:	2b40      	cmp	r3, #64	; 0x40
 8010350:	f200 8145 	bhi.w	80105de <USBD_StdEPReq+0x2b0>
 8010354:	2b00      	cmp	r3, #0
 8010356:	d00c      	beq.n	8010372 <USBD_StdEPReq+0x44>
 8010358:	2b20      	cmp	r3, #32
 801035a:	f040 8140 	bne.w	80105de <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 801035e:	687b      	ldr	r3, [r7, #4]
 8010360:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010364:	689b      	ldr	r3, [r3, #8]
 8010366:	6839      	ldr	r1, [r7, #0]
 8010368:	6878      	ldr	r0, [r7, #4]
 801036a:	4798      	blx	r3
 801036c:	4603      	mov	r3, r0
 801036e:	73fb      	strb	r3, [r7, #15]
      break;
 8010370:	e13a      	b.n	80105e8 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8010372:	683b      	ldr	r3, [r7, #0]
 8010374:	785b      	ldrb	r3, [r3, #1]
 8010376:	2b03      	cmp	r3, #3
 8010378:	d007      	beq.n	801038a <USBD_StdEPReq+0x5c>
 801037a:	2b03      	cmp	r3, #3
 801037c:	f300 8129 	bgt.w	80105d2 <USBD_StdEPReq+0x2a4>
 8010380:	2b00      	cmp	r3, #0
 8010382:	d07f      	beq.n	8010484 <USBD_StdEPReq+0x156>
 8010384:	2b01      	cmp	r3, #1
 8010386:	d03c      	beq.n	8010402 <USBD_StdEPReq+0xd4>
 8010388:	e123      	b.n	80105d2 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 801038a:	687b      	ldr	r3, [r7, #4]
 801038c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010390:	b2db      	uxtb	r3, r3
 8010392:	2b02      	cmp	r3, #2
 8010394:	d002      	beq.n	801039c <USBD_StdEPReq+0x6e>
 8010396:	2b03      	cmp	r3, #3
 8010398:	d016      	beq.n	80103c8 <USBD_StdEPReq+0x9a>
 801039a:	e02c      	b.n	80103f6 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801039c:	7bbb      	ldrb	r3, [r7, #14]
 801039e:	2b00      	cmp	r3, #0
 80103a0:	d00d      	beq.n	80103be <USBD_StdEPReq+0x90>
 80103a2:	7bbb      	ldrb	r3, [r7, #14]
 80103a4:	2b80      	cmp	r3, #128	; 0x80
 80103a6:	d00a      	beq.n	80103be <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80103a8:	7bbb      	ldrb	r3, [r7, #14]
 80103aa:	4619      	mov	r1, r3
 80103ac:	6878      	ldr	r0, [r7, #4]
 80103ae:	f004 fab7 	bl	8014920 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80103b2:	2180      	movs	r1, #128	; 0x80
 80103b4:	6878      	ldr	r0, [r7, #4]
 80103b6:	f004 fab3 	bl	8014920 <USBD_LL_StallEP>
 80103ba:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80103bc:	e020      	b.n	8010400 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 80103be:	6839      	ldr	r1, [r7, #0]
 80103c0:	6878      	ldr	r0, [r7, #4]
 80103c2:	f000 fc45 	bl	8010c50 <USBD_CtlError>
              break;
 80103c6:	e01b      	b.n	8010400 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80103c8:	683b      	ldr	r3, [r7, #0]
 80103ca:	885b      	ldrh	r3, [r3, #2]
 80103cc:	2b00      	cmp	r3, #0
 80103ce:	d10e      	bne.n	80103ee <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80103d0:	7bbb      	ldrb	r3, [r7, #14]
 80103d2:	2b00      	cmp	r3, #0
 80103d4:	d00b      	beq.n	80103ee <USBD_StdEPReq+0xc0>
 80103d6:	7bbb      	ldrb	r3, [r7, #14]
 80103d8:	2b80      	cmp	r3, #128	; 0x80
 80103da:	d008      	beq.n	80103ee <USBD_StdEPReq+0xc0>
 80103dc:	683b      	ldr	r3, [r7, #0]
 80103de:	88db      	ldrh	r3, [r3, #6]
 80103e0:	2b00      	cmp	r3, #0
 80103e2:	d104      	bne.n	80103ee <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80103e4:	7bbb      	ldrb	r3, [r7, #14]
 80103e6:	4619      	mov	r1, r3
 80103e8:	6878      	ldr	r0, [r7, #4]
 80103ea:	f004 fa99 	bl	8014920 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80103ee:	6878      	ldr	r0, [r7, #4]
 80103f0:	f000 fcf9 	bl	8010de6 <USBD_CtlSendStatus>

              break;
 80103f4:	e004      	b.n	8010400 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 80103f6:	6839      	ldr	r1, [r7, #0]
 80103f8:	6878      	ldr	r0, [r7, #4]
 80103fa:	f000 fc29 	bl	8010c50 <USBD_CtlError>
              break;
 80103fe:	bf00      	nop
          }
          break;
 8010400:	e0ec      	b.n	80105dc <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8010402:	687b      	ldr	r3, [r7, #4]
 8010404:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010408:	b2db      	uxtb	r3, r3
 801040a:	2b02      	cmp	r3, #2
 801040c:	d002      	beq.n	8010414 <USBD_StdEPReq+0xe6>
 801040e:	2b03      	cmp	r3, #3
 8010410:	d016      	beq.n	8010440 <USBD_StdEPReq+0x112>
 8010412:	e030      	b.n	8010476 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8010414:	7bbb      	ldrb	r3, [r7, #14]
 8010416:	2b00      	cmp	r3, #0
 8010418:	d00d      	beq.n	8010436 <USBD_StdEPReq+0x108>
 801041a:	7bbb      	ldrb	r3, [r7, #14]
 801041c:	2b80      	cmp	r3, #128	; 0x80
 801041e:	d00a      	beq.n	8010436 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8010420:	7bbb      	ldrb	r3, [r7, #14]
 8010422:	4619      	mov	r1, r3
 8010424:	6878      	ldr	r0, [r7, #4]
 8010426:	f004 fa7b 	bl	8014920 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 801042a:	2180      	movs	r1, #128	; 0x80
 801042c:	6878      	ldr	r0, [r7, #4]
 801042e:	f004 fa77 	bl	8014920 <USBD_LL_StallEP>
 8010432:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8010434:	e025      	b.n	8010482 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8010436:	6839      	ldr	r1, [r7, #0]
 8010438:	6878      	ldr	r0, [r7, #4]
 801043a:	f000 fc09 	bl	8010c50 <USBD_CtlError>
              break;
 801043e:	e020      	b.n	8010482 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8010440:	683b      	ldr	r3, [r7, #0]
 8010442:	885b      	ldrh	r3, [r3, #2]
 8010444:	2b00      	cmp	r3, #0
 8010446:	d11b      	bne.n	8010480 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8010448:	7bbb      	ldrb	r3, [r7, #14]
 801044a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801044e:	2b00      	cmp	r3, #0
 8010450:	d004      	beq.n	801045c <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8010452:	7bbb      	ldrb	r3, [r7, #14]
 8010454:	4619      	mov	r1, r3
 8010456:	6878      	ldr	r0, [r7, #4]
 8010458:	f004 fa81 	bl	801495e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 801045c:	6878      	ldr	r0, [r7, #4]
 801045e:	f000 fcc2 	bl	8010de6 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8010462:	687b      	ldr	r3, [r7, #4]
 8010464:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010468:	689b      	ldr	r3, [r3, #8]
 801046a:	6839      	ldr	r1, [r7, #0]
 801046c:	6878      	ldr	r0, [r7, #4]
 801046e:	4798      	blx	r3
 8010470:	4603      	mov	r3, r0
 8010472:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8010474:	e004      	b.n	8010480 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8010476:	6839      	ldr	r1, [r7, #0]
 8010478:	6878      	ldr	r0, [r7, #4]
 801047a:	f000 fbe9 	bl	8010c50 <USBD_CtlError>
              break;
 801047e:	e000      	b.n	8010482 <USBD_StdEPReq+0x154>
              break;
 8010480:	bf00      	nop
          }
          break;
 8010482:	e0ab      	b.n	80105dc <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8010484:	687b      	ldr	r3, [r7, #4]
 8010486:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801048a:	b2db      	uxtb	r3, r3
 801048c:	2b02      	cmp	r3, #2
 801048e:	d002      	beq.n	8010496 <USBD_StdEPReq+0x168>
 8010490:	2b03      	cmp	r3, #3
 8010492:	d032      	beq.n	80104fa <USBD_StdEPReq+0x1cc>
 8010494:	e097      	b.n	80105c6 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8010496:	7bbb      	ldrb	r3, [r7, #14]
 8010498:	2b00      	cmp	r3, #0
 801049a:	d007      	beq.n	80104ac <USBD_StdEPReq+0x17e>
 801049c:	7bbb      	ldrb	r3, [r7, #14]
 801049e:	2b80      	cmp	r3, #128	; 0x80
 80104a0:	d004      	beq.n	80104ac <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 80104a2:	6839      	ldr	r1, [r7, #0]
 80104a4:	6878      	ldr	r0, [r7, #4]
 80104a6:	f000 fbd3 	bl	8010c50 <USBD_CtlError>
                break;
 80104aa:	e091      	b.n	80105d0 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80104ac:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80104b0:	2b00      	cmp	r3, #0
 80104b2:	da0b      	bge.n	80104cc <USBD_StdEPReq+0x19e>
 80104b4:	7bbb      	ldrb	r3, [r7, #14]
 80104b6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80104ba:	4613      	mov	r3, r2
 80104bc:	009b      	lsls	r3, r3, #2
 80104be:	4413      	add	r3, r2
 80104c0:	009b      	lsls	r3, r3, #2
 80104c2:	3310      	adds	r3, #16
 80104c4:	687a      	ldr	r2, [r7, #4]
 80104c6:	4413      	add	r3, r2
 80104c8:	3304      	adds	r3, #4
 80104ca:	e00b      	b.n	80104e4 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80104cc:	7bbb      	ldrb	r3, [r7, #14]
 80104ce:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80104d2:	4613      	mov	r3, r2
 80104d4:	009b      	lsls	r3, r3, #2
 80104d6:	4413      	add	r3, r2
 80104d8:	009b      	lsls	r3, r3, #2
 80104da:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80104de:	687a      	ldr	r2, [r7, #4]
 80104e0:	4413      	add	r3, r2
 80104e2:	3304      	adds	r3, #4
 80104e4:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80104e6:	68bb      	ldr	r3, [r7, #8]
 80104e8:	2200      	movs	r2, #0
 80104ea:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80104ec:	68bb      	ldr	r3, [r7, #8]
 80104ee:	2202      	movs	r2, #2
 80104f0:	4619      	mov	r1, r3
 80104f2:	6878      	ldr	r0, [r7, #4]
 80104f4:	f000 fc1d 	bl	8010d32 <USBD_CtlSendData>
              break;
 80104f8:	e06a      	b.n	80105d0 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80104fa:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80104fe:	2b00      	cmp	r3, #0
 8010500:	da11      	bge.n	8010526 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8010502:	7bbb      	ldrb	r3, [r7, #14]
 8010504:	f003 020f 	and.w	r2, r3, #15
 8010508:	6879      	ldr	r1, [r7, #4]
 801050a:	4613      	mov	r3, r2
 801050c:	009b      	lsls	r3, r3, #2
 801050e:	4413      	add	r3, r2
 8010510:	009b      	lsls	r3, r3, #2
 8010512:	440b      	add	r3, r1
 8010514:	3324      	adds	r3, #36	; 0x24
 8010516:	881b      	ldrh	r3, [r3, #0]
 8010518:	2b00      	cmp	r3, #0
 801051a:	d117      	bne.n	801054c <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 801051c:	6839      	ldr	r1, [r7, #0]
 801051e:	6878      	ldr	r0, [r7, #4]
 8010520:	f000 fb96 	bl	8010c50 <USBD_CtlError>
                  break;
 8010524:	e054      	b.n	80105d0 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8010526:	7bbb      	ldrb	r3, [r7, #14]
 8010528:	f003 020f 	and.w	r2, r3, #15
 801052c:	6879      	ldr	r1, [r7, #4]
 801052e:	4613      	mov	r3, r2
 8010530:	009b      	lsls	r3, r3, #2
 8010532:	4413      	add	r3, r2
 8010534:	009b      	lsls	r3, r3, #2
 8010536:	440b      	add	r3, r1
 8010538:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 801053c:	881b      	ldrh	r3, [r3, #0]
 801053e:	2b00      	cmp	r3, #0
 8010540:	d104      	bne.n	801054c <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8010542:	6839      	ldr	r1, [r7, #0]
 8010544:	6878      	ldr	r0, [r7, #4]
 8010546:	f000 fb83 	bl	8010c50 <USBD_CtlError>
                  break;
 801054a:	e041      	b.n	80105d0 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801054c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8010550:	2b00      	cmp	r3, #0
 8010552:	da0b      	bge.n	801056c <USBD_StdEPReq+0x23e>
 8010554:	7bbb      	ldrb	r3, [r7, #14]
 8010556:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801055a:	4613      	mov	r3, r2
 801055c:	009b      	lsls	r3, r3, #2
 801055e:	4413      	add	r3, r2
 8010560:	009b      	lsls	r3, r3, #2
 8010562:	3310      	adds	r3, #16
 8010564:	687a      	ldr	r2, [r7, #4]
 8010566:	4413      	add	r3, r2
 8010568:	3304      	adds	r3, #4
 801056a:	e00b      	b.n	8010584 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 801056c:	7bbb      	ldrb	r3, [r7, #14]
 801056e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8010572:	4613      	mov	r3, r2
 8010574:	009b      	lsls	r3, r3, #2
 8010576:	4413      	add	r3, r2
 8010578:	009b      	lsls	r3, r3, #2
 801057a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 801057e:	687a      	ldr	r2, [r7, #4]
 8010580:	4413      	add	r3, r2
 8010582:	3304      	adds	r3, #4
 8010584:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8010586:	7bbb      	ldrb	r3, [r7, #14]
 8010588:	2b00      	cmp	r3, #0
 801058a:	d002      	beq.n	8010592 <USBD_StdEPReq+0x264>
 801058c:	7bbb      	ldrb	r3, [r7, #14]
 801058e:	2b80      	cmp	r3, #128	; 0x80
 8010590:	d103      	bne.n	801059a <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8010592:	68bb      	ldr	r3, [r7, #8]
 8010594:	2200      	movs	r2, #0
 8010596:	601a      	str	r2, [r3, #0]
 8010598:	e00e      	b.n	80105b8 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 801059a:	7bbb      	ldrb	r3, [r7, #14]
 801059c:	4619      	mov	r1, r3
 801059e:	6878      	ldr	r0, [r7, #4]
 80105a0:	f004 f9fc 	bl	801499c <USBD_LL_IsStallEP>
 80105a4:	4603      	mov	r3, r0
 80105a6:	2b00      	cmp	r3, #0
 80105a8:	d003      	beq.n	80105b2 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 80105aa:	68bb      	ldr	r3, [r7, #8]
 80105ac:	2201      	movs	r2, #1
 80105ae:	601a      	str	r2, [r3, #0]
 80105b0:	e002      	b.n	80105b8 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 80105b2:	68bb      	ldr	r3, [r7, #8]
 80105b4:	2200      	movs	r2, #0
 80105b6:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80105b8:	68bb      	ldr	r3, [r7, #8]
 80105ba:	2202      	movs	r2, #2
 80105bc:	4619      	mov	r1, r3
 80105be:	6878      	ldr	r0, [r7, #4]
 80105c0:	f000 fbb7 	bl	8010d32 <USBD_CtlSendData>
              break;
 80105c4:	e004      	b.n	80105d0 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 80105c6:	6839      	ldr	r1, [r7, #0]
 80105c8:	6878      	ldr	r0, [r7, #4]
 80105ca:	f000 fb41 	bl	8010c50 <USBD_CtlError>
              break;
 80105ce:	bf00      	nop
          }
          break;
 80105d0:	e004      	b.n	80105dc <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 80105d2:	6839      	ldr	r1, [r7, #0]
 80105d4:	6878      	ldr	r0, [r7, #4]
 80105d6:	f000 fb3b 	bl	8010c50 <USBD_CtlError>
          break;
 80105da:	bf00      	nop
      }
      break;
 80105dc:	e004      	b.n	80105e8 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 80105de:	6839      	ldr	r1, [r7, #0]
 80105e0:	6878      	ldr	r0, [r7, #4]
 80105e2:	f000 fb35 	bl	8010c50 <USBD_CtlError>
      break;
 80105e6:	bf00      	nop
  }

  return ret;
 80105e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80105ea:	4618      	mov	r0, r3
 80105ec:	3710      	adds	r7, #16
 80105ee:	46bd      	mov	sp, r7
 80105f0:	bd80      	pop	{r7, pc}
	...

080105f4 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80105f4:	b580      	push	{r7, lr}
 80105f6:	b084      	sub	sp, #16
 80105f8:	af00      	add	r7, sp, #0
 80105fa:	6078      	str	r0, [r7, #4]
 80105fc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80105fe:	2300      	movs	r3, #0
 8010600:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8010602:	2300      	movs	r3, #0
 8010604:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8010606:	2300      	movs	r3, #0
 8010608:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 801060a:	683b      	ldr	r3, [r7, #0]
 801060c:	885b      	ldrh	r3, [r3, #2]
 801060e:	0a1b      	lsrs	r3, r3, #8
 8010610:	b29b      	uxth	r3, r3
 8010612:	3b01      	subs	r3, #1
 8010614:	2b06      	cmp	r3, #6
 8010616:	f200 8128 	bhi.w	801086a <USBD_GetDescriptor+0x276>
 801061a:	a201      	add	r2, pc, #4	; (adr r2, 8010620 <USBD_GetDescriptor+0x2c>)
 801061c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010620:	0801063d 	.word	0x0801063d
 8010624:	08010655 	.word	0x08010655
 8010628:	08010695 	.word	0x08010695
 801062c:	0801086b 	.word	0x0801086b
 8010630:	0801086b 	.word	0x0801086b
 8010634:	0801080b 	.word	0x0801080b
 8010638:	08010837 	.word	0x08010837
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 801063c:	687b      	ldr	r3, [r7, #4]
 801063e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010642:	681b      	ldr	r3, [r3, #0]
 8010644:	687a      	ldr	r2, [r7, #4]
 8010646:	7c12      	ldrb	r2, [r2, #16]
 8010648:	f107 0108 	add.w	r1, r7, #8
 801064c:	4610      	mov	r0, r2
 801064e:	4798      	blx	r3
 8010650:	60f8      	str	r0, [r7, #12]
      break;
 8010652:	e112      	b.n	801087a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8010654:	687b      	ldr	r3, [r7, #4]
 8010656:	7c1b      	ldrb	r3, [r3, #16]
 8010658:	2b00      	cmp	r3, #0
 801065a:	d10d      	bne.n	8010678 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 801065c:	687b      	ldr	r3, [r7, #4]
 801065e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010662:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010664:	f107 0208 	add.w	r2, r7, #8
 8010668:	4610      	mov	r0, r2
 801066a:	4798      	blx	r3
 801066c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 801066e:	68fb      	ldr	r3, [r7, #12]
 8010670:	3301      	adds	r3, #1
 8010672:	2202      	movs	r2, #2
 8010674:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8010676:	e100      	b.n	801087a <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8010678:	687b      	ldr	r3, [r7, #4]
 801067a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801067e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010680:	f107 0208 	add.w	r2, r7, #8
 8010684:	4610      	mov	r0, r2
 8010686:	4798      	blx	r3
 8010688:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 801068a:	68fb      	ldr	r3, [r7, #12]
 801068c:	3301      	adds	r3, #1
 801068e:	2202      	movs	r2, #2
 8010690:	701a      	strb	r2, [r3, #0]
      break;
 8010692:	e0f2      	b.n	801087a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8010694:	683b      	ldr	r3, [r7, #0]
 8010696:	885b      	ldrh	r3, [r3, #2]
 8010698:	b2db      	uxtb	r3, r3
 801069a:	2b05      	cmp	r3, #5
 801069c:	f200 80ac 	bhi.w	80107f8 <USBD_GetDescriptor+0x204>
 80106a0:	a201      	add	r2, pc, #4	; (adr r2, 80106a8 <USBD_GetDescriptor+0xb4>)
 80106a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80106a6:	bf00      	nop
 80106a8:	080106c1 	.word	0x080106c1
 80106ac:	080106f5 	.word	0x080106f5
 80106b0:	08010729 	.word	0x08010729
 80106b4:	0801075d 	.word	0x0801075d
 80106b8:	08010791 	.word	0x08010791
 80106bc:	080107c5 	.word	0x080107c5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80106c0:	687b      	ldr	r3, [r7, #4]
 80106c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80106c6:	685b      	ldr	r3, [r3, #4]
 80106c8:	2b00      	cmp	r3, #0
 80106ca:	d00b      	beq.n	80106e4 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80106cc:	687b      	ldr	r3, [r7, #4]
 80106ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80106d2:	685b      	ldr	r3, [r3, #4]
 80106d4:	687a      	ldr	r2, [r7, #4]
 80106d6:	7c12      	ldrb	r2, [r2, #16]
 80106d8:	f107 0108 	add.w	r1, r7, #8
 80106dc:	4610      	mov	r0, r2
 80106de:	4798      	blx	r3
 80106e0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80106e2:	e091      	b.n	8010808 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80106e4:	6839      	ldr	r1, [r7, #0]
 80106e6:	6878      	ldr	r0, [r7, #4]
 80106e8:	f000 fab2 	bl	8010c50 <USBD_CtlError>
            err++;
 80106ec:	7afb      	ldrb	r3, [r7, #11]
 80106ee:	3301      	adds	r3, #1
 80106f0:	72fb      	strb	r3, [r7, #11]
          break;
 80106f2:	e089      	b.n	8010808 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80106f4:	687b      	ldr	r3, [r7, #4]
 80106f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80106fa:	689b      	ldr	r3, [r3, #8]
 80106fc:	2b00      	cmp	r3, #0
 80106fe:	d00b      	beq.n	8010718 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8010700:	687b      	ldr	r3, [r7, #4]
 8010702:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010706:	689b      	ldr	r3, [r3, #8]
 8010708:	687a      	ldr	r2, [r7, #4]
 801070a:	7c12      	ldrb	r2, [r2, #16]
 801070c:	f107 0108 	add.w	r1, r7, #8
 8010710:	4610      	mov	r0, r2
 8010712:	4798      	blx	r3
 8010714:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8010716:	e077      	b.n	8010808 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8010718:	6839      	ldr	r1, [r7, #0]
 801071a:	6878      	ldr	r0, [r7, #4]
 801071c:	f000 fa98 	bl	8010c50 <USBD_CtlError>
            err++;
 8010720:	7afb      	ldrb	r3, [r7, #11]
 8010722:	3301      	adds	r3, #1
 8010724:	72fb      	strb	r3, [r7, #11]
          break;
 8010726:	e06f      	b.n	8010808 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8010728:	687b      	ldr	r3, [r7, #4]
 801072a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801072e:	68db      	ldr	r3, [r3, #12]
 8010730:	2b00      	cmp	r3, #0
 8010732:	d00b      	beq.n	801074c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8010734:	687b      	ldr	r3, [r7, #4]
 8010736:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801073a:	68db      	ldr	r3, [r3, #12]
 801073c:	687a      	ldr	r2, [r7, #4]
 801073e:	7c12      	ldrb	r2, [r2, #16]
 8010740:	f107 0108 	add.w	r1, r7, #8
 8010744:	4610      	mov	r0, r2
 8010746:	4798      	blx	r3
 8010748:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801074a:	e05d      	b.n	8010808 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 801074c:	6839      	ldr	r1, [r7, #0]
 801074e:	6878      	ldr	r0, [r7, #4]
 8010750:	f000 fa7e 	bl	8010c50 <USBD_CtlError>
            err++;
 8010754:	7afb      	ldrb	r3, [r7, #11]
 8010756:	3301      	adds	r3, #1
 8010758:	72fb      	strb	r3, [r7, #11]
          break;
 801075a:	e055      	b.n	8010808 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 801075c:	687b      	ldr	r3, [r7, #4]
 801075e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010762:	691b      	ldr	r3, [r3, #16]
 8010764:	2b00      	cmp	r3, #0
 8010766:	d00b      	beq.n	8010780 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8010768:	687b      	ldr	r3, [r7, #4]
 801076a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801076e:	691b      	ldr	r3, [r3, #16]
 8010770:	687a      	ldr	r2, [r7, #4]
 8010772:	7c12      	ldrb	r2, [r2, #16]
 8010774:	f107 0108 	add.w	r1, r7, #8
 8010778:	4610      	mov	r0, r2
 801077a:	4798      	blx	r3
 801077c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801077e:	e043      	b.n	8010808 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8010780:	6839      	ldr	r1, [r7, #0]
 8010782:	6878      	ldr	r0, [r7, #4]
 8010784:	f000 fa64 	bl	8010c50 <USBD_CtlError>
            err++;
 8010788:	7afb      	ldrb	r3, [r7, #11]
 801078a:	3301      	adds	r3, #1
 801078c:	72fb      	strb	r3, [r7, #11]
          break;
 801078e:	e03b      	b.n	8010808 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8010790:	687b      	ldr	r3, [r7, #4]
 8010792:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010796:	695b      	ldr	r3, [r3, #20]
 8010798:	2b00      	cmp	r3, #0
 801079a:	d00b      	beq.n	80107b4 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 801079c:	687b      	ldr	r3, [r7, #4]
 801079e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80107a2:	695b      	ldr	r3, [r3, #20]
 80107a4:	687a      	ldr	r2, [r7, #4]
 80107a6:	7c12      	ldrb	r2, [r2, #16]
 80107a8:	f107 0108 	add.w	r1, r7, #8
 80107ac:	4610      	mov	r0, r2
 80107ae:	4798      	blx	r3
 80107b0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80107b2:	e029      	b.n	8010808 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80107b4:	6839      	ldr	r1, [r7, #0]
 80107b6:	6878      	ldr	r0, [r7, #4]
 80107b8:	f000 fa4a 	bl	8010c50 <USBD_CtlError>
            err++;
 80107bc:	7afb      	ldrb	r3, [r7, #11]
 80107be:	3301      	adds	r3, #1
 80107c0:	72fb      	strb	r3, [r7, #11]
          break;
 80107c2:	e021      	b.n	8010808 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80107c4:	687b      	ldr	r3, [r7, #4]
 80107c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80107ca:	699b      	ldr	r3, [r3, #24]
 80107cc:	2b00      	cmp	r3, #0
 80107ce:	d00b      	beq.n	80107e8 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80107d0:	687b      	ldr	r3, [r7, #4]
 80107d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80107d6:	699b      	ldr	r3, [r3, #24]
 80107d8:	687a      	ldr	r2, [r7, #4]
 80107da:	7c12      	ldrb	r2, [r2, #16]
 80107dc:	f107 0108 	add.w	r1, r7, #8
 80107e0:	4610      	mov	r0, r2
 80107e2:	4798      	blx	r3
 80107e4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80107e6:	e00f      	b.n	8010808 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80107e8:	6839      	ldr	r1, [r7, #0]
 80107ea:	6878      	ldr	r0, [r7, #4]
 80107ec:	f000 fa30 	bl	8010c50 <USBD_CtlError>
            err++;
 80107f0:	7afb      	ldrb	r3, [r7, #11]
 80107f2:	3301      	adds	r3, #1
 80107f4:	72fb      	strb	r3, [r7, #11]
          break;
 80107f6:	e007      	b.n	8010808 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80107f8:	6839      	ldr	r1, [r7, #0]
 80107fa:	6878      	ldr	r0, [r7, #4]
 80107fc:	f000 fa28 	bl	8010c50 <USBD_CtlError>
          err++;
 8010800:	7afb      	ldrb	r3, [r7, #11]
 8010802:	3301      	adds	r3, #1
 8010804:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8010806:	bf00      	nop
      }
      break;
 8010808:	e037      	b.n	801087a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801080a:	687b      	ldr	r3, [r7, #4]
 801080c:	7c1b      	ldrb	r3, [r3, #16]
 801080e:	2b00      	cmp	r3, #0
 8010810:	d109      	bne.n	8010826 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8010812:	687b      	ldr	r3, [r7, #4]
 8010814:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010818:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801081a:	f107 0208 	add.w	r2, r7, #8
 801081e:	4610      	mov	r0, r2
 8010820:	4798      	blx	r3
 8010822:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8010824:	e029      	b.n	801087a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8010826:	6839      	ldr	r1, [r7, #0]
 8010828:	6878      	ldr	r0, [r7, #4]
 801082a:	f000 fa11 	bl	8010c50 <USBD_CtlError>
        err++;
 801082e:	7afb      	ldrb	r3, [r7, #11]
 8010830:	3301      	adds	r3, #1
 8010832:	72fb      	strb	r3, [r7, #11]
      break;
 8010834:	e021      	b.n	801087a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8010836:	687b      	ldr	r3, [r7, #4]
 8010838:	7c1b      	ldrb	r3, [r3, #16]
 801083a:	2b00      	cmp	r3, #0
 801083c:	d10d      	bne.n	801085a <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 801083e:	687b      	ldr	r3, [r7, #4]
 8010840:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010846:	f107 0208 	add.w	r2, r7, #8
 801084a:	4610      	mov	r0, r2
 801084c:	4798      	blx	r3
 801084e:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8010850:	68fb      	ldr	r3, [r7, #12]
 8010852:	3301      	adds	r3, #1
 8010854:	2207      	movs	r2, #7
 8010856:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8010858:	e00f      	b.n	801087a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 801085a:	6839      	ldr	r1, [r7, #0]
 801085c:	6878      	ldr	r0, [r7, #4]
 801085e:	f000 f9f7 	bl	8010c50 <USBD_CtlError>
        err++;
 8010862:	7afb      	ldrb	r3, [r7, #11]
 8010864:	3301      	adds	r3, #1
 8010866:	72fb      	strb	r3, [r7, #11]
      break;
 8010868:	e007      	b.n	801087a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 801086a:	6839      	ldr	r1, [r7, #0]
 801086c:	6878      	ldr	r0, [r7, #4]
 801086e:	f000 f9ef 	bl	8010c50 <USBD_CtlError>
      err++;
 8010872:	7afb      	ldrb	r3, [r7, #11]
 8010874:	3301      	adds	r3, #1
 8010876:	72fb      	strb	r3, [r7, #11]
      break;
 8010878:	bf00      	nop
  }

  if (err != 0U)
 801087a:	7afb      	ldrb	r3, [r7, #11]
 801087c:	2b00      	cmp	r3, #0
 801087e:	d11e      	bne.n	80108be <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8010880:	683b      	ldr	r3, [r7, #0]
 8010882:	88db      	ldrh	r3, [r3, #6]
 8010884:	2b00      	cmp	r3, #0
 8010886:	d016      	beq.n	80108b6 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8010888:	893b      	ldrh	r3, [r7, #8]
 801088a:	2b00      	cmp	r3, #0
 801088c:	d00e      	beq.n	80108ac <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 801088e:	683b      	ldr	r3, [r7, #0]
 8010890:	88da      	ldrh	r2, [r3, #6]
 8010892:	893b      	ldrh	r3, [r7, #8]
 8010894:	4293      	cmp	r3, r2
 8010896:	bf28      	it	cs
 8010898:	4613      	movcs	r3, r2
 801089a:	b29b      	uxth	r3, r3
 801089c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 801089e:	893b      	ldrh	r3, [r7, #8]
 80108a0:	461a      	mov	r2, r3
 80108a2:	68f9      	ldr	r1, [r7, #12]
 80108a4:	6878      	ldr	r0, [r7, #4]
 80108a6:	f000 fa44 	bl	8010d32 <USBD_CtlSendData>
 80108aa:	e009      	b.n	80108c0 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80108ac:	6839      	ldr	r1, [r7, #0]
 80108ae:	6878      	ldr	r0, [r7, #4]
 80108b0:	f000 f9ce 	bl	8010c50 <USBD_CtlError>
 80108b4:	e004      	b.n	80108c0 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80108b6:	6878      	ldr	r0, [r7, #4]
 80108b8:	f000 fa95 	bl	8010de6 <USBD_CtlSendStatus>
 80108bc:	e000      	b.n	80108c0 <USBD_GetDescriptor+0x2cc>
    return;
 80108be:	bf00      	nop
  }
}
 80108c0:	3710      	adds	r7, #16
 80108c2:	46bd      	mov	sp, r7
 80108c4:	bd80      	pop	{r7, pc}
 80108c6:	bf00      	nop

080108c8 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80108c8:	b580      	push	{r7, lr}
 80108ca:	b084      	sub	sp, #16
 80108cc:	af00      	add	r7, sp, #0
 80108ce:	6078      	str	r0, [r7, #4]
 80108d0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80108d2:	683b      	ldr	r3, [r7, #0]
 80108d4:	889b      	ldrh	r3, [r3, #4]
 80108d6:	2b00      	cmp	r3, #0
 80108d8:	d131      	bne.n	801093e <USBD_SetAddress+0x76>
 80108da:	683b      	ldr	r3, [r7, #0]
 80108dc:	88db      	ldrh	r3, [r3, #6]
 80108de:	2b00      	cmp	r3, #0
 80108e0:	d12d      	bne.n	801093e <USBD_SetAddress+0x76>
 80108e2:	683b      	ldr	r3, [r7, #0]
 80108e4:	885b      	ldrh	r3, [r3, #2]
 80108e6:	2b7f      	cmp	r3, #127	; 0x7f
 80108e8:	d829      	bhi.n	801093e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80108ea:	683b      	ldr	r3, [r7, #0]
 80108ec:	885b      	ldrh	r3, [r3, #2]
 80108ee:	b2db      	uxtb	r3, r3
 80108f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80108f4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80108f6:	687b      	ldr	r3, [r7, #4]
 80108f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80108fc:	b2db      	uxtb	r3, r3
 80108fe:	2b03      	cmp	r3, #3
 8010900:	d104      	bne.n	801090c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8010902:	6839      	ldr	r1, [r7, #0]
 8010904:	6878      	ldr	r0, [r7, #4]
 8010906:	f000 f9a3 	bl	8010c50 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801090a:	e01d      	b.n	8010948 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 801090c:	687b      	ldr	r3, [r7, #4]
 801090e:	7bfa      	ldrb	r2, [r7, #15]
 8010910:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8010914:	7bfb      	ldrb	r3, [r7, #15]
 8010916:	4619      	mov	r1, r3
 8010918:	6878      	ldr	r0, [r7, #4]
 801091a:	f004 f86b 	bl	80149f4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 801091e:	6878      	ldr	r0, [r7, #4]
 8010920:	f000 fa61 	bl	8010de6 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8010924:	7bfb      	ldrb	r3, [r7, #15]
 8010926:	2b00      	cmp	r3, #0
 8010928:	d004      	beq.n	8010934 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 801092a:	687b      	ldr	r3, [r7, #4]
 801092c:	2202      	movs	r2, #2
 801092e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010932:	e009      	b.n	8010948 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8010934:	687b      	ldr	r3, [r7, #4]
 8010936:	2201      	movs	r2, #1
 8010938:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801093c:	e004      	b.n	8010948 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 801093e:	6839      	ldr	r1, [r7, #0]
 8010940:	6878      	ldr	r0, [r7, #4]
 8010942:	f000 f985 	bl	8010c50 <USBD_CtlError>
  }
}
 8010946:	bf00      	nop
 8010948:	bf00      	nop
 801094a:	3710      	adds	r7, #16
 801094c:	46bd      	mov	sp, r7
 801094e:	bd80      	pop	{r7, pc}

08010950 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010950:	b580      	push	{r7, lr}
 8010952:	b084      	sub	sp, #16
 8010954:	af00      	add	r7, sp, #0
 8010956:	6078      	str	r0, [r7, #4]
 8010958:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801095a:	2300      	movs	r3, #0
 801095c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 801095e:	683b      	ldr	r3, [r7, #0]
 8010960:	885b      	ldrh	r3, [r3, #2]
 8010962:	b2da      	uxtb	r2, r3
 8010964:	4b4c      	ldr	r3, [pc, #304]	; (8010a98 <USBD_SetConfig+0x148>)
 8010966:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8010968:	4b4b      	ldr	r3, [pc, #300]	; (8010a98 <USBD_SetConfig+0x148>)
 801096a:	781b      	ldrb	r3, [r3, #0]
 801096c:	2b01      	cmp	r3, #1
 801096e:	d905      	bls.n	801097c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8010970:	6839      	ldr	r1, [r7, #0]
 8010972:	6878      	ldr	r0, [r7, #4]
 8010974:	f000 f96c 	bl	8010c50 <USBD_CtlError>
    return USBD_FAIL;
 8010978:	2303      	movs	r3, #3
 801097a:	e088      	b.n	8010a8e <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 801097c:	687b      	ldr	r3, [r7, #4]
 801097e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010982:	b2db      	uxtb	r3, r3
 8010984:	2b02      	cmp	r3, #2
 8010986:	d002      	beq.n	801098e <USBD_SetConfig+0x3e>
 8010988:	2b03      	cmp	r3, #3
 801098a:	d025      	beq.n	80109d8 <USBD_SetConfig+0x88>
 801098c:	e071      	b.n	8010a72 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 801098e:	4b42      	ldr	r3, [pc, #264]	; (8010a98 <USBD_SetConfig+0x148>)
 8010990:	781b      	ldrb	r3, [r3, #0]
 8010992:	2b00      	cmp	r3, #0
 8010994:	d01c      	beq.n	80109d0 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8010996:	4b40      	ldr	r3, [pc, #256]	; (8010a98 <USBD_SetConfig+0x148>)
 8010998:	781b      	ldrb	r3, [r3, #0]
 801099a:	461a      	mov	r2, r3
 801099c:	687b      	ldr	r3, [r7, #4]
 801099e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80109a0:	4b3d      	ldr	r3, [pc, #244]	; (8010a98 <USBD_SetConfig+0x148>)
 80109a2:	781b      	ldrb	r3, [r3, #0]
 80109a4:	4619      	mov	r1, r3
 80109a6:	6878      	ldr	r0, [r7, #4]
 80109a8:	f7ff f948 	bl	800fc3c <USBD_SetClassConfig>
 80109ac:	4603      	mov	r3, r0
 80109ae:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80109b0:	7bfb      	ldrb	r3, [r7, #15]
 80109b2:	2b00      	cmp	r3, #0
 80109b4:	d004      	beq.n	80109c0 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 80109b6:	6839      	ldr	r1, [r7, #0]
 80109b8:	6878      	ldr	r0, [r7, #4]
 80109ba:	f000 f949 	bl	8010c50 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80109be:	e065      	b.n	8010a8c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 80109c0:	6878      	ldr	r0, [r7, #4]
 80109c2:	f000 fa10 	bl	8010de6 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80109c6:	687b      	ldr	r3, [r7, #4]
 80109c8:	2203      	movs	r2, #3
 80109ca:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80109ce:	e05d      	b.n	8010a8c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 80109d0:	6878      	ldr	r0, [r7, #4]
 80109d2:	f000 fa08 	bl	8010de6 <USBD_CtlSendStatus>
      break;
 80109d6:	e059      	b.n	8010a8c <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80109d8:	4b2f      	ldr	r3, [pc, #188]	; (8010a98 <USBD_SetConfig+0x148>)
 80109da:	781b      	ldrb	r3, [r3, #0]
 80109dc:	2b00      	cmp	r3, #0
 80109de:	d112      	bne.n	8010a06 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80109e0:	687b      	ldr	r3, [r7, #4]
 80109e2:	2202      	movs	r2, #2
 80109e4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80109e8:	4b2b      	ldr	r3, [pc, #172]	; (8010a98 <USBD_SetConfig+0x148>)
 80109ea:	781b      	ldrb	r3, [r3, #0]
 80109ec:	461a      	mov	r2, r3
 80109ee:	687b      	ldr	r3, [r7, #4]
 80109f0:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80109f2:	4b29      	ldr	r3, [pc, #164]	; (8010a98 <USBD_SetConfig+0x148>)
 80109f4:	781b      	ldrb	r3, [r3, #0]
 80109f6:	4619      	mov	r1, r3
 80109f8:	6878      	ldr	r0, [r7, #4]
 80109fa:	f7ff f93b 	bl	800fc74 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80109fe:	6878      	ldr	r0, [r7, #4]
 8010a00:	f000 f9f1 	bl	8010de6 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8010a04:	e042      	b.n	8010a8c <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8010a06:	4b24      	ldr	r3, [pc, #144]	; (8010a98 <USBD_SetConfig+0x148>)
 8010a08:	781b      	ldrb	r3, [r3, #0]
 8010a0a:	461a      	mov	r2, r3
 8010a0c:	687b      	ldr	r3, [r7, #4]
 8010a0e:	685b      	ldr	r3, [r3, #4]
 8010a10:	429a      	cmp	r2, r3
 8010a12:	d02a      	beq.n	8010a6a <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8010a14:	687b      	ldr	r3, [r7, #4]
 8010a16:	685b      	ldr	r3, [r3, #4]
 8010a18:	b2db      	uxtb	r3, r3
 8010a1a:	4619      	mov	r1, r3
 8010a1c:	6878      	ldr	r0, [r7, #4]
 8010a1e:	f7ff f929 	bl	800fc74 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8010a22:	4b1d      	ldr	r3, [pc, #116]	; (8010a98 <USBD_SetConfig+0x148>)
 8010a24:	781b      	ldrb	r3, [r3, #0]
 8010a26:	461a      	mov	r2, r3
 8010a28:	687b      	ldr	r3, [r7, #4]
 8010a2a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8010a2c:	4b1a      	ldr	r3, [pc, #104]	; (8010a98 <USBD_SetConfig+0x148>)
 8010a2e:	781b      	ldrb	r3, [r3, #0]
 8010a30:	4619      	mov	r1, r3
 8010a32:	6878      	ldr	r0, [r7, #4]
 8010a34:	f7ff f902 	bl	800fc3c <USBD_SetClassConfig>
 8010a38:	4603      	mov	r3, r0
 8010a3a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8010a3c:	7bfb      	ldrb	r3, [r7, #15]
 8010a3e:	2b00      	cmp	r3, #0
 8010a40:	d00f      	beq.n	8010a62 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8010a42:	6839      	ldr	r1, [r7, #0]
 8010a44:	6878      	ldr	r0, [r7, #4]
 8010a46:	f000 f903 	bl	8010c50 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8010a4a:	687b      	ldr	r3, [r7, #4]
 8010a4c:	685b      	ldr	r3, [r3, #4]
 8010a4e:	b2db      	uxtb	r3, r3
 8010a50:	4619      	mov	r1, r3
 8010a52:	6878      	ldr	r0, [r7, #4]
 8010a54:	f7ff f90e 	bl	800fc74 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8010a58:	687b      	ldr	r3, [r7, #4]
 8010a5a:	2202      	movs	r2, #2
 8010a5c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8010a60:	e014      	b.n	8010a8c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8010a62:	6878      	ldr	r0, [r7, #4]
 8010a64:	f000 f9bf 	bl	8010de6 <USBD_CtlSendStatus>
      break;
 8010a68:	e010      	b.n	8010a8c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8010a6a:	6878      	ldr	r0, [r7, #4]
 8010a6c:	f000 f9bb 	bl	8010de6 <USBD_CtlSendStatus>
      break;
 8010a70:	e00c      	b.n	8010a8c <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8010a72:	6839      	ldr	r1, [r7, #0]
 8010a74:	6878      	ldr	r0, [r7, #4]
 8010a76:	f000 f8eb 	bl	8010c50 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8010a7a:	4b07      	ldr	r3, [pc, #28]	; (8010a98 <USBD_SetConfig+0x148>)
 8010a7c:	781b      	ldrb	r3, [r3, #0]
 8010a7e:	4619      	mov	r1, r3
 8010a80:	6878      	ldr	r0, [r7, #4]
 8010a82:	f7ff f8f7 	bl	800fc74 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8010a86:	2303      	movs	r3, #3
 8010a88:	73fb      	strb	r3, [r7, #15]
      break;
 8010a8a:	bf00      	nop
  }

  return ret;
 8010a8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8010a8e:	4618      	mov	r0, r3
 8010a90:	3710      	adds	r7, #16
 8010a92:	46bd      	mov	sp, r7
 8010a94:	bd80      	pop	{r7, pc}
 8010a96:	bf00      	nop
 8010a98:	2000217c 	.word	0x2000217c

08010a9c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010a9c:	b580      	push	{r7, lr}
 8010a9e:	b082      	sub	sp, #8
 8010aa0:	af00      	add	r7, sp, #0
 8010aa2:	6078      	str	r0, [r7, #4]
 8010aa4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8010aa6:	683b      	ldr	r3, [r7, #0]
 8010aa8:	88db      	ldrh	r3, [r3, #6]
 8010aaa:	2b01      	cmp	r3, #1
 8010aac:	d004      	beq.n	8010ab8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8010aae:	6839      	ldr	r1, [r7, #0]
 8010ab0:	6878      	ldr	r0, [r7, #4]
 8010ab2:	f000 f8cd 	bl	8010c50 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8010ab6:	e023      	b.n	8010b00 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8010ab8:	687b      	ldr	r3, [r7, #4]
 8010aba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010abe:	b2db      	uxtb	r3, r3
 8010ac0:	2b02      	cmp	r3, #2
 8010ac2:	dc02      	bgt.n	8010aca <USBD_GetConfig+0x2e>
 8010ac4:	2b00      	cmp	r3, #0
 8010ac6:	dc03      	bgt.n	8010ad0 <USBD_GetConfig+0x34>
 8010ac8:	e015      	b.n	8010af6 <USBD_GetConfig+0x5a>
 8010aca:	2b03      	cmp	r3, #3
 8010acc:	d00b      	beq.n	8010ae6 <USBD_GetConfig+0x4a>
 8010ace:	e012      	b.n	8010af6 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8010ad0:	687b      	ldr	r3, [r7, #4]
 8010ad2:	2200      	movs	r2, #0
 8010ad4:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8010ad6:	687b      	ldr	r3, [r7, #4]
 8010ad8:	3308      	adds	r3, #8
 8010ada:	2201      	movs	r2, #1
 8010adc:	4619      	mov	r1, r3
 8010ade:	6878      	ldr	r0, [r7, #4]
 8010ae0:	f000 f927 	bl	8010d32 <USBD_CtlSendData>
        break;
 8010ae4:	e00c      	b.n	8010b00 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8010ae6:	687b      	ldr	r3, [r7, #4]
 8010ae8:	3304      	adds	r3, #4
 8010aea:	2201      	movs	r2, #1
 8010aec:	4619      	mov	r1, r3
 8010aee:	6878      	ldr	r0, [r7, #4]
 8010af0:	f000 f91f 	bl	8010d32 <USBD_CtlSendData>
        break;
 8010af4:	e004      	b.n	8010b00 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8010af6:	6839      	ldr	r1, [r7, #0]
 8010af8:	6878      	ldr	r0, [r7, #4]
 8010afa:	f000 f8a9 	bl	8010c50 <USBD_CtlError>
        break;
 8010afe:	bf00      	nop
}
 8010b00:	bf00      	nop
 8010b02:	3708      	adds	r7, #8
 8010b04:	46bd      	mov	sp, r7
 8010b06:	bd80      	pop	{r7, pc}

08010b08 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010b08:	b580      	push	{r7, lr}
 8010b0a:	b082      	sub	sp, #8
 8010b0c:	af00      	add	r7, sp, #0
 8010b0e:	6078      	str	r0, [r7, #4]
 8010b10:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8010b12:	687b      	ldr	r3, [r7, #4]
 8010b14:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010b18:	b2db      	uxtb	r3, r3
 8010b1a:	3b01      	subs	r3, #1
 8010b1c:	2b02      	cmp	r3, #2
 8010b1e:	d81e      	bhi.n	8010b5e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8010b20:	683b      	ldr	r3, [r7, #0]
 8010b22:	88db      	ldrh	r3, [r3, #6]
 8010b24:	2b02      	cmp	r3, #2
 8010b26:	d004      	beq.n	8010b32 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8010b28:	6839      	ldr	r1, [r7, #0]
 8010b2a:	6878      	ldr	r0, [r7, #4]
 8010b2c:	f000 f890 	bl	8010c50 <USBD_CtlError>
        break;
 8010b30:	e01a      	b.n	8010b68 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8010b32:	687b      	ldr	r3, [r7, #4]
 8010b34:	2201      	movs	r2, #1
 8010b36:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8010b38:	687b      	ldr	r3, [r7, #4]
 8010b3a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8010b3e:	2b00      	cmp	r3, #0
 8010b40:	d005      	beq.n	8010b4e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8010b42:	687b      	ldr	r3, [r7, #4]
 8010b44:	68db      	ldr	r3, [r3, #12]
 8010b46:	f043 0202 	orr.w	r2, r3, #2
 8010b4a:	687b      	ldr	r3, [r7, #4]
 8010b4c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8010b4e:	687b      	ldr	r3, [r7, #4]
 8010b50:	330c      	adds	r3, #12
 8010b52:	2202      	movs	r2, #2
 8010b54:	4619      	mov	r1, r3
 8010b56:	6878      	ldr	r0, [r7, #4]
 8010b58:	f000 f8eb 	bl	8010d32 <USBD_CtlSendData>
      break;
 8010b5c:	e004      	b.n	8010b68 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8010b5e:	6839      	ldr	r1, [r7, #0]
 8010b60:	6878      	ldr	r0, [r7, #4]
 8010b62:	f000 f875 	bl	8010c50 <USBD_CtlError>
      break;
 8010b66:	bf00      	nop
  }
}
 8010b68:	bf00      	nop
 8010b6a:	3708      	adds	r7, #8
 8010b6c:	46bd      	mov	sp, r7
 8010b6e:	bd80      	pop	{r7, pc}

08010b70 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010b70:	b580      	push	{r7, lr}
 8010b72:	b082      	sub	sp, #8
 8010b74:	af00      	add	r7, sp, #0
 8010b76:	6078      	str	r0, [r7, #4]
 8010b78:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8010b7a:	683b      	ldr	r3, [r7, #0]
 8010b7c:	885b      	ldrh	r3, [r3, #2]
 8010b7e:	2b01      	cmp	r3, #1
 8010b80:	d106      	bne.n	8010b90 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8010b82:	687b      	ldr	r3, [r7, #4]
 8010b84:	2201      	movs	r2, #1
 8010b86:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8010b8a:	6878      	ldr	r0, [r7, #4]
 8010b8c:	f000 f92b 	bl	8010de6 <USBD_CtlSendStatus>
  }
}
 8010b90:	bf00      	nop
 8010b92:	3708      	adds	r7, #8
 8010b94:	46bd      	mov	sp, r7
 8010b96:	bd80      	pop	{r7, pc}

08010b98 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010b98:	b580      	push	{r7, lr}
 8010b9a:	b082      	sub	sp, #8
 8010b9c:	af00      	add	r7, sp, #0
 8010b9e:	6078      	str	r0, [r7, #4]
 8010ba0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8010ba2:	687b      	ldr	r3, [r7, #4]
 8010ba4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010ba8:	b2db      	uxtb	r3, r3
 8010baa:	3b01      	subs	r3, #1
 8010bac:	2b02      	cmp	r3, #2
 8010bae:	d80b      	bhi.n	8010bc8 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8010bb0:	683b      	ldr	r3, [r7, #0]
 8010bb2:	885b      	ldrh	r3, [r3, #2]
 8010bb4:	2b01      	cmp	r3, #1
 8010bb6:	d10c      	bne.n	8010bd2 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8010bb8:	687b      	ldr	r3, [r7, #4]
 8010bba:	2200      	movs	r2, #0
 8010bbc:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8010bc0:	6878      	ldr	r0, [r7, #4]
 8010bc2:	f000 f910 	bl	8010de6 <USBD_CtlSendStatus>
      }
      break;
 8010bc6:	e004      	b.n	8010bd2 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8010bc8:	6839      	ldr	r1, [r7, #0]
 8010bca:	6878      	ldr	r0, [r7, #4]
 8010bcc:	f000 f840 	bl	8010c50 <USBD_CtlError>
      break;
 8010bd0:	e000      	b.n	8010bd4 <USBD_ClrFeature+0x3c>
      break;
 8010bd2:	bf00      	nop
  }
}
 8010bd4:	bf00      	nop
 8010bd6:	3708      	adds	r7, #8
 8010bd8:	46bd      	mov	sp, r7
 8010bda:	bd80      	pop	{r7, pc}

08010bdc <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8010bdc:	b580      	push	{r7, lr}
 8010bde:	b084      	sub	sp, #16
 8010be0:	af00      	add	r7, sp, #0
 8010be2:	6078      	str	r0, [r7, #4]
 8010be4:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8010be6:	683b      	ldr	r3, [r7, #0]
 8010be8:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8010bea:	68fb      	ldr	r3, [r7, #12]
 8010bec:	781a      	ldrb	r2, [r3, #0]
 8010bee:	687b      	ldr	r3, [r7, #4]
 8010bf0:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8010bf2:	68fb      	ldr	r3, [r7, #12]
 8010bf4:	3301      	adds	r3, #1
 8010bf6:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8010bf8:	68fb      	ldr	r3, [r7, #12]
 8010bfa:	781a      	ldrb	r2, [r3, #0]
 8010bfc:	687b      	ldr	r3, [r7, #4]
 8010bfe:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8010c00:	68fb      	ldr	r3, [r7, #12]
 8010c02:	3301      	adds	r3, #1
 8010c04:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8010c06:	68f8      	ldr	r0, [r7, #12]
 8010c08:	f7ff fabb 	bl	8010182 <SWAPBYTE>
 8010c0c:	4603      	mov	r3, r0
 8010c0e:	461a      	mov	r2, r3
 8010c10:	687b      	ldr	r3, [r7, #4]
 8010c12:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8010c14:	68fb      	ldr	r3, [r7, #12]
 8010c16:	3301      	adds	r3, #1
 8010c18:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8010c1a:	68fb      	ldr	r3, [r7, #12]
 8010c1c:	3301      	adds	r3, #1
 8010c1e:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8010c20:	68f8      	ldr	r0, [r7, #12]
 8010c22:	f7ff faae 	bl	8010182 <SWAPBYTE>
 8010c26:	4603      	mov	r3, r0
 8010c28:	461a      	mov	r2, r3
 8010c2a:	687b      	ldr	r3, [r7, #4]
 8010c2c:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8010c2e:	68fb      	ldr	r3, [r7, #12]
 8010c30:	3301      	adds	r3, #1
 8010c32:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8010c34:	68fb      	ldr	r3, [r7, #12]
 8010c36:	3301      	adds	r3, #1
 8010c38:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8010c3a:	68f8      	ldr	r0, [r7, #12]
 8010c3c:	f7ff faa1 	bl	8010182 <SWAPBYTE>
 8010c40:	4603      	mov	r3, r0
 8010c42:	461a      	mov	r2, r3
 8010c44:	687b      	ldr	r3, [r7, #4]
 8010c46:	80da      	strh	r2, [r3, #6]
}
 8010c48:	bf00      	nop
 8010c4a:	3710      	adds	r7, #16
 8010c4c:	46bd      	mov	sp, r7
 8010c4e:	bd80      	pop	{r7, pc}

08010c50 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010c50:	b580      	push	{r7, lr}
 8010c52:	b082      	sub	sp, #8
 8010c54:	af00      	add	r7, sp, #0
 8010c56:	6078      	str	r0, [r7, #4]
 8010c58:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8010c5a:	2180      	movs	r1, #128	; 0x80
 8010c5c:	6878      	ldr	r0, [r7, #4]
 8010c5e:	f003 fe5f 	bl	8014920 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8010c62:	2100      	movs	r1, #0
 8010c64:	6878      	ldr	r0, [r7, #4]
 8010c66:	f003 fe5b 	bl	8014920 <USBD_LL_StallEP>
}
 8010c6a:	bf00      	nop
 8010c6c:	3708      	adds	r7, #8
 8010c6e:	46bd      	mov	sp, r7
 8010c70:	bd80      	pop	{r7, pc}

08010c72 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8010c72:	b580      	push	{r7, lr}
 8010c74:	b086      	sub	sp, #24
 8010c76:	af00      	add	r7, sp, #0
 8010c78:	60f8      	str	r0, [r7, #12]
 8010c7a:	60b9      	str	r1, [r7, #8]
 8010c7c:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8010c7e:	2300      	movs	r3, #0
 8010c80:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8010c82:	68fb      	ldr	r3, [r7, #12]
 8010c84:	2b00      	cmp	r3, #0
 8010c86:	d036      	beq.n	8010cf6 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8010c88:	68fb      	ldr	r3, [r7, #12]
 8010c8a:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8010c8c:	6938      	ldr	r0, [r7, #16]
 8010c8e:	f000 f836 	bl	8010cfe <USBD_GetLen>
 8010c92:	4603      	mov	r3, r0
 8010c94:	3301      	adds	r3, #1
 8010c96:	b29b      	uxth	r3, r3
 8010c98:	005b      	lsls	r3, r3, #1
 8010c9a:	b29a      	uxth	r2, r3
 8010c9c:	687b      	ldr	r3, [r7, #4]
 8010c9e:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8010ca0:	7dfb      	ldrb	r3, [r7, #23]
 8010ca2:	68ba      	ldr	r2, [r7, #8]
 8010ca4:	4413      	add	r3, r2
 8010ca6:	687a      	ldr	r2, [r7, #4]
 8010ca8:	7812      	ldrb	r2, [r2, #0]
 8010caa:	701a      	strb	r2, [r3, #0]
  idx++;
 8010cac:	7dfb      	ldrb	r3, [r7, #23]
 8010cae:	3301      	adds	r3, #1
 8010cb0:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8010cb2:	7dfb      	ldrb	r3, [r7, #23]
 8010cb4:	68ba      	ldr	r2, [r7, #8]
 8010cb6:	4413      	add	r3, r2
 8010cb8:	2203      	movs	r2, #3
 8010cba:	701a      	strb	r2, [r3, #0]
  idx++;
 8010cbc:	7dfb      	ldrb	r3, [r7, #23]
 8010cbe:	3301      	adds	r3, #1
 8010cc0:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8010cc2:	e013      	b.n	8010cec <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8010cc4:	7dfb      	ldrb	r3, [r7, #23]
 8010cc6:	68ba      	ldr	r2, [r7, #8]
 8010cc8:	4413      	add	r3, r2
 8010cca:	693a      	ldr	r2, [r7, #16]
 8010ccc:	7812      	ldrb	r2, [r2, #0]
 8010cce:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8010cd0:	693b      	ldr	r3, [r7, #16]
 8010cd2:	3301      	adds	r3, #1
 8010cd4:	613b      	str	r3, [r7, #16]
    idx++;
 8010cd6:	7dfb      	ldrb	r3, [r7, #23]
 8010cd8:	3301      	adds	r3, #1
 8010cda:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8010cdc:	7dfb      	ldrb	r3, [r7, #23]
 8010cde:	68ba      	ldr	r2, [r7, #8]
 8010ce0:	4413      	add	r3, r2
 8010ce2:	2200      	movs	r2, #0
 8010ce4:	701a      	strb	r2, [r3, #0]
    idx++;
 8010ce6:	7dfb      	ldrb	r3, [r7, #23]
 8010ce8:	3301      	adds	r3, #1
 8010cea:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8010cec:	693b      	ldr	r3, [r7, #16]
 8010cee:	781b      	ldrb	r3, [r3, #0]
 8010cf0:	2b00      	cmp	r3, #0
 8010cf2:	d1e7      	bne.n	8010cc4 <USBD_GetString+0x52>
 8010cf4:	e000      	b.n	8010cf8 <USBD_GetString+0x86>
    return;
 8010cf6:	bf00      	nop
  }
}
 8010cf8:	3718      	adds	r7, #24
 8010cfa:	46bd      	mov	sp, r7
 8010cfc:	bd80      	pop	{r7, pc}

08010cfe <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8010cfe:	b480      	push	{r7}
 8010d00:	b085      	sub	sp, #20
 8010d02:	af00      	add	r7, sp, #0
 8010d04:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8010d06:	2300      	movs	r3, #0
 8010d08:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8010d0a:	687b      	ldr	r3, [r7, #4]
 8010d0c:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8010d0e:	e005      	b.n	8010d1c <USBD_GetLen+0x1e>
  {
    len++;
 8010d10:	7bfb      	ldrb	r3, [r7, #15]
 8010d12:	3301      	adds	r3, #1
 8010d14:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8010d16:	68bb      	ldr	r3, [r7, #8]
 8010d18:	3301      	adds	r3, #1
 8010d1a:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8010d1c:	68bb      	ldr	r3, [r7, #8]
 8010d1e:	781b      	ldrb	r3, [r3, #0]
 8010d20:	2b00      	cmp	r3, #0
 8010d22:	d1f5      	bne.n	8010d10 <USBD_GetLen+0x12>
  }

  return len;
 8010d24:	7bfb      	ldrb	r3, [r7, #15]
}
 8010d26:	4618      	mov	r0, r3
 8010d28:	3714      	adds	r7, #20
 8010d2a:	46bd      	mov	sp, r7
 8010d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d30:	4770      	bx	lr

08010d32 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8010d32:	b580      	push	{r7, lr}
 8010d34:	b084      	sub	sp, #16
 8010d36:	af00      	add	r7, sp, #0
 8010d38:	60f8      	str	r0, [r7, #12]
 8010d3a:	60b9      	str	r1, [r7, #8]
 8010d3c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8010d3e:	68fb      	ldr	r3, [r7, #12]
 8010d40:	2202      	movs	r2, #2
 8010d42:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8010d46:	68fb      	ldr	r3, [r7, #12]
 8010d48:	687a      	ldr	r2, [r7, #4]
 8010d4a:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8010d4c:	68fb      	ldr	r3, [r7, #12]
 8010d4e:	687a      	ldr	r2, [r7, #4]
 8010d50:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8010d52:	687b      	ldr	r3, [r7, #4]
 8010d54:	68ba      	ldr	r2, [r7, #8]
 8010d56:	2100      	movs	r1, #0
 8010d58:	68f8      	ldr	r0, [r7, #12]
 8010d5a:	f003 fe6a 	bl	8014a32 <USBD_LL_Transmit>

  return USBD_OK;
 8010d5e:	2300      	movs	r3, #0
}
 8010d60:	4618      	mov	r0, r3
 8010d62:	3710      	adds	r7, #16
 8010d64:	46bd      	mov	sp, r7
 8010d66:	bd80      	pop	{r7, pc}

08010d68 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8010d68:	b580      	push	{r7, lr}
 8010d6a:	b084      	sub	sp, #16
 8010d6c:	af00      	add	r7, sp, #0
 8010d6e:	60f8      	str	r0, [r7, #12]
 8010d70:	60b9      	str	r1, [r7, #8]
 8010d72:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8010d74:	687b      	ldr	r3, [r7, #4]
 8010d76:	68ba      	ldr	r2, [r7, #8]
 8010d78:	2100      	movs	r1, #0
 8010d7a:	68f8      	ldr	r0, [r7, #12]
 8010d7c:	f003 fe59 	bl	8014a32 <USBD_LL_Transmit>

  return USBD_OK;
 8010d80:	2300      	movs	r3, #0
}
 8010d82:	4618      	mov	r0, r3
 8010d84:	3710      	adds	r7, #16
 8010d86:	46bd      	mov	sp, r7
 8010d88:	bd80      	pop	{r7, pc}

08010d8a <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8010d8a:	b580      	push	{r7, lr}
 8010d8c:	b084      	sub	sp, #16
 8010d8e:	af00      	add	r7, sp, #0
 8010d90:	60f8      	str	r0, [r7, #12]
 8010d92:	60b9      	str	r1, [r7, #8]
 8010d94:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8010d96:	68fb      	ldr	r3, [r7, #12]
 8010d98:	2203      	movs	r2, #3
 8010d9a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8010d9e:	68fb      	ldr	r3, [r7, #12]
 8010da0:	687a      	ldr	r2, [r7, #4]
 8010da2:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8010da6:	68fb      	ldr	r3, [r7, #12]
 8010da8:	687a      	ldr	r2, [r7, #4]
 8010daa:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8010dae:	687b      	ldr	r3, [r7, #4]
 8010db0:	68ba      	ldr	r2, [r7, #8]
 8010db2:	2100      	movs	r1, #0
 8010db4:	68f8      	ldr	r0, [r7, #12]
 8010db6:	f003 fe5d 	bl	8014a74 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8010dba:	2300      	movs	r3, #0
}
 8010dbc:	4618      	mov	r0, r3
 8010dbe:	3710      	adds	r7, #16
 8010dc0:	46bd      	mov	sp, r7
 8010dc2:	bd80      	pop	{r7, pc}

08010dc4 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8010dc4:	b580      	push	{r7, lr}
 8010dc6:	b084      	sub	sp, #16
 8010dc8:	af00      	add	r7, sp, #0
 8010dca:	60f8      	str	r0, [r7, #12]
 8010dcc:	60b9      	str	r1, [r7, #8]
 8010dce:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8010dd0:	687b      	ldr	r3, [r7, #4]
 8010dd2:	68ba      	ldr	r2, [r7, #8]
 8010dd4:	2100      	movs	r1, #0
 8010dd6:	68f8      	ldr	r0, [r7, #12]
 8010dd8:	f003 fe4c 	bl	8014a74 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8010ddc:	2300      	movs	r3, #0
}
 8010dde:	4618      	mov	r0, r3
 8010de0:	3710      	adds	r7, #16
 8010de2:	46bd      	mov	sp, r7
 8010de4:	bd80      	pop	{r7, pc}

08010de6 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8010de6:	b580      	push	{r7, lr}
 8010de8:	b082      	sub	sp, #8
 8010dea:	af00      	add	r7, sp, #0
 8010dec:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8010dee:	687b      	ldr	r3, [r7, #4]
 8010df0:	2204      	movs	r2, #4
 8010df2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8010df6:	2300      	movs	r3, #0
 8010df8:	2200      	movs	r2, #0
 8010dfa:	2100      	movs	r1, #0
 8010dfc:	6878      	ldr	r0, [r7, #4]
 8010dfe:	f003 fe18 	bl	8014a32 <USBD_LL_Transmit>

  return USBD_OK;
 8010e02:	2300      	movs	r3, #0
}
 8010e04:	4618      	mov	r0, r3
 8010e06:	3708      	adds	r7, #8
 8010e08:	46bd      	mov	sp, r7
 8010e0a:	bd80      	pop	{r7, pc}

08010e0c <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8010e0c:	b580      	push	{r7, lr}
 8010e0e:	b082      	sub	sp, #8
 8010e10:	af00      	add	r7, sp, #0
 8010e12:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8010e14:	687b      	ldr	r3, [r7, #4]
 8010e16:	2205      	movs	r2, #5
 8010e18:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8010e1c:	2300      	movs	r3, #0
 8010e1e:	2200      	movs	r2, #0
 8010e20:	2100      	movs	r1, #0
 8010e22:	6878      	ldr	r0, [r7, #4]
 8010e24:	f003 fe26 	bl	8014a74 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8010e28:	2300      	movs	r3, #0
}
 8010e2a:	4618      	mov	r0, r3
 8010e2c:	3708      	adds	r7, #8
 8010e2e:	46bd      	mov	sp, r7
 8010e30:	bd80      	pop	{r7, pc}
	...

08010e34 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8010e34:	b480      	push	{r7}
 8010e36:	b087      	sub	sp, #28
 8010e38:	af00      	add	r7, sp, #0
 8010e3a:	60f8      	str	r0, [r7, #12]
 8010e3c:	60b9      	str	r1, [r7, #8]
 8010e3e:	4613      	mov	r3, r2
 8010e40:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8010e42:	2301      	movs	r3, #1
 8010e44:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8010e46:	2300      	movs	r3, #0
 8010e48:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8010e4a:	4b1f      	ldr	r3, [pc, #124]	; (8010ec8 <FATFS_LinkDriverEx+0x94>)
 8010e4c:	7a5b      	ldrb	r3, [r3, #9]
 8010e4e:	b2db      	uxtb	r3, r3
 8010e50:	2b00      	cmp	r3, #0
 8010e52:	d131      	bne.n	8010eb8 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8010e54:	4b1c      	ldr	r3, [pc, #112]	; (8010ec8 <FATFS_LinkDriverEx+0x94>)
 8010e56:	7a5b      	ldrb	r3, [r3, #9]
 8010e58:	b2db      	uxtb	r3, r3
 8010e5a:	461a      	mov	r2, r3
 8010e5c:	4b1a      	ldr	r3, [pc, #104]	; (8010ec8 <FATFS_LinkDriverEx+0x94>)
 8010e5e:	2100      	movs	r1, #0
 8010e60:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8010e62:	4b19      	ldr	r3, [pc, #100]	; (8010ec8 <FATFS_LinkDriverEx+0x94>)
 8010e64:	7a5b      	ldrb	r3, [r3, #9]
 8010e66:	b2db      	uxtb	r3, r3
 8010e68:	4a17      	ldr	r2, [pc, #92]	; (8010ec8 <FATFS_LinkDriverEx+0x94>)
 8010e6a:	009b      	lsls	r3, r3, #2
 8010e6c:	4413      	add	r3, r2
 8010e6e:	68fa      	ldr	r2, [r7, #12]
 8010e70:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8010e72:	4b15      	ldr	r3, [pc, #84]	; (8010ec8 <FATFS_LinkDriverEx+0x94>)
 8010e74:	7a5b      	ldrb	r3, [r3, #9]
 8010e76:	b2db      	uxtb	r3, r3
 8010e78:	461a      	mov	r2, r3
 8010e7a:	4b13      	ldr	r3, [pc, #76]	; (8010ec8 <FATFS_LinkDriverEx+0x94>)
 8010e7c:	4413      	add	r3, r2
 8010e7e:	79fa      	ldrb	r2, [r7, #7]
 8010e80:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8010e82:	4b11      	ldr	r3, [pc, #68]	; (8010ec8 <FATFS_LinkDriverEx+0x94>)
 8010e84:	7a5b      	ldrb	r3, [r3, #9]
 8010e86:	b2db      	uxtb	r3, r3
 8010e88:	1c5a      	adds	r2, r3, #1
 8010e8a:	b2d1      	uxtb	r1, r2
 8010e8c:	4a0e      	ldr	r2, [pc, #56]	; (8010ec8 <FATFS_LinkDriverEx+0x94>)
 8010e8e:	7251      	strb	r1, [r2, #9]
 8010e90:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8010e92:	7dbb      	ldrb	r3, [r7, #22]
 8010e94:	3330      	adds	r3, #48	; 0x30
 8010e96:	b2da      	uxtb	r2, r3
 8010e98:	68bb      	ldr	r3, [r7, #8]
 8010e9a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8010e9c:	68bb      	ldr	r3, [r7, #8]
 8010e9e:	3301      	adds	r3, #1
 8010ea0:	223a      	movs	r2, #58	; 0x3a
 8010ea2:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8010ea4:	68bb      	ldr	r3, [r7, #8]
 8010ea6:	3302      	adds	r3, #2
 8010ea8:	222f      	movs	r2, #47	; 0x2f
 8010eaa:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8010eac:	68bb      	ldr	r3, [r7, #8]
 8010eae:	3303      	adds	r3, #3
 8010eb0:	2200      	movs	r2, #0
 8010eb2:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8010eb4:	2300      	movs	r3, #0
 8010eb6:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8010eb8:	7dfb      	ldrb	r3, [r7, #23]
}
 8010eba:	4618      	mov	r0, r3
 8010ebc:	371c      	adds	r7, #28
 8010ebe:	46bd      	mov	sp, r7
 8010ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ec4:	4770      	bx	lr
 8010ec6:	bf00      	nop
 8010ec8:	20002180 	.word	0x20002180

08010ecc <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8010ecc:	b580      	push	{r7, lr}
 8010ece:	b082      	sub	sp, #8
 8010ed0:	af00      	add	r7, sp, #0
 8010ed2:	6078      	str	r0, [r7, #4]
 8010ed4:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8010ed6:	2200      	movs	r2, #0
 8010ed8:	6839      	ldr	r1, [r7, #0]
 8010eda:	6878      	ldr	r0, [r7, #4]
 8010edc:	f7ff ffaa 	bl	8010e34 <FATFS_LinkDriverEx>
 8010ee0:	4603      	mov	r3, r0
}
 8010ee2:	4618      	mov	r0, r3
 8010ee4:	3708      	adds	r7, #8
 8010ee6:	46bd      	mov	sp, r7
 8010ee8:	bd80      	pop	{r7, pc}

08010eea <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8010eea:	b480      	push	{r7}
 8010eec:	b085      	sub	sp, #20
 8010eee:	af00      	add	r7, sp, #0
 8010ef0:	4603      	mov	r3, r0
 8010ef2:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8010ef4:	2300      	movs	r3, #0
 8010ef6:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8010ef8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8010efc:	2b84      	cmp	r3, #132	; 0x84
 8010efe:	d005      	beq.n	8010f0c <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8010f00:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8010f04:	68fb      	ldr	r3, [r7, #12]
 8010f06:	4413      	add	r3, r2
 8010f08:	3303      	adds	r3, #3
 8010f0a:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8010f0c:	68fb      	ldr	r3, [r7, #12]
}
 8010f0e:	4618      	mov	r0, r3
 8010f10:	3714      	adds	r7, #20
 8010f12:	46bd      	mov	sp, r7
 8010f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f18:	4770      	bx	lr

08010f1a <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8010f1a:	b580      	push	{r7, lr}
 8010f1c:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8010f1e:	f001 fa73 	bl	8012408 <vTaskStartScheduler>
  
  return osOK;
 8010f22:	2300      	movs	r3, #0
}
 8010f24:	4618      	mov	r0, r3
 8010f26:	bd80      	pop	{r7, pc}

08010f28 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8010f28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010f2a:	b089      	sub	sp, #36	; 0x24
 8010f2c:	af04      	add	r7, sp, #16
 8010f2e:	6078      	str	r0, [r7, #4]
 8010f30:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8010f32:	687b      	ldr	r3, [r7, #4]
 8010f34:	695b      	ldr	r3, [r3, #20]
 8010f36:	2b00      	cmp	r3, #0
 8010f38:	d020      	beq.n	8010f7c <osThreadCreate+0x54>
 8010f3a:	687b      	ldr	r3, [r7, #4]
 8010f3c:	699b      	ldr	r3, [r3, #24]
 8010f3e:	2b00      	cmp	r3, #0
 8010f40:	d01c      	beq.n	8010f7c <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8010f42:	687b      	ldr	r3, [r7, #4]
 8010f44:	685c      	ldr	r4, [r3, #4]
 8010f46:	687b      	ldr	r3, [r7, #4]
 8010f48:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8010f4a:	687b      	ldr	r3, [r7, #4]
 8010f4c:	691e      	ldr	r6, [r3, #16]
 8010f4e:	687b      	ldr	r3, [r7, #4]
 8010f50:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8010f54:	4618      	mov	r0, r3
 8010f56:	f7ff ffc8 	bl	8010eea <makeFreeRtosPriority>
 8010f5a:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8010f5c:	687b      	ldr	r3, [r7, #4]
 8010f5e:	695b      	ldr	r3, [r3, #20]
 8010f60:	687a      	ldr	r2, [r7, #4]
 8010f62:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8010f64:	9202      	str	r2, [sp, #8]
 8010f66:	9301      	str	r3, [sp, #4]
 8010f68:	9100      	str	r1, [sp, #0]
 8010f6a:	683b      	ldr	r3, [r7, #0]
 8010f6c:	4632      	mov	r2, r6
 8010f6e:	4629      	mov	r1, r5
 8010f70:	4620      	mov	r0, r4
 8010f72:	f000 ffe9 	bl	8011f48 <xTaskCreateStatic>
 8010f76:	4603      	mov	r3, r0
 8010f78:	60fb      	str	r3, [r7, #12]
 8010f7a:	e01c      	b.n	8010fb6 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8010f7c:	687b      	ldr	r3, [r7, #4]
 8010f7e:	685c      	ldr	r4, [r3, #4]
 8010f80:	687b      	ldr	r3, [r7, #4]
 8010f82:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8010f84:	687b      	ldr	r3, [r7, #4]
 8010f86:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8010f88:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8010f8a:	687b      	ldr	r3, [r7, #4]
 8010f8c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8010f90:	4618      	mov	r0, r3
 8010f92:	f7ff ffaa 	bl	8010eea <makeFreeRtosPriority>
 8010f96:	4602      	mov	r2, r0
 8010f98:	f107 030c 	add.w	r3, r7, #12
 8010f9c:	9301      	str	r3, [sp, #4]
 8010f9e:	9200      	str	r2, [sp, #0]
 8010fa0:	683b      	ldr	r3, [r7, #0]
 8010fa2:	4632      	mov	r2, r6
 8010fa4:	4629      	mov	r1, r5
 8010fa6:	4620      	mov	r0, r4
 8010fa8:	f001 f82b 	bl	8012002 <xTaskCreate>
 8010fac:	4603      	mov	r3, r0
 8010fae:	2b01      	cmp	r3, #1
 8010fb0:	d001      	beq.n	8010fb6 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8010fb2:	2300      	movs	r3, #0
 8010fb4:	e000      	b.n	8010fb8 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8010fb6:	68fb      	ldr	r3, [r7, #12]
}
 8010fb8:	4618      	mov	r0, r3
 8010fba:	3714      	adds	r7, #20
 8010fbc:	46bd      	mov	sp, r7
 8010fbe:	bdf0      	pop	{r4, r5, r6, r7, pc}

08010fc0 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8010fc0:	b580      	push	{r7, lr}
 8010fc2:	b084      	sub	sp, #16
 8010fc4:	af00      	add	r7, sp, #0
 8010fc6:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8010fc8:	687b      	ldr	r3, [r7, #4]
 8010fca:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8010fcc:	68fb      	ldr	r3, [r7, #12]
 8010fce:	2b00      	cmp	r3, #0
 8010fd0:	d001      	beq.n	8010fd6 <osDelay+0x16>
 8010fd2:	68fb      	ldr	r3, [r7, #12]
 8010fd4:	e000      	b.n	8010fd8 <osDelay+0x18>
 8010fd6:	2301      	movs	r3, #1
 8010fd8:	4618      	mov	r0, r3
 8010fda:	f001 f9e1 	bl	80123a0 <vTaskDelay>
  
  return osOK;
 8010fde:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8010fe0:	4618      	mov	r0, r3
 8010fe2:	3710      	adds	r7, #16
 8010fe4:	46bd      	mov	sp, r7
 8010fe6:	bd80      	pop	{r7, pc}

08010fe8 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 8010fe8:	b580      	push	{r7, lr}
 8010fea:	b082      	sub	sp, #8
 8010fec:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 8010fee:	201c      	movs	r0, #28
 8010ff0:	f002 feda 	bl	8013da8 <pvPortMalloc>
 8010ff4:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 8010ff6:	687b      	ldr	r3, [r7, #4]
 8010ff8:	2b00      	cmp	r3, #0
 8010ffa:	d00a      	beq.n	8011012 <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 8010ffc:	687b      	ldr	r3, [r7, #4]
 8010ffe:	2200      	movs	r2, #0
 8011000:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8011002:	687b      	ldr	r3, [r7, #4]
 8011004:	3304      	adds	r3, #4
 8011006:	4618      	mov	r0, r3
 8011008:	f000 f9c8 	bl	801139c <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 801100c:	687b      	ldr	r3, [r7, #4]
 801100e:	2200      	movs	r2, #0
 8011010:	761a      	strb	r2, [r3, #24]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 8011012:	687b      	ldr	r3, [r7, #4]
	}
 8011014:	4618      	mov	r0, r3
 8011016:	3708      	adds	r7, #8
 8011018:	46bd      	mov	sp, r7
 801101a:	bd80      	pop	{r7, pc}

0801101c <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 801101c:	b580      	push	{r7, lr}
 801101e:	b090      	sub	sp, #64	; 0x40
 8011020:	af00      	add	r7, sp, #0
 8011022:	60f8      	str	r0, [r7, #12]
 8011024:	60b9      	str	r1, [r7, #8]
 8011026:	607a      	str	r2, [r7, #4]
 8011028:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 801102a:	68fb      	ldr	r3, [r7, #12]
 801102c:	637b      	str	r3, [r7, #52]	; 0x34
EventBits_t uxReturn, uxControlBits = 0;
 801102e:	2300      	movs	r3, #0
 8011030:	63bb      	str	r3, [r7, #56]	; 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 8011032:	2300      	movs	r3, #0
 8011034:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 8011036:	68fb      	ldr	r3, [r7, #12]
 8011038:	2b00      	cmp	r3, #0
 801103a:	d10a      	bne.n	8011052 <xEventGroupWaitBits+0x36>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 801103c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011040:	f383 8811 	msr	BASEPRI, r3
 8011044:	f3bf 8f6f 	isb	sy
 8011048:	f3bf 8f4f 	dsb	sy
 801104c:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 801104e:	bf00      	nop
 8011050:	e7fe      	b.n	8011050 <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8011052:	68bb      	ldr	r3, [r7, #8]
 8011054:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8011058:	2b00      	cmp	r3, #0
 801105a:	d00a      	beq.n	8011072 <xEventGroupWaitBits+0x56>
	__asm volatile
 801105c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011060:	f383 8811 	msr	BASEPRI, r3
 8011064:	f3bf 8f6f 	isb	sy
 8011068:	f3bf 8f4f 	dsb	sy
 801106c:	61fb      	str	r3, [r7, #28]
}
 801106e:	bf00      	nop
 8011070:	e7fe      	b.n	8011070 <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 8011072:	68bb      	ldr	r3, [r7, #8]
 8011074:	2b00      	cmp	r3, #0
 8011076:	d10a      	bne.n	801108e <xEventGroupWaitBits+0x72>
	__asm volatile
 8011078:	f04f 0350 	mov.w	r3, #80	; 0x50
 801107c:	f383 8811 	msr	BASEPRI, r3
 8011080:	f3bf 8f6f 	isb	sy
 8011084:	f3bf 8f4f 	dsb	sy
 8011088:	61bb      	str	r3, [r7, #24]
}
 801108a:	bf00      	nop
 801108c:	e7fe      	b.n	801108c <xEventGroupWaitBits+0x70>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801108e:	f001 fecb 	bl	8012e28 <xTaskGetSchedulerState>
 8011092:	4603      	mov	r3, r0
 8011094:	2b00      	cmp	r3, #0
 8011096:	d102      	bne.n	801109e <xEventGroupWaitBits+0x82>
 8011098:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801109a:	2b00      	cmp	r3, #0
 801109c:	d101      	bne.n	80110a2 <xEventGroupWaitBits+0x86>
 801109e:	2301      	movs	r3, #1
 80110a0:	e000      	b.n	80110a4 <xEventGroupWaitBits+0x88>
 80110a2:	2300      	movs	r3, #0
 80110a4:	2b00      	cmp	r3, #0
 80110a6:	d10a      	bne.n	80110be <xEventGroupWaitBits+0xa2>
	__asm volatile
 80110a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80110ac:	f383 8811 	msr	BASEPRI, r3
 80110b0:	f3bf 8f6f 	isb	sy
 80110b4:	f3bf 8f4f 	dsb	sy
 80110b8:	617b      	str	r3, [r7, #20]
}
 80110ba:	bf00      	nop
 80110bc:	e7fe      	b.n	80110bc <xEventGroupWaitBits+0xa0>
	}
	#endif

	vTaskSuspendAll();
 80110be:	f001 fa15 	bl	80124ec <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 80110c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80110c4:	681b      	ldr	r3, [r3, #0]
 80110c6:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 80110c8:	683a      	ldr	r2, [r7, #0]
 80110ca:	68b9      	ldr	r1, [r7, #8]
 80110cc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80110ce:	f000 f943 	bl	8011358 <prvTestWaitCondition>
 80110d2:	62b8      	str	r0, [r7, #40]	; 0x28

		if( xWaitConditionMet != pdFALSE )
 80110d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80110d6:	2b00      	cmp	r3, #0
 80110d8:	d00e      	beq.n	80110f8 <xEventGroupWaitBits+0xdc>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 80110da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80110dc:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTicksToWait = ( TickType_t ) 0;
 80110de:	2300      	movs	r3, #0
 80110e0:	64bb      	str	r3, [r7, #72]	; 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 80110e2:	687b      	ldr	r3, [r7, #4]
 80110e4:	2b00      	cmp	r3, #0
 80110e6:	d028      	beq.n	801113a <xEventGroupWaitBits+0x11e>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 80110e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80110ea:	681a      	ldr	r2, [r3, #0]
 80110ec:	68bb      	ldr	r3, [r7, #8]
 80110ee:	43db      	mvns	r3, r3
 80110f0:	401a      	ands	r2, r3
 80110f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80110f4:	601a      	str	r2, [r3, #0]
 80110f6:	e020      	b.n	801113a <xEventGroupWaitBits+0x11e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 80110f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80110fa:	2b00      	cmp	r3, #0
 80110fc:	d104      	bne.n	8011108 <xEventGroupWaitBits+0xec>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 80110fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011100:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTimeoutOccurred = pdTRUE;
 8011102:	2301      	movs	r3, #1
 8011104:	633b      	str	r3, [r7, #48]	; 0x30
 8011106:	e018      	b.n	801113a <xEventGroupWaitBits+0x11e>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 8011108:	687b      	ldr	r3, [r7, #4]
 801110a:	2b00      	cmp	r3, #0
 801110c:	d003      	beq.n	8011116 <xEventGroupWaitBits+0xfa>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 801110e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011110:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8011114:	63bb      	str	r3, [r7, #56]	; 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 8011116:	683b      	ldr	r3, [r7, #0]
 8011118:	2b00      	cmp	r3, #0
 801111a:	d003      	beq.n	8011124 <xEventGroupWaitBits+0x108>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 801111c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801111e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8011122:	63bb      	str	r3, [r7, #56]	; 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 8011124:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011126:	1d18      	adds	r0, r3, #4
 8011128:	68ba      	ldr	r2, [r7, #8]
 801112a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801112c:	4313      	orrs	r3, r2
 801112e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011130:	4619      	mov	r1, r3
 8011132:	f001 fbef 	bl	8012914 <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 8011136:	2300      	movs	r3, #0
 8011138:	63fb      	str	r3, [r7, #60]	; 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 801113a:	f001 f9e5 	bl	8012508 <xTaskResumeAll>
 801113e:	6278      	str	r0, [r7, #36]	; 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 8011140:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011142:	2b00      	cmp	r3, #0
 8011144:	d031      	beq.n	80111aa <xEventGroupWaitBits+0x18e>
	{
		if( xAlreadyYielded == pdFALSE )
 8011146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011148:	2b00      	cmp	r3, #0
 801114a:	d107      	bne.n	801115c <xEventGroupWaitBits+0x140>
		{
			portYIELD_WITHIN_API();
 801114c:	4b19      	ldr	r3, [pc, #100]	; (80111b4 <xEventGroupWaitBits+0x198>)
 801114e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011152:	601a      	str	r2, [r3, #0]
 8011154:	f3bf 8f4f 	dsb	sy
 8011158:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 801115c:	f001 ff08 	bl	8012f70 <uxTaskResetEventItemValue>
 8011160:	63f8      	str	r0, [r7, #60]	; 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 8011162:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011164:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8011168:	2b00      	cmp	r3, #0
 801116a:	d11a      	bne.n	80111a2 <xEventGroupWaitBits+0x186>
		{
			taskENTER_CRITICAL();
 801116c:	f002 fcfa 	bl	8013b64 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 8011170:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011172:	681b      	ldr	r3, [r3, #0]
 8011174:	63fb      	str	r3, [r7, #60]	; 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 8011176:	683a      	ldr	r2, [r7, #0]
 8011178:	68b9      	ldr	r1, [r7, #8]
 801117a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801117c:	f000 f8ec 	bl	8011358 <prvTestWaitCondition>
 8011180:	4603      	mov	r3, r0
 8011182:	2b00      	cmp	r3, #0
 8011184:	d009      	beq.n	801119a <xEventGroupWaitBits+0x17e>
				{
					if( xClearOnExit != pdFALSE )
 8011186:	687b      	ldr	r3, [r7, #4]
 8011188:	2b00      	cmp	r3, #0
 801118a:	d006      	beq.n	801119a <xEventGroupWaitBits+0x17e>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 801118c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801118e:	681a      	ldr	r2, [r3, #0]
 8011190:	68bb      	ldr	r3, [r7, #8]
 8011192:	43db      	mvns	r3, r3
 8011194:	401a      	ands	r2, r3
 8011196:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011198:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 801119a:	2301      	movs	r3, #1
 801119c:	633b      	str	r3, [r7, #48]	; 0x30
			}
			taskEXIT_CRITICAL();
 801119e:	f002 fd11 	bl	8013bc4 <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 80111a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80111a4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80111a8:	63fb      	str	r3, [r7, #60]	; 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 80111aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80111ac:	4618      	mov	r0, r3
 80111ae:	3740      	adds	r7, #64	; 0x40
 80111b0:	46bd      	mov	sp, r7
 80111b2:	bd80      	pop	{r7, pc}
 80111b4:	e000ed04 	.word	0xe000ed04

080111b8 <xEventGroupClearBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupClearBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
{
 80111b8:	b580      	push	{r7, lr}
 80111ba:	b086      	sub	sp, #24
 80111bc:	af00      	add	r7, sp, #0
 80111be:	6078      	str	r0, [r7, #4]
 80111c0:	6039      	str	r1, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 80111c2:	687b      	ldr	r3, [r7, #4]
 80111c4:	617b      	str	r3, [r7, #20]
EventBits_t uxReturn;

	/* Check the user is not attempting to clear the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 80111c6:	687b      	ldr	r3, [r7, #4]
 80111c8:	2b00      	cmp	r3, #0
 80111ca:	d10a      	bne.n	80111e2 <xEventGroupClearBits+0x2a>
	__asm volatile
 80111cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80111d0:	f383 8811 	msr	BASEPRI, r3
 80111d4:	f3bf 8f6f 	isb	sy
 80111d8:	f3bf 8f4f 	dsb	sy
 80111dc:	60fb      	str	r3, [r7, #12]
}
 80111de:	bf00      	nop
 80111e0:	e7fe      	b.n	80111e0 <xEventGroupClearBits+0x28>
	configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 80111e2:	683b      	ldr	r3, [r7, #0]
 80111e4:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80111e8:	2b00      	cmp	r3, #0
 80111ea:	d00a      	beq.n	8011202 <xEventGroupClearBits+0x4a>
	__asm volatile
 80111ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80111f0:	f383 8811 	msr	BASEPRI, r3
 80111f4:	f3bf 8f6f 	isb	sy
 80111f8:	f3bf 8f4f 	dsb	sy
 80111fc:	60bb      	str	r3, [r7, #8]
}
 80111fe:	bf00      	nop
 8011200:	e7fe      	b.n	8011200 <xEventGroupClearBits+0x48>

	taskENTER_CRITICAL();
 8011202:	f002 fcaf 	bl	8013b64 <vPortEnterCritical>
	{
		traceEVENT_GROUP_CLEAR_BITS( xEventGroup, uxBitsToClear );

		/* The value returned is the event group value prior to the bits being
		cleared. */
		uxReturn = pxEventBits->uxEventBits;
 8011206:	697b      	ldr	r3, [r7, #20]
 8011208:	681b      	ldr	r3, [r3, #0]
 801120a:	613b      	str	r3, [r7, #16]

		/* Clear the bits. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 801120c:	697b      	ldr	r3, [r7, #20]
 801120e:	681a      	ldr	r2, [r3, #0]
 8011210:	683b      	ldr	r3, [r7, #0]
 8011212:	43db      	mvns	r3, r3
 8011214:	401a      	ands	r2, r3
 8011216:	697b      	ldr	r3, [r7, #20]
 8011218:	601a      	str	r2, [r3, #0]
	}
	taskEXIT_CRITICAL();
 801121a:	f002 fcd3 	bl	8013bc4 <vPortExitCritical>

	return uxReturn;
 801121e:	693b      	ldr	r3, [r7, #16]
}
 8011220:	4618      	mov	r0, r3
 8011222:	3718      	adds	r7, #24
 8011224:	46bd      	mov	sp, r7
 8011226:	bd80      	pop	{r7, pc}

08011228 <xEventGroupSetBits>:
	return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 8011228:	b580      	push	{r7, lr}
 801122a:	b08e      	sub	sp, #56	; 0x38
 801122c:	af00      	add	r7, sp, #0
 801122e:	6078      	str	r0, [r7, #4]
 8011230:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 8011232:	2300      	movs	r3, #0
 8011234:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = xEventGroup;
 8011236:	687b      	ldr	r3, [r7, #4]
 8011238:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 801123a:	2300      	movs	r3, #0
 801123c:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 801123e:	687b      	ldr	r3, [r7, #4]
 8011240:	2b00      	cmp	r3, #0
 8011242:	d10a      	bne.n	801125a <xEventGroupSetBits+0x32>
	__asm volatile
 8011244:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011248:	f383 8811 	msr	BASEPRI, r3
 801124c:	f3bf 8f6f 	isb	sy
 8011250:	f3bf 8f4f 	dsb	sy
 8011254:	613b      	str	r3, [r7, #16]
}
 8011256:	bf00      	nop
 8011258:	e7fe      	b.n	8011258 <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 801125a:	683b      	ldr	r3, [r7, #0]
 801125c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8011260:	2b00      	cmp	r3, #0
 8011262:	d00a      	beq.n	801127a <xEventGroupSetBits+0x52>
	__asm volatile
 8011264:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011268:	f383 8811 	msr	BASEPRI, r3
 801126c:	f3bf 8f6f 	isb	sy
 8011270:	f3bf 8f4f 	dsb	sy
 8011274:	60fb      	str	r3, [r7, #12]
}
 8011276:	bf00      	nop
 8011278:	e7fe      	b.n	8011278 <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 801127a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801127c:	3304      	adds	r3, #4
 801127e:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8011280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011282:	3308      	adds	r3, #8
 8011284:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 8011286:	f001 f931 	bl	80124ec <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 801128a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801128c:	68db      	ldr	r3, [r3, #12]
 801128e:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 8011290:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011292:	681a      	ldr	r2, [r3, #0]
 8011294:	683b      	ldr	r3, [r7, #0]
 8011296:	431a      	orrs	r2, r3
 8011298:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801129a:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 801129c:	e03c      	b.n	8011318 <xEventGroupSetBits+0xf0>
		{
			pxNext = listGET_NEXT( pxListItem );
 801129e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80112a0:	685b      	ldr	r3, [r3, #4]
 80112a2:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 80112a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80112a6:	681b      	ldr	r3, [r3, #0]
 80112a8:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 80112aa:	2300      	movs	r3, #0
 80112ac:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 80112ae:	69bb      	ldr	r3, [r7, #24]
 80112b0:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80112b4:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 80112b6:	69bb      	ldr	r3, [r7, #24]
 80112b8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80112bc:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 80112be:	697b      	ldr	r3, [r7, #20]
 80112c0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80112c4:	2b00      	cmp	r3, #0
 80112c6:	d108      	bne.n	80112da <xEventGroupSetBits+0xb2>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 80112c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80112ca:	681a      	ldr	r2, [r3, #0]
 80112cc:	69bb      	ldr	r3, [r7, #24]
 80112ce:	4013      	ands	r3, r2
 80112d0:	2b00      	cmp	r3, #0
 80112d2:	d00b      	beq.n	80112ec <xEventGroupSetBits+0xc4>
				{
					xMatchFound = pdTRUE;
 80112d4:	2301      	movs	r3, #1
 80112d6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80112d8:	e008      	b.n	80112ec <xEventGroupSetBits+0xc4>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 80112da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80112dc:	681a      	ldr	r2, [r3, #0]
 80112de:	69bb      	ldr	r3, [r7, #24]
 80112e0:	4013      	ands	r3, r2
 80112e2:	69ba      	ldr	r2, [r7, #24]
 80112e4:	429a      	cmp	r2, r3
 80112e6:	d101      	bne.n	80112ec <xEventGroupSetBits+0xc4>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 80112e8:	2301      	movs	r3, #1
 80112ea:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 80112ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80112ee:	2b00      	cmp	r3, #0
 80112f0:	d010      	beq.n	8011314 <xEventGroupSetBits+0xec>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 80112f2:	697b      	ldr	r3, [r7, #20]
 80112f4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80112f8:	2b00      	cmp	r3, #0
 80112fa:	d003      	beq.n	8011304 <xEventGroupSetBits+0xdc>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 80112fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80112fe:	69bb      	ldr	r3, [r7, #24]
 8011300:	4313      	orrs	r3, r2
 8011302:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 8011304:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011306:	681b      	ldr	r3, [r3, #0]
 8011308:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 801130c:	4619      	mov	r1, r3
 801130e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8011310:	f001 fbca 	bl	8012aa8 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 8011314:	69fb      	ldr	r3, [r7, #28]
 8011316:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 8011318:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801131a:	6a3b      	ldr	r3, [r7, #32]
 801131c:	429a      	cmp	r2, r3
 801131e:	d1be      	bne.n	801129e <xEventGroupSetBits+0x76>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8011320:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011322:	681a      	ldr	r2, [r3, #0]
 8011324:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011326:	43db      	mvns	r3, r3
 8011328:	401a      	ands	r2, r3
 801132a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801132c:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 801132e:	f001 f8eb 	bl	8012508 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 8011332:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011334:	681b      	ldr	r3, [r3, #0]
}
 8011336:	4618      	mov	r0, r3
 8011338:	3738      	adds	r7, #56	; 0x38
 801133a:	46bd      	mov	sp, r7
 801133c:	bd80      	pop	{r7, pc}

0801133e <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 801133e:	b580      	push	{r7, lr}
 8011340:	b082      	sub	sp, #8
 8011342:	af00      	add	r7, sp, #0
 8011344:	6078      	str	r0, [r7, #4]
 8011346:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 8011348:	6839      	ldr	r1, [r7, #0]
 801134a:	6878      	ldr	r0, [r7, #4]
 801134c:	f7ff ff6c 	bl	8011228 <xEventGroupSetBits>
}
 8011350:	bf00      	nop
 8011352:	3708      	adds	r7, #8
 8011354:	46bd      	mov	sp, r7
 8011356:	bd80      	pop	{r7, pc}

08011358 <prvTestWaitCondition>:
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 8011358:	b480      	push	{r7}
 801135a:	b087      	sub	sp, #28
 801135c:	af00      	add	r7, sp, #0
 801135e:	60f8      	str	r0, [r7, #12]
 8011360:	60b9      	str	r1, [r7, #8]
 8011362:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 8011364:	2300      	movs	r3, #0
 8011366:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 8011368:	687b      	ldr	r3, [r7, #4]
 801136a:	2b00      	cmp	r3, #0
 801136c:	d107      	bne.n	801137e <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 801136e:	68fa      	ldr	r2, [r7, #12]
 8011370:	68bb      	ldr	r3, [r7, #8]
 8011372:	4013      	ands	r3, r2
 8011374:	2b00      	cmp	r3, #0
 8011376:	d00a      	beq.n	801138e <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8011378:	2301      	movs	r3, #1
 801137a:	617b      	str	r3, [r7, #20]
 801137c:	e007      	b.n	801138e <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 801137e:	68fa      	ldr	r2, [r7, #12]
 8011380:	68bb      	ldr	r3, [r7, #8]
 8011382:	4013      	ands	r3, r2
 8011384:	68ba      	ldr	r2, [r7, #8]
 8011386:	429a      	cmp	r2, r3
 8011388:	d101      	bne.n	801138e <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 801138a:	2301      	movs	r3, #1
 801138c:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 801138e:	697b      	ldr	r3, [r7, #20]
}
 8011390:	4618      	mov	r0, r3
 8011392:	371c      	adds	r7, #28
 8011394:	46bd      	mov	sp, r7
 8011396:	f85d 7b04 	ldr.w	r7, [sp], #4
 801139a:	4770      	bx	lr

0801139c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 801139c:	b480      	push	{r7}
 801139e:	b083      	sub	sp, #12
 80113a0:	af00      	add	r7, sp, #0
 80113a2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80113a4:	687b      	ldr	r3, [r7, #4]
 80113a6:	f103 0208 	add.w	r2, r3, #8
 80113aa:	687b      	ldr	r3, [r7, #4]
 80113ac:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80113ae:	687b      	ldr	r3, [r7, #4]
 80113b0:	f04f 32ff 	mov.w	r2, #4294967295
 80113b4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80113b6:	687b      	ldr	r3, [r7, #4]
 80113b8:	f103 0208 	add.w	r2, r3, #8
 80113bc:	687b      	ldr	r3, [r7, #4]
 80113be:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80113c0:	687b      	ldr	r3, [r7, #4]
 80113c2:	f103 0208 	add.w	r2, r3, #8
 80113c6:	687b      	ldr	r3, [r7, #4]
 80113c8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80113ca:	687b      	ldr	r3, [r7, #4]
 80113cc:	2200      	movs	r2, #0
 80113ce:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80113d0:	bf00      	nop
 80113d2:	370c      	adds	r7, #12
 80113d4:	46bd      	mov	sp, r7
 80113d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113da:	4770      	bx	lr

080113dc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80113dc:	b480      	push	{r7}
 80113de:	b083      	sub	sp, #12
 80113e0:	af00      	add	r7, sp, #0
 80113e2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80113e4:	687b      	ldr	r3, [r7, #4]
 80113e6:	2200      	movs	r2, #0
 80113e8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80113ea:	bf00      	nop
 80113ec:	370c      	adds	r7, #12
 80113ee:	46bd      	mov	sp, r7
 80113f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113f4:	4770      	bx	lr

080113f6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80113f6:	b480      	push	{r7}
 80113f8:	b085      	sub	sp, #20
 80113fa:	af00      	add	r7, sp, #0
 80113fc:	6078      	str	r0, [r7, #4]
 80113fe:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8011400:	687b      	ldr	r3, [r7, #4]
 8011402:	685b      	ldr	r3, [r3, #4]
 8011404:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8011406:	683b      	ldr	r3, [r7, #0]
 8011408:	68fa      	ldr	r2, [r7, #12]
 801140a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 801140c:	68fb      	ldr	r3, [r7, #12]
 801140e:	689a      	ldr	r2, [r3, #8]
 8011410:	683b      	ldr	r3, [r7, #0]
 8011412:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8011414:	68fb      	ldr	r3, [r7, #12]
 8011416:	689b      	ldr	r3, [r3, #8]
 8011418:	683a      	ldr	r2, [r7, #0]
 801141a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 801141c:	68fb      	ldr	r3, [r7, #12]
 801141e:	683a      	ldr	r2, [r7, #0]
 8011420:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8011422:	683b      	ldr	r3, [r7, #0]
 8011424:	687a      	ldr	r2, [r7, #4]
 8011426:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8011428:	687b      	ldr	r3, [r7, #4]
 801142a:	681b      	ldr	r3, [r3, #0]
 801142c:	1c5a      	adds	r2, r3, #1
 801142e:	687b      	ldr	r3, [r7, #4]
 8011430:	601a      	str	r2, [r3, #0]
}
 8011432:	bf00      	nop
 8011434:	3714      	adds	r7, #20
 8011436:	46bd      	mov	sp, r7
 8011438:	f85d 7b04 	ldr.w	r7, [sp], #4
 801143c:	4770      	bx	lr

0801143e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 801143e:	b480      	push	{r7}
 8011440:	b085      	sub	sp, #20
 8011442:	af00      	add	r7, sp, #0
 8011444:	6078      	str	r0, [r7, #4]
 8011446:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8011448:	683b      	ldr	r3, [r7, #0]
 801144a:	681b      	ldr	r3, [r3, #0]
 801144c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 801144e:	68bb      	ldr	r3, [r7, #8]
 8011450:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011454:	d103      	bne.n	801145e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8011456:	687b      	ldr	r3, [r7, #4]
 8011458:	691b      	ldr	r3, [r3, #16]
 801145a:	60fb      	str	r3, [r7, #12]
 801145c:	e00c      	b.n	8011478 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 801145e:	687b      	ldr	r3, [r7, #4]
 8011460:	3308      	adds	r3, #8
 8011462:	60fb      	str	r3, [r7, #12]
 8011464:	e002      	b.n	801146c <vListInsert+0x2e>
 8011466:	68fb      	ldr	r3, [r7, #12]
 8011468:	685b      	ldr	r3, [r3, #4]
 801146a:	60fb      	str	r3, [r7, #12]
 801146c:	68fb      	ldr	r3, [r7, #12]
 801146e:	685b      	ldr	r3, [r3, #4]
 8011470:	681b      	ldr	r3, [r3, #0]
 8011472:	68ba      	ldr	r2, [r7, #8]
 8011474:	429a      	cmp	r2, r3
 8011476:	d2f6      	bcs.n	8011466 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8011478:	68fb      	ldr	r3, [r7, #12]
 801147a:	685a      	ldr	r2, [r3, #4]
 801147c:	683b      	ldr	r3, [r7, #0]
 801147e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8011480:	683b      	ldr	r3, [r7, #0]
 8011482:	685b      	ldr	r3, [r3, #4]
 8011484:	683a      	ldr	r2, [r7, #0]
 8011486:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8011488:	683b      	ldr	r3, [r7, #0]
 801148a:	68fa      	ldr	r2, [r7, #12]
 801148c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 801148e:	68fb      	ldr	r3, [r7, #12]
 8011490:	683a      	ldr	r2, [r7, #0]
 8011492:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8011494:	683b      	ldr	r3, [r7, #0]
 8011496:	687a      	ldr	r2, [r7, #4]
 8011498:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 801149a:	687b      	ldr	r3, [r7, #4]
 801149c:	681b      	ldr	r3, [r3, #0]
 801149e:	1c5a      	adds	r2, r3, #1
 80114a0:	687b      	ldr	r3, [r7, #4]
 80114a2:	601a      	str	r2, [r3, #0]
}
 80114a4:	bf00      	nop
 80114a6:	3714      	adds	r7, #20
 80114a8:	46bd      	mov	sp, r7
 80114aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114ae:	4770      	bx	lr

080114b0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80114b0:	b480      	push	{r7}
 80114b2:	b085      	sub	sp, #20
 80114b4:	af00      	add	r7, sp, #0
 80114b6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80114b8:	687b      	ldr	r3, [r7, #4]
 80114ba:	691b      	ldr	r3, [r3, #16]
 80114bc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80114be:	687b      	ldr	r3, [r7, #4]
 80114c0:	685b      	ldr	r3, [r3, #4]
 80114c2:	687a      	ldr	r2, [r7, #4]
 80114c4:	6892      	ldr	r2, [r2, #8]
 80114c6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80114c8:	687b      	ldr	r3, [r7, #4]
 80114ca:	689b      	ldr	r3, [r3, #8]
 80114cc:	687a      	ldr	r2, [r7, #4]
 80114ce:	6852      	ldr	r2, [r2, #4]
 80114d0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80114d2:	68fb      	ldr	r3, [r7, #12]
 80114d4:	685b      	ldr	r3, [r3, #4]
 80114d6:	687a      	ldr	r2, [r7, #4]
 80114d8:	429a      	cmp	r2, r3
 80114da:	d103      	bne.n	80114e4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80114dc:	687b      	ldr	r3, [r7, #4]
 80114de:	689a      	ldr	r2, [r3, #8]
 80114e0:	68fb      	ldr	r3, [r7, #12]
 80114e2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80114e4:	687b      	ldr	r3, [r7, #4]
 80114e6:	2200      	movs	r2, #0
 80114e8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80114ea:	68fb      	ldr	r3, [r7, #12]
 80114ec:	681b      	ldr	r3, [r3, #0]
 80114ee:	1e5a      	subs	r2, r3, #1
 80114f0:	68fb      	ldr	r3, [r7, #12]
 80114f2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80114f4:	68fb      	ldr	r3, [r7, #12]
 80114f6:	681b      	ldr	r3, [r3, #0]
}
 80114f8:	4618      	mov	r0, r3
 80114fa:	3714      	adds	r7, #20
 80114fc:	46bd      	mov	sp, r7
 80114fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011502:	4770      	bx	lr

08011504 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8011504:	b580      	push	{r7, lr}
 8011506:	b084      	sub	sp, #16
 8011508:	af00      	add	r7, sp, #0
 801150a:	6078      	str	r0, [r7, #4]
 801150c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 801150e:	687b      	ldr	r3, [r7, #4]
 8011510:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8011512:	68fb      	ldr	r3, [r7, #12]
 8011514:	2b00      	cmp	r3, #0
 8011516:	d10a      	bne.n	801152e <xQueueGenericReset+0x2a>
	__asm volatile
 8011518:	f04f 0350 	mov.w	r3, #80	; 0x50
 801151c:	f383 8811 	msr	BASEPRI, r3
 8011520:	f3bf 8f6f 	isb	sy
 8011524:	f3bf 8f4f 	dsb	sy
 8011528:	60bb      	str	r3, [r7, #8]
}
 801152a:	bf00      	nop
 801152c:	e7fe      	b.n	801152c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 801152e:	f002 fb19 	bl	8013b64 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8011532:	68fb      	ldr	r3, [r7, #12]
 8011534:	681a      	ldr	r2, [r3, #0]
 8011536:	68fb      	ldr	r3, [r7, #12]
 8011538:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801153a:	68f9      	ldr	r1, [r7, #12]
 801153c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 801153e:	fb01 f303 	mul.w	r3, r1, r3
 8011542:	441a      	add	r2, r3
 8011544:	68fb      	ldr	r3, [r7, #12]
 8011546:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8011548:	68fb      	ldr	r3, [r7, #12]
 801154a:	2200      	movs	r2, #0
 801154c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 801154e:	68fb      	ldr	r3, [r7, #12]
 8011550:	681a      	ldr	r2, [r3, #0]
 8011552:	68fb      	ldr	r3, [r7, #12]
 8011554:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8011556:	68fb      	ldr	r3, [r7, #12]
 8011558:	681a      	ldr	r2, [r3, #0]
 801155a:	68fb      	ldr	r3, [r7, #12]
 801155c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801155e:	3b01      	subs	r3, #1
 8011560:	68f9      	ldr	r1, [r7, #12]
 8011562:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8011564:	fb01 f303 	mul.w	r3, r1, r3
 8011568:	441a      	add	r2, r3
 801156a:	68fb      	ldr	r3, [r7, #12]
 801156c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 801156e:	68fb      	ldr	r3, [r7, #12]
 8011570:	22ff      	movs	r2, #255	; 0xff
 8011572:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8011576:	68fb      	ldr	r3, [r7, #12]
 8011578:	22ff      	movs	r2, #255	; 0xff
 801157a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 801157e:	683b      	ldr	r3, [r7, #0]
 8011580:	2b00      	cmp	r3, #0
 8011582:	d114      	bne.n	80115ae <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8011584:	68fb      	ldr	r3, [r7, #12]
 8011586:	691b      	ldr	r3, [r3, #16]
 8011588:	2b00      	cmp	r3, #0
 801158a:	d01a      	beq.n	80115c2 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801158c:	68fb      	ldr	r3, [r7, #12]
 801158e:	3310      	adds	r3, #16
 8011590:	4618      	mov	r0, r3
 8011592:	f001 fa27 	bl	80129e4 <xTaskRemoveFromEventList>
 8011596:	4603      	mov	r3, r0
 8011598:	2b00      	cmp	r3, #0
 801159a:	d012      	beq.n	80115c2 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 801159c:	4b0c      	ldr	r3, [pc, #48]	; (80115d0 <xQueueGenericReset+0xcc>)
 801159e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80115a2:	601a      	str	r2, [r3, #0]
 80115a4:	f3bf 8f4f 	dsb	sy
 80115a8:	f3bf 8f6f 	isb	sy
 80115ac:	e009      	b.n	80115c2 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80115ae:	68fb      	ldr	r3, [r7, #12]
 80115b0:	3310      	adds	r3, #16
 80115b2:	4618      	mov	r0, r3
 80115b4:	f7ff fef2 	bl	801139c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80115b8:	68fb      	ldr	r3, [r7, #12]
 80115ba:	3324      	adds	r3, #36	; 0x24
 80115bc:	4618      	mov	r0, r3
 80115be:	f7ff feed 	bl	801139c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80115c2:	f002 faff 	bl	8013bc4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80115c6:	2301      	movs	r3, #1
}
 80115c8:	4618      	mov	r0, r3
 80115ca:	3710      	adds	r7, #16
 80115cc:	46bd      	mov	sp, r7
 80115ce:	bd80      	pop	{r7, pc}
 80115d0:	e000ed04 	.word	0xe000ed04

080115d4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80115d4:	b580      	push	{r7, lr}
 80115d6:	b08e      	sub	sp, #56	; 0x38
 80115d8:	af02      	add	r7, sp, #8
 80115da:	60f8      	str	r0, [r7, #12]
 80115dc:	60b9      	str	r1, [r7, #8]
 80115de:	607a      	str	r2, [r7, #4]
 80115e0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80115e2:	68fb      	ldr	r3, [r7, #12]
 80115e4:	2b00      	cmp	r3, #0
 80115e6:	d10a      	bne.n	80115fe <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80115e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80115ec:	f383 8811 	msr	BASEPRI, r3
 80115f0:	f3bf 8f6f 	isb	sy
 80115f4:	f3bf 8f4f 	dsb	sy
 80115f8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80115fa:	bf00      	nop
 80115fc:	e7fe      	b.n	80115fc <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80115fe:	683b      	ldr	r3, [r7, #0]
 8011600:	2b00      	cmp	r3, #0
 8011602:	d10a      	bne.n	801161a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8011604:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011608:	f383 8811 	msr	BASEPRI, r3
 801160c:	f3bf 8f6f 	isb	sy
 8011610:	f3bf 8f4f 	dsb	sy
 8011614:	627b      	str	r3, [r7, #36]	; 0x24
}
 8011616:	bf00      	nop
 8011618:	e7fe      	b.n	8011618 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 801161a:	687b      	ldr	r3, [r7, #4]
 801161c:	2b00      	cmp	r3, #0
 801161e:	d002      	beq.n	8011626 <xQueueGenericCreateStatic+0x52>
 8011620:	68bb      	ldr	r3, [r7, #8]
 8011622:	2b00      	cmp	r3, #0
 8011624:	d001      	beq.n	801162a <xQueueGenericCreateStatic+0x56>
 8011626:	2301      	movs	r3, #1
 8011628:	e000      	b.n	801162c <xQueueGenericCreateStatic+0x58>
 801162a:	2300      	movs	r3, #0
 801162c:	2b00      	cmp	r3, #0
 801162e:	d10a      	bne.n	8011646 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8011630:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011634:	f383 8811 	msr	BASEPRI, r3
 8011638:	f3bf 8f6f 	isb	sy
 801163c:	f3bf 8f4f 	dsb	sy
 8011640:	623b      	str	r3, [r7, #32]
}
 8011642:	bf00      	nop
 8011644:	e7fe      	b.n	8011644 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8011646:	687b      	ldr	r3, [r7, #4]
 8011648:	2b00      	cmp	r3, #0
 801164a:	d102      	bne.n	8011652 <xQueueGenericCreateStatic+0x7e>
 801164c:	68bb      	ldr	r3, [r7, #8]
 801164e:	2b00      	cmp	r3, #0
 8011650:	d101      	bne.n	8011656 <xQueueGenericCreateStatic+0x82>
 8011652:	2301      	movs	r3, #1
 8011654:	e000      	b.n	8011658 <xQueueGenericCreateStatic+0x84>
 8011656:	2300      	movs	r3, #0
 8011658:	2b00      	cmp	r3, #0
 801165a:	d10a      	bne.n	8011672 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 801165c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011660:	f383 8811 	msr	BASEPRI, r3
 8011664:	f3bf 8f6f 	isb	sy
 8011668:	f3bf 8f4f 	dsb	sy
 801166c:	61fb      	str	r3, [r7, #28]
}
 801166e:	bf00      	nop
 8011670:	e7fe      	b.n	8011670 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8011672:	2348      	movs	r3, #72	; 0x48
 8011674:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8011676:	697b      	ldr	r3, [r7, #20]
 8011678:	2b48      	cmp	r3, #72	; 0x48
 801167a:	d00a      	beq.n	8011692 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 801167c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011680:	f383 8811 	msr	BASEPRI, r3
 8011684:	f3bf 8f6f 	isb	sy
 8011688:	f3bf 8f4f 	dsb	sy
 801168c:	61bb      	str	r3, [r7, #24]
}
 801168e:	bf00      	nop
 8011690:	e7fe      	b.n	8011690 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8011692:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8011694:	683b      	ldr	r3, [r7, #0]
 8011696:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8011698:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801169a:	2b00      	cmp	r3, #0
 801169c:	d00d      	beq.n	80116ba <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 801169e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80116a0:	2201      	movs	r2, #1
 80116a2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80116a6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80116aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80116ac:	9300      	str	r3, [sp, #0]
 80116ae:	4613      	mov	r3, r2
 80116b0:	687a      	ldr	r2, [r7, #4]
 80116b2:	68b9      	ldr	r1, [r7, #8]
 80116b4:	68f8      	ldr	r0, [r7, #12]
 80116b6:	f000 f83f 	bl	8011738 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80116ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80116bc:	4618      	mov	r0, r3
 80116be:	3730      	adds	r7, #48	; 0x30
 80116c0:	46bd      	mov	sp, r7
 80116c2:	bd80      	pop	{r7, pc}

080116c4 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80116c4:	b580      	push	{r7, lr}
 80116c6:	b08a      	sub	sp, #40	; 0x28
 80116c8:	af02      	add	r7, sp, #8
 80116ca:	60f8      	str	r0, [r7, #12]
 80116cc:	60b9      	str	r1, [r7, #8]
 80116ce:	4613      	mov	r3, r2
 80116d0:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80116d2:	68fb      	ldr	r3, [r7, #12]
 80116d4:	2b00      	cmp	r3, #0
 80116d6:	d10a      	bne.n	80116ee <xQueueGenericCreate+0x2a>
	__asm volatile
 80116d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80116dc:	f383 8811 	msr	BASEPRI, r3
 80116e0:	f3bf 8f6f 	isb	sy
 80116e4:	f3bf 8f4f 	dsb	sy
 80116e8:	613b      	str	r3, [r7, #16]
}
 80116ea:	bf00      	nop
 80116ec:	e7fe      	b.n	80116ec <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80116ee:	68fb      	ldr	r3, [r7, #12]
 80116f0:	68ba      	ldr	r2, [r7, #8]
 80116f2:	fb02 f303 	mul.w	r3, r2, r3
 80116f6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80116f8:	69fb      	ldr	r3, [r7, #28]
 80116fa:	3348      	adds	r3, #72	; 0x48
 80116fc:	4618      	mov	r0, r3
 80116fe:	f002 fb53 	bl	8013da8 <pvPortMalloc>
 8011702:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8011704:	69bb      	ldr	r3, [r7, #24]
 8011706:	2b00      	cmp	r3, #0
 8011708:	d011      	beq.n	801172e <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 801170a:	69bb      	ldr	r3, [r7, #24]
 801170c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801170e:	697b      	ldr	r3, [r7, #20]
 8011710:	3348      	adds	r3, #72	; 0x48
 8011712:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8011714:	69bb      	ldr	r3, [r7, #24]
 8011716:	2200      	movs	r2, #0
 8011718:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 801171c:	79fa      	ldrb	r2, [r7, #7]
 801171e:	69bb      	ldr	r3, [r7, #24]
 8011720:	9300      	str	r3, [sp, #0]
 8011722:	4613      	mov	r3, r2
 8011724:	697a      	ldr	r2, [r7, #20]
 8011726:	68b9      	ldr	r1, [r7, #8]
 8011728:	68f8      	ldr	r0, [r7, #12]
 801172a:	f000 f805 	bl	8011738 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 801172e:	69bb      	ldr	r3, [r7, #24]
	}
 8011730:	4618      	mov	r0, r3
 8011732:	3720      	adds	r7, #32
 8011734:	46bd      	mov	sp, r7
 8011736:	bd80      	pop	{r7, pc}

08011738 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8011738:	b580      	push	{r7, lr}
 801173a:	b084      	sub	sp, #16
 801173c:	af00      	add	r7, sp, #0
 801173e:	60f8      	str	r0, [r7, #12]
 8011740:	60b9      	str	r1, [r7, #8]
 8011742:	607a      	str	r2, [r7, #4]
 8011744:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8011746:	68bb      	ldr	r3, [r7, #8]
 8011748:	2b00      	cmp	r3, #0
 801174a:	d103      	bne.n	8011754 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 801174c:	69bb      	ldr	r3, [r7, #24]
 801174e:	69ba      	ldr	r2, [r7, #24]
 8011750:	601a      	str	r2, [r3, #0]
 8011752:	e002      	b.n	801175a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8011754:	69bb      	ldr	r3, [r7, #24]
 8011756:	687a      	ldr	r2, [r7, #4]
 8011758:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 801175a:	69bb      	ldr	r3, [r7, #24]
 801175c:	68fa      	ldr	r2, [r7, #12]
 801175e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8011760:	69bb      	ldr	r3, [r7, #24]
 8011762:	68ba      	ldr	r2, [r7, #8]
 8011764:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8011766:	2101      	movs	r1, #1
 8011768:	69b8      	ldr	r0, [r7, #24]
 801176a:	f7ff fecb 	bl	8011504 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 801176e:	bf00      	nop
 8011770:	3710      	adds	r7, #16
 8011772:	46bd      	mov	sp, r7
 8011774:	bd80      	pop	{r7, pc}
	...

08011778 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8011778:	b580      	push	{r7, lr}
 801177a:	b08e      	sub	sp, #56	; 0x38
 801177c:	af00      	add	r7, sp, #0
 801177e:	60f8      	str	r0, [r7, #12]
 8011780:	60b9      	str	r1, [r7, #8]
 8011782:	607a      	str	r2, [r7, #4]
 8011784:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8011786:	2300      	movs	r3, #0
 8011788:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 801178a:	68fb      	ldr	r3, [r7, #12]
 801178c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 801178e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011790:	2b00      	cmp	r3, #0
 8011792:	d10a      	bne.n	80117aa <xQueueGenericSend+0x32>
	__asm volatile
 8011794:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011798:	f383 8811 	msr	BASEPRI, r3
 801179c:	f3bf 8f6f 	isb	sy
 80117a0:	f3bf 8f4f 	dsb	sy
 80117a4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80117a6:	bf00      	nop
 80117a8:	e7fe      	b.n	80117a8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80117aa:	68bb      	ldr	r3, [r7, #8]
 80117ac:	2b00      	cmp	r3, #0
 80117ae:	d103      	bne.n	80117b8 <xQueueGenericSend+0x40>
 80117b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80117b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80117b4:	2b00      	cmp	r3, #0
 80117b6:	d101      	bne.n	80117bc <xQueueGenericSend+0x44>
 80117b8:	2301      	movs	r3, #1
 80117ba:	e000      	b.n	80117be <xQueueGenericSend+0x46>
 80117bc:	2300      	movs	r3, #0
 80117be:	2b00      	cmp	r3, #0
 80117c0:	d10a      	bne.n	80117d8 <xQueueGenericSend+0x60>
	__asm volatile
 80117c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80117c6:	f383 8811 	msr	BASEPRI, r3
 80117ca:	f3bf 8f6f 	isb	sy
 80117ce:	f3bf 8f4f 	dsb	sy
 80117d2:	627b      	str	r3, [r7, #36]	; 0x24
}
 80117d4:	bf00      	nop
 80117d6:	e7fe      	b.n	80117d6 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80117d8:	683b      	ldr	r3, [r7, #0]
 80117da:	2b02      	cmp	r3, #2
 80117dc:	d103      	bne.n	80117e6 <xQueueGenericSend+0x6e>
 80117de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80117e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80117e2:	2b01      	cmp	r3, #1
 80117e4:	d101      	bne.n	80117ea <xQueueGenericSend+0x72>
 80117e6:	2301      	movs	r3, #1
 80117e8:	e000      	b.n	80117ec <xQueueGenericSend+0x74>
 80117ea:	2300      	movs	r3, #0
 80117ec:	2b00      	cmp	r3, #0
 80117ee:	d10a      	bne.n	8011806 <xQueueGenericSend+0x8e>
	__asm volatile
 80117f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80117f4:	f383 8811 	msr	BASEPRI, r3
 80117f8:	f3bf 8f6f 	isb	sy
 80117fc:	f3bf 8f4f 	dsb	sy
 8011800:	623b      	str	r3, [r7, #32]
}
 8011802:	bf00      	nop
 8011804:	e7fe      	b.n	8011804 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8011806:	f001 fb0f 	bl	8012e28 <xTaskGetSchedulerState>
 801180a:	4603      	mov	r3, r0
 801180c:	2b00      	cmp	r3, #0
 801180e:	d102      	bne.n	8011816 <xQueueGenericSend+0x9e>
 8011810:	687b      	ldr	r3, [r7, #4]
 8011812:	2b00      	cmp	r3, #0
 8011814:	d101      	bne.n	801181a <xQueueGenericSend+0xa2>
 8011816:	2301      	movs	r3, #1
 8011818:	e000      	b.n	801181c <xQueueGenericSend+0xa4>
 801181a:	2300      	movs	r3, #0
 801181c:	2b00      	cmp	r3, #0
 801181e:	d10a      	bne.n	8011836 <xQueueGenericSend+0xbe>
	__asm volatile
 8011820:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011824:	f383 8811 	msr	BASEPRI, r3
 8011828:	f3bf 8f6f 	isb	sy
 801182c:	f3bf 8f4f 	dsb	sy
 8011830:	61fb      	str	r3, [r7, #28]
}
 8011832:	bf00      	nop
 8011834:	e7fe      	b.n	8011834 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8011836:	f002 f995 	bl	8013b64 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 801183a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801183c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801183e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011840:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011842:	429a      	cmp	r2, r3
 8011844:	d302      	bcc.n	801184c <xQueueGenericSend+0xd4>
 8011846:	683b      	ldr	r3, [r7, #0]
 8011848:	2b02      	cmp	r3, #2
 801184a:	d129      	bne.n	80118a0 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 801184c:	683a      	ldr	r2, [r7, #0]
 801184e:	68b9      	ldr	r1, [r7, #8]
 8011850:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011852:	f000 fa0b 	bl	8011c6c <prvCopyDataToQueue>
 8011856:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8011858:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801185a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801185c:	2b00      	cmp	r3, #0
 801185e:	d010      	beq.n	8011882 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8011860:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011862:	3324      	adds	r3, #36	; 0x24
 8011864:	4618      	mov	r0, r3
 8011866:	f001 f8bd 	bl	80129e4 <xTaskRemoveFromEventList>
 801186a:	4603      	mov	r3, r0
 801186c:	2b00      	cmp	r3, #0
 801186e:	d013      	beq.n	8011898 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8011870:	4b3f      	ldr	r3, [pc, #252]	; (8011970 <xQueueGenericSend+0x1f8>)
 8011872:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011876:	601a      	str	r2, [r3, #0]
 8011878:	f3bf 8f4f 	dsb	sy
 801187c:	f3bf 8f6f 	isb	sy
 8011880:	e00a      	b.n	8011898 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8011882:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011884:	2b00      	cmp	r3, #0
 8011886:	d007      	beq.n	8011898 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8011888:	4b39      	ldr	r3, [pc, #228]	; (8011970 <xQueueGenericSend+0x1f8>)
 801188a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801188e:	601a      	str	r2, [r3, #0]
 8011890:	f3bf 8f4f 	dsb	sy
 8011894:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8011898:	f002 f994 	bl	8013bc4 <vPortExitCritical>
				return pdPASS;
 801189c:	2301      	movs	r3, #1
 801189e:	e063      	b.n	8011968 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80118a0:	687b      	ldr	r3, [r7, #4]
 80118a2:	2b00      	cmp	r3, #0
 80118a4:	d103      	bne.n	80118ae <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80118a6:	f002 f98d 	bl	8013bc4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80118aa:	2300      	movs	r3, #0
 80118ac:	e05c      	b.n	8011968 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80118ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80118b0:	2b00      	cmp	r3, #0
 80118b2:	d106      	bne.n	80118c2 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80118b4:	f107 0314 	add.w	r3, r7, #20
 80118b8:	4618      	mov	r0, r3
 80118ba:	f001 f957 	bl	8012b6c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80118be:	2301      	movs	r3, #1
 80118c0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80118c2:	f002 f97f 	bl	8013bc4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80118c6:	f000 fe11 	bl	80124ec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80118ca:	f002 f94b 	bl	8013b64 <vPortEnterCritical>
 80118ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80118d0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80118d4:	b25b      	sxtb	r3, r3
 80118d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80118da:	d103      	bne.n	80118e4 <xQueueGenericSend+0x16c>
 80118dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80118de:	2200      	movs	r2, #0
 80118e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80118e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80118e6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80118ea:	b25b      	sxtb	r3, r3
 80118ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80118f0:	d103      	bne.n	80118fa <xQueueGenericSend+0x182>
 80118f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80118f4:	2200      	movs	r2, #0
 80118f6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80118fa:	f002 f963 	bl	8013bc4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80118fe:	1d3a      	adds	r2, r7, #4
 8011900:	f107 0314 	add.w	r3, r7, #20
 8011904:	4611      	mov	r1, r2
 8011906:	4618      	mov	r0, r3
 8011908:	f001 f946 	bl	8012b98 <xTaskCheckForTimeOut>
 801190c:	4603      	mov	r3, r0
 801190e:	2b00      	cmp	r3, #0
 8011910:	d124      	bne.n	801195c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8011912:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011914:	f000 faa2 	bl	8011e5c <prvIsQueueFull>
 8011918:	4603      	mov	r3, r0
 801191a:	2b00      	cmp	r3, #0
 801191c:	d018      	beq.n	8011950 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 801191e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011920:	3310      	adds	r3, #16
 8011922:	687a      	ldr	r2, [r7, #4]
 8011924:	4611      	mov	r1, r2
 8011926:	4618      	mov	r0, r3
 8011928:	f000 ffd0 	bl	80128cc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 801192c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801192e:	f000 fa2d 	bl	8011d8c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8011932:	f000 fde9 	bl	8012508 <xTaskResumeAll>
 8011936:	4603      	mov	r3, r0
 8011938:	2b00      	cmp	r3, #0
 801193a:	f47f af7c 	bne.w	8011836 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 801193e:	4b0c      	ldr	r3, [pc, #48]	; (8011970 <xQueueGenericSend+0x1f8>)
 8011940:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011944:	601a      	str	r2, [r3, #0]
 8011946:	f3bf 8f4f 	dsb	sy
 801194a:	f3bf 8f6f 	isb	sy
 801194e:	e772      	b.n	8011836 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8011950:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011952:	f000 fa1b 	bl	8011d8c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8011956:	f000 fdd7 	bl	8012508 <xTaskResumeAll>
 801195a:	e76c      	b.n	8011836 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 801195c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801195e:	f000 fa15 	bl	8011d8c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8011962:	f000 fdd1 	bl	8012508 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8011966:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8011968:	4618      	mov	r0, r3
 801196a:	3738      	adds	r7, #56	; 0x38
 801196c:	46bd      	mov	sp, r7
 801196e:	bd80      	pop	{r7, pc}
 8011970:	e000ed04 	.word	0xe000ed04

08011974 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8011974:	b580      	push	{r7, lr}
 8011976:	b090      	sub	sp, #64	; 0x40
 8011978:	af00      	add	r7, sp, #0
 801197a:	60f8      	str	r0, [r7, #12]
 801197c:	60b9      	str	r1, [r7, #8]
 801197e:	607a      	str	r2, [r7, #4]
 8011980:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8011982:	68fb      	ldr	r3, [r7, #12]
 8011984:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8011986:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011988:	2b00      	cmp	r3, #0
 801198a:	d10a      	bne.n	80119a2 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 801198c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011990:	f383 8811 	msr	BASEPRI, r3
 8011994:	f3bf 8f6f 	isb	sy
 8011998:	f3bf 8f4f 	dsb	sy
 801199c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 801199e:	bf00      	nop
 80119a0:	e7fe      	b.n	80119a0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80119a2:	68bb      	ldr	r3, [r7, #8]
 80119a4:	2b00      	cmp	r3, #0
 80119a6:	d103      	bne.n	80119b0 <xQueueGenericSendFromISR+0x3c>
 80119a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80119aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80119ac:	2b00      	cmp	r3, #0
 80119ae:	d101      	bne.n	80119b4 <xQueueGenericSendFromISR+0x40>
 80119b0:	2301      	movs	r3, #1
 80119b2:	e000      	b.n	80119b6 <xQueueGenericSendFromISR+0x42>
 80119b4:	2300      	movs	r3, #0
 80119b6:	2b00      	cmp	r3, #0
 80119b8:	d10a      	bne.n	80119d0 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80119ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80119be:	f383 8811 	msr	BASEPRI, r3
 80119c2:	f3bf 8f6f 	isb	sy
 80119c6:	f3bf 8f4f 	dsb	sy
 80119ca:	627b      	str	r3, [r7, #36]	; 0x24
}
 80119cc:	bf00      	nop
 80119ce:	e7fe      	b.n	80119ce <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80119d0:	683b      	ldr	r3, [r7, #0]
 80119d2:	2b02      	cmp	r3, #2
 80119d4:	d103      	bne.n	80119de <xQueueGenericSendFromISR+0x6a>
 80119d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80119d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80119da:	2b01      	cmp	r3, #1
 80119dc:	d101      	bne.n	80119e2 <xQueueGenericSendFromISR+0x6e>
 80119de:	2301      	movs	r3, #1
 80119e0:	e000      	b.n	80119e4 <xQueueGenericSendFromISR+0x70>
 80119e2:	2300      	movs	r3, #0
 80119e4:	2b00      	cmp	r3, #0
 80119e6:	d10a      	bne.n	80119fe <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80119e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80119ec:	f383 8811 	msr	BASEPRI, r3
 80119f0:	f3bf 8f6f 	isb	sy
 80119f4:	f3bf 8f4f 	dsb	sy
 80119f8:	623b      	str	r3, [r7, #32]
}
 80119fa:	bf00      	nop
 80119fc:	e7fe      	b.n	80119fc <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80119fe:	f002 f993 	bl	8013d28 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8011a02:	f3ef 8211 	mrs	r2, BASEPRI
 8011a06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011a0a:	f383 8811 	msr	BASEPRI, r3
 8011a0e:	f3bf 8f6f 	isb	sy
 8011a12:	f3bf 8f4f 	dsb	sy
 8011a16:	61fa      	str	r2, [r7, #28]
 8011a18:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8011a1a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8011a1c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8011a1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011a20:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8011a22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011a24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011a26:	429a      	cmp	r2, r3
 8011a28:	d302      	bcc.n	8011a30 <xQueueGenericSendFromISR+0xbc>
 8011a2a:	683b      	ldr	r3, [r7, #0]
 8011a2c:	2b02      	cmp	r3, #2
 8011a2e:	d12f      	bne.n	8011a90 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8011a30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011a32:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8011a36:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8011a3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011a3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011a3e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8011a40:	683a      	ldr	r2, [r7, #0]
 8011a42:	68b9      	ldr	r1, [r7, #8]
 8011a44:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8011a46:	f000 f911 	bl	8011c6c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8011a4a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8011a4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011a52:	d112      	bne.n	8011a7a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8011a54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011a56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011a58:	2b00      	cmp	r3, #0
 8011a5a:	d016      	beq.n	8011a8a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8011a5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011a5e:	3324      	adds	r3, #36	; 0x24
 8011a60:	4618      	mov	r0, r3
 8011a62:	f000 ffbf 	bl	80129e4 <xTaskRemoveFromEventList>
 8011a66:	4603      	mov	r3, r0
 8011a68:	2b00      	cmp	r3, #0
 8011a6a:	d00e      	beq.n	8011a8a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8011a6c:	687b      	ldr	r3, [r7, #4]
 8011a6e:	2b00      	cmp	r3, #0
 8011a70:	d00b      	beq.n	8011a8a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8011a72:	687b      	ldr	r3, [r7, #4]
 8011a74:	2201      	movs	r2, #1
 8011a76:	601a      	str	r2, [r3, #0]
 8011a78:	e007      	b.n	8011a8a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8011a7a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8011a7e:	3301      	adds	r3, #1
 8011a80:	b2db      	uxtb	r3, r3
 8011a82:	b25a      	sxtb	r2, r3
 8011a84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011a86:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8011a8a:	2301      	movs	r3, #1
 8011a8c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8011a8e:	e001      	b.n	8011a94 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8011a90:	2300      	movs	r3, #0
 8011a92:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011a94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011a96:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8011a98:	697b      	ldr	r3, [r7, #20]
 8011a9a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8011a9e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8011aa0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8011aa2:	4618      	mov	r0, r3
 8011aa4:	3740      	adds	r7, #64	; 0x40
 8011aa6:	46bd      	mov	sp, r7
 8011aa8:	bd80      	pop	{r7, pc}
	...

08011aac <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8011aac:	b580      	push	{r7, lr}
 8011aae:	b08c      	sub	sp, #48	; 0x30
 8011ab0:	af00      	add	r7, sp, #0
 8011ab2:	60f8      	str	r0, [r7, #12]
 8011ab4:	60b9      	str	r1, [r7, #8]
 8011ab6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8011ab8:	2300      	movs	r3, #0
 8011aba:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8011abc:	68fb      	ldr	r3, [r7, #12]
 8011abe:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8011ac0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011ac2:	2b00      	cmp	r3, #0
 8011ac4:	d10a      	bne.n	8011adc <xQueueReceive+0x30>
	__asm volatile
 8011ac6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011aca:	f383 8811 	msr	BASEPRI, r3
 8011ace:	f3bf 8f6f 	isb	sy
 8011ad2:	f3bf 8f4f 	dsb	sy
 8011ad6:	623b      	str	r3, [r7, #32]
}
 8011ad8:	bf00      	nop
 8011ada:	e7fe      	b.n	8011ada <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8011adc:	68bb      	ldr	r3, [r7, #8]
 8011ade:	2b00      	cmp	r3, #0
 8011ae0:	d103      	bne.n	8011aea <xQueueReceive+0x3e>
 8011ae2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011ae6:	2b00      	cmp	r3, #0
 8011ae8:	d101      	bne.n	8011aee <xQueueReceive+0x42>
 8011aea:	2301      	movs	r3, #1
 8011aec:	e000      	b.n	8011af0 <xQueueReceive+0x44>
 8011aee:	2300      	movs	r3, #0
 8011af0:	2b00      	cmp	r3, #0
 8011af2:	d10a      	bne.n	8011b0a <xQueueReceive+0x5e>
	__asm volatile
 8011af4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011af8:	f383 8811 	msr	BASEPRI, r3
 8011afc:	f3bf 8f6f 	isb	sy
 8011b00:	f3bf 8f4f 	dsb	sy
 8011b04:	61fb      	str	r3, [r7, #28]
}
 8011b06:	bf00      	nop
 8011b08:	e7fe      	b.n	8011b08 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8011b0a:	f001 f98d 	bl	8012e28 <xTaskGetSchedulerState>
 8011b0e:	4603      	mov	r3, r0
 8011b10:	2b00      	cmp	r3, #0
 8011b12:	d102      	bne.n	8011b1a <xQueueReceive+0x6e>
 8011b14:	687b      	ldr	r3, [r7, #4]
 8011b16:	2b00      	cmp	r3, #0
 8011b18:	d101      	bne.n	8011b1e <xQueueReceive+0x72>
 8011b1a:	2301      	movs	r3, #1
 8011b1c:	e000      	b.n	8011b20 <xQueueReceive+0x74>
 8011b1e:	2300      	movs	r3, #0
 8011b20:	2b00      	cmp	r3, #0
 8011b22:	d10a      	bne.n	8011b3a <xQueueReceive+0x8e>
	__asm volatile
 8011b24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011b28:	f383 8811 	msr	BASEPRI, r3
 8011b2c:	f3bf 8f6f 	isb	sy
 8011b30:	f3bf 8f4f 	dsb	sy
 8011b34:	61bb      	str	r3, [r7, #24]
}
 8011b36:	bf00      	nop
 8011b38:	e7fe      	b.n	8011b38 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8011b3a:	f002 f813 	bl	8013b64 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8011b3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011b40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011b42:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8011b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b46:	2b00      	cmp	r3, #0
 8011b48:	d01f      	beq.n	8011b8a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8011b4a:	68b9      	ldr	r1, [r7, #8]
 8011b4c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011b4e:	f000 f8f7 	bl	8011d40 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8011b52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b54:	1e5a      	subs	r2, r3, #1
 8011b56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011b58:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8011b5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011b5c:	691b      	ldr	r3, [r3, #16]
 8011b5e:	2b00      	cmp	r3, #0
 8011b60:	d00f      	beq.n	8011b82 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8011b62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011b64:	3310      	adds	r3, #16
 8011b66:	4618      	mov	r0, r3
 8011b68:	f000 ff3c 	bl	80129e4 <xTaskRemoveFromEventList>
 8011b6c:	4603      	mov	r3, r0
 8011b6e:	2b00      	cmp	r3, #0
 8011b70:	d007      	beq.n	8011b82 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8011b72:	4b3d      	ldr	r3, [pc, #244]	; (8011c68 <xQueueReceive+0x1bc>)
 8011b74:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011b78:	601a      	str	r2, [r3, #0]
 8011b7a:	f3bf 8f4f 	dsb	sy
 8011b7e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8011b82:	f002 f81f 	bl	8013bc4 <vPortExitCritical>
				return pdPASS;
 8011b86:	2301      	movs	r3, #1
 8011b88:	e069      	b.n	8011c5e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8011b8a:	687b      	ldr	r3, [r7, #4]
 8011b8c:	2b00      	cmp	r3, #0
 8011b8e:	d103      	bne.n	8011b98 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8011b90:	f002 f818 	bl	8013bc4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8011b94:	2300      	movs	r3, #0
 8011b96:	e062      	b.n	8011c5e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8011b98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011b9a:	2b00      	cmp	r3, #0
 8011b9c:	d106      	bne.n	8011bac <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8011b9e:	f107 0310 	add.w	r3, r7, #16
 8011ba2:	4618      	mov	r0, r3
 8011ba4:	f000 ffe2 	bl	8012b6c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8011ba8:	2301      	movs	r3, #1
 8011baa:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8011bac:	f002 f80a 	bl	8013bc4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8011bb0:	f000 fc9c 	bl	80124ec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8011bb4:	f001 ffd6 	bl	8013b64 <vPortEnterCritical>
 8011bb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011bba:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8011bbe:	b25b      	sxtb	r3, r3
 8011bc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011bc4:	d103      	bne.n	8011bce <xQueueReceive+0x122>
 8011bc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011bc8:	2200      	movs	r2, #0
 8011bca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8011bce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011bd0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8011bd4:	b25b      	sxtb	r3, r3
 8011bd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011bda:	d103      	bne.n	8011be4 <xQueueReceive+0x138>
 8011bdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011bde:	2200      	movs	r2, #0
 8011be0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8011be4:	f001 ffee 	bl	8013bc4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8011be8:	1d3a      	adds	r2, r7, #4
 8011bea:	f107 0310 	add.w	r3, r7, #16
 8011bee:	4611      	mov	r1, r2
 8011bf0:	4618      	mov	r0, r3
 8011bf2:	f000 ffd1 	bl	8012b98 <xTaskCheckForTimeOut>
 8011bf6:	4603      	mov	r3, r0
 8011bf8:	2b00      	cmp	r3, #0
 8011bfa:	d123      	bne.n	8011c44 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8011bfc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011bfe:	f000 f917 	bl	8011e30 <prvIsQueueEmpty>
 8011c02:	4603      	mov	r3, r0
 8011c04:	2b00      	cmp	r3, #0
 8011c06:	d017      	beq.n	8011c38 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8011c08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011c0a:	3324      	adds	r3, #36	; 0x24
 8011c0c:	687a      	ldr	r2, [r7, #4]
 8011c0e:	4611      	mov	r1, r2
 8011c10:	4618      	mov	r0, r3
 8011c12:	f000 fe5b 	bl	80128cc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8011c16:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011c18:	f000 f8b8 	bl	8011d8c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8011c1c:	f000 fc74 	bl	8012508 <xTaskResumeAll>
 8011c20:	4603      	mov	r3, r0
 8011c22:	2b00      	cmp	r3, #0
 8011c24:	d189      	bne.n	8011b3a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8011c26:	4b10      	ldr	r3, [pc, #64]	; (8011c68 <xQueueReceive+0x1bc>)
 8011c28:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011c2c:	601a      	str	r2, [r3, #0]
 8011c2e:	f3bf 8f4f 	dsb	sy
 8011c32:	f3bf 8f6f 	isb	sy
 8011c36:	e780      	b.n	8011b3a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8011c38:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011c3a:	f000 f8a7 	bl	8011d8c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8011c3e:	f000 fc63 	bl	8012508 <xTaskResumeAll>
 8011c42:	e77a      	b.n	8011b3a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8011c44:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011c46:	f000 f8a1 	bl	8011d8c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8011c4a:	f000 fc5d 	bl	8012508 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8011c4e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011c50:	f000 f8ee 	bl	8011e30 <prvIsQueueEmpty>
 8011c54:	4603      	mov	r3, r0
 8011c56:	2b00      	cmp	r3, #0
 8011c58:	f43f af6f 	beq.w	8011b3a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8011c5c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8011c5e:	4618      	mov	r0, r3
 8011c60:	3730      	adds	r7, #48	; 0x30
 8011c62:	46bd      	mov	sp, r7
 8011c64:	bd80      	pop	{r7, pc}
 8011c66:	bf00      	nop
 8011c68:	e000ed04 	.word	0xe000ed04

08011c6c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8011c6c:	b580      	push	{r7, lr}
 8011c6e:	b086      	sub	sp, #24
 8011c70:	af00      	add	r7, sp, #0
 8011c72:	60f8      	str	r0, [r7, #12]
 8011c74:	60b9      	str	r1, [r7, #8]
 8011c76:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8011c78:	2300      	movs	r3, #0
 8011c7a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8011c7c:	68fb      	ldr	r3, [r7, #12]
 8011c7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011c80:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8011c82:	68fb      	ldr	r3, [r7, #12]
 8011c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011c86:	2b00      	cmp	r3, #0
 8011c88:	d10d      	bne.n	8011ca6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8011c8a:	68fb      	ldr	r3, [r7, #12]
 8011c8c:	681b      	ldr	r3, [r3, #0]
 8011c8e:	2b00      	cmp	r3, #0
 8011c90:	d14d      	bne.n	8011d2e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8011c92:	68fb      	ldr	r3, [r7, #12]
 8011c94:	689b      	ldr	r3, [r3, #8]
 8011c96:	4618      	mov	r0, r3
 8011c98:	f001 f8e4 	bl	8012e64 <xTaskPriorityDisinherit>
 8011c9c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8011c9e:	68fb      	ldr	r3, [r7, #12]
 8011ca0:	2200      	movs	r2, #0
 8011ca2:	609a      	str	r2, [r3, #8]
 8011ca4:	e043      	b.n	8011d2e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8011ca6:	687b      	ldr	r3, [r7, #4]
 8011ca8:	2b00      	cmp	r3, #0
 8011caa:	d119      	bne.n	8011ce0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8011cac:	68fb      	ldr	r3, [r7, #12]
 8011cae:	6858      	ldr	r0, [r3, #4]
 8011cb0:	68fb      	ldr	r3, [r7, #12]
 8011cb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011cb4:	461a      	mov	r2, r3
 8011cb6:	68b9      	ldr	r1, [r7, #8]
 8011cb8:	f002 ffd8 	bl	8014c6c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8011cbc:	68fb      	ldr	r3, [r7, #12]
 8011cbe:	685a      	ldr	r2, [r3, #4]
 8011cc0:	68fb      	ldr	r3, [r7, #12]
 8011cc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011cc4:	441a      	add	r2, r3
 8011cc6:	68fb      	ldr	r3, [r7, #12]
 8011cc8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8011cca:	68fb      	ldr	r3, [r7, #12]
 8011ccc:	685a      	ldr	r2, [r3, #4]
 8011cce:	68fb      	ldr	r3, [r7, #12]
 8011cd0:	689b      	ldr	r3, [r3, #8]
 8011cd2:	429a      	cmp	r2, r3
 8011cd4:	d32b      	bcc.n	8011d2e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8011cd6:	68fb      	ldr	r3, [r7, #12]
 8011cd8:	681a      	ldr	r2, [r3, #0]
 8011cda:	68fb      	ldr	r3, [r7, #12]
 8011cdc:	605a      	str	r2, [r3, #4]
 8011cde:	e026      	b.n	8011d2e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8011ce0:	68fb      	ldr	r3, [r7, #12]
 8011ce2:	68d8      	ldr	r0, [r3, #12]
 8011ce4:	68fb      	ldr	r3, [r7, #12]
 8011ce6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011ce8:	461a      	mov	r2, r3
 8011cea:	68b9      	ldr	r1, [r7, #8]
 8011cec:	f002 ffbe 	bl	8014c6c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8011cf0:	68fb      	ldr	r3, [r7, #12]
 8011cf2:	68da      	ldr	r2, [r3, #12]
 8011cf4:	68fb      	ldr	r3, [r7, #12]
 8011cf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011cf8:	425b      	negs	r3, r3
 8011cfa:	441a      	add	r2, r3
 8011cfc:	68fb      	ldr	r3, [r7, #12]
 8011cfe:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8011d00:	68fb      	ldr	r3, [r7, #12]
 8011d02:	68da      	ldr	r2, [r3, #12]
 8011d04:	68fb      	ldr	r3, [r7, #12]
 8011d06:	681b      	ldr	r3, [r3, #0]
 8011d08:	429a      	cmp	r2, r3
 8011d0a:	d207      	bcs.n	8011d1c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8011d0c:	68fb      	ldr	r3, [r7, #12]
 8011d0e:	689a      	ldr	r2, [r3, #8]
 8011d10:	68fb      	ldr	r3, [r7, #12]
 8011d12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011d14:	425b      	negs	r3, r3
 8011d16:	441a      	add	r2, r3
 8011d18:	68fb      	ldr	r3, [r7, #12]
 8011d1a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8011d1c:	687b      	ldr	r3, [r7, #4]
 8011d1e:	2b02      	cmp	r3, #2
 8011d20:	d105      	bne.n	8011d2e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8011d22:	693b      	ldr	r3, [r7, #16]
 8011d24:	2b00      	cmp	r3, #0
 8011d26:	d002      	beq.n	8011d2e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8011d28:	693b      	ldr	r3, [r7, #16]
 8011d2a:	3b01      	subs	r3, #1
 8011d2c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8011d2e:	693b      	ldr	r3, [r7, #16]
 8011d30:	1c5a      	adds	r2, r3, #1
 8011d32:	68fb      	ldr	r3, [r7, #12]
 8011d34:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8011d36:	697b      	ldr	r3, [r7, #20]
}
 8011d38:	4618      	mov	r0, r3
 8011d3a:	3718      	adds	r7, #24
 8011d3c:	46bd      	mov	sp, r7
 8011d3e:	bd80      	pop	{r7, pc}

08011d40 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8011d40:	b580      	push	{r7, lr}
 8011d42:	b082      	sub	sp, #8
 8011d44:	af00      	add	r7, sp, #0
 8011d46:	6078      	str	r0, [r7, #4]
 8011d48:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8011d4a:	687b      	ldr	r3, [r7, #4]
 8011d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011d4e:	2b00      	cmp	r3, #0
 8011d50:	d018      	beq.n	8011d84 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8011d52:	687b      	ldr	r3, [r7, #4]
 8011d54:	68da      	ldr	r2, [r3, #12]
 8011d56:	687b      	ldr	r3, [r7, #4]
 8011d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011d5a:	441a      	add	r2, r3
 8011d5c:	687b      	ldr	r3, [r7, #4]
 8011d5e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8011d60:	687b      	ldr	r3, [r7, #4]
 8011d62:	68da      	ldr	r2, [r3, #12]
 8011d64:	687b      	ldr	r3, [r7, #4]
 8011d66:	689b      	ldr	r3, [r3, #8]
 8011d68:	429a      	cmp	r2, r3
 8011d6a:	d303      	bcc.n	8011d74 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8011d6c:	687b      	ldr	r3, [r7, #4]
 8011d6e:	681a      	ldr	r2, [r3, #0]
 8011d70:	687b      	ldr	r3, [r7, #4]
 8011d72:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8011d74:	687b      	ldr	r3, [r7, #4]
 8011d76:	68d9      	ldr	r1, [r3, #12]
 8011d78:	687b      	ldr	r3, [r7, #4]
 8011d7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011d7c:	461a      	mov	r2, r3
 8011d7e:	6838      	ldr	r0, [r7, #0]
 8011d80:	f002 ff74 	bl	8014c6c <memcpy>
	}
}
 8011d84:	bf00      	nop
 8011d86:	3708      	adds	r7, #8
 8011d88:	46bd      	mov	sp, r7
 8011d8a:	bd80      	pop	{r7, pc}

08011d8c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8011d8c:	b580      	push	{r7, lr}
 8011d8e:	b084      	sub	sp, #16
 8011d90:	af00      	add	r7, sp, #0
 8011d92:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8011d94:	f001 fee6 	bl	8013b64 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8011d98:	687b      	ldr	r3, [r7, #4]
 8011d9a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8011d9e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8011da0:	e011      	b.n	8011dc6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8011da2:	687b      	ldr	r3, [r7, #4]
 8011da4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011da6:	2b00      	cmp	r3, #0
 8011da8:	d012      	beq.n	8011dd0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8011daa:	687b      	ldr	r3, [r7, #4]
 8011dac:	3324      	adds	r3, #36	; 0x24
 8011dae:	4618      	mov	r0, r3
 8011db0:	f000 fe18 	bl	80129e4 <xTaskRemoveFromEventList>
 8011db4:	4603      	mov	r3, r0
 8011db6:	2b00      	cmp	r3, #0
 8011db8:	d001      	beq.n	8011dbe <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8011dba:	f000 ff4f 	bl	8012c5c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8011dbe:	7bfb      	ldrb	r3, [r7, #15]
 8011dc0:	3b01      	subs	r3, #1
 8011dc2:	b2db      	uxtb	r3, r3
 8011dc4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8011dc6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011dca:	2b00      	cmp	r3, #0
 8011dcc:	dce9      	bgt.n	8011da2 <prvUnlockQueue+0x16>
 8011dce:	e000      	b.n	8011dd2 <prvUnlockQueue+0x46>
					break;
 8011dd0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8011dd2:	687b      	ldr	r3, [r7, #4]
 8011dd4:	22ff      	movs	r2, #255	; 0xff
 8011dd6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8011dda:	f001 fef3 	bl	8013bc4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8011dde:	f001 fec1 	bl	8013b64 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8011de2:	687b      	ldr	r3, [r7, #4]
 8011de4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8011de8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8011dea:	e011      	b.n	8011e10 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8011dec:	687b      	ldr	r3, [r7, #4]
 8011dee:	691b      	ldr	r3, [r3, #16]
 8011df0:	2b00      	cmp	r3, #0
 8011df2:	d012      	beq.n	8011e1a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8011df4:	687b      	ldr	r3, [r7, #4]
 8011df6:	3310      	adds	r3, #16
 8011df8:	4618      	mov	r0, r3
 8011dfa:	f000 fdf3 	bl	80129e4 <xTaskRemoveFromEventList>
 8011dfe:	4603      	mov	r3, r0
 8011e00:	2b00      	cmp	r3, #0
 8011e02:	d001      	beq.n	8011e08 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8011e04:	f000 ff2a 	bl	8012c5c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8011e08:	7bbb      	ldrb	r3, [r7, #14]
 8011e0a:	3b01      	subs	r3, #1
 8011e0c:	b2db      	uxtb	r3, r3
 8011e0e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8011e10:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8011e14:	2b00      	cmp	r3, #0
 8011e16:	dce9      	bgt.n	8011dec <prvUnlockQueue+0x60>
 8011e18:	e000      	b.n	8011e1c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8011e1a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8011e1c:	687b      	ldr	r3, [r7, #4]
 8011e1e:	22ff      	movs	r2, #255	; 0xff
 8011e20:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8011e24:	f001 fece 	bl	8013bc4 <vPortExitCritical>
}
 8011e28:	bf00      	nop
 8011e2a:	3710      	adds	r7, #16
 8011e2c:	46bd      	mov	sp, r7
 8011e2e:	bd80      	pop	{r7, pc}

08011e30 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8011e30:	b580      	push	{r7, lr}
 8011e32:	b084      	sub	sp, #16
 8011e34:	af00      	add	r7, sp, #0
 8011e36:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8011e38:	f001 fe94 	bl	8013b64 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8011e3c:	687b      	ldr	r3, [r7, #4]
 8011e3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011e40:	2b00      	cmp	r3, #0
 8011e42:	d102      	bne.n	8011e4a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8011e44:	2301      	movs	r3, #1
 8011e46:	60fb      	str	r3, [r7, #12]
 8011e48:	e001      	b.n	8011e4e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8011e4a:	2300      	movs	r3, #0
 8011e4c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8011e4e:	f001 feb9 	bl	8013bc4 <vPortExitCritical>

	return xReturn;
 8011e52:	68fb      	ldr	r3, [r7, #12]
}
 8011e54:	4618      	mov	r0, r3
 8011e56:	3710      	adds	r7, #16
 8011e58:	46bd      	mov	sp, r7
 8011e5a:	bd80      	pop	{r7, pc}

08011e5c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8011e5c:	b580      	push	{r7, lr}
 8011e5e:	b084      	sub	sp, #16
 8011e60:	af00      	add	r7, sp, #0
 8011e62:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8011e64:	f001 fe7e 	bl	8013b64 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8011e68:	687b      	ldr	r3, [r7, #4]
 8011e6a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8011e6c:	687b      	ldr	r3, [r7, #4]
 8011e6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011e70:	429a      	cmp	r2, r3
 8011e72:	d102      	bne.n	8011e7a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8011e74:	2301      	movs	r3, #1
 8011e76:	60fb      	str	r3, [r7, #12]
 8011e78:	e001      	b.n	8011e7e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8011e7a:	2300      	movs	r3, #0
 8011e7c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8011e7e:	f001 fea1 	bl	8013bc4 <vPortExitCritical>

	return xReturn;
 8011e82:	68fb      	ldr	r3, [r7, #12]
}
 8011e84:	4618      	mov	r0, r3
 8011e86:	3710      	adds	r7, #16
 8011e88:	46bd      	mov	sp, r7
 8011e8a:	bd80      	pop	{r7, pc}

08011e8c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8011e8c:	b480      	push	{r7}
 8011e8e:	b085      	sub	sp, #20
 8011e90:	af00      	add	r7, sp, #0
 8011e92:	6078      	str	r0, [r7, #4]
 8011e94:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8011e96:	2300      	movs	r3, #0
 8011e98:	60fb      	str	r3, [r7, #12]
 8011e9a:	e014      	b.n	8011ec6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8011e9c:	4a0f      	ldr	r2, [pc, #60]	; (8011edc <vQueueAddToRegistry+0x50>)
 8011e9e:	68fb      	ldr	r3, [r7, #12]
 8011ea0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8011ea4:	2b00      	cmp	r3, #0
 8011ea6:	d10b      	bne.n	8011ec0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8011ea8:	490c      	ldr	r1, [pc, #48]	; (8011edc <vQueueAddToRegistry+0x50>)
 8011eaa:	68fb      	ldr	r3, [r7, #12]
 8011eac:	683a      	ldr	r2, [r7, #0]
 8011eae:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8011eb2:	4a0a      	ldr	r2, [pc, #40]	; (8011edc <vQueueAddToRegistry+0x50>)
 8011eb4:	68fb      	ldr	r3, [r7, #12]
 8011eb6:	00db      	lsls	r3, r3, #3
 8011eb8:	4413      	add	r3, r2
 8011eba:	687a      	ldr	r2, [r7, #4]
 8011ebc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8011ebe:	e006      	b.n	8011ece <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8011ec0:	68fb      	ldr	r3, [r7, #12]
 8011ec2:	3301      	adds	r3, #1
 8011ec4:	60fb      	str	r3, [r7, #12]
 8011ec6:	68fb      	ldr	r3, [r7, #12]
 8011ec8:	2b07      	cmp	r3, #7
 8011eca:	d9e7      	bls.n	8011e9c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8011ecc:	bf00      	nop
 8011ece:	bf00      	nop
 8011ed0:	3714      	adds	r7, #20
 8011ed2:	46bd      	mov	sp, r7
 8011ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ed8:	4770      	bx	lr
 8011eda:	bf00      	nop
 8011edc:	2000218c 	.word	0x2000218c

08011ee0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8011ee0:	b580      	push	{r7, lr}
 8011ee2:	b086      	sub	sp, #24
 8011ee4:	af00      	add	r7, sp, #0
 8011ee6:	60f8      	str	r0, [r7, #12]
 8011ee8:	60b9      	str	r1, [r7, #8]
 8011eea:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8011eec:	68fb      	ldr	r3, [r7, #12]
 8011eee:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8011ef0:	f001 fe38 	bl	8013b64 <vPortEnterCritical>
 8011ef4:	697b      	ldr	r3, [r7, #20]
 8011ef6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8011efa:	b25b      	sxtb	r3, r3
 8011efc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011f00:	d103      	bne.n	8011f0a <vQueueWaitForMessageRestricted+0x2a>
 8011f02:	697b      	ldr	r3, [r7, #20]
 8011f04:	2200      	movs	r2, #0
 8011f06:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8011f0a:	697b      	ldr	r3, [r7, #20]
 8011f0c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8011f10:	b25b      	sxtb	r3, r3
 8011f12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011f16:	d103      	bne.n	8011f20 <vQueueWaitForMessageRestricted+0x40>
 8011f18:	697b      	ldr	r3, [r7, #20]
 8011f1a:	2200      	movs	r2, #0
 8011f1c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8011f20:	f001 fe50 	bl	8013bc4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8011f24:	697b      	ldr	r3, [r7, #20]
 8011f26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011f28:	2b00      	cmp	r3, #0
 8011f2a:	d106      	bne.n	8011f3a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8011f2c:	697b      	ldr	r3, [r7, #20]
 8011f2e:	3324      	adds	r3, #36	; 0x24
 8011f30:	687a      	ldr	r2, [r7, #4]
 8011f32:	68b9      	ldr	r1, [r7, #8]
 8011f34:	4618      	mov	r0, r3
 8011f36:	f000 fd29 	bl	801298c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8011f3a:	6978      	ldr	r0, [r7, #20]
 8011f3c:	f7ff ff26 	bl	8011d8c <prvUnlockQueue>
	}
 8011f40:	bf00      	nop
 8011f42:	3718      	adds	r7, #24
 8011f44:	46bd      	mov	sp, r7
 8011f46:	bd80      	pop	{r7, pc}

08011f48 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8011f48:	b580      	push	{r7, lr}
 8011f4a:	b08e      	sub	sp, #56	; 0x38
 8011f4c:	af04      	add	r7, sp, #16
 8011f4e:	60f8      	str	r0, [r7, #12]
 8011f50:	60b9      	str	r1, [r7, #8]
 8011f52:	607a      	str	r2, [r7, #4]
 8011f54:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8011f56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011f58:	2b00      	cmp	r3, #0
 8011f5a:	d10a      	bne.n	8011f72 <xTaskCreateStatic+0x2a>
	__asm volatile
 8011f5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011f60:	f383 8811 	msr	BASEPRI, r3
 8011f64:	f3bf 8f6f 	isb	sy
 8011f68:	f3bf 8f4f 	dsb	sy
 8011f6c:	623b      	str	r3, [r7, #32]
}
 8011f6e:	bf00      	nop
 8011f70:	e7fe      	b.n	8011f70 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8011f72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011f74:	2b00      	cmp	r3, #0
 8011f76:	d10a      	bne.n	8011f8e <xTaskCreateStatic+0x46>
	__asm volatile
 8011f78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011f7c:	f383 8811 	msr	BASEPRI, r3
 8011f80:	f3bf 8f6f 	isb	sy
 8011f84:	f3bf 8f4f 	dsb	sy
 8011f88:	61fb      	str	r3, [r7, #28]
}
 8011f8a:	bf00      	nop
 8011f8c:	e7fe      	b.n	8011f8c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8011f8e:	23a4      	movs	r3, #164	; 0xa4
 8011f90:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8011f92:	693b      	ldr	r3, [r7, #16]
 8011f94:	2ba4      	cmp	r3, #164	; 0xa4
 8011f96:	d00a      	beq.n	8011fae <xTaskCreateStatic+0x66>
	__asm volatile
 8011f98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011f9c:	f383 8811 	msr	BASEPRI, r3
 8011fa0:	f3bf 8f6f 	isb	sy
 8011fa4:	f3bf 8f4f 	dsb	sy
 8011fa8:	61bb      	str	r3, [r7, #24]
}
 8011faa:	bf00      	nop
 8011fac:	e7fe      	b.n	8011fac <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8011fae:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8011fb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011fb2:	2b00      	cmp	r3, #0
 8011fb4:	d01e      	beq.n	8011ff4 <xTaskCreateStatic+0xac>
 8011fb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011fb8:	2b00      	cmp	r3, #0
 8011fba:	d01b      	beq.n	8011ff4 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8011fbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011fbe:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8011fc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011fc2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011fc4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8011fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011fc8:	2202      	movs	r2, #2
 8011fca:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8011fce:	2300      	movs	r3, #0
 8011fd0:	9303      	str	r3, [sp, #12]
 8011fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011fd4:	9302      	str	r3, [sp, #8]
 8011fd6:	f107 0314 	add.w	r3, r7, #20
 8011fda:	9301      	str	r3, [sp, #4]
 8011fdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011fde:	9300      	str	r3, [sp, #0]
 8011fe0:	683b      	ldr	r3, [r7, #0]
 8011fe2:	687a      	ldr	r2, [r7, #4]
 8011fe4:	68b9      	ldr	r1, [r7, #8]
 8011fe6:	68f8      	ldr	r0, [r7, #12]
 8011fe8:	f000 f850 	bl	801208c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8011fec:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011fee:	f000 f8ef 	bl	80121d0 <prvAddNewTaskToReadyList>
 8011ff2:	e001      	b.n	8011ff8 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8011ff4:	2300      	movs	r3, #0
 8011ff6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8011ff8:	697b      	ldr	r3, [r7, #20]
	}
 8011ffa:	4618      	mov	r0, r3
 8011ffc:	3728      	adds	r7, #40	; 0x28
 8011ffe:	46bd      	mov	sp, r7
 8012000:	bd80      	pop	{r7, pc}

08012002 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8012002:	b580      	push	{r7, lr}
 8012004:	b08c      	sub	sp, #48	; 0x30
 8012006:	af04      	add	r7, sp, #16
 8012008:	60f8      	str	r0, [r7, #12]
 801200a:	60b9      	str	r1, [r7, #8]
 801200c:	603b      	str	r3, [r7, #0]
 801200e:	4613      	mov	r3, r2
 8012010:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8012012:	88fb      	ldrh	r3, [r7, #6]
 8012014:	009b      	lsls	r3, r3, #2
 8012016:	4618      	mov	r0, r3
 8012018:	f001 fec6 	bl	8013da8 <pvPortMalloc>
 801201c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 801201e:	697b      	ldr	r3, [r7, #20]
 8012020:	2b00      	cmp	r3, #0
 8012022:	d00e      	beq.n	8012042 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8012024:	20a4      	movs	r0, #164	; 0xa4
 8012026:	f001 febf 	bl	8013da8 <pvPortMalloc>
 801202a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 801202c:	69fb      	ldr	r3, [r7, #28]
 801202e:	2b00      	cmp	r3, #0
 8012030:	d003      	beq.n	801203a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8012032:	69fb      	ldr	r3, [r7, #28]
 8012034:	697a      	ldr	r2, [r7, #20]
 8012036:	631a      	str	r2, [r3, #48]	; 0x30
 8012038:	e005      	b.n	8012046 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 801203a:	6978      	ldr	r0, [r7, #20]
 801203c:	f001 ff80 	bl	8013f40 <vPortFree>
 8012040:	e001      	b.n	8012046 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8012042:	2300      	movs	r3, #0
 8012044:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8012046:	69fb      	ldr	r3, [r7, #28]
 8012048:	2b00      	cmp	r3, #0
 801204a:	d017      	beq.n	801207c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 801204c:	69fb      	ldr	r3, [r7, #28]
 801204e:	2200      	movs	r2, #0
 8012050:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8012054:	88fa      	ldrh	r2, [r7, #6]
 8012056:	2300      	movs	r3, #0
 8012058:	9303      	str	r3, [sp, #12]
 801205a:	69fb      	ldr	r3, [r7, #28]
 801205c:	9302      	str	r3, [sp, #8]
 801205e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012060:	9301      	str	r3, [sp, #4]
 8012062:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012064:	9300      	str	r3, [sp, #0]
 8012066:	683b      	ldr	r3, [r7, #0]
 8012068:	68b9      	ldr	r1, [r7, #8]
 801206a:	68f8      	ldr	r0, [r7, #12]
 801206c:	f000 f80e 	bl	801208c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8012070:	69f8      	ldr	r0, [r7, #28]
 8012072:	f000 f8ad 	bl	80121d0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8012076:	2301      	movs	r3, #1
 8012078:	61bb      	str	r3, [r7, #24]
 801207a:	e002      	b.n	8012082 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 801207c:	f04f 33ff 	mov.w	r3, #4294967295
 8012080:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8012082:	69bb      	ldr	r3, [r7, #24]
	}
 8012084:	4618      	mov	r0, r3
 8012086:	3720      	adds	r7, #32
 8012088:	46bd      	mov	sp, r7
 801208a:	bd80      	pop	{r7, pc}

0801208c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 801208c:	b580      	push	{r7, lr}
 801208e:	b088      	sub	sp, #32
 8012090:	af00      	add	r7, sp, #0
 8012092:	60f8      	str	r0, [r7, #12]
 8012094:	60b9      	str	r1, [r7, #8]
 8012096:	607a      	str	r2, [r7, #4]
 8012098:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 801209a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801209c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801209e:	687b      	ldr	r3, [r7, #4]
 80120a0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80120a4:	3b01      	subs	r3, #1
 80120a6:	009b      	lsls	r3, r3, #2
 80120a8:	4413      	add	r3, r2
 80120aa:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80120ac:	69bb      	ldr	r3, [r7, #24]
 80120ae:	f023 0307 	bic.w	r3, r3, #7
 80120b2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80120b4:	69bb      	ldr	r3, [r7, #24]
 80120b6:	f003 0307 	and.w	r3, r3, #7
 80120ba:	2b00      	cmp	r3, #0
 80120bc:	d00a      	beq.n	80120d4 <prvInitialiseNewTask+0x48>
	__asm volatile
 80120be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80120c2:	f383 8811 	msr	BASEPRI, r3
 80120c6:	f3bf 8f6f 	isb	sy
 80120ca:	f3bf 8f4f 	dsb	sy
 80120ce:	617b      	str	r3, [r7, #20]
}
 80120d0:	bf00      	nop
 80120d2:	e7fe      	b.n	80120d2 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80120d4:	68bb      	ldr	r3, [r7, #8]
 80120d6:	2b00      	cmp	r3, #0
 80120d8:	d01f      	beq.n	801211a <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80120da:	2300      	movs	r3, #0
 80120dc:	61fb      	str	r3, [r7, #28]
 80120de:	e012      	b.n	8012106 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80120e0:	68ba      	ldr	r2, [r7, #8]
 80120e2:	69fb      	ldr	r3, [r7, #28]
 80120e4:	4413      	add	r3, r2
 80120e6:	7819      	ldrb	r1, [r3, #0]
 80120e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80120ea:	69fb      	ldr	r3, [r7, #28]
 80120ec:	4413      	add	r3, r2
 80120ee:	3334      	adds	r3, #52	; 0x34
 80120f0:	460a      	mov	r2, r1
 80120f2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80120f4:	68ba      	ldr	r2, [r7, #8]
 80120f6:	69fb      	ldr	r3, [r7, #28]
 80120f8:	4413      	add	r3, r2
 80120fa:	781b      	ldrb	r3, [r3, #0]
 80120fc:	2b00      	cmp	r3, #0
 80120fe:	d006      	beq.n	801210e <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8012100:	69fb      	ldr	r3, [r7, #28]
 8012102:	3301      	adds	r3, #1
 8012104:	61fb      	str	r3, [r7, #28]
 8012106:	69fb      	ldr	r3, [r7, #28]
 8012108:	2b0f      	cmp	r3, #15
 801210a:	d9e9      	bls.n	80120e0 <prvInitialiseNewTask+0x54>
 801210c:	e000      	b.n	8012110 <prvInitialiseNewTask+0x84>
			{
				break;
 801210e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8012110:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012112:	2200      	movs	r2, #0
 8012114:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8012118:	e003      	b.n	8012122 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 801211a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801211c:	2200      	movs	r2, #0
 801211e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8012122:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012124:	2b06      	cmp	r3, #6
 8012126:	d901      	bls.n	801212c <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8012128:	2306      	movs	r3, #6
 801212a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 801212c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801212e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012130:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8012132:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012134:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012136:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8012138:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801213a:	2200      	movs	r2, #0
 801213c:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 801213e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012140:	3304      	adds	r3, #4
 8012142:	4618      	mov	r0, r3
 8012144:	f7ff f94a 	bl	80113dc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8012148:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801214a:	3318      	adds	r3, #24
 801214c:	4618      	mov	r0, r3
 801214e:	f7ff f945 	bl	80113dc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8012152:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012154:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012156:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012158:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801215a:	f1c3 0207 	rsb	r2, r3, #7
 801215e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012160:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8012162:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012164:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012166:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 8012168:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801216a:	2200      	movs	r2, #0
 801216c:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 801216e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012170:	2200      	movs	r2, #0
 8012172:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8012176:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012178:	2200      	movs	r2, #0
 801217a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 801217e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012180:	3350      	adds	r3, #80	; 0x50
 8012182:	224c      	movs	r2, #76	; 0x4c
 8012184:	2100      	movs	r1, #0
 8012186:	4618      	mov	r0, r3
 8012188:	f002 fcec 	bl	8014b64 <memset>
 801218c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801218e:	4a0d      	ldr	r2, [pc, #52]	; (80121c4 <prvInitialiseNewTask+0x138>)
 8012190:	655a      	str	r2, [r3, #84]	; 0x54
 8012192:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012194:	4a0c      	ldr	r2, [pc, #48]	; (80121c8 <prvInitialiseNewTask+0x13c>)
 8012196:	659a      	str	r2, [r3, #88]	; 0x58
 8012198:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801219a:	4a0c      	ldr	r2, [pc, #48]	; (80121cc <prvInitialiseNewTask+0x140>)
 801219c:	65da      	str	r2, [r3, #92]	; 0x5c
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 801219e:	683a      	ldr	r2, [r7, #0]
 80121a0:	68f9      	ldr	r1, [r7, #12]
 80121a2:	69b8      	ldr	r0, [r7, #24]
 80121a4:	f001 fbb0 	bl	8013908 <pxPortInitialiseStack>
 80121a8:	4602      	mov	r2, r0
 80121aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80121ac:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80121ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80121b0:	2b00      	cmp	r3, #0
 80121b2:	d002      	beq.n	80121ba <prvInitialiseNewTask+0x12e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80121b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80121b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80121b8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80121ba:	bf00      	nop
 80121bc:	3720      	adds	r7, #32
 80121be:	46bd      	mov	sp, r7
 80121c0:	bd80      	pop	{r7, pc}
 80121c2:	bf00      	nop
 80121c4:	20007b44 	.word	0x20007b44
 80121c8:	20007bac 	.word	0x20007bac
 80121cc:	20007c14 	.word	0x20007c14

080121d0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80121d0:	b580      	push	{r7, lr}
 80121d2:	b082      	sub	sp, #8
 80121d4:	af00      	add	r7, sp, #0
 80121d6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80121d8:	f001 fcc4 	bl	8013b64 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80121dc:	4b2a      	ldr	r3, [pc, #168]	; (8012288 <prvAddNewTaskToReadyList+0xb8>)
 80121de:	681b      	ldr	r3, [r3, #0]
 80121e0:	3301      	adds	r3, #1
 80121e2:	4a29      	ldr	r2, [pc, #164]	; (8012288 <prvAddNewTaskToReadyList+0xb8>)
 80121e4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80121e6:	4b29      	ldr	r3, [pc, #164]	; (801228c <prvAddNewTaskToReadyList+0xbc>)
 80121e8:	681b      	ldr	r3, [r3, #0]
 80121ea:	2b00      	cmp	r3, #0
 80121ec:	d109      	bne.n	8012202 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80121ee:	4a27      	ldr	r2, [pc, #156]	; (801228c <prvAddNewTaskToReadyList+0xbc>)
 80121f0:	687b      	ldr	r3, [r7, #4]
 80121f2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80121f4:	4b24      	ldr	r3, [pc, #144]	; (8012288 <prvAddNewTaskToReadyList+0xb8>)
 80121f6:	681b      	ldr	r3, [r3, #0]
 80121f8:	2b01      	cmp	r3, #1
 80121fa:	d110      	bne.n	801221e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80121fc:	f000 fd52 	bl	8012ca4 <prvInitialiseTaskLists>
 8012200:	e00d      	b.n	801221e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8012202:	4b23      	ldr	r3, [pc, #140]	; (8012290 <prvAddNewTaskToReadyList+0xc0>)
 8012204:	681b      	ldr	r3, [r3, #0]
 8012206:	2b00      	cmp	r3, #0
 8012208:	d109      	bne.n	801221e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 801220a:	4b20      	ldr	r3, [pc, #128]	; (801228c <prvAddNewTaskToReadyList+0xbc>)
 801220c:	681b      	ldr	r3, [r3, #0]
 801220e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012210:	687b      	ldr	r3, [r7, #4]
 8012212:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012214:	429a      	cmp	r2, r3
 8012216:	d802      	bhi.n	801221e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8012218:	4a1c      	ldr	r2, [pc, #112]	; (801228c <prvAddNewTaskToReadyList+0xbc>)
 801221a:	687b      	ldr	r3, [r7, #4]
 801221c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 801221e:	4b1d      	ldr	r3, [pc, #116]	; (8012294 <prvAddNewTaskToReadyList+0xc4>)
 8012220:	681b      	ldr	r3, [r3, #0]
 8012222:	3301      	adds	r3, #1
 8012224:	4a1b      	ldr	r2, [pc, #108]	; (8012294 <prvAddNewTaskToReadyList+0xc4>)
 8012226:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8012228:	687b      	ldr	r3, [r7, #4]
 801222a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801222c:	2201      	movs	r2, #1
 801222e:	409a      	lsls	r2, r3
 8012230:	4b19      	ldr	r3, [pc, #100]	; (8012298 <prvAddNewTaskToReadyList+0xc8>)
 8012232:	681b      	ldr	r3, [r3, #0]
 8012234:	4313      	orrs	r3, r2
 8012236:	4a18      	ldr	r2, [pc, #96]	; (8012298 <prvAddNewTaskToReadyList+0xc8>)
 8012238:	6013      	str	r3, [r2, #0]
 801223a:	687b      	ldr	r3, [r7, #4]
 801223c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801223e:	4613      	mov	r3, r2
 8012240:	009b      	lsls	r3, r3, #2
 8012242:	4413      	add	r3, r2
 8012244:	009b      	lsls	r3, r3, #2
 8012246:	4a15      	ldr	r2, [pc, #84]	; (801229c <prvAddNewTaskToReadyList+0xcc>)
 8012248:	441a      	add	r2, r3
 801224a:	687b      	ldr	r3, [r7, #4]
 801224c:	3304      	adds	r3, #4
 801224e:	4619      	mov	r1, r3
 8012250:	4610      	mov	r0, r2
 8012252:	f7ff f8d0 	bl	80113f6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8012256:	f001 fcb5 	bl	8013bc4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 801225a:	4b0d      	ldr	r3, [pc, #52]	; (8012290 <prvAddNewTaskToReadyList+0xc0>)
 801225c:	681b      	ldr	r3, [r3, #0]
 801225e:	2b00      	cmp	r3, #0
 8012260:	d00e      	beq.n	8012280 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8012262:	4b0a      	ldr	r3, [pc, #40]	; (801228c <prvAddNewTaskToReadyList+0xbc>)
 8012264:	681b      	ldr	r3, [r3, #0]
 8012266:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012268:	687b      	ldr	r3, [r7, #4]
 801226a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801226c:	429a      	cmp	r2, r3
 801226e:	d207      	bcs.n	8012280 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8012270:	4b0b      	ldr	r3, [pc, #44]	; (80122a0 <prvAddNewTaskToReadyList+0xd0>)
 8012272:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012276:	601a      	str	r2, [r3, #0]
 8012278:	f3bf 8f4f 	dsb	sy
 801227c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8012280:	bf00      	nop
 8012282:	3708      	adds	r7, #8
 8012284:	46bd      	mov	sp, r7
 8012286:	bd80      	pop	{r7, pc}
 8012288:	200022cc 	.word	0x200022cc
 801228c:	200021cc 	.word	0x200021cc
 8012290:	200022d8 	.word	0x200022d8
 8012294:	200022e8 	.word	0x200022e8
 8012298:	200022d4 	.word	0x200022d4
 801229c:	200021d0 	.word	0x200021d0
 80122a0:	e000ed04 	.word	0xe000ed04

080122a4 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 80122a4:	b580      	push	{r7, lr}
 80122a6:	b08a      	sub	sp, #40	; 0x28
 80122a8:	af00      	add	r7, sp, #0
 80122aa:	6078      	str	r0, [r7, #4]
 80122ac:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 80122ae:	2300      	movs	r3, #0
 80122b0:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 80122b2:	687b      	ldr	r3, [r7, #4]
 80122b4:	2b00      	cmp	r3, #0
 80122b6:	d10a      	bne.n	80122ce <vTaskDelayUntil+0x2a>
	__asm volatile
 80122b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80122bc:	f383 8811 	msr	BASEPRI, r3
 80122c0:	f3bf 8f6f 	isb	sy
 80122c4:	f3bf 8f4f 	dsb	sy
 80122c8:	617b      	str	r3, [r7, #20]
}
 80122ca:	bf00      	nop
 80122cc:	e7fe      	b.n	80122cc <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 80122ce:	683b      	ldr	r3, [r7, #0]
 80122d0:	2b00      	cmp	r3, #0
 80122d2:	d10a      	bne.n	80122ea <vTaskDelayUntil+0x46>
	__asm volatile
 80122d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80122d8:	f383 8811 	msr	BASEPRI, r3
 80122dc:	f3bf 8f6f 	isb	sy
 80122e0:	f3bf 8f4f 	dsb	sy
 80122e4:	613b      	str	r3, [r7, #16]
}
 80122e6:	bf00      	nop
 80122e8:	e7fe      	b.n	80122e8 <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 80122ea:	4b2a      	ldr	r3, [pc, #168]	; (8012394 <vTaskDelayUntil+0xf0>)
 80122ec:	681b      	ldr	r3, [r3, #0]
 80122ee:	2b00      	cmp	r3, #0
 80122f0:	d00a      	beq.n	8012308 <vTaskDelayUntil+0x64>
	__asm volatile
 80122f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80122f6:	f383 8811 	msr	BASEPRI, r3
 80122fa:	f3bf 8f6f 	isb	sy
 80122fe:	f3bf 8f4f 	dsb	sy
 8012302:	60fb      	str	r3, [r7, #12]
}
 8012304:	bf00      	nop
 8012306:	e7fe      	b.n	8012306 <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 8012308:	f000 f8f0 	bl	80124ec <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 801230c:	4b22      	ldr	r3, [pc, #136]	; (8012398 <vTaskDelayUntil+0xf4>)
 801230e:	681b      	ldr	r3, [r3, #0]
 8012310:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8012312:	687b      	ldr	r3, [r7, #4]
 8012314:	681b      	ldr	r3, [r3, #0]
 8012316:	683a      	ldr	r2, [r7, #0]
 8012318:	4413      	add	r3, r2
 801231a:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 801231c:	687b      	ldr	r3, [r7, #4]
 801231e:	681b      	ldr	r3, [r3, #0]
 8012320:	6a3a      	ldr	r2, [r7, #32]
 8012322:	429a      	cmp	r2, r3
 8012324:	d20b      	bcs.n	801233e <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8012326:	687b      	ldr	r3, [r7, #4]
 8012328:	681b      	ldr	r3, [r3, #0]
 801232a:	69fa      	ldr	r2, [r7, #28]
 801232c:	429a      	cmp	r2, r3
 801232e:	d211      	bcs.n	8012354 <vTaskDelayUntil+0xb0>
 8012330:	69fa      	ldr	r2, [r7, #28]
 8012332:	6a3b      	ldr	r3, [r7, #32]
 8012334:	429a      	cmp	r2, r3
 8012336:	d90d      	bls.n	8012354 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 8012338:	2301      	movs	r3, #1
 801233a:	627b      	str	r3, [r7, #36]	; 0x24
 801233c:	e00a      	b.n	8012354 <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 801233e:	687b      	ldr	r3, [r7, #4]
 8012340:	681b      	ldr	r3, [r3, #0]
 8012342:	69fa      	ldr	r2, [r7, #28]
 8012344:	429a      	cmp	r2, r3
 8012346:	d303      	bcc.n	8012350 <vTaskDelayUntil+0xac>
 8012348:	69fa      	ldr	r2, [r7, #28]
 801234a:	6a3b      	ldr	r3, [r7, #32]
 801234c:	429a      	cmp	r2, r3
 801234e:	d901      	bls.n	8012354 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 8012350:	2301      	movs	r3, #1
 8012352:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 8012354:	687b      	ldr	r3, [r7, #4]
 8012356:	69fa      	ldr	r2, [r7, #28]
 8012358:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 801235a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801235c:	2b00      	cmp	r3, #0
 801235e:	d006      	beq.n	801236e <vTaskDelayUntil+0xca>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8012360:	69fa      	ldr	r2, [r7, #28]
 8012362:	6a3b      	ldr	r3, [r7, #32]
 8012364:	1ad3      	subs	r3, r2, r3
 8012366:	2100      	movs	r1, #0
 8012368:	4618      	mov	r0, r3
 801236a:	f000 fef9 	bl	8013160 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 801236e:	f000 f8cb 	bl	8012508 <xTaskResumeAll>
 8012372:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8012374:	69bb      	ldr	r3, [r7, #24]
 8012376:	2b00      	cmp	r3, #0
 8012378:	d107      	bne.n	801238a <vTaskDelayUntil+0xe6>
		{
			portYIELD_WITHIN_API();
 801237a:	4b08      	ldr	r3, [pc, #32]	; (801239c <vTaskDelayUntil+0xf8>)
 801237c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012380:	601a      	str	r2, [r3, #0]
 8012382:	f3bf 8f4f 	dsb	sy
 8012386:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801238a:	bf00      	nop
 801238c:	3728      	adds	r7, #40	; 0x28
 801238e:	46bd      	mov	sp, r7
 8012390:	bd80      	pop	{r7, pc}
 8012392:	bf00      	nop
 8012394:	200022f4 	.word	0x200022f4
 8012398:	200022d0 	.word	0x200022d0
 801239c:	e000ed04 	.word	0xe000ed04

080123a0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80123a0:	b580      	push	{r7, lr}
 80123a2:	b084      	sub	sp, #16
 80123a4:	af00      	add	r7, sp, #0
 80123a6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80123a8:	2300      	movs	r3, #0
 80123aa:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80123ac:	687b      	ldr	r3, [r7, #4]
 80123ae:	2b00      	cmp	r3, #0
 80123b0:	d017      	beq.n	80123e2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80123b2:	4b13      	ldr	r3, [pc, #76]	; (8012400 <vTaskDelay+0x60>)
 80123b4:	681b      	ldr	r3, [r3, #0]
 80123b6:	2b00      	cmp	r3, #0
 80123b8:	d00a      	beq.n	80123d0 <vTaskDelay+0x30>
	__asm volatile
 80123ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80123be:	f383 8811 	msr	BASEPRI, r3
 80123c2:	f3bf 8f6f 	isb	sy
 80123c6:	f3bf 8f4f 	dsb	sy
 80123ca:	60bb      	str	r3, [r7, #8]
}
 80123cc:	bf00      	nop
 80123ce:	e7fe      	b.n	80123ce <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80123d0:	f000 f88c 	bl	80124ec <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80123d4:	2100      	movs	r1, #0
 80123d6:	6878      	ldr	r0, [r7, #4]
 80123d8:	f000 fec2 	bl	8013160 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80123dc:	f000 f894 	bl	8012508 <xTaskResumeAll>
 80123e0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80123e2:	68fb      	ldr	r3, [r7, #12]
 80123e4:	2b00      	cmp	r3, #0
 80123e6:	d107      	bne.n	80123f8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80123e8:	4b06      	ldr	r3, [pc, #24]	; (8012404 <vTaskDelay+0x64>)
 80123ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80123ee:	601a      	str	r2, [r3, #0]
 80123f0:	f3bf 8f4f 	dsb	sy
 80123f4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80123f8:	bf00      	nop
 80123fa:	3710      	adds	r7, #16
 80123fc:	46bd      	mov	sp, r7
 80123fe:	bd80      	pop	{r7, pc}
 8012400:	200022f4 	.word	0x200022f4
 8012404:	e000ed04 	.word	0xe000ed04

08012408 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8012408:	b580      	push	{r7, lr}
 801240a:	b08a      	sub	sp, #40	; 0x28
 801240c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 801240e:	2300      	movs	r3, #0
 8012410:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8012412:	2300      	movs	r3, #0
 8012414:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8012416:	463a      	mov	r2, r7
 8012418:	1d39      	adds	r1, r7, #4
 801241a:	f107 0308 	add.w	r3, r7, #8
 801241e:	4618      	mov	r0, r3
 8012420:	f7ef fde8 	bl	8001ff4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8012424:	6839      	ldr	r1, [r7, #0]
 8012426:	687b      	ldr	r3, [r7, #4]
 8012428:	68ba      	ldr	r2, [r7, #8]
 801242a:	9202      	str	r2, [sp, #8]
 801242c:	9301      	str	r3, [sp, #4]
 801242e:	2300      	movs	r3, #0
 8012430:	9300      	str	r3, [sp, #0]
 8012432:	2300      	movs	r3, #0
 8012434:	460a      	mov	r2, r1
 8012436:	4925      	ldr	r1, [pc, #148]	; (80124cc <vTaskStartScheduler+0xc4>)
 8012438:	4825      	ldr	r0, [pc, #148]	; (80124d0 <vTaskStartScheduler+0xc8>)
 801243a:	f7ff fd85 	bl	8011f48 <xTaskCreateStatic>
 801243e:	4603      	mov	r3, r0
 8012440:	4a24      	ldr	r2, [pc, #144]	; (80124d4 <vTaskStartScheduler+0xcc>)
 8012442:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8012444:	4b23      	ldr	r3, [pc, #140]	; (80124d4 <vTaskStartScheduler+0xcc>)
 8012446:	681b      	ldr	r3, [r3, #0]
 8012448:	2b00      	cmp	r3, #0
 801244a:	d002      	beq.n	8012452 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 801244c:	2301      	movs	r3, #1
 801244e:	617b      	str	r3, [r7, #20]
 8012450:	e001      	b.n	8012456 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8012452:	2300      	movs	r3, #0
 8012454:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8012456:	697b      	ldr	r3, [r7, #20]
 8012458:	2b01      	cmp	r3, #1
 801245a:	d102      	bne.n	8012462 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 801245c:	f000 fee6 	bl	801322c <xTimerCreateTimerTask>
 8012460:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8012462:	697b      	ldr	r3, [r7, #20]
 8012464:	2b01      	cmp	r3, #1
 8012466:	d11d      	bne.n	80124a4 <vTaskStartScheduler+0x9c>
	__asm volatile
 8012468:	f04f 0350 	mov.w	r3, #80	; 0x50
 801246c:	f383 8811 	msr	BASEPRI, r3
 8012470:	f3bf 8f6f 	isb	sy
 8012474:	f3bf 8f4f 	dsb	sy
 8012478:	613b      	str	r3, [r7, #16]
}
 801247a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 801247c:	4b16      	ldr	r3, [pc, #88]	; (80124d8 <vTaskStartScheduler+0xd0>)
 801247e:	681b      	ldr	r3, [r3, #0]
 8012480:	3350      	adds	r3, #80	; 0x50
 8012482:	4a16      	ldr	r2, [pc, #88]	; (80124dc <vTaskStartScheduler+0xd4>)
 8012484:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8012486:	4b16      	ldr	r3, [pc, #88]	; (80124e0 <vTaskStartScheduler+0xd8>)
 8012488:	f04f 32ff 	mov.w	r2, #4294967295
 801248c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 801248e:	4b15      	ldr	r3, [pc, #84]	; (80124e4 <vTaskStartScheduler+0xdc>)
 8012490:	2201      	movs	r2, #1
 8012492:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8012494:	4b14      	ldr	r3, [pc, #80]	; (80124e8 <vTaskStartScheduler+0xe0>)
 8012496:	2200      	movs	r2, #0
 8012498:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 801249a:	f7ef fd9b 	bl	8001fd4 <configureTimerForRunTimeStats>

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 801249e:	f001 fabf 	bl	8013a20 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80124a2:	e00e      	b.n	80124c2 <vTaskStartScheduler+0xba>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80124a4:	697b      	ldr	r3, [r7, #20]
 80124a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80124aa:	d10a      	bne.n	80124c2 <vTaskStartScheduler+0xba>
	__asm volatile
 80124ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80124b0:	f383 8811 	msr	BASEPRI, r3
 80124b4:	f3bf 8f6f 	isb	sy
 80124b8:	f3bf 8f4f 	dsb	sy
 80124bc:	60fb      	str	r3, [r7, #12]
}
 80124be:	bf00      	nop
 80124c0:	e7fe      	b.n	80124c0 <vTaskStartScheduler+0xb8>
}
 80124c2:	bf00      	nop
 80124c4:	3718      	adds	r7, #24
 80124c6:	46bd      	mov	sp, r7
 80124c8:	bd80      	pop	{r7, pc}
 80124ca:	bf00      	nop
 80124cc:	080169fc 	.word	0x080169fc
 80124d0:	08012c75 	.word	0x08012c75
 80124d4:	200022f0 	.word	0x200022f0
 80124d8:	200021cc 	.word	0x200021cc
 80124dc:	20000200 	.word	0x20000200
 80124e0:	200022ec 	.word	0x200022ec
 80124e4:	200022d8 	.word	0x200022d8
 80124e8:	200022d0 	.word	0x200022d0

080124ec <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80124ec:	b480      	push	{r7}
 80124ee:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80124f0:	4b04      	ldr	r3, [pc, #16]	; (8012504 <vTaskSuspendAll+0x18>)
 80124f2:	681b      	ldr	r3, [r3, #0]
 80124f4:	3301      	adds	r3, #1
 80124f6:	4a03      	ldr	r2, [pc, #12]	; (8012504 <vTaskSuspendAll+0x18>)
 80124f8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80124fa:	bf00      	nop
 80124fc:	46bd      	mov	sp, r7
 80124fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012502:	4770      	bx	lr
 8012504:	200022f4 	.word	0x200022f4

08012508 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8012508:	b580      	push	{r7, lr}
 801250a:	b084      	sub	sp, #16
 801250c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 801250e:	2300      	movs	r3, #0
 8012510:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8012512:	2300      	movs	r3, #0
 8012514:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8012516:	4b41      	ldr	r3, [pc, #260]	; (801261c <xTaskResumeAll+0x114>)
 8012518:	681b      	ldr	r3, [r3, #0]
 801251a:	2b00      	cmp	r3, #0
 801251c:	d10a      	bne.n	8012534 <xTaskResumeAll+0x2c>
	__asm volatile
 801251e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012522:	f383 8811 	msr	BASEPRI, r3
 8012526:	f3bf 8f6f 	isb	sy
 801252a:	f3bf 8f4f 	dsb	sy
 801252e:	603b      	str	r3, [r7, #0]
}
 8012530:	bf00      	nop
 8012532:	e7fe      	b.n	8012532 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8012534:	f001 fb16 	bl	8013b64 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8012538:	4b38      	ldr	r3, [pc, #224]	; (801261c <xTaskResumeAll+0x114>)
 801253a:	681b      	ldr	r3, [r3, #0]
 801253c:	3b01      	subs	r3, #1
 801253e:	4a37      	ldr	r2, [pc, #220]	; (801261c <xTaskResumeAll+0x114>)
 8012540:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8012542:	4b36      	ldr	r3, [pc, #216]	; (801261c <xTaskResumeAll+0x114>)
 8012544:	681b      	ldr	r3, [r3, #0]
 8012546:	2b00      	cmp	r3, #0
 8012548:	d161      	bne.n	801260e <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 801254a:	4b35      	ldr	r3, [pc, #212]	; (8012620 <xTaskResumeAll+0x118>)
 801254c:	681b      	ldr	r3, [r3, #0]
 801254e:	2b00      	cmp	r3, #0
 8012550:	d05d      	beq.n	801260e <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8012552:	e02e      	b.n	80125b2 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012554:	4b33      	ldr	r3, [pc, #204]	; (8012624 <xTaskResumeAll+0x11c>)
 8012556:	68db      	ldr	r3, [r3, #12]
 8012558:	68db      	ldr	r3, [r3, #12]
 801255a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801255c:	68fb      	ldr	r3, [r7, #12]
 801255e:	3318      	adds	r3, #24
 8012560:	4618      	mov	r0, r3
 8012562:	f7fe ffa5 	bl	80114b0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8012566:	68fb      	ldr	r3, [r7, #12]
 8012568:	3304      	adds	r3, #4
 801256a:	4618      	mov	r0, r3
 801256c:	f7fe ffa0 	bl	80114b0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8012570:	68fb      	ldr	r3, [r7, #12]
 8012572:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012574:	2201      	movs	r2, #1
 8012576:	409a      	lsls	r2, r3
 8012578:	4b2b      	ldr	r3, [pc, #172]	; (8012628 <xTaskResumeAll+0x120>)
 801257a:	681b      	ldr	r3, [r3, #0]
 801257c:	4313      	orrs	r3, r2
 801257e:	4a2a      	ldr	r2, [pc, #168]	; (8012628 <xTaskResumeAll+0x120>)
 8012580:	6013      	str	r3, [r2, #0]
 8012582:	68fb      	ldr	r3, [r7, #12]
 8012584:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012586:	4613      	mov	r3, r2
 8012588:	009b      	lsls	r3, r3, #2
 801258a:	4413      	add	r3, r2
 801258c:	009b      	lsls	r3, r3, #2
 801258e:	4a27      	ldr	r2, [pc, #156]	; (801262c <xTaskResumeAll+0x124>)
 8012590:	441a      	add	r2, r3
 8012592:	68fb      	ldr	r3, [r7, #12]
 8012594:	3304      	adds	r3, #4
 8012596:	4619      	mov	r1, r3
 8012598:	4610      	mov	r0, r2
 801259a:	f7fe ff2c 	bl	80113f6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801259e:	68fb      	ldr	r3, [r7, #12]
 80125a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80125a2:	4b23      	ldr	r3, [pc, #140]	; (8012630 <xTaskResumeAll+0x128>)
 80125a4:	681b      	ldr	r3, [r3, #0]
 80125a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80125a8:	429a      	cmp	r2, r3
 80125aa:	d302      	bcc.n	80125b2 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80125ac:	4b21      	ldr	r3, [pc, #132]	; (8012634 <xTaskResumeAll+0x12c>)
 80125ae:	2201      	movs	r2, #1
 80125b0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80125b2:	4b1c      	ldr	r3, [pc, #112]	; (8012624 <xTaskResumeAll+0x11c>)
 80125b4:	681b      	ldr	r3, [r3, #0]
 80125b6:	2b00      	cmp	r3, #0
 80125b8:	d1cc      	bne.n	8012554 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80125ba:	68fb      	ldr	r3, [r7, #12]
 80125bc:	2b00      	cmp	r3, #0
 80125be:	d001      	beq.n	80125c4 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80125c0:	f000 fc12 	bl	8012de8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80125c4:	4b1c      	ldr	r3, [pc, #112]	; (8012638 <xTaskResumeAll+0x130>)
 80125c6:	681b      	ldr	r3, [r3, #0]
 80125c8:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80125ca:	687b      	ldr	r3, [r7, #4]
 80125cc:	2b00      	cmp	r3, #0
 80125ce:	d010      	beq.n	80125f2 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80125d0:	f000 f846 	bl	8012660 <xTaskIncrementTick>
 80125d4:	4603      	mov	r3, r0
 80125d6:	2b00      	cmp	r3, #0
 80125d8:	d002      	beq.n	80125e0 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80125da:	4b16      	ldr	r3, [pc, #88]	; (8012634 <xTaskResumeAll+0x12c>)
 80125dc:	2201      	movs	r2, #1
 80125de:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80125e0:	687b      	ldr	r3, [r7, #4]
 80125e2:	3b01      	subs	r3, #1
 80125e4:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80125e6:	687b      	ldr	r3, [r7, #4]
 80125e8:	2b00      	cmp	r3, #0
 80125ea:	d1f1      	bne.n	80125d0 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 80125ec:	4b12      	ldr	r3, [pc, #72]	; (8012638 <xTaskResumeAll+0x130>)
 80125ee:	2200      	movs	r2, #0
 80125f0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80125f2:	4b10      	ldr	r3, [pc, #64]	; (8012634 <xTaskResumeAll+0x12c>)
 80125f4:	681b      	ldr	r3, [r3, #0]
 80125f6:	2b00      	cmp	r3, #0
 80125f8:	d009      	beq.n	801260e <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80125fa:	2301      	movs	r3, #1
 80125fc:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80125fe:	4b0f      	ldr	r3, [pc, #60]	; (801263c <xTaskResumeAll+0x134>)
 8012600:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012604:	601a      	str	r2, [r3, #0]
 8012606:	f3bf 8f4f 	dsb	sy
 801260a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 801260e:	f001 fad9 	bl	8013bc4 <vPortExitCritical>

	return xAlreadyYielded;
 8012612:	68bb      	ldr	r3, [r7, #8]
}
 8012614:	4618      	mov	r0, r3
 8012616:	3710      	adds	r7, #16
 8012618:	46bd      	mov	sp, r7
 801261a:	bd80      	pop	{r7, pc}
 801261c:	200022f4 	.word	0x200022f4
 8012620:	200022cc 	.word	0x200022cc
 8012624:	2000228c 	.word	0x2000228c
 8012628:	200022d4 	.word	0x200022d4
 801262c:	200021d0 	.word	0x200021d0
 8012630:	200021cc 	.word	0x200021cc
 8012634:	200022e0 	.word	0x200022e0
 8012638:	200022dc 	.word	0x200022dc
 801263c:	e000ed04 	.word	0xe000ed04

08012640 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8012640:	b480      	push	{r7}
 8012642:	b083      	sub	sp, #12
 8012644:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8012646:	4b05      	ldr	r3, [pc, #20]	; (801265c <xTaskGetTickCount+0x1c>)
 8012648:	681b      	ldr	r3, [r3, #0]
 801264a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 801264c:	687b      	ldr	r3, [r7, #4]
}
 801264e:	4618      	mov	r0, r3
 8012650:	370c      	adds	r7, #12
 8012652:	46bd      	mov	sp, r7
 8012654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012658:	4770      	bx	lr
 801265a:	bf00      	nop
 801265c:	200022d0 	.word	0x200022d0

08012660 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8012660:	b580      	push	{r7, lr}
 8012662:	b086      	sub	sp, #24
 8012664:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8012666:	2300      	movs	r3, #0
 8012668:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801266a:	4b4e      	ldr	r3, [pc, #312]	; (80127a4 <xTaskIncrementTick+0x144>)
 801266c:	681b      	ldr	r3, [r3, #0]
 801266e:	2b00      	cmp	r3, #0
 8012670:	f040 808e 	bne.w	8012790 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8012674:	4b4c      	ldr	r3, [pc, #304]	; (80127a8 <xTaskIncrementTick+0x148>)
 8012676:	681b      	ldr	r3, [r3, #0]
 8012678:	3301      	adds	r3, #1
 801267a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 801267c:	4a4a      	ldr	r2, [pc, #296]	; (80127a8 <xTaskIncrementTick+0x148>)
 801267e:	693b      	ldr	r3, [r7, #16]
 8012680:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8012682:	693b      	ldr	r3, [r7, #16]
 8012684:	2b00      	cmp	r3, #0
 8012686:	d120      	bne.n	80126ca <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8012688:	4b48      	ldr	r3, [pc, #288]	; (80127ac <xTaskIncrementTick+0x14c>)
 801268a:	681b      	ldr	r3, [r3, #0]
 801268c:	681b      	ldr	r3, [r3, #0]
 801268e:	2b00      	cmp	r3, #0
 8012690:	d00a      	beq.n	80126a8 <xTaskIncrementTick+0x48>
	__asm volatile
 8012692:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012696:	f383 8811 	msr	BASEPRI, r3
 801269a:	f3bf 8f6f 	isb	sy
 801269e:	f3bf 8f4f 	dsb	sy
 80126a2:	603b      	str	r3, [r7, #0]
}
 80126a4:	bf00      	nop
 80126a6:	e7fe      	b.n	80126a6 <xTaskIncrementTick+0x46>
 80126a8:	4b40      	ldr	r3, [pc, #256]	; (80127ac <xTaskIncrementTick+0x14c>)
 80126aa:	681b      	ldr	r3, [r3, #0]
 80126ac:	60fb      	str	r3, [r7, #12]
 80126ae:	4b40      	ldr	r3, [pc, #256]	; (80127b0 <xTaskIncrementTick+0x150>)
 80126b0:	681b      	ldr	r3, [r3, #0]
 80126b2:	4a3e      	ldr	r2, [pc, #248]	; (80127ac <xTaskIncrementTick+0x14c>)
 80126b4:	6013      	str	r3, [r2, #0]
 80126b6:	4a3e      	ldr	r2, [pc, #248]	; (80127b0 <xTaskIncrementTick+0x150>)
 80126b8:	68fb      	ldr	r3, [r7, #12]
 80126ba:	6013      	str	r3, [r2, #0]
 80126bc:	4b3d      	ldr	r3, [pc, #244]	; (80127b4 <xTaskIncrementTick+0x154>)
 80126be:	681b      	ldr	r3, [r3, #0]
 80126c0:	3301      	adds	r3, #1
 80126c2:	4a3c      	ldr	r2, [pc, #240]	; (80127b4 <xTaskIncrementTick+0x154>)
 80126c4:	6013      	str	r3, [r2, #0]
 80126c6:	f000 fb8f 	bl	8012de8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80126ca:	4b3b      	ldr	r3, [pc, #236]	; (80127b8 <xTaskIncrementTick+0x158>)
 80126cc:	681b      	ldr	r3, [r3, #0]
 80126ce:	693a      	ldr	r2, [r7, #16]
 80126d0:	429a      	cmp	r2, r3
 80126d2:	d348      	bcc.n	8012766 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80126d4:	4b35      	ldr	r3, [pc, #212]	; (80127ac <xTaskIncrementTick+0x14c>)
 80126d6:	681b      	ldr	r3, [r3, #0]
 80126d8:	681b      	ldr	r3, [r3, #0]
 80126da:	2b00      	cmp	r3, #0
 80126dc:	d104      	bne.n	80126e8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80126de:	4b36      	ldr	r3, [pc, #216]	; (80127b8 <xTaskIncrementTick+0x158>)
 80126e0:	f04f 32ff 	mov.w	r2, #4294967295
 80126e4:	601a      	str	r2, [r3, #0]
					break;
 80126e6:	e03e      	b.n	8012766 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80126e8:	4b30      	ldr	r3, [pc, #192]	; (80127ac <xTaskIncrementTick+0x14c>)
 80126ea:	681b      	ldr	r3, [r3, #0]
 80126ec:	68db      	ldr	r3, [r3, #12]
 80126ee:	68db      	ldr	r3, [r3, #12]
 80126f0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80126f2:	68bb      	ldr	r3, [r7, #8]
 80126f4:	685b      	ldr	r3, [r3, #4]
 80126f6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80126f8:	693a      	ldr	r2, [r7, #16]
 80126fa:	687b      	ldr	r3, [r7, #4]
 80126fc:	429a      	cmp	r2, r3
 80126fe:	d203      	bcs.n	8012708 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8012700:	4a2d      	ldr	r2, [pc, #180]	; (80127b8 <xTaskIncrementTick+0x158>)
 8012702:	687b      	ldr	r3, [r7, #4]
 8012704:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8012706:	e02e      	b.n	8012766 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8012708:	68bb      	ldr	r3, [r7, #8]
 801270a:	3304      	adds	r3, #4
 801270c:	4618      	mov	r0, r3
 801270e:	f7fe fecf 	bl	80114b0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8012712:	68bb      	ldr	r3, [r7, #8]
 8012714:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012716:	2b00      	cmp	r3, #0
 8012718:	d004      	beq.n	8012724 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801271a:	68bb      	ldr	r3, [r7, #8]
 801271c:	3318      	adds	r3, #24
 801271e:	4618      	mov	r0, r3
 8012720:	f7fe fec6 	bl	80114b0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8012724:	68bb      	ldr	r3, [r7, #8]
 8012726:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012728:	2201      	movs	r2, #1
 801272a:	409a      	lsls	r2, r3
 801272c:	4b23      	ldr	r3, [pc, #140]	; (80127bc <xTaskIncrementTick+0x15c>)
 801272e:	681b      	ldr	r3, [r3, #0]
 8012730:	4313      	orrs	r3, r2
 8012732:	4a22      	ldr	r2, [pc, #136]	; (80127bc <xTaskIncrementTick+0x15c>)
 8012734:	6013      	str	r3, [r2, #0]
 8012736:	68bb      	ldr	r3, [r7, #8]
 8012738:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801273a:	4613      	mov	r3, r2
 801273c:	009b      	lsls	r3, r3, #2
 801273e:	4413      	add	r3, r2
 8012740:	009b      	lsls	r3, r3, #2
 8012742:	4a1f      	ldr	r2, [pc, #124]	; (80127c0 <xTaskIncrementTick+0x160>)
 8012744:	441a      	add	r2, r3
 8012746:	68bb      	ldr	r3, [r7, #8]
 8012748:	3304      	adds	r3, #4
 801274a:	4619      	mov	r1, r3
 801274c:	4610      	mov	r0, r2
 801274e:	f7fe fe52 	bl	80113f6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8012752:	68bb      	ldr	r3, [r7, #8]
 8012754:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012756:	4b1b      	ldr	r3, [pc, #108]	; (80127c4 <xTaskIncrementTick+0x164>)
 8012758:	681b      	ldr	r3, [r3, #0]
 801275a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801275c:	429a      	cmp	r2, r3
 801275e:	d3b9      	bcc.n	80126d4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8012760:	2301      	movs	r3, #1
 8012762:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8012764:	e7b6      	b.n	80126d4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8012766:	4b17      	ldr	r3, [pc, #92]	; (80127c4 <xTaskIncrementTick+0x164>)
 8012768:	681b      	ldr	r3, [r3, #0]
 801276a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801276c:	4914      	ldr	r1, [pc, #80]	; (80127c0 <xTaskIncrementTick+0x160>)
 801276e:	4613      	mov	r3, r2
 8012770:	009b      	lsls	r3, r3, #2
 8012772:	4413      	add	r3, r2
 8012774:	009b      	lsls	r3, r3, #2
 8012776:	440b      	add	r3, r1
 8012778:	681b      	ldr	r3, [r3, #0]
 801277a:	2b01      	cmp	r3, #1
 801277c:	d901      	bls.n	8012782 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 801277e:	2301      	movs	r3, #1
 8012780:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8012782:	4b11      	ldr	r3, [pc, #68]	; (80127c8 <xTaskIncrementTick+0x168>)
 8012784:	681b      	ldr	r3, [r3, #0]
 8012786:	2b00      	cmp	r3, #0
 8012788:	d007      	beq.n	801279a <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 801278a:	2301      	movs	r3, #1
 801278c:	617b      	str	r3, [r7, #20]
 801278e:	e004      	b.n	801279a <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8012790:	4b0e      	ldr	r3, [pc, #56]	; (80127cc <xTaskIncrementTick+0x16c>)
 8012792:	681b      	ldr	r3, [r3, #0]
 8012794:	3301      	adds	r3, #1
 8012796:	4a0d      	ldr	r2, [pc, #52]	; (80127cc <xTaskIncrementTick+0x16c>)
 8012798:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 801279a:	697b      	ldr	r3, [r7, #20]
}
 801279c:	4618      	mov	r0, r3
 801279e:	3718      	adds	r7, #24
 80127a0:	46bd      	mov	sp, r7
 80127a2:	bd80      	pop	{r7, pc}
 80127a4:	200022f4 	.word	0x200022f4
 80127a8:	200022d0 	.word	0x200022d0
 80127ac:	20002284 	.word	0x20002284
 80127b0:	20002288 	.word	0x20002288
 80127b4:	200022e4 	.word	0x200022e4
 80127b8:	200022ec 	.word	0x200022ec
 80127bc:	200022d4 	.word	0x200022d4
 80127c0:	200021d0 	.word	0x200021d0
 80127c4:	200021cc 	.word	0x200021cc
 80127c8:	200022e0 	.word	0x200022e0
 80127cc:	200022dc 	.word	0x200022dc

080127d0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80127d0:	b580      	push	{r7, lr}
 80127d2:	b086      	sub	sp, #24
 80127d4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80127d6:	4b35      	ldr	r3, [pc, #212]	; (80128ac <vTaskSwitchContext+0xdc>)
 80127d8:	681b      	ldr	r3, [r3, #0]
 80127da:	2b00      	cmp	r3, #0
 80127dc:	d003      	beq.n	80127e6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80127de:	4b34      	ldr	r3, [pc, #208]	; (80128b0 <vTaskSwitchContext+0xe0>)
 80127e0:	2201      	movs	r2, #1
 80127e2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80127e4:	e05d      	b.n	80128a2 <vTaskSwitchContext+0xd2>
		xYieldPending = pdFALSE;
 80127e6:	4b32      	ldr	r3, [pc, #200]	; (80128b0 <vTaskSwitchContext+0xe0>)
 80127e8:	2200      	movs	r2, #0
 80127ea:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 80127ec:	f7ef fbf9 	bl	8001fe2 <getRunTimeCounterValue>
 80127f0:	4603      	mov	r3, r0
 80127f2:	4a30      	ldr	r2, [pc, #192]	; (80128b4 <vTaskSwitchContext+0xe4>)
 80127f4:	6013      	str	r3, [r2, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 80127f6:	4b2f      	ldr	r3, [pc, #188]	; (80128b4 <vTaskSwitchContext+0xe4>)
 80127f8:	681a      	ldr	r2, [r3, #0]
 80127fa:	4b2f      	ldr	r3, [pc, #188]	; (80128b8 <vTaskSwitchContext+0xe8>)
 80127fc:	681b      	ldr	r3, [r3, #0]
 80127fe:	429a      	cmp	r2, r3
 8012800:	d909      	bls.n	8012816 <vTaskSwitchContext+0x46>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 8012802:	4b2e      	ldr	r3, [pc, #184]	; (80128bc <vTaskSwitchContext+0xec>)
 8012804:	681b      	ldr	r3, [r3, #0]
 8012806:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8012808:	4a2a      	ldr	r2, [pc, #168]	; (80128b4 <vTaskSwitchContext+0xe4>)
 801280a:	6810      	ldr	r0, [r2, #0]
 801280c:	4a2a      	ldr	r2, [pc, #168]	; (80128b8 <vTaskSwitchContext+0xe8>)
 801280e:	6812      	ldr	r2, [r2, #0]
 8012810:	1a82      	subs	r2, r0, r2
 8012812:	440a      	add	r2, r1
 8012814:	64da      	str	r2, [r3, #76]	; 0x4c
			ulTaskSwitchedInTime = ulTotalRunTime;
 8012816:	4b27      	ldr	r3, [pc, #156]	; (80128b4 <vTaskSwitchContext+0xe4>)
 8012818:	681b      	ldr	r3, [r3, #0]
 801281a:	4a27      	ldr	r2, [pc, #156]	; (80128b8 <vTaskSwitchContext+0xe8>)
 801281c:	6013      	str	r3, [r2, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801281e:	4b28      	ldr	r3, [pc, #160]	; (80128c0 <vTaskSwitchContext+0xf0>)
 8012820:	681b      	ldr	r3, [r3, #0]
 8012822:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8012824:	68fb      	ldr	r3, [r7, #12]
 8012826:	fab3 f383 	clz	r3, r3
 801282a:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 801282c:	7afb      	ldrb	r3, [r7, #11]
 801282e:	f1c3 031f 	rsb	r3, r3, #31
 8012832:	617b      	str	r3, [r7, #20]
 8012834:	4923      	ldr	r1, [pc, #140]	; (80128c4 <vTaskSwitchContext+0xf4>)
 8012836:	697a      	ldr	r2, [r7, #20]
 8012838:	4613      	mov	r3, r2
 801283a:	009b      	lsls	r3, r3, #2
 801283c:	4413      	add	r3, r2
 801283e:	009b      	lsls	r3, r3, #2
 8012840:	440b      	add	r3, r1
 8012842:	681b      	ldr	r3, [r3, #0]
 8012844:	2b00      	cmp	r3, #0
 8012846:	d10a      	bne.n	801285e <vTaskSwitchContext+0x8e>
	__asm volatile
 8012848:	f04f 0350 	mov.w	r3, #80	; 0x50
 801284c:	f383 8811 	msr	BASEPRI, r3
 8012850:	f3bf 8f6f 	isb	sy
 8012854:	f3bf 8f4f 	dsb	sy
 8012858:	607b      	str	r3, [r7, #4]
}
 801285a:	bf00      	nop
 801285c:	e7fe      	b.n	801285c <vTaskSwitchContext+0x8c>
 801285e:	697a      	ldr	r2, [r7, #20]
 8012860:	4613      	mov	r3, r2
 8012862:	009b      	lsls	r3, r3, #2
 8012864:	4413      	add	r3, r2
 8012866:	009b      	lsls	r3, r3, #2
 8012868:	4a16      	ldr	r2, [pc, #88]	; (80128c4 <vTaskSwitchContext+0xf4>)
 801286a:	4413      	add	r3, r2
 801286c:	613b      	str	r3, [r7, #16]
 801286e:	693b      	ldr	r3, [r7, #16]
 8012870:	685b      	ldr	r3, [r3, #4]
 8012872:	685a      	ldr	r2, [r3, #4]
 8012874:	693b      	ldr	r3, [r7, #16]
 8012876:	605a      	str	r2, [r3, #4]
 8012878:	693b      	ldr	r3, [r7, #16]
 801287a:	685a      	ldr	r2, [r3, #4]
 801287c:	693b      	ldr	r3, [r7, #16]
 801287e:	3308      	adds	r3, #8
 8012880:	429a      	cmp	r2, r3
 8012882:	d104      	bne.n	801288e <vTaskSwitchContext+0xbe>
 8012884:	693b      	ldr	r3, [r7, #16]
 8012886:	685b      	ldr	r3, [r3, #4]
 8012888:	685a      	ldr	r2, [r3, #4]
 801288a:	693b      	ldr	r3, [r7, #16]
 801288c:	605a      	str	r2, [r3, #4]
 801288e:	693b      	ldr	r3, [r7, #16]
 8012890:	685b      	ldr	r3, [r3, #4]
 8012892:	68db      	ldr	r3, [r3, #12]
 8012894:	4a09      	ldr	r2, [pc, #36]	; (80128bc <vTaskSwitchContext+0xec>)
 8012896:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8012898:	4b08      	ldr	r3, [pc, #32]	; (80128bc <vTaskSwitchContext+0xec>)
 801289a:	681b      	ldr	r3, [r3, #0]
 801289c:	3350      	adds	r3, #80	; 0x50
 801289e:	4a0a      	ldr	r2, [pc, #40]	; (80128c8 <vTaskSwitchContext+0xf8>)
 80128a0:	6013      	str	r3, [r2, #0]
}
 80128a2:	bf00      	nop
 80128a4:	3718      	adds	r7, #24
 80128a6:	46bd      	mov	sp, r7
 80128a8:	bd80      	pop	{r7, pc}
 80128aa:	bf00      	nop
 80128ac:	200022f4 	.word	0x200022f4
 80128b0:	200022e0 	.word	0x200022e0
 80128b4:	200022fc 	.word	0x200022fc
 80128b8:	200022f8 	.word	0x200022f8
 80128bc:	200021cc 	.word	0x200021cc
 80128c0:	200022d4 	.word	0x200022d4
 80128c4:	200021d0 	.word	0x200021d0
 80128c8:	20000200 	.word	0x20000200

080128cc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80128cc:	b580      	push	{r7, lr}
 80128ce:	b084      	sub	sp, #16
 80128d0:	af00      	add	r7, sp, #0
 80128d2:	6078      	str	r0, [r7, #4]
 80128d4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80128d6:	687b      	ldr	r3, [r7, #4]
 80128d8:	2b00      	cmp	r3, #0
 80128da:	d10a      	bne.n	80128f2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80128dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80128e0:	f383 8811 	msr	BASEPRI, r3
 80128e4:	f3bf 8f6f 	isb	sy
 80128e8:	f3bf 8f4f 	dsb	sy
 80128ec:	60fb      	str	r3, [r7, #12]
}
 80128ee:	bf00      	nop
 80128f0:	e7fe      	b.n	80128f0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80128f2:	4b07      	ldr	r3, [pc, #28]	; (8012910 <vTaskPlaceOnEventList+0x44>)
 80128f4:	681b      	ldr	r3, [r3, #0]
 80128f6:	3318      	adds	r3, #24
 80128f8:	4619      	mov	r1, r3
 80128fa:	6878      	ldr	r0, [r7, #4]
 80128fc:	f7fe fd9f 	bl	801143e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8012900:	2101      	movs	r1, #1
 8012902:	6838      	ldr	r0, [r7, #0]
 8012904:	f000 fc2c 	bl	8013160 <prvAddCurrentTaskToDelayedList>
}
 8012908:	bf00      	nop
 801290a:	3710      	adds	r7, #16
 801290c:	46bd      	mov	sp, r7
 801290e:	bd80      	pop	{r7, pc}
 8012910:	200021cc 	.word	0x200021cc

08012914 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 8012914:	b580      	push	{r7, lr}
 8012916:	b086      	sub	sp, #24
 8012918:	af00      	add	r7, sp, #0
 801291a:	60f8      	str	r0, [r7, #12]
 801291c:	60b9      	str	r1, [r7, #8]
 801291e:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 8012920:	68fb      	ldr	r3, [r7, #12]
 8012922:	2b00      	cmp	r3, #0
 8012924:	d10a      	bne.n	801293c <vTaskPlaceOnUnorderedEventList+0x28>
	__asm volatile
 8012926:	f04f 0350 	mov.w	r3, #80	; 0x50
 801292a:	f383 8811 	msr	BASEPRI, r3
 801292e:	f3bf 8f6f 	isb	sy
 8012932:	f3bf 8f4f 	dsb	sy
 8012936:	617b      	str	r3, [r7, #20]
}
 8012938:	bf00      	nop
 801293a:	e7fe      	b.n	801293a <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 801293c:	4b11      	ldr	r3, [pc, #68]	; (8012984 <vTaskPlaceOnUnorderedEventList+0x70>)
 801293e:	681b      	ldr	r3, [r3, #0]
 8012940:	2b00      	cmp	r3, #0
 8012942:	d10a      	bne.n	801295a <vTaskPlaceOnUnorderedEventList+0x46>
	__asm volatile
 8012944:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012948:	f383 8811 	msr	BASEPRI, r3
 801294c:	f3bf 8f6f 	isb	sy
 8012950:	f3bf 8f4f 	dsb	sy
 8012954:	613b      	str	r3, [r7, #16]
}
 8012956:	bf00      	nop
 8012958:	e7fe      	b.n	8012958 <vTaskPlaceOnUnorderedEventList+0x44>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 801295a:	4b0b      	ldr	r3, [pc, #44]	; (8012988 <vTaskPlaceOnUnorderedEventList+0x74>)
 801295c:	681b      	ldr	r3, [r3, #0]
 801295e:	68ba      	ldr	r2, [r7, #8]
 8012960:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8012964:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8012966:	4b08      	ldr	r3, [pc, #32]	; (8012988 <vTaskPlaceOnUnorderedEventList+0x74>)
 8012968:	681b      	ldr	r3, [r3, #0]
 801296a:	3318      	adds	r3, #24
 801296c:	4619      	mov	r1, r3
 801296e:	68f8      	ldr	r0, [r7, #12]
 8012970:	f7fe fd41 	bl	80113f6 <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8012974:	2101      	movs	r1, #1
 8012976:	6878      	ldr	r0, [r7, #4]
 8012978:	f000 fbf2 	bl	8013160 <prvAddCurrentTaskToDelayedList>
}
 801297c:	bf00      	nop
 801297e:	3718      	adds	r7, #24
 8012980:	46bd      	mov	sp, r7
 8012982:	bd80      	pop	{r7, pc}
 8012984:	200022f4 	.word	0x200022f4
 8012988:	200021cc 	.word	0x200021cc

0801298c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 801298c:	b580      	push	{r7, lr}
 801298e:	b086      	sub	sp, #24
 8012990:	af00      	add	r7, sp, #0
 8012992:	60f8      	str	r0, [r7, #12]
 8012994:	60b9      	str	r1, [r7, #8]
 8012996:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8012998:	68fb      	ldr	r3, [r7, #12]
 801299a:	2b00      	cmp	r3, #0
 801299c:	d10a      	bne.n	80129b4 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 801299e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80129a2:	f383 8811 	msr	BASEPRI, r3
 80129a6:	f3bf 8f6f 	isb	sy
 80129aa:	f3bf 8f4f 	dsb	sy
 80129ae:	617b      	str	r3, [r7, #20]
}
 80129b0:	bf00      	nop
 80129b2:	e7fe      	b.n	80129b2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80129b4:	4b0a      	ldr	r3, [pc, #40]	; (80129e0 <vTaskPlaceOnEventListRestricted+0x54>)
 80129b6:	681b      	ldr	r3, [r3, #0]
 80129b8:	3318      	adds	r3, #24
 80129ba:	4619      	mov	r1, r3
 80129bc:	68f8      	ldr	r0, [r7, #12]
 80129be:	f7fe fd1a 	bl	80113f6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80129c2:	687b      	ldr	r3, [r7, #4]
 80129c4:	2b00      	cmp	r3, #0
 80129c6:	d002      	beq.n	80129ce <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80129c8:	f04f 33ff 	mov.w	r3, #4294967295
 80129cc:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80129ce:	6879      	ldr	r1, [r7, #4]
 80129d0:	68b8      	ldr	r0, [r7, #8]
 80129d2:	f000 fbc5 	bl	8013160 <prvAddCurrentTaskToDelayedList>
	}
 80129d6:	bf00      	nop
 80129d8:	3718      	adds	r7, #24
 80129da:	46bd      	mov	sp, r7
 80129dc:	bd80      	pop	{r7, pc}
 80129de:	bf00      	nop
 80129e0:	200021cc 	.word	0x200021cc

080129e4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80129e4:	b580      	push	{r7, lr}
 80129e6:	b086      	sub	sp, #24
 80129e8:	af00      	add	r7, sp, #0
 80129ea:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80129ec:	687b      	ldr	r3, [r7, #4]
 80129ee:	68db      	ldr	r3, [r3, #12]
 80129f0:	68db      	ldr	r3, [r3, #12]
 80129f2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80129f4:	693b      	ldr	r3, [r7, #16]
 80129f6:	2b00      	cmp	r3, #0
 80129f8:	d10a      	bne.n	8012a10 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80129fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80129fe:	f383 8811 	msr	BASEPRI, r3
 8012a02:	f3bf 8f6f 	isb	sy
 8012a06:	f3bf 8f4f 	dsb	sy
 8012a0a:	60fb      	str	r3, [r7, #12]
}
 8012a0c:	bf00      	nop
 8012a0e:	e7fe      	b.n	8012a0e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8012a10:	693b      	ldr	r3, [r7, #16]
 8012a12:	3318      	adds	r3, #24
 8012a14:	4618      	mov	r0, r3
 8012a16:	f7fe fd4b 	bl	80114b0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8012a1a:	4b1d      	ldr	r3, [pc, #116]	; (8012a90 <xTaskRemoveFromEventList+0xac>)
 8012a1c:	681b      	ldr	r3, [r3, #0]
 8012a1e:	2b00      	cmp	r3, #0
 8012a20:	d11c      	bne.n	8012a5c <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8012a22:	693b      	ldr	r3, [r7, #16]
 8012a24:	3304      	adds	r3, #4
 8012a26:	4618      	mov	r0, r3
 8012a28:	f7fe fd42 	bl	80114b0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8012a2c:	693b      	ldr	r3, [r7, #16]
 8012a2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012a30:	2201      	movs	r2, #1
 8012a32:	409a      	lsls	r2, r3
 8012a34:	4b17      	ldr	r3, [pc, #92]	; (8012a94 <xTaskRemoveFromEventList+0xb0>)
 8012a36:	681b      	ldr	r3, [r3, #0]
 8012a38:	4313      	orrs	r3, r2
 8012a3a:	4a16      	ldr	r2, [pc, #88]	; (8012a94 <xTaskRemoveFromEventList+0xb0>)
 8012a3c:	6013      	str	r3, [r2, #0]
 8012a3e:	693b      	ldr	r3, [r7, #16]
 8012a40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012a42:	4613      	mov	r3, r2
 8012a44:	009b      	lsls	r3, r3, #2
 8012a46:	4413      	add	r3, r2
 8012a48:	009b      	lsls	r3, r3, #2
 8012a4a:	4a13      	ldr	r2, [pc, #76]	; (8012a98 <xTaskRemoveFromEventList+0xb4>)
 8012a4c:	441a      	add	r2, r3
 8012a4e:	693b      	ldr	r3, [r7, #16]
 8012a50:	3304      	adds	r3, #4
 8012a52:	4619      	mov	r1, r3
 8012a54:	4610      	mov	r0, r2
 8012a56:	f7fe fcce 	bl	80113f6 <vListInsertEnd>
 8012a5a:	e005      	b.n	8012a68 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8012a5c:	693b      	ldr	r3, [r7, #16]
 8012a5e:	3318      	adds	r3, #24
 8012a60:	4619      	mov	r1, r3
 8012a62:	480e      	ldr	r0, [pc, #56]	; (8012a9c <xTaskRemoveFromEventList+0xb8>)
 8012a64:	f7fe fcc7 	bl	80113f6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8012a68:	693b      	ldr	r3, [r7, #16]
 8012a6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012a6c:	4b0c      	ldr	r3, [pc, #48]	; (8012aa0 <xTaskRemoveFromEventList+0xbc>)
 8012a6e:	681b      	ldr	r3, [r3, #0]
 8012a70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012a72:	429a      	cmp	r2, r3
 8012a74:	d905      	bls.n	8012a82 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8012a76:	2301      	movs	r3, #1
 8012a78:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8012a7a:	4b0a      	ldr	r3, [pc, #40]	; (8012aa4 <xTaskRemoveFromEventList+0xc0>)
 8012a7c:	2201      	movs	r2, #1
 8012a7e:	601a      	str	r2, [r3, #0]
 8012a80:	e001      	b.n	8012a86 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8012a82:	2300      	movs	r3, #0
 8012a84:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8012a86:	697b      	ldr	r3, [r7, #20]
}
 8012a88:	4618      	mov	r0, r3
 8012a8a:	3718      	adds	r7, #24
 8012a8c:	46bd      	mov	sp, r7
 8012a8e:	bd80      	pop	{r7, pc}
 8012a90:	200022f4 	.word	0x200022f4
 8012a94:	200022d4 	.word	0x200022d4
 8012a98:	200021d0 	.word	0x200021d0
 8012a9c:	2000228c 	.word	0x2000228c
 8012aa0:	200021cc 	.word	0x200021cc
 8012aa4:	200022e0 	.word	0x200022e0

08012aa8 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 8012aa8:	b580      	push	{r7, lr}
 8012aaa:	b086      	sub	sp, #24
 8012aac:	af00      	add	r7, sp, #0
 8012aae:	6078      	str	r0, [r7, #4]
 8012ab0:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 8012ab2:	4b29      	ldr	r3, [pc, #164]	; (8012b58 <vTaskRemoveFromUnorderedEventList+0xb0>)
 8012ab4:	681b      	ldr	r3, [r3, #0]
 8012ab6:	2b00      	cmp	r3, #0
 8012ab8:	d10a      	bne.n	8012ad0 <vTaskRemoveFromUnorderedEventList+0x28>
	__asm volatile
 8012aba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012abe:	f383 8811 	msr	BASEPRI, r3
 8012ac2:	f3bf 8f6f 	isb	sy
 8012ac6:	f3bf 8f4f 	dsb	sy
 8012aca:	613b      	str	r3, [r7, #16]
}
 8012acc:	bf00      	nop
 8012ace:	e7fe      	b.n	8012ace <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8012ad0:	683b      	ldr	r3, [r7, #0]
 8012ad2:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8012ad6:	687b      	ldr	r3, [r7, #4]
 8012ad8:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012ada:	687b      	ldr	r3, [r7, #4]
 8012adc:	68db      	ldr	r3, [r3, #12]
 8012ade:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 8012ae0:	697b      	ldr	r3, [r7, #20]
 8012ae2:	2b00      	cmp	r3, #0
 8012ae4:	d10a      	bne.n	8012afc <vTaskRemoveFromUnorderedEventList+0x54>
	__asm volatile
 8012ae6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012aea:	f383 8811 	msr	BASEPRI, r3
 8012aee:	f3bf 8f6f 	isb	sy
 8012af2:	f3bf 8f4f 	dsb	sy
 8012af6:	60fb      	str	r3, [r7, #12]
}
 8012af8:	bf00      	nop
 8012afa:	e7fe      	b.n	8012afa <vTaskRemoveFromUnorderedEventList+0x52>
	( void ) uxListRemove( pxEventListItem );
 8012afc:	6878      	ldr	r0, [r7, #4]
 8012afe:	f7fe fcd7 	bl	80114b0 <uxListRemove>
	#endif

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8012b02:	697b      	ldr	r3, [r7, #20]
 8012b04:	3304      	adds	r3, #4
 8012b06:	4618      	mov	r0, r3
 8012b08:	f7fe fcd2 	bl	80114b0 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 8012b0c:	697b      	ldr	r3, [r7, #20]
 8012b0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012b10:	2201      	movs	r2, #1
 8012b12:	409a      	lsls	r2, r3
 8012b14:	4b11      	ldr	r3, [pc, #68]	; (8012b5c <vTaskRemoveFromUnorderedEventList+0xb4>)
 8012b16:	681b      	ldr	r3, [r3, #0]
 8012b18:	4313      	orrs	r3, r2
 8012b1a:	4a10      	ldr	r2, [pc, #64]	; (8012b5c <vTaskRemoveFromUnorderedEventList+0xb4>)
 8012b1c:	6013      	str	r3, [r2, #0]
 8012b1e:	697b      	ldr	r3, [r7, #20]
 8012b20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012b22:	4613      	mov	r3, r2
 8012b24:	009b      	lsls	r3, r3, #2
 8012b26:	4413      	add	r3, r2
 8012b28:	009b      	lsls	r3, r3, #2
 8012b2a:	4a0d      	ldr	r2, [pc, #52]	; (8012b60 <vTaskRemoveFromUnorderedEventList+0xb8>)
 8012b2c:	441a      	add	r2, r3
 8012b2e:	697b      	ldr	r3, [r7, #20]
 8012b30:	3304      	adds	r3, #4
 8012b32:	4619      	mov	r1, r3
 8012b34:	4610      	mov	r0, r2
 8012b36:	f7fe fc5e 	bl	80113f6 <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8012b3a:	697b      	ldr	r3, [r7, #20]
 8012b3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012b3e:	4b09      	ldr	r3, [pc, #36]	; (8012b64 <vTaskRemoveFromUnorderedEventList+0xbc>)
 8012b40:	681b      	ldr	r3, [r3, #0]
 8012b42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012b44:	429a      	cmp	r2, r3
 8012b46:	d902      	bls.n	8012b4e <vTaskRemoveFromUnorderedEventList+0xa6>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 8012b48:	4b07      	ldr	r3, [pc, #28]	; (8012b68 <vTaskRemoveFromUnorderedEventList+0xc0>)
 8012b4a:	2201      	movs	r2, #1
 8012b4c:	601a      	str	r2, [r3, #0]
	}
}
 8012b4e:	bf00      	nop
 8012b50:	3718      	adds	r7, #24
 8012b52:	46bd      	mov	sp, r7
 8012b54:	bd80      	pop	{r7, pc}
 8012b56:	bf00      	nop
 8012b58:	200022f4 	.word	0x200022f4
 8012b5c:	200022d4 	.word	0x200022d4
 8012b60:	200021d0 	.word	0x200021d0
 8012b64:	200021cc 	.word	0x200021cc
 8012b68:	200022e0 	.word	0x200022e0

08012b6c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8012b6c:	b480      	push	{r7}
 8012b6e:	b083      	sub	sp, #12
 8012b70:	af00      	add	r7, sp, #0
 8012b72:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8012b74:	4b06      	ldr	r3, [pc, #24]	; (8012b90 <vTaskInternalSetTimeOutState+0x24>)
 8012b76:	681a      	ldr	r2, [r3, #0]
 8012b78:	687b      	ldr	r3, [r7, #4]
 8012b7a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8012b7c:	4b05      	ldr	r3, [pc, #20]	; (8012b94 <vTaskInternalSetTimeOutState+0x28>)
 8012b7e:	681a      	ldr	r2, [r3, #0]
 8012b80:	687b      	ldr	r3, [r7, #4]
 8012b82:	605a      	str	r2, [r3, #4]
}
 8012b84:	bf00      	nop
 8012b86:	370c      	adds	r7, #12
 8012b88:	46bd      	mov	sp, r7
 8012b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b8e:	4770      	bx	lr
 8012b90:	200022e4 	.word	0x200022e4
 8012b94:	200022d0 	.word	0x200022d0

08012b98 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8012b98:	b580      	push	{r7, lr}
 8012b9a:	b088      	sub	sp, #32
 8012b9c:	af00      	add	r7, sp, #0
 8012b9e:	6078      	str	r0, [r7, #4]
 8012ba0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8012ba2:	687b      	ldr	r3, [r7, #4]
 8012ba4:	2b00      	cmp	r3, #0
 8012ba6:	d10a      	bne.n	8012bbe <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8012ba8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012bac:	f383 8811 	msr	BASEPRI, r3
 8012bb0:	f3bf 8f6f 	isb	sy
 8012bb4:	f3bf 8f4f 	dsb	sy
 8012bb8:	613b      	str	r3, [r7, #16]
}
 8012bba:	bf00      	nop
 8012bbc:	e7fe      	b.n	8012bbc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8012bbe:	683b      	ldr	r3, [r7, #0]
 8012bc0:	2b00      	cmp	r3, #0
 8012bc2:	d10a      	bne.n	8012bda <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8012bc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012bc8:	f383 8811 	msr	BASEPRI, r3
 8012bcc:	f3bf 8f6f 	isb	sy
 8012bd0:	f3bf 8f4f 	dsb	sy
 8012bd4:	60fb      	str	r3, [r7, #12]
}
 8012bd6:	bf00      	nop
 8012bd8:	e7fe      	b.n	8012bd8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8012bda:	f000 ffc3 	bl	8013b64 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8012bde:	4b1d      	ldr	r3, [pc, #116]	; (8012c54 <xTaskCheckForTimeOut+0xbc>)
 8012be0:	681b      	ldr	r3, [r3, #0]
 8012be2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8012be4:	687b      	ldr	r3, [r7, #4]
 8012be6:	685b      	ldr	r3, [r3, #4]
 8012be8:	69ba      	ldr	r2, [r7, #24]
 8012bea:	1ad3      	subs	r3, r2, r3
 8012bec:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8012bee:	683b      	ldr	r3, [r7, #0]
 8012bf0:	681b      	ldr	r3, [r3, #0]
 8012bf2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012bf6:	d102      	bne.n	8012bfe <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8012bf8:	2300      	movs	r3, #0
 8012bfa:	61fb      	str	r3, [r7, #28]
 8012bfc:	e023      	b.n	8012c46 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8012bfe:	687b      	ldr	r3, [r7, #4]
 8012c00:	681a      	ldr	r2, [r3, #0]
 8012c02:	4b15      	ldr	r3, [pc, #84]	; (8012c58 <xTaskCheckForTimeOut+0xc0>)
 8012c04:	681b      	ldr	r3, [r3, #0]
 8012c06:	429a      	cmp	r2, r3
 8012c08:	d007      	beq.n	8012c1a <xTaskCheckForTimeOut+0x82>
 8012c0a:	687b      	ldr	r3, [r7, #4]
 8012c0c:	685b      	ldr	r3, [r3, #4]
 8012c0e:	69ba      	ldr	r2, [r7, #24]
 8012c10:	429a      	cmp	r2, r3
 8012c12:	d302      	bcc.n	8012c1a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8012c14:	2301      	movs	r3, #1
 8012c16:	61fb      	str	r3, [r7, #28]
 8012c18:	e015      	b.n	8012c46 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8012c1a:	683b      	ldr	r3, [r7, #0]
 8012c1c:	681b      	ldr	r3, [r3, #0]
 8012c1e:	697a      	ldr	r2, [r7, #20]
 8012c20:	429a      	cmp	r2, r3
 8012c22:	d20b      	bcs.n	8012c3c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8012c24:	683b      	ldr	r3, [r7, #0]
 8012c26:	681a      	ldr	r2, [r3, #0]
 8012c28:	697b      	ldr	r3, [r7, #20]
 8012c2a:	1ad2      	subs	r2, r2, r3
 8012c2c:	683b      	ldr	r3, [r7, #0]
 8012c2e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8012c30:	6878      	ldr	r0, [r7, #4]
 8012c32:	f7ff ff9b 	bl	8012b6c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8012c36:	2300      	movs	r3, #0
 8012c38:	61fb      	str	r3, [r7, #28]
 8012c3a:	e004      	b.n	8012c46 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8012c3c:	683b      	ldr	r3, [r7, #0]
 8012c3e:	2200      	movs	r2, #0
 8012c40:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8012c42:	2301      	movs	r3, #1
 8012c44:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8012c46:	f000 ffbd 	bl	8013bc4 <vPortExitCritical>

	return xReturn;
 8012c4a:	69fb      	ldr	r3, [r7, #28]
}
 8012c4c:	4618      	mov	r0, r3
 8012c4e:	3720      	adds	r7, #32
 8012c50:	46bd      	mov	sp, r7
 8012c52:	bd80      	pop	{r7, pc}
 8012c54:	200022d0 	.word	0x200022d0
 8012c58:	200022e4 	.word	0x200022e4

08012c5c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8012c5c:	b480      	push	{r7}
 8012c5e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8012c60:	4b03      	ldr	r3, [pc, #12]	; (8012c70 <vTaskMissedYield+0x14>)
 8012c62:	2201      	movs	r2, #1
 8012c64:	601a      	str	r2, [r3, #0]
}
 8012c66:	bf00      	nop
 8012c68:	46bd      	mov	sp, r7
 8012c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c6e:	4770      	bx	lr
 8012c70:	200022e0 	.word	0x200022e0

08012c74 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8012c74:	b580      	push	{r7, lr}
 8012c76:	b082      	sub	sp, #8
 8012c78:	af00      	add	r7, sp, #0
 8012c7a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8012c7c:	f000 f852 	bl	8012d24 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8012c80:	4b06      	ldr	r3, [pc, #24]	; (8012c9c <prvIdleTask+0x28>)
 8012c82:	681b      	ldr	r3, [r3, #0]
 8012c84:	2b01      	cmp	r3, #1
 8012c86:	d9f9      	bls.n	8012c7c <prvIdleTask+0x8>
			{
				taskYIELD();
 8012c88:	4b05      	ldr	r3, [pc, #20]	; (8012ca0 <prvIdleTask+0x2c>)
 8012c8a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012c8e:	601a      	str	r2, [r3, #0]
 8012c90:	f3bf 8f4f 	dsb	sy
 8012c94:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8012c98:	e7f0      	b.n	8012c7c <prvIdleTask+0x8>
 8012c9a:	bf00      	nop
 8012c9c:	200021d0 	.word	0x200021d0
 8012ca0:	e000ed04 	.word	0xe000ed04

08012ca4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8012ca4:	b580      	push	{r7, lr}
 8012ca6:	b082      	sub	sp, #8
 8012ca8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8012caa:	2300      	movs	r3, #0
 8012cac:	607b      	str	r3, [r7, #4]
 8012cae:	e00c      	b.n	8012cca <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8012cb0:	687a      	ldr	r2, [r7, #4]
 8012cb2:	4613      	mov	r3, r2
 8012cb4:	009b      	lsls	r3, r3, #2
 8012cb6:	4413      	add	r3, r2
 8012cb8:	009b      	lsls	r3, r3, #2
 8012cba:	4a12      	ldr	r2, [pc, #72]	; (8012d04 <prvInitialiseTaskLists+0x60>)
 8012cbc:	4413      	add	r3, r2
 8012cbe:	4618      	mov	r0, r3
 8012cc0:	f7fe fb6c 	bl	801139c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8012cc4:	687b      	ldr	r3, [r7, #4]
 8012cc6:	3301      	adds	r3, #1
 8012cc8:	607b      	str	r3, [r7, #4]
 8012cca:	687b      	ldr	r3, [r7, #4]
 8012ccc:	2b06      	cmp	r3, #6
 8012cce:	d9ef      	bls.n	8012cb0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8012cd0:	480d      	ldr	r0, [pc, #52]	; (8012d08 <prvInitialiseTaskLists+0x64>)
 8012cd2:	f7fe fb63 	bl	801139c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8012cd6:	480d      	ldr	r0, [pc, #52]	; (8012d0c <prvInitialiseTaskLists+0x68>)
 8012cd8:	f7fe fb60 	bl	801139c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8012cdc:	480c      	ldr	r0, [pc, #48]	; (8012d10 <prvInitialiseTaskLists+0x6c>)
 8012cde:	f7fe fb5d 	bl	801139c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8012ce2:	480c      	ldr	r0, [pc, #48]	; (8012d14 <prvInitialiseTaskLists+0x70>)
 8012ce4:	f7fe fb5a 	bl	801139c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8012ce8:	480b      	ldr	r0, [pc, #44]	; (8012d18 <prvInitialiseTaskLists+0x74>)
 8012cea:	f7fe fb57 	bl	801139c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8012cee:	4b0b      	ldr	r3, [pc, #44]	; (8012d1c <prvInitialiseTaskLists+0x78>)
 8012cf0:	4a05      	ldr	r2, [pc, #20]	; (8012d08 <prvInitialiseTaskLists+0x64>)
 8012cf2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8012cf4:	4b0a      	ldr	r3, [pc, #40]	; (8012d20 <prvInitialiseTaskLists+0x7c>)
 8012cf6:	4a05      	ldr	r2, [pc, #20]	; (8012d0c <prvInitialiseTaskLists+0x68>)
 8012cf8:	601a      	str	r2, [r3, #0]
}
 8012cfa:	bf00      	nop
 8012cfc:	3708      	adds	r7, #8
 8012cfe:	46bd      	mov	sp, r7
 8012d00:	bd80      	pop	{r7, pc}
 8012d02:	bf00      	nop
 8012d04:	200021d0 	.word	0x200021d0
 8012d08:	2000225c 	.word	0x2000225c
 8012d0c:	20002270 	.word	0x20002270
 8012d10:	2000228c 	.word	0x2000228c
 8012d14:	200022a0 	.word	0x200022a0
 8012d18:	200022b8 	.word	0x200022b8
 8012d1c:	20002284 	.word	0x20002284
 8012d20:	20002288 	.word	0x20002288

08012d24 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8012d24:	b580      	push	{r7, lr}
 8012d26:	b082      	sub	sp, #8
 8012d28:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8012d2a:	e019      	b.n	8012d60 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8012d2c:	f000 ff1a 	bl	8013b64 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012d30:	4b10      	ldr	r3, [pc, #64]	; (8012d74 <prvCheckTasksWaitingTermination+0x50>)
 8012d32:	68db      	ldr	r3, [r3, #12]
 8012d34:	68db      	ldr	r3, [r3, #12]
 8012d36:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8012d38:	687b      	ldr	r3, [r7, #4]
 8012d3a:	3304      	adds	r3, #4
 8012d3c:	4618      	mov	r0, r3
 8012d3e:	f7fe fbb7 	bl	80114b0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8012d42:	4b0d      	ldr	r3, [pc, #52]	; (8012d78 <prvCheckTasksWaitingTermination+0x54>)
 8012d44:	681b      	ldr	r3, [r3, #0]
 8012d46:	3b01      	subs	r3, #1
 8012d48:	4a0b      	ldr	r2, [pc, #44]	; (8012d78 <prvCheckTasksWaitingTermination+0x54>)
 8012d4a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8012d4c:	4b0b      	ldr	r3, [pc, #44]	; (8012d7c <prvCheckTasksWaitingTermination+0x58>)
 8012d4e:	681b      	ldr	r3, [r3, #0]
 8012d50:	3b01      	subs	r3, #1
 8012d52:	4a0a      	ldr	r2, [pc, #40]	; (8012d7c <prvCheckTasksWaitingTermination+0x58>)
 8012d54:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8012d56:	f000 ff35 	bl	8013bc4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8012d5a:	6878      	ldr	r0, [r7, #4]
 8012d5c:	f000 f810 	bl	8012d80 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8012d60:	4b06      	ldr	r3, [pc, #24]	; (8012d7c <prvCheckTasksWaitingTermination+0x58>)
 8012d62:	681b      	ldr	r3, [r3, #0]
 8012d64:	2b00      	cmp	r3, #0
 8012d66:	d1e1      	bne.n	8012d2c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8012d68:	bf00      	nop
 8012d6a:	bf00      	nop
 8012d6c:	3708      	adds	r7, #8
 8012d6e:	46bd      	mov	sp, r7
 8012d70:	bd80      	pop	{r7, pc}
 8012d72:	bf00      	nop
 8012d74:	200022a0 	.word	0x200022a0
 8012d78:	200022cc 	.word	0x200022cc
 8012d7c:	200022b4 	.word	0x200022b4

08012d80 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8012d80:	b580      	push	{r7, lr}
 8012d82:	b084      	sub	sp, #16
 8012d84:	af00      	add	r7, sp, #0
 8012d86:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8012d88:	687b      	ldr	r3, [r7, #4]
 8012d8a:	3350      	adds	r3, #80	; 0x50
 8012d8c:	4618      	mov	r0, r3
 8012d8e:	f001 fef1 	bl	8014b74 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8012d92:	687b      	ldr	r3, [r7, #4]
 8012d94:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8012d98:	2b00      	cmp	r3, #0
 8012d9a:	d108      	bne.n	8012dae <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8012d9c:	687b      	ldr	r3, [r7, #4]
 8012d9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012da0:	4618      	mov	r0, r3
 8012da2:	f001 f8cd 	bl	8013f40 <vPortFree>
				vPortFree( pxTCB );
 8012da6:	6878      	ldr	r0, [r7, #4]
 8012da8:	f001 f8ca 	bl	8013f40 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8012dac:	e018      	b.n	8012de0 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8012dae:	687b      	ldr	r3, [r7, #4]
 8012db0:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8012db4:	2b01      	cmp	r3, #1
 8012db6:	d103      	bne.n	8012dc0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8012db8:	6878      	ldr	r0, [r7, #4]
 8012dba:	f001 f8c1 	bl	8013f40 <vPortFree>
	}
 8012dbe:	e00f      	b.n	8012de0 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8012dc0:	687b      	ldr	r3, [r7, #4]
 8012dc2:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8012dc6:	2b02      	cmp	r3, #2
 8012dc8:	d00a      	beq.n	8012de0 <prvDeleteTCB+0x60>
	__asm volatile
 8012dca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012dce:	f383 8811 	msr	BASEPRI, r3
 8012dd2:	f3bf 8f6f 	isb	sy
 8012dd6:	f3bf 8f4f 	dsb	sy
 8012dda:	60fb      	str	r3, [r7, #12]
}
 8012ddc:	bf00      	nop
 8012dde:	e7fe      	b.n	8012dde <prvDeleteTCB+0x5e>
	}
 8012de0:	bf00      	nop
 8012de2:	3710      	adds	r7, #16
 8012de4:	46bd      	mov	sp, r7
 8012de6:	bd80      	pop	{r7, pc}

08012de8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8012de8:	b480      	push	{r7}
 8012dea:	b083      	sub	sp, #12
 8012dec:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8012dee:	4b0c      	ldr	r3, [pc, #48]	; (8012e20 <prvResetNextTaskUnblockTime+0x38>)
 8012df0:	681b      	ldr	r3, [r3, #0]
 8012df2:	681b      	ldr	r3, [r3, #0]
 8012df4:	2b00      	cmp	r3, #0
 8012df6:	d104      	bne.n	8012e02 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8012df8:	4b0a      	ldr	r3, [pc, #40]	; (8012e24 <prvResetNextTaskUnblockTime+0x3c>)
 8012dfa:	f04f 32ff 	mov.w	r2, #4294967295
 8012dfe:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8012e00:	e008      	b.n	8012e14 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012e02:	4b07      	ldr	r3, [pc, #28]	; (8012e20 <prvResetNextTaskUnblockTime+0x38>)
 8012e04:	681b      	ldr	r3, [r3, #0]
 8012e06:	68db      	ldr	r3, [r3, #12]
 8012e08:	68db      	ldr	r3, [r3, #12]
 8012e0a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8012e0c:	687b      	ldr	r3, [r7, #4]
 8012e0e:	685b      	ldr	r3, [r3, #4]
 8012e10:	4a04      	ldr	r2, [pc, #16]	; (8012e24 <prvResetNextTaskUnblockTime+0x3c>)
 8012e12:	6013      	str	r3, [r2, #0]
}
 8012e14:	bf00      	nop
 8012e16:	370c      	adds	r7, #12
 8012e18:	46bd      	mov	sp, r7
 8012e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e1e:	4770      	bx	lr
 8012e20:	20002284 	.word	0x20002284
 8012e24:	200022ec 	.word	0x200022ec

08012e28 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8012e28:	b480      	push	{r7}
 8012e2a:	b083      	sub	sp, #12
 8012e2c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8012e2e:	4b0b      	ldr	r3, [pc, #44]	; (8012e5c <xTaskGetSchedulerState+0x34>)
 8012e30:	681b      	ldr	r3, [r3, #0]
 8012e32:	2b00      	cmp	r3, #0
 8012e34:	d102      	bne.n	8012e3c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8012e36:	2301      	movs	r3, #1
 8012e38:	607b      	str	r3, [r7, #4]
 8012e3a:	e008      	b.n	8012e4e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8012e3c:	4b08      	ldr	r3, [pc, #32]	; (8012e60 <xTaskGetSchedulerState+0x38>)
 8012e3e:	681b      	ldr	r3, [r3, #0]
 8012e40:	2b00      	cmp	r3, #0
 8012e42:	d102      	bne.n	8012e4a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8012e44:	2302      	movs	r3, #2
 8012e46:	607b      	str	r3, [r7, #4]
 8012e48:	e001      	b.n	8012e4e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8012e4a:	2300      	movs	r3, #0
 8012e4c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8012e4e:	687b      	ldr	r3, [r7, #4]
	}
 8012e50:	4618      	mov	r0, r3
 8012e52:	370c      	adds	r7, #12
 8012e54:	46bd      	mov	sp, r7
 8012e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e5a:	4770      	bx	lr
 8012e5c:	200022d8 	.word	0x200022d8
 8012e60:	200022f4 	.word	0x200022f4

08012e64 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8012e64:	b580      	push	{r7, lr}
 8012e66:	b086      	sub	sp, #24
 8012e68:	af00      	add	r7, sp, #0
 8012e6a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8012e6c:	687b      	ldr	r3, [r7, #4]
 8012e6e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8012e70:	2300      	movs	r3, #0
 8012e72:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8012e74:	687b      	ldr	r3, [r7, #4]
 8012e76:	2b00      	cmp	r3, #0
 8012e78:	d06e      	beq.n	8012f58 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8012e7a:	4b3a      	ldr	r3, [pc, #232]	; (8012f64 <xTaskPriorityDisinherit+0x100>)
 8012e7c:	681b      	ldr	r3, [r3, #0]
 8012e7e:	693a      	ldr	r2, [r7, #16]
 8012e80:	429a      	cmp	r2, r3
 8012e82:	d00a      	beq.n	8012e9a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8012e84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012e88:	f383 8811 	msr	BASEPRI, r3
 8012e8c:	f3bf 8f6f 	isb	sy
 8012e90:	f3bf 8f4f 	dsb	sy
 8012e94:	60fb      	str	r3, [r7, #12]
}
 8012e96:	bf00      	nop
 8012e98:	e7fe      	b.n	8012e98 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8012e9a:	693b      	ldr	r3, [r7, #16]
 8012e9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8012e9e:	2b00      	cmp	r3, #0
 8012ea0:	d10a      	bne.n	8012eb8 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8012ea2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012ea6:	f383 8811 	msr	BASEPRI, r3
 8012eaa:	f3bf 8f6f 	isb	sy
 8012eae:	f3bf 8f4f 	dsb	sy
 8012eb2:	60bb      	str	r3, [r7, #8]
}
 8012eb4:	bf00      	nop
 8012eb6:	e7fe      	b.n	8012eb6 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8012eb8:	693b      	ldr	r3, [r7, #16]
 8012eba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8012ebc:	1e5a      	subs	r2, r3, #1
 8012ebe:	693b      	ldr	r3, [r7, #16]
 8012ec0:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8012ec2:	693b      	ldr	r3, [r7, #16]
 8012ec4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012ec6:	693b      	ldr	r3, [r7, #16]
 8012ec8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012eca:	429a      	cmp	r2, r3
 8012ecc:	d044      	beq.n	8012f58 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8012ece:	693b      	ldr	r3, [r7, #16]
 8012ed0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8012ed2:	2b00      	cmp	r3, #0
 8012ed4:	d140      	bne.n	8012f58 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8012ed6:	693b      	ldr	r3, [r7, #16]
 8012ed8:	3304      	adds	r3, #4
 8012eda:	4618      	mov	r0, r3
 8012edc:	f7fe fae8 	bl	80114b0 <uxListRemove>
 8012ee0:	4603      	mov	r3, r0
 8012ee2:	2b00      	cmp	r3, #0
 8012ee4:	d115      	bne.n	8012f12 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8012ee6:	693b      	ldr	r3, [r7, #16]
 8012ee8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012eea:	491f      	ldr	r1, [pc, #124]	; (8012f68 <xTaskPriorityDisinherit+0x104>)
 8012eec:	4613      	mov	r3, r2
 8012eee:	009b      	lsls	r3, r3, #2
 8012ef0:	4413      	add	r3, r2
 8012ef2:	009b      	lsls	r3, r3, #2
 8012ef4:	440b      	add	r3, r1
 8012ef6:	681b      	ldr	r3, [r3, #0]
 8012ef8:	2b00      	cmp	r3, #0
 8012efa:	d10a      	bne.n	8012f12 <xTaskPriorityDisinherit+0xae>
 8012efc:	693b      	ldr	r3, [r7, #16]
 8012efe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012f00:	2201      	movs	r2, #1
 8012f02:	fa02 f303 	lsl.w	r3, r2, r3
 8012f06:	43da      	mvns	r2, r3
 8012f08:	4b18      	ldr	r3, [pc, #96]	; (8012f6c <xTaskPriorityDisinherit+0x108>)
 8012f0a:	681b      	ldr	r3, [r3, #0]
 8012f0c:	4013      	ands	r3, r2
 8012f0e:	4a17      	ldr	r2, [pc, #92]	; (8012f6c <xTaskPriorityDisinherit+0x108>)
 8012f10:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8012f12:	693b      	ldr	r3, [r7, #16]
 8012f14:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8012f16:	693b      	ldr	r3, [r7, #16]
 8012f18:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012f1a:	693b      	ldr	r3, [r7, #16]
 8012f1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012f1e:	f1c3 0207 	rsb	r2, r3, #7
 8012f22:	693b      	ldr	r3, [r7, #16]
 8012f24:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8012f26:	693b      	ldr	r3, [r7, #16]
 8012f28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012f2a:	2201      	movs	r2, #1
 8012f2c:	409a      	lsls	r2, r3
 8012f2e:	4b0f      	ldr	r3, [pc, #60]	; (8012f6c <xTaskPriorityDisinherit+0x108>)
 8012f30:	681b      	ldr	r3, [r3, #0]
 8012f32:	4313      	orrs	r3, r2
 8012f34:	4a0d      	ldr	r2, [pc, #52]	; (8012f6c <xTaskPriorityDisinherit+0x108>)
 8012f36:	6013      	str	r3, [r2, #0]
 8012f38:	693b      	ldr	r3, [r7, #16]
 8012f3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012f3c:	4613      	mov	r3, r2
 8012f3e:	009b      	lsls	r3, r3, #2
 8012f40:	4413      	add	r3, r2
 8012f42:	009b      	lsls	r3, r3, #2
 8012f44:	4a08      	ldr	r2, [pc, #32]	; (8012f68 <xTaskPriorityDisinherit+0x104>)
 8012f46:	441a      	add	r2, r3
 8012f48:	693b      	ldr	r3, [r7, #16]
 8012f4a:	3304      	adds	r3, #4
 8012f4c:	4619      	mov	r1, r3
 8012f4e:	4610      	mov	r0, r2
 8012f50:	f7fe fa51 	bl	80113f6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8012f54:	2301      	movs	r3, #1
 8012f56:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8012f58:	697b      	ldr	r3, [r7, #20]
	}
 8012f5a:	4618      	mov	r0, r3
 8012f5c:	3718      	adds	r7, #24
 8012f5e:	46bd      	mov	sp, r7
 8012f60:	bd80      	pop	{r7, pc}
 8012f62:	bf00      	nop
 8012f64:	200021cc 	.word	0x200021cc
 8012f68:	200021d0 	.word	0x200021d0
 8012f6c:	200022d4 	.word	0x200022d4

08012f70 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 8012f70:	b480      	push	{r7}
 8012f72:	b083      	sub	sp, #12
 8012f74:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 8012f76:	4b09      	ldr	r3, [pc, #36]	; (8012f9c <uxTaskResetEventItemValue+0x2c>)
 8012f78:	681b      	ldr	r3, [r3, #0]
 8012f7a:	699b      	ldr	r3, [r3, #24]
 8012f7c:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012f7e:	4b07      	ldr	r3, [pc, #28]	; (8012f9c <uxTaskResetEventItemValue+0x2c>)
 8012f80:	681b      	ldr	r3, [r3, #0]
 8012f82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012f84:	4b05      	ldr	r3, [pc, #20]	; (8012f9c <uxTaskResetEventItemValue+0x2c>)
 8012f86:	681b      	ldr	r3, [r3, #0]
 8012f88:	f1c2 0207 	rsb	r2, r2, #7
 8012f8c:	619a      	str	r2, [r3, #24]

	return uxReturn;
 8012f8e:	687b      	ldr	r3, [r7, #4]
}
 8012f90:	4618      	mov	r0, r3
 8012f92:	370c      	adds	r7, #12
 8012f94:	46bd      	mov	sp, r7
 8012f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f9a:	4770      	bx	lr
 8012f9c:	200021cc 	.word	0x200021cc

08012fa0 <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 8012fa0:	b580      	push	{r7, lr}
 8012fa2:	b084      	sub	sp, #16
 8012fa4:	af00      	add	r7, sp, #0
 8012fa6:	6078      	str	r0, [r7, #4]
 8012fa8:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 8012faa:	f000 fddb 	bl	8013b64 <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 8012fae:	4b20      	ldr	r3, [pc, #128]	; (8013030 <ulTaskNotifyTake+0x90>)
 8012fb0:	681b      	ldr	r3, [r3, #0]
 8012fb2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8012fb6:	2b00      	cmp	r3, #0
 8012fb8:	d113      	bne.n	8012fe2 <ulTaskNotifyTake+0x42>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8012fba:	4b1d      	ldr	r3, [pc, #116]	; (8013030 <ulTaskNotifyTake+0x90>)
 8012fbc:	681b      	ldr	r3, [r3, #0]
 8012fbe:	2201      	movs	r2, #1
 8012fc0:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

				if( xTicksToWait > ( TickType_t ) 0 )
 8012fc4:	683b      	ldr	r3, [r7, #0]
 8012fc6:	2b00      	cmp	r3, #0
 8012fc8:	d00b      	beq.n	8012fe2 <ulTaskNotifyTake+0x42>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8012fca:	2101      	movs	r1, #1
 8012fcc:	6838      	ldr	r0, [r7, #0]
 8012fce:	f000 f8c7 	bl	8013160 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8012fd2:	4b18      	ldr	r3, [pc, #96]	; (8013034 <ulTaskNotifyTake+0x94>)
 8012fd4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012fd8:	601a      	str	r2, [r3, #0]
 8012fda:	f3bf 8f4f 	dsb	sy
 8012fde:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8012fe2:	f000 fdef 	bl	8013bc4 <vPortExitCritical>

		taskENTER_CRITICAL();
 8012fe6:	f000 fdbd 	bl	8013b64 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 8012fea:	4b11      	ldr	r3, [pc, #68]	; (8013030 <ulTaskNotifyTake+0x90>)
 8012fec:	681b      	ldr	r3, [r3, #0]
 8012fee:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8012ff2:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
 8012ff4:	68fb      	ldr	r3, [r7, #12]
 8012ff6:	2b00      	cmp	r3, #0
 8012ff8:	d00e      	beq.n	8013018 <ulTaskNotifyTake+0x78>
			{
				if( xClearCountOnExit != pdFALSE )
 8012ffa:	687b      	ldr	r3, [r7, #4]
 8012ffc:	2b00      	cmp	r3, #0
 8012ffe:	d005      	beq.n	801300c <ulTaskNotifyTake+0x6c>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 8013000:	4b0b      	ldr	r3, [pc, #44]	; (8013030 <ulTaskNotifyTake+0x90>)
 8013002:	681b      	ldr	r3, [r3, #0]
 8013004:	2200      	movs	r2, #0
 8013006:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
 801300a:	e005      	b.n	8013018 <ulTaskNotifyTake+0x78>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 801300c:	4b08      	ldr	r3, [pc, #32]	; (8013030 <ulTaskNotifyTake+0x90>)
 801300e:	681b      	ldr	r3, [r3, #0]
 8013010:	68fa      	ldr	r2, [r7, #12]
 8013012:	3a01      	subs	r2, #1
 8013014:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8013018:	4b05      	ldr	r3, [pc, #20]	; (8013030 <ulTaskNotifyTake+0x90>)
 801301a:	681b      	ldr	r3, [r3, #0]
 801301c:	2200      	movs	r2, #0
 801301e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
		}
		taskEXIT_CRITICAL();
 8013022:	f000 fdcf 	bl	8013bc4 <vPortExitCritical>

		return ulReturn;
 8013026:	68fb      	ldr	r3, [r7, #12]
	}
 8013028:	4618      	mov	r0, r3
 801302a:	3710      	adds	r7, #16
 801302c:	46bd      	mov	sp, r7
 801302e:	bd80      	pop	{r7, pc}
 8013030:	200021cc 	.word	0x200021cc
 8013034:	e000ed04 	.word	0xe000ed04

08013038 <vTaskNotifyGiveFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8013038:	b580      	push	{r7, lr}
 801303a:	b08a      	sub	sp, #40	; 0x28
 801303c:	af00      	add	r7, sp, #0
 801303e:	6078      	str	r0, [r7, #4]
 8013040:	6039      	str	r1, [r7, #0]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 8013042:	687b      	ldr	r3, [r7, #4]
 8013044:	2b00      	cmp	r3, #0
 8013046:	d10a      	bne.n	801305e <vTaskNotifyGiveFromISR+0x26>
	__asm volatile
 8013048:	f04f 0350 	mov.w	r3, #80	; 0x50
 801304c:	f383 8811 	msr	BASEPRI, r3
 8013050:	f3bf 8f6f 	isb	sy
 8013054:	f3bf 8f4f 	dsb	sy
 8013058:	61bb      	str	r3, [r7, #24]
}
 801305a:	bf00      	nop
 801305c:	e7fe      	b.n	801305c <vTaskNotifyGiveFromISR+0x24>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801305e:	f000 fe63 	bl	8013d28 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 8013062:	687b      	ldr	r3, [r7, #4]
 8013064:	627b      	str	r3, [r7, #36]	; 0x24
	__asm volatile
 8013066:	f3ef 8211 	mrs	r2, BASEPRI
 801306a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801306e:	f383 8811 	msr	BASEPRI, r3
 8013072:	f3bf 8f6f 	isb	sy
 8013076:	f3bf 8f4f 	dsb	sy
 801307a:	617a      	str	r2, [r7, #20]
 801307c:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 801307e:	697b      	ldr	r3, [r7, #20]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8013080:	623b      	str	r3, [r7, #32]
		{
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8013082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013084:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8013088:	77fb      	strb	r3, [r7, #31]
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 801308a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801308c:	2202      	movs	r2, #2
 801308e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

			/* 'Giving' is equivalent to incrementing a count in a counting
			semaphore. */
			( pxTCB->ulNotifiedValue )++;
 8013092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013094:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8013098:	1c5a      	adds	r2, r3, #1
 801309a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801309c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

			traceTASK_NOTIFY_GIVE_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80130a0:	7ffb      	ldrb	r3, [r7, #31]
 80130a2:	2b01      	cmp	r3, #1
 80130a4:	d145      	bne.n	8013132 <vTaskNotifyGiveFromISR+0xfa>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80130a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80130a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80130aa:	2b00      	cmp	r3, #0
 80130ac:	d00a      	beq.n	80130c4 <vTaskNotifyGiveFromISR+0x8c>
	__asm volatile
 80130ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80130b2:	f383 8811 	msr	BASEPRI, r3
 80130b6:	f3bf 8f6f 	isb	sy
 80130ba:	f3bf 8f4f 	dsb	sy
 80130be:	60fb      	str	r3, [r7, #12]
}
 80130c0:	bf00      	nop
 80130c2:	e7fe      	b.n	80130c2 <vTaskNotifyGiveFromISR+0x8a>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80130c4:	4b20      	ldr	r3, [pc, #128]	; (8013148 <vTaskNotifyGiveFromISR+0x110>)
 80130c6:	681b      	ldr	r3, [r3, #0]
 80130c8:	2b00      	cmp	r3, #0
 80130ca:	d11c      	bne.n	8013106 <vTaskNotifyGiveFromISR+0xce>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80130cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80130ce:	3304      	adds	r3, #4
 80130d0:	4618      	mov	r0, r3
 80130d2:	f7fe f9ed 	bl	80114b0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80130d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80130d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80130da:	2201      	movs	r2, #1
 80130dc:	409a      	lsls	r2, r3
 80130de:	4b1b      	ldr	r3, [pc, #108]	; (801314c <vTaskNotifyGiveFromISR+0x114>)
 80130e0:	681b      	ldr	r3, [r3, #0]
 80130e2:	4313      	orrs	r3, r2
 80130e4:	4a19      	ldr	r2, [pc, #100]	; (801314c <vTaskNotifyGiveFromISR+0x114>)
 80130e6:	6013      	str	r3, [r2, #0]
 80130e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80130ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80130ec:	4613      	mov	r3, r2
 80130ee:	009b      	lsls	r3, r3, #2
 80130f0:	4413      	add	r3, r2
 80130f2:	009b      	lsls	r3, r3, #2
 80130f4:	4a16      	ldr	r2, [pc, #88]	; (8013150 <vTaskNotifyGiveFromISR+0x118>)
 80130f6:	441a      	add	r2, r3
 80130f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80130fa:	3304      	adds	r3, #4
 80130fc:	4619      	mov	r1, r3
 80130fe:	4610      	mov	r0, r2
 8013100:	f7fe f979 	bl	80113f6 <vListInsertEnd>
 8013104:	e005      	b.n	8013112 <vTaskNotifyGiveFromISR+0xda>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8013106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013108:	3318      	adds	r3, #24
 801310a:	4619      	mov	r1, r3
 801310c:	4811      	ldr	r0, [pc, #68]	; (8013154 <vTaskNotifyGiveFromISR+0x11c>)
 801310e:	f7fe f972 	bl	80113f6 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8013112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013114:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013116:	4b10      	ldr	r3, [pc, #64]	; (8013158 <vTaskNotifyGiveFromISR+0x120>)
 8013118:	681b      	ldr	r3, [r3, #0]
 801311a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801311c:	429a      	cmp	r2, r3
 801311e:	d908      	bls.n	8013132 <vTaskNotifyGiveFromISR+0xfa>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8013120:	683b      	ldr	r3, [r7, #0]
 8013122:	2b00      	cmp	r3, #0
 8013124:	d002      	beq.n	801312c <vTaskNotifyGiveFromISR+0xf4>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 8013126:	683b      	ldr	r3, [r7, #0]
 8013128:	2201      	movs	r2, #1
 801312a:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter in an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 801312c:	4b0b      	ldr	r3, [pc, #44]	; (801315c <vTaskNotifyGiveFromISR+0x124>)
 801312e:	2201      	movs	r2, #1
 8013130:	601a      	str	r2, [r3, #0]
 8013132:	6a3b      	ldr	r3, [r7, #32]
 8013134:	60bb      	str	r3, [r7, #8]
	__asm volatile
 8013136:	68bb      	ldr	r3, [r7, #8]
 8013138:	f383 8811 	msr	BASEPRI, r3
}
 801313c:	bf00      	nop
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
	}
 801313e:	bf00      	nop
 8013140:	3728      	adds	r7, #40	; 0x28
 8013142:	46bd      	mov	sp, r7
 8013144:	bd80      	pop	{r7, pc}
 8013146:	bf00      	nop
 8013148:	200022f4 	.word	0x200022f4
 801314c:	200022d4 	.word	0x200022d4
 8013150:	200021d0 	.word	0x200021d0
 8013154:	2000228c 	.word	0x2000228c
 8013158:	200021cc 	.word	0x200021cc
 801315c:	200022e0 	.word	0x200022e0

08013160 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8013160:	b580      	push	{r7, lr}
 8013162:	b084      	sub	sp, #16
 8013164:	af00      	add	r7, sp, #0
 8013166:	6078      	str	r0, [r7, #4]
 8013168:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 801316a:	4b29      	ldr	r3, [pc, #164]	; (8013210 <prvAddCurrentTaskToDelayedList+0xb0>)
 801316c:	681b      	ldr	r3, [r3, #0]
 801316e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8013170:	4b28      	ldr	r3, [pc, #160]	; (8013214 <prvAddCurrentTaskToDelayedList+0xb4>)
 8013172:	681b      	ldr	r3, [r3, #0]
 8013174:	3304      	adds	r3, #4
 8013176:	4618      	mov	r0, r3
 8013178:	f7fe f99a 	bl	80114b0 <uxListRemove>
 801317c:	4603      	mov	r3, r0
 801317e:	2b00      	cmp	r3, #0
 8013180:	d10b      	bne.n	801319a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8013182:	4b24      	ldr	r3, [pc, #144]	; (8013214 <prvAddCurrentTaskToDelayedList+0xb4>)
 8013184:	681b      	ldr	r3, [r3, #0]
 8013186:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013188:	2201      	movs	r2, #1
 801318a:	fa02 f303 	lsl.w	r3, r2, r3
 801318e:	43da      	mvns	r2, r3
 8013190:	4b21      	ldr	r3, [pc, #132]	; (8013218 <prvAddCurrentTaskToDelayedList+0xb8>)
 8013192:	681b      	ldr	r3, [r3, #0]
 8013194:	4013      	ands	r3, r2
 8013196:	4a20      	ldr	r2, [pc, #128]	; (8013218 <prvAddCurrentTaskToDelayedList+0xb8>)
 8013198:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 801319a:	687b      	ldr	r3, [r7, #4]
 801319c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80131a0:	d10a      	bne.n	80131b8 <prvAddCurrentTaskToDelayedList+0x58>
 80131a2:	683b      	ldr	r3, [r7, #0]
 80131a4:	2b00      	cmp	r3, #0
 80131a6:	d007      	beq.n	80131b8 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80131a8:	4b1a      	ldr	r3, [pc, #104]	; (8013214 <prvAddCurrentTaskToDelayedList+0xb4>)
 80131aa:	681b      	ldr	r3, [r3, #0]
 80131ac:	3304      	adds	r3, #4
 80131ae:	4619      	mov	r1, r3
 80131b0:	481a      	ldr	r0, [pc, #104]	; (801321c <prvAddCurrentTaskToDelayedList+0xbc>)
 80131b2:	f7fe f920 	bl	80113f6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80131b6:	e026      	b.n	8013206 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80131b8:	68fa      	ldr	r2, [r7, #12]
 80131ba:	687b      	ldr	r3, [r7, #4]
 80131bc:	4413      	add	r3, r2
 80131be:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80131c0:	4b14      	ldr	r3, [pc, #80]	; (8013214 <prvAddCurrentTaskToDelayedList+0xb4>)
 80131c2:	681b      	ldr	r3, [r3, #0]
 80131c4:	68ba      	ldr	r2, [r7, #8]
 80131c6:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80131c8:	68ba      	ldr	r2, [r7, #8]
 80131ca:	68fb      	ldr	r3, [r7, #12]
 80131cc:	429a      	cmp	r2, r3
 80131ce:	d209      	bcs.n	80131e4 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80131d0:	4b13      	ldr	r3, [pc, #76]	; (8013220 <prvAddCurrentTaskToDelayedList+0xc0>)
 80131d2:	681a      	ldr	r2, [r3, #0]
 80131d4:	4b0f      	ldr	r3, [pc, #60]	; (8013214 <prvAddCurrentTaskToDelayedList+0xb4>)
 80131d6:	681b      	ldr	r3, [r3, #0]
 80131d8:	3304      	adds	r3, #4
 80131da:	4619      	mov	r1, r3
 80131dc:	4610      	mov	r0, r2
 80131de:	f7fe f92e 	bl	801143e <vListInsert>
}
 80131e2:	e010      	b.n	8013206 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80131e4:	4b0f      	ldr	r3, [pc, #60]	; (8013224 <prvAddCurrentTaskToDelayedList+0xc4>)
 80131e6:	681a      	ldr	r2, [r3, #0]
 80131e8:	4b0a      	ldr	r3, [pc, #40]	; (8013214 <prvAddCurrentTaskToDelayedList+0xb4>)
 80131ea:	681b      	ldr	r3, [r3, #0]
 80131ec:	3304      	adds	r3, #4
 80131ee:	4619      	mov	r1, r3
 80131f0:	4610      	mov	r0, r2
 80131f2:	f7fe f924 	bl	801143e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80131f6:	4b0c      	ldr	r3, [pc, #48]	; (8013228 <prvAddCurrentTaskToDelayedList+0xc8>)
 80131f8:	681b      	ldr	r3, [r3, #0]
 80131fa:	68ba      	ldr	r2, [r7, #8]
 80131fc:	429a      	cmp	r2, r3
 80131fe:	d202      	bcs.n	8013206 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8013200:	4a09      	ldr	r2, [pc, #36]	; (8013228 <prvAddCurrentTaskToDelayedList+0xc8>)
 8013202:	68bb      	ldr	r3, [r7, #8]
 8013204:	6013      	str	r3, [r2, #0]
}
 8013206:	bf00      	nop
 8013208:	3710      	adds	r7, #16
 801320a:	46bd      	mov	sp, r7
 801320c:	bd80      	pop	{r7, pc}
 801320e:	bf00      	nop
 8013210:	200022d0 	.word	0x200022d0
 8013214:	200021cc 	.word	0x200021cc
 8013218:	200022d4 	.word	0x200022d4
 801321c:	200022b8 	.word	0x200022b8
 8013220:	20002288 	.word	0x20002288
 8013224:	20002284 	.word	0x20002284
 8013228:	200022ec 	.word	0x200022ec

0801322c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 801322c:	b580      	push	{r7, lr}
 801322e:	b08a      	sub	sp, #40	; 0x28
 8013230:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8013232:	2300      	movs	r3, #0
 8013234:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8013236:	f000 fb07 	bl	8013848 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 801323a:	4b1c      	ldr	r3, [pc, #112]	; (80132ac <xTimerCreateTimerTask+0x80>)
 801323c:	681b      	ldr	r3, [r3, #0]
 801323e:	2b00      	cmp	r3, #0
 8013240:	d021      	beq.n	8013286 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8013242:	2300      	movs	r3, #0
 8013244:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8013246:	2300      	movs	r3, #0
 8013248:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 801324a:	1d3a      	adds	r2, r7, #4
 801324c:	f107 0108 	add.w	r1, r7, #8
 8013250:	f107 030c 	add.w	r3, r7, #12
 8013254:	4618      	mov	r0, r3
 8013256:	f7ee fee7 	bl	8002028 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 801325a:	6879      	ldr	r1, [r7, #4]
 801325c:	68bb      	ldr	r3, [r7, #8]
 801325e:	68fa      	ldr	r2, [r7, #12]
 8013260:	9202      	str	r2, [sp, #8]
 8013262:	9301      	str	r3, [sp, #4]
 8013264:	2302      	movs	r3, #2
 8013266:	9300      	str	r3, [sp, #0]
 8013268:	2300      	movs	r3, #0
 801326a:	460a      	mov	r2, r1
 801326c:	4910      	ldr	r1, [pc, #64]	; (80132b0 <xTimerCreateTimerTask+0x84>)
 801326e:	4811      	ldr	r0, [pc, #68]	; (80132b4 <xTimerCreateTimerTask+0x88>)
 8013270:	f7fe fe6a 	bl	8011f48 <xTaskCreateStatic>
 8013274:	4603      	mov	r3, r0
 8013276:	4a10      	ldr	r2, [pc, #64]	; (80132b8 <xTimerCreateTimerTask+0x8c>)
 8013278:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 801327a:	4b0f      	ldr	r3, [pc, #60]	; (80132b8 <xTimerCreateTimerTask+0x8c>)
 801327c:	681b      	ldr	r3, [r3, #0]
 801327e:	2b00      	cmp	r3, #0
 8013280:	d001      	beq.n	8013286 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8013282:	2301      	movs	r3, #1
 8013284:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8013286:	697b      	ldr	r3, [r7, #20]
 8013288:	2b00      	cmp	r3, #0
 801328a:	d10a      	bne.n	80132a2 <xTimerCreateTimerTask+0x76>
	__asm volatile
 801328c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013290:	f383 8811 	msr	BASEPRI, r3
 8013294:	f3bf 8f6f 	isb	sy
 8013298:	f3bf 8f4f 	dsb	sy
 801329c:	613b      	str	r3, [r7, #16]
}
 801329e:	bf00      	nop
 80132a0:	e7fe      	b.n	80132a0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80132a2:	697b      	ldr	r3, [r7, #20]
}
 80132a4:	4618      	mov	r0, r3
 80132a6:	3718      	adds	r7, #24
 80132a8:	46bd      	mov	sp, r7
 80132aa:	bd80      	pop	{r7, pc}
 80132ac:	20002330 	.word	0x20002330
 80132b0:	08016a04 	.word	0x08016a04
 80132b4:	080133f1 	.word	0x080133f1
 80132b8:	20002334 	.word	0x20002334

080132bc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80132bc:	b580      	push	{r7, lr}
 80132be:	b08a      	sub	sp, #40	; 0x28
 80132c0:	af00      	add	r7, sp, #0
 80132c2:	60f8      	str	r0, [r7, #12]
 80132c4:	60b9      	str	r1, [r7, #8]
 80132c6:	607a      	str	r2, [r7, #4]
 80132c8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80132ca:	2300      	movs	r3, #0
 80132cc:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80132ce:	68fb      	ldr	r3, [r7, #12]
 80132d0:	2b00      	cmp	r3, #0
 80132d2:	d10a      	bne.n	80132ea <xTimerGenericCommand+0x2e>
	__asm volatile
 80132d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80132d8:	f383 8811 	msr	BASEPRI, r3
 80132dc:	f3bf 8f6f 	isb	sy
 80132e0:	f3bf 8f4f 	dsb	sy
 80132e4:	623b      	str	r3, [r7, #32]
}
 80132e6:	bf00      	nop
 80132e8:	e7fe      	b.n	80132e8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80132ea:	4b1a      	ldr	r3, [pc, #104]	; (8013354 <xTimerGenericCommand+0x98>)
 80132ec:	681b      	ldr	r3, [r3, #0]
 80132ee:	2b00      	cmp	r3, #0
 80132f0:	d02a      	beq.n	8013348 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80132f2:	68bb      	ldr	r3, [r7, #8]
 80132f4:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80132f6:	687b      	ldr	r3, [r7, #4]
 80132f8:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80132fa:	68fb      	ldr	r3, [r7, #12]
 80132fc:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80132fe:	68bb      	ldr	r3, [r7, #8]
 8013300:	2b05      	cmp	r3, #5
 8013302:	dc18      	bgt.n	8013336 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8013304:	f7ff fd90 	bl	8012e28 <xTaskGetSchedulerState>
 8013308:	4603      	mov	r3, r0
 801330a:	2b02      	cmp	r3, #2
 801330c:	d109      	bne.n	8013322 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 801330e:	4b11      	ldr	r3, [pc, #68]	; (8013354 <xTimerGenericCommand+0x98>)
 8013310:	6818      	ldr	r0, [r3, #0]
 8013312:	f107 0110 	add.w	r1, r7, #16
 8013316:	2300      	movs	r3, #0
 8013318:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801331a:	f7fe fa2d 	bl	8011778 <xQueueGenericSend>
 801331e:	6278      	str	r0, [r7, #36]	; 0x24
 8013320:	e012      	b.n	8013348 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8013322:	4b0c      	ldr	r3, [pc, #48]	; (8013354 <xTimerGenericCommand+0x98>)
 8013324:	6818      	ldr	r0, [r3, #0]
 8013326:	f107 0110 	add.w	r1, r7, #16
 801332a:	2300      	movs	r3, #0
 801332c:	2200      	movs	r2, #0
 801332e:	f7fe fa23 	bl	8011778 <xQueueGenericSend>
 8013332:	6278      	str	r0, [r7, #36]	; 0x24
 8013334:	e008      	b.n	8013348 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8013336:	4b07      	ldr	r3, [pc, #28]	; (8013354 <xTimerGenericCommand+0x98>)
 8013338:	6818      	ldr	r0, [r3, #0]
 801333a:	f107 0110 	add.w	r1, r7, #16
 801333e:	2300      	movs	r3, #0
 8013340:	683a      	ldr	r2, [r7, #0]
 8013342:	f7fe fb17 	bl	8011974 <xQueueGenericSendFromISR>
 8013346:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8013348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801334a:	4618      	mov	r0, r3
 801334c:	3728      	adds	r7, #40	; 0x28
 801334e:	46bd      	mov	sp, r7
 8013350:	bd80      	pop	{r7, pc}
 8013352:	bf00      	nop
 8013354:	20002330 	.word	0x20002330

08013358 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8013358:	b580      	push	{r7, lr}
 801335a:	b088      	sub	sp, #32
 801335c:	af02      	add	r7, sp, #8
 801335e:	6078      	str	r0, [r7, #4]
 8013360:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013362:	4b22      	ldr	r3, [pc, #136]	; (80133ec <prvProcessExpiredTimer+0x94>)
 8013364:	681b      	ldr	r3, [r3, #0]
 8013366:	68db      	ldr	r3, [r3, #12]
 8013368:	68db      	ldr	r3, [r3, #12]
 801336a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801336c:	697b      	ldr	r3, [r7, #20]
 801336e:	3304      	adds	r3, #4
 8013370:	4618      	mov	r0, r3
 8013372:	f7fe f89d 	bl	80114b0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8013376:	697b      	ldr	r3, [r7, #20]
 8013378:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 801337c:	f003 0304 	and.w	r3, r3, #4
 8013380:	2b00      	cmp	r3, #0
 8013382:	d022      	beq.n	80133ca <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8013384:	697b      	ldr	r3, [r7, #20]
 8013386:	699a      	ldr	r2, [r3, #24]
 8013388:	687b      	ldr	r3, [r7, #4]
 801338a:	18d1      	adds	r1, r2, r3
 801338c:	687b      	ldr	r3, [r7, #4]
 801338e:	683a      	ldr	r2, [r7, #0]
 8013390:	6978      	ldr	r0, [r7, #20]
 8013392:	f000 f8d1 	bl	8013538 <prvInsertTimerInActiveList>
 8013396:	4603      	mov	r3, r0
 8013398:	2b00      	cmp	r3, #0
 801339a:	d01f      	beq.n	80133dc <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 801339c:	2300      	movs	r3, #0
 801339e:	9300      	str	r3, [sp, #0]
 80133a0:	2300      	movs	r3, #0
 80133a2:	687a      	ldr	r2, [r7, #4]
 80133a4:	2100      	movs	r1, #0
 80133a6:	6978      	ldr	r0, [r7, #20]
 80133a8:	f7ff ff88 	bl	80132bc <xTimerGenericCommand>
 80133ac:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80133ae:	693b      	ldr	r3, [r7, #16]
 80133b0:	2b00      	cmp	r3, #0
 80133b2:	d113      	bne.n	80133dc <prvProcessExpiredTimer+0x84>
	__asm volatile
 80133b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80133b8:	f383 8811 	msr	BASEPRI, r3
 80133bc:	f3bf 8f6f 	isb	sy
 80133c0:	f3bf 8f4f 	dsb	sy
 80133c4:	60fb      	str	r3, [r7, #12]
}
 80133c6:	bf00      	nop
 80133c8:	e7fe      	b.n	80133c8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80133ca:	697b      	ldr	r3, [r7, #20]
 80133cc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80133d0:	f023 0301 	bic.w	r3, r3, #1
 80133d4:	b2da      	uxtb	r2, r3
 80133d6:	697b      	ldr	r3, [r7, #20]
 80133d8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80133dc:	697b      	ldr	r3, [r7, #20]
 80133de:	6a1b      	ldr	r3, [r3, #32]
 80133e0:	6978      	ldr	r0, [r7, #20]
 80133e2:	4798      	blx	r3
}
 80133e4:	bf00      	nop
 80133e6:	3718      	adds	r7, #24
 80133e8:	46bd      	mov	sp, r7
 80133ea:	bd80      	pop	{r7, pc}
 80133ec:	20002328 	.word	0x20002328

080133f0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80133f0:	b580      	push	{r7, lr}
 80133f2:	b084      	sub	sp, #16
 80133f4:	af00      	add	r7, sp, #0
 80133f6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80133f8:	f107 0308 	add.w	r3, r7, #8
 80133fc:	4618      	mov	r0, r3
 80133fe:	f000 f857 	bl	80134b0 <prvGetNextExpireTime>
 8013402:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8013404:	68bb      	ldr	r3, [r7, #8]
 8013406:	4619      	mov	r1, r3
 8013408:	68f8      	ldr	r0, [r7, #12]
 801340a:	f000 f803 	bl	8013414 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 801340e:	f000 f8d5 	bl	80135bc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8013412:	e7f1      	b.n	80133f8 <prvTimerTask+0x8>

08013414 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8013414:	b580      	push	{r7, lr}
 8013416:	b084      	sub	sp, #16
 8013418:	af00      	add	r7, sp, #0
 801341a:	6078      	str	r0, [r7, #4]
 801341c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 801341e:	f7ff f865 	bl	80124ec <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8013422:	f107 0308 	add.w	r3, r7, #8
 8013426:	4618      	mov	r0, r3
 8013428:	f000 f866 	bl	80134f8 <prvSampleTimeNow>
 801342c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 801342e:	68bb      	ldr	r3, [r7, #8]
 8013430:	2b00      	cmp	r3, #0
 8013432:	d130      	bne.n	8013496 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8013434:	683b      	ldr	r3, [r7, #0]
 8013436:	2b00      	cmp	r3, #0
 8013438:	d10a      	bne.n	8013450 <prvProcessTimerOrBlockTask+0x3c>
 801343a:	687a      	ldr	r2, [r7, #4]
 801343c:	68fb      	ldr	r3, [r7, #12]
 801343e:	429a      	cmp	r2, r3
 8013440:	d806      	bhi.n	8013450 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8013442:	f7ff f861 	bl	8012508 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8013446:	68f9      	ldr	r1, [r7, #12]
 8013448:	6878      	ldr	r0, [r7, #4]
 801344a:	f7ff ff85 	bl	8013358 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 801344e:	e024      	b.n	801349a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8013450:	683b      	ldr	r3, [r7, #0]
 8013452:	2b00      	cmp	r3, #0
 8013454:	d008      	beq.n	8013468 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8013456:	4b13      	ldr	r3, [pc, #76]	; (80134a4 <prvProcessTimerOrBlockTask+0x90>)
 8013458:	681b      	ldr	r3, [r3, #0]
 801345a:	681b      	ldr	r3, [r3, #0]
 801345c:	2b00      	cmp	r3, #0
 801345e:	d101      	bne.n	8013464 <prvProcessTimerOrBlockTask+0x50>
 8013460:	2301      	movs	r3, #1
 8013462:	e000      	b.n	8013466 <prvProcessTimerOrBlockTask+0x52>
 8013464:	2300      	movs	r3, #0
 8013466:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8013468:	4b0f      	ldr	r3, [pc, #60]	; (80134a8 <prvProcessTimerOrBlockTask+0x94>)
 801346a:	6818      	ldr	r0, [r3, #0]
 801346c:	687a      	ldr	r2, [r7, #4]
 801346e:	68fb      	ldr	r3, [r7, #12]
 8013470:	1ad3      	subs	r3, r2, r3
 8013472:	683a      	ldr	r2, [r7, #0]
 8013474:	4619      	mov	r1, r3
 8013476:	f7fe fd33 	bl	8011ee0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 801347a:	f7ff f845 	bl	8012508 <xTaskResumeAll>
 801347e:	4603      	mov	r3, r0
 8013480:	2b00      	cmp	r3, #0
 8013482:	d10a      	bne.n	801349a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8013484:	4b09      	ldr	r3, [pc, #36]	; (80134ac <prvProcessTimerOrBlockTask+0x98>)
 8013486:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801348a:	601a      	str	r2, [r3, #0]
 801348c:	f3bf 8f4f 	dsb	sy
 8013490:	f3bf 8f6f 	isb	sy
}
 8013494:	e001      	b.n	801349a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8013496:	f7ff f837 	bl	8012508 <xTaskResumeAll>
}
 801349a:	bf00      	nop
 801349c:	3710      	adds	r7, #16
 801349e:	46bd      	mov	sp, r7
 80134a0:	bd80      	pop	{r7, pc}
 80134a2:	bf00      	nop
 80134a4:	2000232c 	.word	0x2000232c
 80134a8:	20002330 	.word	0x20002330
 80134ac:	e000ed04 	.word	0xe000ed04

080134b0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80134b0:	b480      	push	{r7}
 80134b2:	b085      	sub	sp, #20
 80134b4:	af00      	add	r7, sp, #0
 80134b6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80134b8:	4b0e      	ldr	r3, [pc, #56]	; (80134f4 <prvGetNextExpireTime+0x44>)
 80134ba:	681b      	ldr	r3, [r3, #0]
 80134bc:	681b      	ldr	r3, [r3, #0]
 80134be:	2b00      	cmp	r3, #0
 80134c0:	d101      	bne.n	80134c6 <prvGetNextExpireTime+0x16>
 80134c2:	2201      	movs	r2, #1
 80134c4:	e000      	b.n	80134c8 <prvGetNextExpireTime+0x18>
 80134c6:	2200      	movs	r2, #0
 80134c8:	687b      	ldr	r3, [r7, #4]
 80134ca:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80134cc:	687b      	ldr	r3, [r7, #4]
 80134ce:	681b      	ldr	r3, [r3, #0]
 80134d0:	2b00      	cmp	r3, #0
 80134d2:	d105      	bne.n	80134e0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80134d4:	4b07      	ldr	r3, [pc, #28]	; (80134f4 <prvGetNextExpireTime+0x44>)
 80134d6:	681b      	ldr	r3, [r3, #0]
 80134d8:	68db      	ldr	r3, [r3, #12]
 80134da:	681b      	ldr	r3, [r3, #0]
 80134dc:	60fb      	str	r3, [r7, #12]
 80134de:	e001      	b.n	80134e4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80134e0:	2300      	movs	r3, #0
 80134e2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80134e4:	68fb      	ldr	r3, [r7, #12]
}
 80134e6:	4618      	mov	r0, r3
 80134e8:	3714      	adds	r7, #20
 80134ea:	46bd      	mov	sp, r7
 80134ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134f0:	4770      	bx	lr
 80134f2:	bf00      	nop
 80134f4:	20002328 	.word	0x20002328

080134f8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80134f8:	b580      	push	{r7, lr}
 80134fa:	b084      	sub	sp, #16
 80134fc:	af00      	add	r7, sp, #0
 80134fe:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8013500:	f7ff f89e 	bl	8012640 <xTaskGetTickCount>
 8013504:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8013506:	4b0b      	ldr	r3, [pc, #44]	; (8013534 <prvSampleTimeNow+0x3c>)
 8013508:	681b      	ldr	r3, [r3, #0]
 801350a:	68fa      	ldr	r2, [r7, #12]
 801350c:	429a      	cmp	r2, r3
 801350e:	d205      	bcs.n	801351c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8013510:	f000 f936 	bl	8013780 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8013514:	687b      	ldr	r3, [r7, #4]
 8013516:	2201      	movs	r2, #1
 8013518:	601a      	str	r2, [r3, #0]
 801351a:	e002      	b.n	8013522 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 801351c:	687b      	ldr	r3, [r7, #4]
 801351e:	2200      	movs	r2, #0
 8013520:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8013522:	4a04      	ldr	r2, [pc, #16]	; (8013534 <prvSampleTimeNow+0x3c>)
 8013524:	68fb      	ldr	r3, [r7, #12]
 8013526:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8013528:	68fb      	ldr	r3, [r7, #12]
}
 801352a:	4618      	mov	r0, r3
 801352c:	3710      	adds	r7, #16
 801352e:	46bd      	mov	sp, r7
 8013530:	bd80      	pop	{r7, pc}
 8013532:	bf00      	nop
 8013534:	20002338 	.word	0x20002338

08013538 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8013538:	b580      	push	{r7, lr}
 801353a:	b086      	sub	sp, #24
 801353c:	af00      	add	r7, sp, #0
 801353e:	60f8      	str	r0, [r7, #12]
 8013540:	60b9      	str	r1, [r7, #8]
 8013542:	607a      	str	r2, [r7, #4]
 8013544:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8013546:	2300      	movs	r3, #0
 8013548:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 801354a:	68fb      	ldr	r3, [r7, #12]
 801354c:	68ba      	ldr	r2, [r7, #8]
 801354e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8013550:	68fb      	ldr	r3, [r7, #12]
 8013552:	68fa      	ldr	r2, [r7, #12]
 8013554:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8013556:	68ba      	ldr	r2, [r7, #8]
 8013558:	687b      	ldr	r3, [r7, #4]
 801355a:	429a      	cmp	r2, r3
 801355c:	d812      	bhi.n	8013584 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801355e:	687a      	ldr	r2, [r7, #4]
 8013560:	683b      	ldr	r3, [r7, #0]
 8013562:	1ad2      	subs	r2, r2, r3
 8013564:	68fb      	ldr	r3, [r7, #12]
 8013566:	699b      	ldr	r3, [r3, #24]
 8013568:	429a      	cmp	r2, r3
 801356a:	d302      	bcc.n	8013572 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 801356c:	2301      	movs	r3, #1
 801356e:	617b      	str	r3, [r7, #20]
 8013570:	e01b      	b.n	80135aa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8013572:	4b10      	ldr	r3, [pc, #64]	; (80135b4 <prvInsertTimerInActiveList+0x7c>)
 8013574:	681a      	ldr	r2, [r3, #0]
 8013576:	68fb      	ldr	r3, [r7, #12]
 8013578:	3304      	adds	r3, #4
 801357a:	4619      	mov	r1, r3
 801357c:	4610      	mov	r0, r2
 801357e:	f7fd ff5e 	bl	801143e <vListInsert>
 8013582:	e012      	b.n	80135aa <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8013584:	687a      	ldr	r2, [r7, #4]
 8013586:	683b      	ldr	r3, [r7, #0]
 8013588:	429a      	cmp	r2, r3
 801358a:	d206      	bcs.n	801359a <prvInsertTimerInActiveList+0x62>
 801358c:	68ba      	ldr	r2, [r7, #8]
 801358e:	683b      	ldr	r3, [r7, #0]
 8013590:	429a      	cmp	r2, r3
 8013592:	d302      	bcc.n	801359a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8013594:	2301      	movs	r3, #1
 8013596:	617b      	str	r3, [r7, #20]
 8013598:	e007      	b.n	80135aa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801359a:	4b07      	ldr	r3, [pc, #28]	; (80135b8 <prvInsertTimerInActiveList+0x80>)
 801359c:	681a      	ldr	r2, [r3, #0]
 801359e:	68fb      	ldr	r3, [r7, #12]
 80135a0:	3304      	adds	r3, #4
 80135a2:	4619      	mov	r1, r3
 80135a4:	4610      	mov	r0, r2
 80135a6:	f7fd ff4a 	bl	801143e <vListInsert>
		}
	}

	return xProcessTimerNow;
 80135aa:	697b      	ldr	r3, [r7, #20]
}
 80135ac:	4618      	mov	r0, r3
 80135ae:	3718      	adds	r7, #24
 80135b0:	46bd      	mov	sp, r7
 80135b2:	bd80      	pop	{r7, pc}
 80135b4:	2000232c 	.word	0x2000232c
 80135b8:	20002328 	.word	0x20002328

080135bc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80135bc:	b580      	push	{r7, lr}
 80135be:	b08e      	sub	sp, #56	; 0x38
 80135c0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80135c2:	e0ca      	b.n	801375a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80135c4:	687b      	ldr	r3, [r7, #4]
 80135c6:	2b00      	cmp	r3, #0
 80135c8:	da18      	bge.n	80135fc <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80135ca:	1d3b      	adds	r3, r7, #4
 80135cc:	3304      	adds	r3, #4
 80135ce:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80135d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80135d2:	2b00      	cmp	r3, #0
 80135d4:	d10a      	bne.n	80135ec <prvProcessReceivedCommands+0x30>
	__asm volatile
 80135d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80135da:	f383 8811 	msr	BASEPRI, r3
 80135de:	f3bf 8f6f 	isb	sy
 80135e2:	f3bf 8f4f 	dsb	sy
 80135e6:	61fb      	str	r3, [r7, #28]
}
 80135e8:	bf00      	nop
 80135ea:	e7fe      	b.n	80135ea <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80135ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80135ee:	681b      	ldr	r3, [r3, #0]
 80135f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80135f2:	6850      	ldr	r0, [r2, #4]
 80135f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80135f6:	6892      	ldr	r2, [r2, #8]
 80135f8:	4611      	mov	r1, r2
 80135fa:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80135fc:	687b      	ldr	r3, [r7, #4]
 80135fe:	2b00      	cmp	r3, #0
 8013600:	f2c0 80ab 	blt.w	801375a <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8013604:	68fb      	ldr	r3, [r7, #12]
 8013606:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8013608:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801360a:	695b      	ldr	r3, [r3, #20]
 801360c:	2b00      	cmp	r3, #0
 801360e:	d004      	beq.n	801361a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8013610:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013612:	3304      	adds	r3, #4
 8013614:	4618      	mov	r0, r3
 8013616:	f7fd ff4b 	bl	80114b0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801361a:	463b      	mov	r3, r7
 801361c:	4618      	mov	r0, r3
 801361e:	f7ff ff6b 	bl	80134f8 <prvSampleTimeNow>
 8013622:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8013624:	687b      	ldr	r3, [r7, #4]
 8013626:	2b09      	cmp	r3, #9
 8013628:	f200 8096 	bhi.w	8013758 <prvProcessReceivedCommands+0x19c>
 801362c:	a201      	add	r2, pc, #4	; (adr r2, 8013634 <prvProcessReceivedCommands+0x78>)
 801362e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013632:	bf00      	nop
 8013634:	0801365d 	.word	0x0801365d
 8013638:	0801365d 	.word	0x0801365d
 801363c:	0801365d 	.word	0x0801365d
 8013640:	080136d1 	.word	0x080136d1
 8013644:	080136e5 	.word	0x080136e5
 8013648:	0801372f 	.word	0x0801372f
 801364c:	0801365d 	.word	0x0801365d
 8013650:	0801365d 	.word	0x0801365d
 8013654:	080136d1 	.word	0x080136d1
 8013658:	080136e5 	.word	0x080136e5
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 801365c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801365e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8013662:	f043 0301 	orr.w	r3, r3, #1
 8013666:	b2da      	uxtb	r2, r3
 8013668:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801366a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 801366e:	68ba      	ldr	r2, [r7, #8]
 8013670:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013672:	699b      	ldr	r3, [r3, #24]
 8013674:	18d1      	adds	r1, r2, r3
 8013676:	68bb      	ldr	r3, [r7, #8]
 8013678:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801367a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801367c:	f7ff ff5c 	bl	8013538 <prvInsertTimerInActiveList>
 8013680:	4603      	mov	r3, r0
 8013682:	2b00      	cmp	r3, #0
 8013684:	d069      	beq.n	801375a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8013686:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013688:	6a1b      	ldr	r3, [r3, #32]
 801368a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801368c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801368e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013690:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8013694:	f003 0304 	and.w	r3, r3, #4
 8013698:	2b00      	cmp	r3, #0
 801369a:	d05e      	beq.n	801375a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 801369c:	68ba      	ldr	r2, [r7, #8]
 801369e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80136a0:	699b      	ldr	r3, [r3, #24]
 80136a2:	441a      	add	r2, r3
 80136a4:	2300      	movs	r3, #0
 80136a6:	9300      	str	r3, [sp, #0]
 80136a8:	2300      	movs	r3, #0
 80136aa:	2100      	movs	r1, #0
 80136ac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80136ae:	f7ff fe05 	bl	80132bc <xTimerGenericCommand>
 80136b2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80136b4:	6a3b      	ldr	r3, [r7, #32]
 80136b6:	2b00      	cmp	r3, #0
 80136b8:	d14f      	bne.n	801375a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80136ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80136be:	f383 8811 	msr	BASEPRI, r3
 80136c2:	f3bf 8f6f 	isb	sy
 80136c6:	f3bf 8f4f 	dsb	sy
 80136ca:	61bb      	str	r3, [r7, #24]
}
 80136cc:	bf00      	nop
 80136ce:	e7fe      	b.n	80136ce <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80136d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80136d2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80136d6:	f023 0301 	bic.w	r3, r3, #1
 80136da:	b2da      	uxtb	r2, r3
 80136dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80136de:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					break;
 80136e2:	e03a      	b.n	801375a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80136e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80136e6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80136ea:	f043 0301 	orr.w	r3, r3, #1
 80136ee:	b2da      	uxtb	r2, r3
 80136f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80136f2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80136f6:	68ba      	ldr	r2, [r7, #8]
 80136f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80136fa:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80136fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80136fe:	699b      	ldr	r3, [r3, #24]
 8013700:	2b00      	cmp	r3, #0
 8013702:	d10a      	bne.n	801371a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8013704:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013708:	f383 8811 	msr	BASEPRI, r3
 801370c:	f3bf 8f6f 	isb	sy
 8013710:	f3bf 8f4f 	dsb	sy
 8013714:	617b      	str	r3, [r7, #20]
}
 8013716:	bf00      	nop
 8013718:	e7fe      	b.n	8013718 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 801371a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801371c:	699a      	ldr	r2, [r3, #24]
 801371e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013720:	18d1      	adds	r1, r2, r3
 8013722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013724:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013726:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013728:	f7ff ff06 	bl	8013538 <prvInsertTimerInActiveList>
					break;
 801372c:	e015      	b.n	801375a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 801372e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013730:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8013734:	f003 0302 	and.w	r3, r3, #2
 8013738:	2b00      	cmp	r3, #0
 801373a:	d103      	bne.n	8013744 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 801373c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801373e:	f000 fbff 	bl	8013f40 <vPortFree>
 8013742:	e00a      	b.n	801375a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8013744:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013746:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 801374a:	f023 0301 	bic.w	r3, r3, #1
 801374e:	b2da      	uxtb	r2, r3
 8013750:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013752:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8013756:	e000      	b.n	801375a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 8013758:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801375a:	4b08      	ldr	r3, [pc, #32]	; (801377c <prvProcessReceivedCommands+0x1c0>)
 801375c:	681b      	ldr	r3, [r3, #0]
 801375e:	1d39      	adds	r1, r7, #4
 8013760:	2200      	movs	r2, #0
 8013762:	4618      	mov	r0, r3
 8013764:	f7fe f9a2 	bl	8011aac <xQueueReceive>
 8013768:	4603      	mov	r3, r0
 801376a:	2b00      	cmp	r3, #0
 801376c:	f47f af2a 	bne.w	80135c4 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8013770:	bf00      	nop
 8013772:	bf00      	nop
 8013774:	3730      	adds	r7, #48	; 0x30
 8013776:	46bd      	mov	sp, r7
 8013778:	bd80      	pop	{r7, pc}
 801377a:	bf00      	nop
 801377c:	20002330 	.word	0x20002330

08013780 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8013780:	b580      	push	{r7, lr}
 8013782:	b088      	sub	sp, #32
 8013784:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8013786:	e048      	b.n	801381a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8013788:	4b2d      	ldr	r3, [pc, #180]	; (8013840 <prvSwitchTimerLists+0xc0>)
 801378a:	681b      	ldr	r3, [r3, #0]
 801378c:	68db      	ldr	r3, [r3, #12]
 801378e:	681b      	ldr	r3, [r3, #0]
 8013790:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013792:	4b2b      	ldr	r3, [pc, #172]	; (8013840 <prvSwitchTimerLists+0xc0>)
 8013794:	681b      	ldr	r3, [r3, #0]
 8013796:	68db      	ldr	r3, [r3, #12]
 8013798:	68db      	ldr	r3, [r3, #12]
 801379a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801379c:	68fb      	ldr	r3, [r7, #12]
 801379e:	3304      	adds	r3, #4
 80137a0:	4618      	mov	r0, r3
 80137a2:	f7fd fe85 	bl	80114b0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80137a6:	68fb      	ldr	r3, [r7, #12]
 80137a8:	6a1b      	ldr	r3, [r3, #32]
 80137aa:	68f8      	ldr	r0, [r7, #12]
 80137ac:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80137ae:	68fb      	ldr	r3, [r7, #12]
 80137b0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80137b4:	f003 0304 	and.w	r3, r3, #4
 80137b8:	2b00      	cmp	r3, #0
 80137ba:	d02e      	beq.n	801381a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80137bc:	68fb      	ldr	r3, [r7, #12]
 80137be:	699b      	ldr	r3, [r3, #24]
 80137c0:	693a      	ldr	r2, [r7, #16]
 80137c2:	4413      	add	r3, r2
 80137c4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80137c6:	68ba      	ldr	r2, [r7, #8]
 80137c8:	693b      	ldr	r3, [r7, #16]
 80137ca:	429a      	cmp	r2, r3
 80137cc:	d90e      	bls.n	80137ec <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80137ce:	68fb      	ldr	r3, [r7, #12]
 80137d0:	68ba      	ldr	r2, [r7, #8]
 80137d2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80137d4:	68fb      	ldr	r3, [r7, #12]
 80137d6:	68fa      	ldr	r2, [r7, #12]
 80137d8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80137da:	4b19      	ldr	r3, [pc, #100]	; (8013840 <prvSwitchTimerLists+0xc0>)
 80137dc:	681a      	ldr	r2, [r3, #0]
 80137de:	68fb      	ldr	r3, [r7, #12]
 80137e0:	3304      	adds	r3, #4
 80137e2:	4619      	mov	r1, r3
 80137e4:	4610      	mov	r0, r2
 80137e6:	f7fd fe2a 	bl	801143e <vListInsert>
 80137ea:	e016      	b.n	801381a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80137ec:	2300      	movs	r3, #0
 80137ee:	9300      	str	r3, [sp, #0]
 80137f0:	2300      	movs	r3, #0
 80137f2:	693a      	ldr	r2, [r7, #16]
 80137f4:	2100      	movs	r1, #0
 80137f6:	68f8      	ldr	r0, [r7, #12]
 80137f8:	f7ff fd60 	bl	80132bc <xTimerGenericCommand>
 80137fc:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80137fe:	687b      	ldr	r3, [r7, #4]
 8013800:	2b00      	cmp	r3, #0
 8013802:	d10a      	bne.n	801381a <prvSwitchTimerLists+0x9a>
	__asm volatile
 8013804:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013808:	f383 8811 	msr	BASEPRI, r3
 801380c:	f3bf 8f6f 	isb	sy
 8013810:	f3bf 8f4f 	dsb	sy
 8013814:	603b      	str	r3, [r7, #0]
}
 8013816:	bf00      	nop
 8013818:	e7fe      	b.n	8013818 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801381a:	4b09      	ldr	r3, [pc, #36]	; (8013840 <prvSwitchTimerLists+0xc0>)
 801381c:	681b      	ldr	r3, [r3, #0]
 801381e:	681b      	ldr	r3, [r3, #0]
 8013820:	2b00      	cmp	r3, #0
 8013822:	d1b1      	bne.n	8013788 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8013824:	4b06      	ldr	r3, [pc, #24]	; (8013840 <prvSwitchTimerLists+0xc0>)
 8013826:	681b      	ldr	r3, [r3, #0]
 8013828:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 801382a:	4b06      	ldr	r3, [pc, #24]	; (8013844 <prvSwitchTimerLists+0xc4>)
 801382c:	681b      	ldr	r3, [r3, #0]
 801382e:	4a04      	ldr	r2, [pc, #16]	; (8013840 <prvSwitchTimerLists+0xc0>)
 8013830:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8013832:	4a04      	ldr	r2, [pc, #16]	; (8013844 <prvSwitchTimerLists+0xc4>)
 8013834:	697b      	ldr	r3, [r7, #20]
 8013836:	6013      	str	r3, [r2, #0]
}
 8013838:	bf00      	nop
 801383a:	3718      	adds	r7, #24
 801383c:	46bd      	mov	sp, r7
 801383e:	bd80      	pop	{r7, pc}
 8013840:	20002328 	.word	0x20002328
 8013844:	2000232c 	.word	0x2000232c

08013848 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8013848:	b580      	push	{r7, lr}
 801384a:	b082      	sub	sp, #8
 801384c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 801384e:	f000 f989 	bl	8013b64 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8013852:	4b15      	ldr	r3, [pc, #84]	; (80138a8 <prvCheckForValidListAndQueue+0x60>)
 8013854:	681b      	ldr	r3, [r3, #0]
 8013856:	2b00      	cmp	r3, #0
 8013858:	d120      	bne.n	801389c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 801385a:	4814      	ldr	r0, [pc, #80]	; (80138ac <prvCheckForValidListAndQueue+0x64>)
 801385c:	f7fd fd9e 	bl	801139c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8013860:	4813      	ldr	r0, [pc, #76]	; (80138b0 <prvCheckForValidListAndQueue+0x68>)
 8013862:	f7fd fd9b 	bl	801139c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8013866:	4b13      	ldr	r3, [pc, #76]	; (80138b4 <prvCheckForValidListAndQueue+0x6c>)
 8013868:	4a10      	ldr	r2, [pc, #64]	; (80138ac <prvCheckForValidListAndQueue+0x64>)
 801386a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 801386c:	4b12      	ldr	r3, [pc, #72]	; (80138b8 <prvCheckForValidListAndQueue+0x70>)
 801386e:	4a10      	ldr	r2, [pc, #64]	; (80138b0 <prvCheckForValidListAndQueue+0x68>)
 8013870:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8013872:	2300      	movs	r3, #0
 8013874:	9300      	str	r3, [sp, #0]
 8013876:	4b11      	ldr	r3, [pc, #68]	; (80138bc <prvCheckForValidListAndQueue+0x74>)
 8013878:	4a11      	ldr	r2, [pc, #68]	; (80138c0 <prvCheckForValidListAndQueue+0x78>)
 801387a:	2110      	movs	r1, #16
 801387c:	200a      	movs	r0, #10
 801387e:	f7fd fea9 	bl	80115d4 <xQueueGenericCreateStatic>
 8013882:	4603      	mov	r3, r0
 8013884:	4a08      	ldr	r2, [pc, #32]	; (80138a8 <prvCheckForValidListAndQueue+0x60>)
 8013886:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8013888:	4b07      	ldr	r3, [pc, #28]	; (80138a8 <prvCheckForValidListAndQueue+0x60>)
 801388a:	681b      	ldr	r3, [r3, #0]
 801388c:	2b00      	cmp	r3, #0
 801388e:	d005      	beq.n	801389c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8013890:	4b05      	ldr	r3, [pc, #20]	; (80138a8 <prvCheckForValidListAndQueue+0x60>)
 8013892:	681b      	ldr	r3, [r3, #0]
 8013894:	490b      	ldr	r1, [pc, #44]	; (80138c4 <prvCheckForValidListAndQueue+0x7c>)
 8013896:	4618      	mov	r0, r3
 8013898:	f7fe faf8 	bl	8011e8c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 801389c:	f000 f992 	bl	8013bc4 <vPortExitCritical>
}
 80138a0:	bf00      	nop
 80138a2:	46bd      	mov	sp, r7
 80138a4:	bd80      	pop	{r7, pc}
 80138a6:	bf00      	nop
 80138a8:	20002330 	.word	0x20002330
 80138ac:	20002300 	.word	0x20002300
 80138b0:	20002314 	.word	0x20002314
 80138b4:	20002328 	.word	0x20002328
 80138b8:	2000232c 	.word	0x2000232c
 80138bc:	200023dc 	.word	0x200023dc
 80138c0:	2000233c 	.word	0x2000233c
 80138c4:	08016a0c 	.word	0x08016a0c

080138c8 <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 80138c8:	b580      	push	{r7, lr}
 80138ca:	b08a      	sub	sp, #40	; 0x28
 80138cc:	af00      	add	r7, sp, #0
 80138ce:	60f8      	str	r0, [r7, #12]
 80138d0:	60b9      	str	r1, [r7, #8]
 80138d2:	607a      	str	r2, [r7, #4]
 80138d4:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 80138d6:	f06f 0301 	mvn.w	r3, #1
 80138da:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 80138dc:	68fb      	ldr	r3, [r7, #12]
 80138de:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 80138e0:	68bb      	ldr	r3, [r7, #8]
 80138e2:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 80138e4:	687b      	ldr	r3, [r7, #4]
 80138e6:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80138e8:	4b06      	ldr	r3, [pc, #24]	; (8013904 <xTimerPendFunctionCallFromISR+0x3c>)
 80138ea:	6818      	ldr	r0, [r3, #0]
 80138ec:	f107 0114 	add.w	r1, r7, #20
 80138f0:	2300      	movs	r3, #0
 80138f2:	683a      	ldr	r2, [r7, #0]
 80138f4:	f7fe f83e 	bl	8011974 <xQueueGenericSendFromISR>
 80138f8:	6278      	str	r0, [r7, #36]	; 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 80138fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 80138fc:	4618      	mov	r0, r3
 80138fe:	3728      	adds	r7, #40	; 0x28
 8013900:	46bd      	mov	sp, r7
 8013902:	bd80      	pop	{r7, pc}
 8013904:	20002330 	.word	0x20002330

08013908 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8013908:	b480      	push	{r7}
 801390a:	b085      	sub	sp, #20
 801390c:	af00      	add	r7, sp, #0
 801390e:	60f8      	str	r0, [r7, #12]
 8013910:	60b9      	str	r1, [r7, #8]
 8013912:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8013914:	68fb      	ldr	r3, [r7, #12]
 8013916:	3b04      	subs	r3, #4
 8013918:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 801391a:	68fb      	ldr	r3, [r7, #12]
 801391c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8013920:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8013922:	68fb      	ldr	r3, [r7, #12]
 8013924:	3b04      	subs	r3, #4
 8013926:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8013928:	68bb      	ldr	r3, [r7, #8]
 801392a:	f023 0201 	bic.w	r2, r3, #1
 801392e:	68fb      	ldr	r3, [r7, #12]
 8013930:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8013932:	68fb      	ldr	r3, [r7, #12]
 8013934:	3b04      	subs	r3, #4
 8013936:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8013938:	4a0c      	ldr	r2, [pc, #48]	; (801396c <pxPortInitialiseStack+0x64>)
 801393a:	68fb      	ldr	r3, [r7, #12]
 801393c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 801393e:	68fb      	ldr	r3, [r7, #12]
 8013940:	3b14      	subs	r3, #20
 8013942:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8013944:	687a      	ldr	r2, [r7, #4]
 8013946:	68fb      	ldr	r3, [r7, #12]
 8013948:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 801394a:	68fb      	ldr	r3, [r7, #12]
 801394c:	3b04      	subs	r3, #4
 801394e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8013950:	68fb      	ldr	r3, [r7, #12]
 8013952:	f06f 0202 	mvn.w	r2, #2
 8013956:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8013958:	68fb      	ldr	r3, [r7, #12]
 801395a:	3b20      	subs	r3, #32
 801395c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 801395e:	68fb      	ldr	r3, [r7, #12]
}
 8013960:	4618      	mov	r0, r3
 8013962:	3714      	adds	r7, #20
 8013964:	46bd      	mov	sp, r7
 8013966:	f85d 7b04 	ldr.w	r7, [sp], #4
 801396a:	4770      	bx	lr
 801396c:	08013971 	.word	0x08013971

08013970 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8013970:	b480      	push	{r7}
 8013972:	b085      	sub	sp, #20
 8013974:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8013976:	2300      	movs	r3, #0
 8013978:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 801397a:	4b12      	ldr	r3, [pc, #72]	; (80139c4 <prvTaskExitError+0x54>)
 801397c:	681b      	ldr	r3, [r3, #0]
 801397e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013982:	d00a      	beq.n	801399a <prvTaskExitError+0x2a>
	__asm volatile
 8013984:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013988:	f383 8811 	msr	BASEPRI, r3
 801398c:	f3bf 8f6f 	isb	sy
 8013990:	f3bf 8f4f 	dsb	sy
 8013994:	60fb      	str	r3, [r7, #12]
}
 8013996:	bf00      	nop
 8013998:	e7fe      	b.n	8013998 <prvTaskExitError+0x28>
	__asm volatile
 801399a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801399e:	f383 8811 	msr	BASEPRI, r3
 80139a2:	f3bf 8f6f 	isb	sy
 80139a6:	f3bf 8f4f 	dsb	sy
 80139aa:	60bb      	str	r3, [r7, #8]
}
 80139ac:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80139ae:	bf00      	nop
 80139b0:	687b      	ldr	r3, [r7, #4]
 80139b2:	2b00      	cmp	r3, #0
 80139b4:	d0fc      	beq.n	80139b0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80139b6:	bf00      	nop
 80139b8:	bf00      	nop
 80139ba:	3714      	adds	r7, #20
 80139bc:	46bd      	mov	sp, r7
 80139be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139c2:	4770      	bx	lr
 80139c4:	2000014c 	.word	0x2000014c
	...

080139d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80139d0:	4b07      	ldr	r3, [pc, #28]	; (80139f0 <pxCurrentTCBConst2>)
 80139d2:	6819      	ldr	r1, [r3, #0]
 80139d4:	6808      	ldr	r0, [r1, #0]
 80139d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80139da:	f380 8809 	msr	PSP, r0
 80139de:	f3bf 8f6f 	isb	sy
 80139e2:	f04f 0000 	mov.w	r0, #0
 80139e6:	f380 8811 	msr	BASEPRI, r0
 80139ea:	4770      	bx	lr
 80139ec:	f3af 8000 	nop.w

080139f0 <pxCurrentTCBConst2>:
 80139f0:	200021cc 	.word	0x200021cc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80139f4:	bf00      	nop
 80139f6:	bf00      	nop

080139f8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80139f8:	4808      	ldr	r0, [pc, #32]	; (8013a1c <prvPortStartFirstTask+0x24>)
 80139fa:	6800      	ldr	r0, [r0, #0]
 80139fc:	6800      	ldr	r0, [r0, #0]
 80139fe:	f380 8808 	msr	MSP, r0
 8013a02:	f04f 0000 	mov.w	r0, #0
 8013a06:	f380 8814 	msr	CONTROL, r0
 8013a0a:	b662      	cpsie	i
 8013a0c:	b661      	cpsie	f
 8013a0e:	f3bf 8f4f 	dsb	sy
 8013a12:	f3bf 8f6f 	isb	sy
 8013a16:	df00      	svc	0
 8013a18:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8013a1a:	bf00      	nop
 8013a1c:	e000ed08 	.word	0xe000ed08

08013a20 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8013a20:	b580      	push	{r7, lr}
 8013a22:	b086      	sub	sp, #24
 8013a24:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8013a26:	4b46      	ldr	r3, [pc, #280]	; (8013b40 <xPortStartScheduler+0x120>)
 8013a28:	681b      	ldr	r3, [r3, #0]
 8013a2a:	4a46      	ldr	r2, [pc, #280]	; (8013b44 <xPortStartScheduler+0x124>)
 8013a2c:	4293      	cmp	r3, r2
 8013a2e:	d10a      	bne.n	8013a46 <xPortStartScheduler+0x26>
	__asm volatile
 8013a30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013a34:	f383 8811 	msr	BASEPRI, r3
 8013a38:	f3bf 8f6f 	isb	sy
 8013a3c:	f3bf 8f4f 	dsb	sy
 8013a40:	613b      	str	r3, [r7, #16]
}
 8013a42:	bf00      	nop
 8013a44:	e7fe      	b.n	8013a44 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8013a46:	4b3e      	ldr	r3, [pc, #248]	; (8013b40 <xPortStartScheduler+0x120>)
 8013a48:	681b      	ldr	r3, [r3, #0]
 8013a4a:	4a3f      	ldr	r2, [pc, #252]	; (8013b48 <xPortStartScheduler+0x128>)
 8013a4c:	4293      	cmp	r3, r2
 8013a4e:	d10a      	bne.n	8013a66 <xPortStartScheduler+0x46>
	__asm volatile
 8013a50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013a54:	f383 8811 	msr	BASEPRI, r3
 8013a58:	f3bf 8f6f 	isb	sy
 8013a5c:	f3bf 8f4f 	dsb	sy
 8013a60:	60fb      	str	r3, [r7, #12]
}
 8013a62:	bf00      	nop
 8013a64:	e7fe      	b.n	8013a64 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8013a66:	4b39      	ldr	r3, [pc, #228]	; (8013b4c <xPortStartScheduler+0x12c>)
 8013a68:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8013a6a:	697b      	ldr	r3, [r7, #20]
 8013a6c:	781b      	ldrb	r3, [r3, #0]
 8013a6e:	b2db      	uxtb	r3, r3
 8013a70:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8013a72:	697b      	ldr	r3, [r7, #20]
 8013a74:	22ff      	movs	r2, #255	; 0xff
 8013a76:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8013a78:	697b      	ldr	r3, [r7, #20]
 8013a7a:	781b      	ldrb	r3, [r3, #0]
 8013a7c:	b2db      	uxtb	r3, r3
 8013a7e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8013a80:	78fb      	ldrb	r3, [r7, #3]
 8013a82:	b2db      	uxtb	r3, r3
 8013a84:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8013a88:	b2da      	uxtb	r2, r3
 8013a8a:	4b31      	ldr	r3, [pc, #196]	; (8013b50 <xPortStartScheduler+0x130>)
 8013a8c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8013a8e:	4b31      	ldr	r3, [pc, #196]	; (8013b54 <xPortStartScheduler+0x134>)
 8013a90:	2207      	movs	r2, #7
 8013a92:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8013a94:	e009      	b.n	8013aaa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8013a96:	4b2f      	ldr	r3, [pc, #188]	; (8013b54 <xPortStartScheduler+0x134>)
 8013a98:	681b      	ldr	r3, [r3, #0]
 8013a9a:	3b01      	subs	r3, #1
 8013a9c:	4a2d      	ldr	r2, [pc, #180]	; (8013b54 <xPortStartScheduler+0x134>)
 8013a9e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8013aa0:	78fb      	ldrb	r3, [r7, #3]
 8013aa2:	b2db      	uxtb	r3, r3
 8013aa4:	005b      	lsls	r3, r3, #1
 8013aa6:	b2db      	uxtb	r3, r3
 8013aa8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8013aaa:	78fb      	ldrb	r3, [r7, #3]
 8013aac:	b2db      	uxtb	r3, r3
 8013aae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8013ab2:	2b80      	cmp	r3, #128	; 0x80
 8013ab4:	d0ef      	beq.n	8013a96 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8013ab6:	4b27      	ldr	r3, [pc, #156]	; (8013b54 <xPortStartScheduler+0x134>)
 8013ab8:	681b      	ldr	r3, [r3, #0]
 8013aba:	f1c3 0307 	rsb	r3, r3, #7
 8013abe:	2b04      	cmp	r3, #4
 8013ac0:	d00a      	beq.n	8013ad8 <xPortStartScheduler+0xb8>
	__asm volatile
 8013ac2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013ac6:	f383 8811 	msr	BASEPRI, r3
 8013aca:	f3bf 8f6f 	isb	sy
 8013ace:	f3bf 8f4f 	dsb	sy
 8013ad2:	60bb      	str	r3, [r7, #8]
}
 8013ad4:	bf00      	nop
 8013ad6:	e7fe      	b.n	8013ad6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8013ad8:	4b1e      	ldr	r3, [pc, #120]	; (8013b54 <xPortStartScheduler+0x134>)
 8013ada:	681b      	ldr	r3, [r3, #0]
 8013adc:	021b      	lsls	r3, r3, #8
 8013ade:	4a1d      	ldr	r2, [pc, #116]	; (8013b54 <xPortStartScheduler+0x134>)
 8013ae0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8013ae2:	4b1c      	ldr	r3, [pc, #112]	; (8013b54 <xPortStartScheduler+0x134>)
 8013ae4:	681b      	ldr	r3, [r3, #0]
 8013ae6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8013aea:	4a1a      	ldr	r2, [pc, #104]	; (8013b54 <xPortStartScheduler+0x134>)
 8013aec:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8013aee:	687b      	ldr	r3, [r7, #4]
 8013af0:	b2da      	uxtb	r2, r3
 8013af2:	697b      	ldr	r3, [r7, #20]
 8013af4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8013af6:	4b18      	ldr	r3, [pc, #96]	; (8013b58 <xPortStartScheduler+0x138>)
 8013af8:	681b      	ldr	r3, [r3, #0]
 8013afa:	4a17      	ldr	r2, [pc, #92]	; (8013b58 <xPortStartScheduler+0x138>)
 8013afc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8013b00:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8013b02:	4b15      	ldr	r3, [pc, #84]	; (8013b58 <xPortStartScheduler+0x138>)
 8013b04:	681b      	ldr	r3, [r3, #0]
 8013b06:	4a14      	ldr	r2, [pc, #80]	; (8013b58 <xPortStartScheduler+0x138>)
 8013b08:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8013b0c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8013b0e:	f000 f8dd 	bl	8013ccc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8013b12:	4b12      	ldr	r3, [pc, #72]	; (8013b5c <xPortStartScheduler+0x13c>)
 8013b14:	2200      	movs	r2, #0
 8013b16:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8013b18:	f000 f8fc 	bl	8013d14 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8013b1c:	4b10      	ldr	r3, [pc, #64]	; (8013b60 <xPortStartScheduler+0x140>)
 8013b1e:	681b      	ldr	r3, [r3, #0]
 8013b20:	4a0f      	ldr	r2, [pc, #60]	; (8013b60 <xPortStartScheduler+0x140>)
 8013b22:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8013b26:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8013b28:	f7ff ff66 	bl	80139f8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8013b2c:	f7fe fe50 	bl	80127d0 <vTaskSwitchContext>
	prvTaskExitError();
 8013b30:	f7ff ff1e 	bl	8013970 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8013b34:	2300      	movs	r3, #0
}
 8013b36:	4618      	mov	r0, r3
 8013b38:	3718      	adds	r7, #24
 8013b3a:	46bd      	mov	sp, r7
 8013b3c:	bd80      	pop	{r7, pc}
 8013b3e:	bf00      	nop
 8013b40:	e000ed00 	.word	0xe000ed00
 8013b44:	410fc271 	.word	0x410fc271
 8013b48:	410fc270 	.word	0x410fc270
 8013b4c:	e000e400 	.word	0xe000e400
 8013b50:	20002424 	.word	0x20002424
 8013b54:	20002428 	.word	0x20002428
 8013b58:	e000ed20 	.word	0xe000ed20
 8013b5c:	2000014c 	.word	0x2000014c
 8013b60:	e000ef34 	.word	0xe000ef34

08013b64 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8013b64:	b480      	push	{r7}
 8013b66:	b083      	sub	sp, #12
 8013b68:	af00      	add	r7, sp, #0
	__asm volatile
 8013b6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013b6e:	f383 8811 	msr	BASEPRI, r3
 8013b72:	f3bf 8f6f 	isb	sy
 8013b76:	f3bf 8f4f 	dsb	sy
 8013b7a:	607b      	str	r3, [r7, #4]
}
 8013b7c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8013b7e:	4b0f      	ldr	r3, [pc, #60]	; (8013bbc <vPortEnterCritical+0x58>)
 8013b80:	681b      	ldr	r3, [r3, #0]
 8013b82:	3301      	adds	r3, #1
 8013b84:	4a0d      	ldr	r2, [pc, #52]	; (8013bbc <vPortEnterCritical+0x58>)
 8013b86:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8013b88:	4b0c      	ldr	r3, [pc, #48]	; (8013bbc <vPortEnterCritical+0x58>)
 8013b8a:	681b      	ldr	r3, [r3, #0]
 8013b8c:	2b01      	cmp	r3, #1
 8013b8e:	d10f      	bne.n	8013bb0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8013b90:	4b0b      	ldr	r3, [pc, #44]	; (8013bc0 <vPortEnterCritical+0x5c>)
 8013b92:	681b      	ldr	r3, [r3, #0]
 8013b94:	b2db      	uxtb	r3, r3
 8013b96:	2b00      	cmp	r3, #0
 8013b98:	d00a      	beq.n	8013bb0 <vPortEnterCritical+0x4c>
	__asm volatile
 8013b9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013b9e:	f383 8811 	msr	BASEPRI, r3
 8013ba2:	f3bf 8f6f 	isb	sy
 8013ba6:	f3bf 8f4f 	dsb	sy
 8013baa:	603b      	str	r3, [r7, #0]
}
 8013bac:	bf00      	nop
 8013bae:	e7fe      	b.n	8013bae <vPortEnterCritical+0x4a>
	}
}
 8013bb0:	bf00      	nop
 8013bb2:	370c      	adds	r7, #12
 8013bb4:	46bd      	mov	sp, r7
 8013bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013bba:	4770      	bx	lr
 8013bbc:	2000014c 	.word	0x2000014c
 8013bc0:	e000ed04 	.word	0xe000ed04

08013bc4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8013bc4:	b480      	push	{r7}
 8013bc6:	b083      	sub	sp, #12
 8013bc8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8013bca:	4b12      	ldr	r3, [pc, #72]	; (8013c14 <vPortExitCritical+0x50>)
 8013bcc:	681b      	ldr	r3, [r3, #0]
 8013bce:	2b00      	cmp	r3, #0
 8013bd0:	d10a      	bne.n	8013be8 <vPortExitCritical+0x24>
	__asm volatile
 8013bd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013bd6:	f383 8811 	msr	BASEPRI, r3
 8013bda:	f3bf 8f6f 	isb	sy
 8013bde:	f3bf 8f4f 	dsb	sy
 8013be2:	607b      	str	r3, [r7, #4]
}
 8013be4:	bf00      	nop
 8013be6:	e7fe      	b.n	8013be6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8013be8:	4b0a      	ldr	r3, [pc, #40]	; (8013c14 <vPortExitCritical+0x50>)
 8013bea:	681b      	ldr	r3, [r3, #0]
 8013bec:	3b01      	subs	r3, #1
 8013bee:	4a09      	ldr	r2, [pc, #36]	; (8013c14 <vPortExitCritical+0x50>)
 8013bf0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8013bf2:	4b08      	ldr	r3, [pc, #32]	; (8013c14 <vPortExitCritical+0x50>)
 8013bf4:	681b      	ldr	r3, [r3, #0]
 8013bf6:	2b00      	cmp	r3, #0
 8013bf8:	d105      	bne.n	8013c06 <vPortExitCritical+0x42>
 8013bfa:	2300      	movs	r3, #0
 8013bfc:	603b      	str	r3, [r7, #0]
	__asm volatile
 8013bfe:	683b      	ldr	r3, [r7, #0]
 8013c00:	f383 8811 	msr	BASEPRI, r3
}
 8013c04:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8013c06:	bf00      	nop
 8013c08:	370c      	adds	r7, #12
 8013c0a:	46bd      	mov	sp, r7
 8013c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c10:	4770      	bx	lr
 8013c12:	bf00      	nop
 8013c14:	2000014c 	.word	0x2000014c
	...

08013c20 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8013c20:	f3ef 8009 	mrs	r0, PSP
 8013c24:	f3bf 8f6f 	isb	sy
 8013c28:	4b15      	ldr	r3, [pc, #84]	; (8013c80 <pxCurrentTCBConst>)
 8013c2a:	681a      	ldr	r2, [r3, #0]
 8013c2c:	f01e 0f10 	tst.w	lr, #16
 8013c30:	bf08      	it	eq
 8013c32:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8013c36:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013c3a:	6010      	str	r0, [r2, #0]
 8013c3c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8013c40:	f04f 0050 	mov.w	r0, #80	; 0x50
 8013c44:	f380 8811 	msr	BASEPRI, r0
 8013c48:	f3bf 8f4f 	dsb	sy
 8013c4c:	f3bf 8f6f 	isb	sy
 8013c50:	f7fe fdbe 	bl	80127d0 <vTaskSwitchContext>
 8013c54:	f04f 0000 	mov.w	r0, #0
 8013c58:	f380 8811 	msr	BASEPRI, r0
 8013c5c:	bc09      	pop	{r0, r3}
 8013c5e:	6819      	ldr	r1, [r3, #0]
 8013c60:	6808      	ldr	r0, [r1, #0]
 8013c62:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013c66:	f01e 0f10 	tst.w	lr, #16
 8013c6a:	bf08      	it	eq
 8013c6c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8013c70:	f380 8809 	msr	PSP, r0
 8013c74:	f3bf 8f6f 	isb	sy
 8013c78:	4770      	bx	lr
 8013c7a:	bf00      	nop
 8013c7c:	f3af 8000 	nop.w

08013c80 <pxCurrentTCBConst>:
 8013c80:	200021cc 	.word	0x200021cc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8013c84:	bf00      	nop
 8013c86:	bf00      	nop

08013c88 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8013c88:	b580      	push	{r7, lr}
 8013c8a:	b082      	sub	sp, #8
 8013c8c:	af00      	add	r7, sp, #0
	__asm volatile
 8013c8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013c92:	f383 8811 	msr	BASEPRI, r3
 8013c96:	f3bf 8f6f 	isb	sy
 8013c9a:	f3bf 8f4f 	dsb	sy
 8013c9e:	607b      	str	r3, [r7, #4]
}
 8013ca0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8013ca2:	f7fe fcdd 	bl	8012660 <xTaskIncrementTick>
 8013ca6:	4603      	mov	r3, r0
 8013ca8:	2b00      	cmp	r3, #0
 8013caa:	d003      	beq.n	8013cb4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8013cac:	4b06      	ldr	r3, [pc, #24]	; (8013cc8 <SysTick_Handler+0x40>)
 8013cae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013cb2:	601a      	str	r2, [r3, #0]
 8013cb4:	2300      	movs	r3, #0
 8013cb6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8013cb8:	683b      	ldr	r3, [r7, #0]
 8013cba:	f383 8811 	msr	BASEPRI, r3
}
 8013cbe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8013cc0:	bf00      	nop
 8013cc2:	3708      	adds	r7, #8
 8013cc4:	46bd      	mov	sp, r7
 8013cc6:	bd80      	pop	{r7, pc}
 8013cc8:	e000ed04 	.word	0xe000ed04

08013ccc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8013ccc:	b480      	push	{r7}
 8013cce:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8013cd0:	4b0b      	ldr	r3, [pc, #44]	; (8013d00 <vPortSetupTimerInterrupt+0x34>)
 8013cd2:	2200      	movs	r2, #0
 8013cd4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8013cd6:	4b0b      	ldr	r3, [pc, #44]	; (8013d04 <vPortSetupTimerInterrupt+0x38>)
 8013cd8:	2200      	movs	r2, #0
 8013cda:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8013cdc:	4b0a      	ldr	r3, [pc, #40]	; (8013d08 <vPortSetupTimerInterrupt+0x3c>)
 8013cde:	681b      	ldr	r3, [r3, #0]
 8013ce0:	4a0a      	ldr	r2, [pc, #40]	; (8013d0c <vPortSetupTimerInterrupt+0x40>)
 8013ce2:	fba2 2303 	umull	r2, r3, r2, r3
 8013ce6:	099b      	lsrs	r3, r3, #6
 8013ce8:	4a09      	ldr	r2, [pc, #36]	; (8013d10 <vPortSetupTimerInterrupt+0x44>)
 8013cea:	3b01      	subs	r3, #1
 8013cec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8013cee:	4b04      	ldr	r3, [pc, #16]	; (8013d00 <vPortSetupTimerInterrupt+0x34>)
 8013cf0:	2207      	movs	r2, #7
 8013cf2:	601a      	str	r2, [r3, #0]
}
 8013cf4:	bf00      	nop
 8013cf6:	46bd      	mov	sp, r7
 8013cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013cfc:	4770      	bx	lr
 8013cfe:	bf00      	nop
 8013d00:	e000e010 	.word	0xe000e010
 8013d04:	e000e018 	.word	0xe000e018
 8013d08:	20000000 	.word	0x20000000
 8013d0c:	10624dd3 	.word	0x10624dd3
 8013d10:	e000e014 	.word	0xe000e014

08013d14 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8013d14:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8013d24 <vPortEnableVFP+0x10>
 8013d18:	6801      	ldr	r1, [r0, #0]
 8013d1a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8013d1e:	6001      	str	r1, [r0, #0]
 8013d20:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8013d22:	bf00      	nop
 8013d24:	e000ed88 	.word	0xe000ed88

08013d28 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8013d28:	b480      	push	{r7}
 8013d2a:	b085      	sub	sp, #20
 8013d2c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8013d2e:	f3ef 8305 	mrs	r3, IPSR
 8013d32:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8013d34:	68fb      	ldr	r3, [r7, #12]
 8013d36:	2b0f      	cmp	r3, #15
 8013d38:	d914      	bls.n	8013d64 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8013d3a:	4a17      	ldr	r2, [pc, #92]	; (8013d98 <vPortValidateInterruptPriority+0x70>)
 8013d3c:	68fb      	ldr	r3, [r7, #12]
 8013d3e:	4413      	add	r3, r2
 8013d40:	781b      	ldrb	r3, [r3, #0]
 8013d42:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8013d44:	4b15      	ldr	r3, [pc, #84]	; (8013d9c <vPortValidateInterruptPriority+0x74>)
 8013d46:	781b      	ldrb	r3, [r3, #0]
 8013d48:	7afa      	ldrb	r2, [r7, #11]
 8013d4a:	429a      	cmp	r2, r3
 8013d4c:	d20a      	bcs.n	8013d64 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8013d4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013d52:	f383 8811 	msr	BASEPRI, r3
 8013d56:	f3bf 8f6f 	isb	sy
 8013d5a:	f3bf 8f4f 	dsb	sy
 8013d5e:	607b      	str	r3, [r7, #4]
}
 8013d60:	bf00      	nop
 8013d62:	e7fe      	b.n	8013d62 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8013d64:	4b0e      	ldr	r3, [pc, #56]	; (8013da0 <vPortValidateInterruptPriority+0x78>)
 8013d66:	681b      	ldr	r3, [r3, #0]
 8013d68:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8013d6c:	4b0d      	ldr	r3, [pc, #52]	; (8013da4 <vPortValidateInterruptPriority+0x7c>)
 8013d6e:	681b      	ldr	r3, [r3, #0]
 8013d70:	429a      	cmp	r2, r3
 8013d72:	d90a      	bls.n	8013d8a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8013d74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013d78:	f383 8811 	msr	BASEPRI, r3
 8013d7c:	f3bf 8f6f 	isb	sy
 8013d80:	f3bf 8f4f 	dsb	sy
 8013d84:	603b      	str	r3, [r7, #0]
}
 8013d86:	bf00      	nop
 8013d88:	e7fe      	b.n	8013d88 <vPortValidateInterruptPriority+0x60>
	}
 8013d8a:	bf00      	nop
 8013d8c:	3714      	adds	r7, #20
 8013d8e:	46bd      	mov	sp, r7
 8013d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d94:	4770      	bx	lr
 8013d96:	bf00      	nop
 8013d98:	e000e3f0 	.word	0xe000e3f0
 8013d9c:	20002424 	.word	0x20002424
 8013da0:	e000ed0c 	.word	0xe000ed0c
 8013da4:	20002428 	.word	0x20002428

08013da8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8013da8:	b580      	push	{r7, lr}
 8013daa:	b08a      	sub	sp, #40	; 0x28
 8013dac:	af00      	add	r7, sp, #0
 8013dae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8013db0:	2300      	movs	r3, #0
 8013db2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8013db4:	f7fe fb9a 	bl	80124ec <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8013db8:	4b5b      	ldr	r3, [pc, #364]	; (8013f28 <pvPortMalloc+0x180>)
 8013dba:	681b      	ldr	r3, [r3, #0]
 8013dbc:	2b00      	cmp	r3, #0
 8013dbe:	d101      	bne.n	8013dc4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8013dc0:	f000 f920 	bl	8014004 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8013dc4:	4b59      	ldr	r3, [pc, #356]	; (8013f2c <pvPortMalloc+0x184>)
 8013dc6:	681a      	ldr	r2, [r3, #0]
 8013dc8:	687b      	ldr	r3, [r7, #4]
 8013dca:	4013      	ands	r3, r2
 8013dcc:	2b00      	cmp	r3, #0
 8013dce:	f040 8093 	bne.w	8013ef8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8013dd2:	687b      	ldr	r3, [r7, #4]
 8013dd4:	2b00      	cmp	r3, #0
 8013dd6:	d01d      	beq.n	8013e14 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8013dd8:	2208      	movs	r2, #8
 8013dda:	687b      	ldr	r3, [r7, #4]
 8013ddc:	4413      	add	r3, r2
 8013dde:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8013de0:	687b      	ldr	r3, [r7, #4]
 8013de2:	f003 0307 	and.w	r3, r3, #7
 8013de6:	2b00      	cmp	r3, #0
 8013de8:	d014      	beq.n	8013e14 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8013dea:	687b      	ldr	r3, [r7, #4]
 8013dec:	f023 0307 	bic.w	r3, r3, #7
 8013df0:	3308      	adds	r3, #8
 8013df2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8013df4:	687b      	ldr	r3, [r7, #4]
 8013df6:	f003 0307 	and.w	r3, r3, #7
 8013dfa:	2b00      	cmp	r3, #0
 8013dfc:	d00a      	beq.n	8013e14 <pvPortMalloc+0x6c>
	__asm volatile
 8013dfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013e02:	f383 8811 	msr	BASEPRI, r3
 8013e06:	f3bf 8f6f 	isb	sy
 8013e0a:	f3bf 8f4f 	dsb	sy
 8013e0e:	617b      	str	r3, [r7, #20]
}
 8013e10:	bf00      	nop
 8013e12:	e7fe      	b.n	8013e12 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8013e14:	687b      	ldr	r3, [r7, #4]
 8013e16:	2b00      	cmp	r3, #0
 8013e18:	d06e      	beq.n	8013ef8 <pvPortMalloc+0x150>
 8013e1a:	4b45      	ldr	r3, [pc, #276]	; (8013f30 <pvPortMalloc+0x188>)
 8013e1c:	681b      	ldr	r3, [r3, #0]
 8013e1e:	687a      	ldr	r2, [r7, #4]
 8013e20:	429a      	cmp	r2, r3
 8013e22:	d869      	bhi.n	8013ef8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8013e24:	4b43      	ldr	r3, [pc, #268]	; (8013f34 <pvPortMalloc+0x18c>)
 8013e26:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8013e28:	4b42      	ldr	r3, [pc, #264]	; (8013f34 <pvPortMalloc+0x18c>)
 8013e2a:	681b      	ldr	r3, [r3, #0]
 8013e2c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8013e2e:	e004      	b.n	8013e3a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8013e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013e32:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8013e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013e36:	681b      	ldr	r3, [r3, #0]
 8013e38:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8013e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013e3c:	685b      	ldr	r3, [r3, #4]
 8013e3e:	687a      	ldr	r2, [r7, #4]
 8013e40:	429a      	cmp	r2, r3
 8013e42:	d903      	bls.n	8013e4c <pvPortMalloc+0xa4>
 8013e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013e46:	681b      	ldr	r3, [r3, #0]
 8013e48:	2b00      	cmp	r3, #0
 8013e4a:	d1f1      	bne.n	8013e30 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8013e4c:	4b36      	ldr	r3, [pc, #216]	; (8013f28 <pvPortMalloc+0x180>)
 8013e4e:	681b      	ldr	r3, [r3, #0]
 8013e50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013e52:	429a      	cmp	r2, r3
 8013e54:	d050      	beq.n	8013ef8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8013e56:	6a3b      	ldr	r3, [r7, #32]
 8013e58:	681b      	ldr	r3, [r3, #0]
 8013e5a:	2208      	movs	r2, #8
 8013e5c:	4413      	add	r3, r2
 8013e5e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8013e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013e62:	681a      	ldr	r2, [r3, #0]
 8013e64:	6a3b      	ldr	r3, [r7, #32]
 8013e66:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8013e68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013e6a:	685a      	ldr	r2, [r3, #4]
 8013e6c:	687b      	ldr	r3, [r7, #4]
 8013e6e:	1ad2      	subs	r2, r2, r3
 8013e70:	2308      	movs	r3, #8
 8013e72:	005b      	lsls	r3, r3, #1
 8013e74:	429a      	cmp	r2, r3
 8013e76:	d91f      	bls.n	8013eb8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8013e78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013e7a:	687b      	ldr	r3, [r7, #4]
 8013e7c:	4413      	add	r3, r2
 8013e7e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8013e80:	69bb      	ldr	r3, [r7, #24]
 8013e82:	f003 0307 	and.w	r3, r3, #7
 8013e86:	2b00      	cmp	r3, #0
 8013e88:	d00a      	beq.n	8013ea0 <pvPortMalloc+0xf8>
	__asm volatile
 8013e8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013e8e:	f383 8811 	msr	BASEPRI, r3
 8013e92:	f3bf 8f6f 	isb	sy
 8013e96:	f3bf 8f4f 	dsb	sy
 8013e9a:	613b      	str	r3, [r7, #16]
}
 8013e9c:	bf00      	nop
 8013e9e:	e7fe      	b.n	8013e9e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8013ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013ea2:	685a      	ldr	r2, [r3, #4]
 8013ea4:	687b      	ldr	r3, [r7, #4]
 8013ea6:	1ad2      	subs	r2, r2, r3
 8013ea8:	69bb      	ldr	r3, [r7, #24]
 8013eaa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8013eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013eae:	687a      	ldr	r2, [r7, #4]
 8013eb0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8013eb2:	69b8      	ldr	r0, [r7, #24]
 8013eb4:	f000 f908 	bl	80140c8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8013eb8:	4b1d      	ldr	r3, [pc, #116]	; (8013f30 <pvPortMalloc+0x188>)
 8013eba:	681a      	ldr	r2, [r3, #0]
 8013ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013ebe:	685b      	ldr	r3, [r3, #4]
 8013ec0:	1ad3      	subs	r3, r2, r3
 8013ec2:	4a1b      	ldr	r2, [pc, #108]	; (8013f30 <pvPortMalloc+0x188>)
 8013ec4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8013ec6:	4b1a      	ldr	r3, [pc, #104]	; (8013f30 <pvPortMalloc+0x188>)
 8013ec8:	681a      	ldr	r2, [r3, #0]
 8013eca:	4b1b      	ldr	r3, [pc, #108]	; (8013f38 <pvPortMalloc+0x190>)
 8013ecc:	681b      	ldr	r3, [r3, #0]
 8013ece:	429a      	cmp	r2, r3
 8013ed0:	d203      	bcs.n	8013eda <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8013ed2:	4b17      	ldr	r3, [pc, #92]	; (8013f30 <pvPortMalloc+0x188>)
 8013ed4:	681b      	ldr	r3, [r3, #0]
 8013ed6:	4a18      	ldr	r2, [pc, #96]	; (8013f38 <pvPortMalloc+0x190>)
 8013ed8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8013eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013edc:	685a      	ldr	r2, [r3, #4]
 8013ede:	4b13      	ldr	r3, [pc, #76]	; (8013f2c <pvPortMalloc+0x184>)
 8013ee0:	681b      	ldr	r3, [r3, #0]
 8013ee2:	431a      	orrs	r2, r3
 8013ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013ee6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8013ee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013eea:	2200      	movs	r2, #0
 8013eec:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8013eee:	4b13      	ldr	r3, [pc, #76]	; (8013f3c <pvPortMalloc+0x194>)
 8013ef0:	681b      	ldr	r3, [r3, #0]
 8013ef2:	3301      	adds	r3, #1
 8013ef4:	4a11      	ldr	r2, [pc, #68]	; (8013f3c <pvPortMalloc+0x194>)
 8013ef6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8013ef8:	f7fe fb06 	bl	8012508 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8013efc:	69fb      	ldr	r3, [r7, #28]
 8013efe:	f003 0307 	and.w	r3, r3, #7
 8013f02:	2b00      	cmp	r3, #0
 8013f04:	d00a      	beq.n	8013f1c <pvPortMalloc+0x174>
	__asm volatile
 8013f06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013f0a:	f383 8811 	msr	BASEPRI, r3
 8013f0e:	f3bf 8f6f 	isb	sy
 8013f12:	f3bf 8f4f 	dsb	sy
 8013f16:	60fb      	str	r3, [r7, #12]
}
 8013f18:	bf00      	nop
 8013f1a:	e7fe      	b.n	8013f1a <pvPortMalloc+0x172>
	return pvReturn;
 8013f1c:	69fb      	ldr	r3, [r7, #28]
}
 8013f1e:	4618      	mov	r0, r3
 8013f20:	3728      	adds	r7, #40	; 0x28
 8013f22:	46bd      	mov	sp, r7
 8013f24:	bd80      	pop	{r7, pc}
 8013f26:	bf00      	nop
 8013f28:	20006034 	.word	0x20006034
 8013f2c:	20006048 	.word	0x20006048
 8013f30:	20006038 	.word	0x20006038
 8013f34:	2000602c 	.word	0x2000602c
 8013f38:	2000603c 	.word	0x2000603c
 8013f3c:	20006040 	.word	0x20006040

08013f40 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8013f40:	b580      	push	{r7, lr}
 8013f42:	b086      	sub	sp, #24
 8013f44:	af00      	add	r7, sp, #0
 8013f46:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8013f48:	687b      	ldr	r3, [r7, #4]
 8013f4a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8013f4c:	687b      	ldr	r3, [r7, #4]
 8013f4e:	2b00      	cmp	r3, #0
 8013f50:	d04d      	beq.n	8013fee <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8013f52:	2308      	movs	r3, #8
 8013f54:	425b      	negs	r3, r3
 8013f56:	697a      	ldr	r2, [r7, #20]
 8013f58:	4413      	add	r3, r2
 8013f5a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8013f5c:	697b      	ldr	r3, [r7, #20]
 8013f5e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8013f60:	693b      	ldr	r3, [r7, #16]
 8013f62:	685a      	ldr	r2, [r3, #4]
 8013f64:	4b24      	ldr	r3, [pc, #144]	; (8013ff8 <vPortFree+0xb8>)
 8013f66:	681b      	ldr	r3, [r3, #0]
 8013f68:	4013      	ands	r3, r2
 8013f6a:	2b00      	cmp	r3, #0
 8013f6c:	d10a      	bne.n	8013f84 <vPortFree+0x44>
	__asm volatile
 8013f6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013f72:	f383 8811 	msr	BASEPRI, r3
 8013f76:	f3bf 8f6f 	isb	sy
 8013f7a:	f3bf 8f4f 	dsb	sy
 8013f7e:	60fb      	str	r3, [r7, #12]
}
 8013f80:	bf00      	nop
 8013f82:	e7fe      	b.n	8013f82 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8013f84:	693b      	ldr	r3, [r7, #16]
 8013f86:	681b      	ldr	r3, [r3, #0]
 8013f88:	2b00      	cmp	r3, #0
 8013f8a:	d00a      	beq.n	8013fa2 <vPortFree+0x62>
	__asm volatile
 8013f8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013f90:	f383 8811 	msr	BASEPRI, r3
 8013f94:	f3bf 8f6f 	isb	sy
 8013f98:	f3bf 8f4f 	dsb	sy
 8013f9c:	60bb      	str	r3, [r7, #8]
}
 8013f9e:	bf00      	nop
 8013fa0:	e7fe      	b.n	8013fa0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8013fa2:	693b      	ldr	r3, [r7, #16]
 8013fa4:	685a      	ldr	r2, [r3, #4]
 8013fa6:	4b14      	ldr	r3, [pc, #80]	; (8013ff8 <vPortFree+0xb8>)
 8013fa8:	681b      	ldr	r3, [r3, #0]
 8013faa:	4013      	ands	r3, r2
 8013fac:	2b00      	cmp	r3, #0
 8013fae:	d01e      	beq.n	8013fee <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8013fb0:	693b      	ldr	r3, [r7, #16]
 8013fb2:	681b      	ldr	r3, [r3, #0]
 8013fb4:	2b00      	cmp	r3, #0
 8013fb6:	d11a      	bne.n	8013fee <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8013fb8:	693b      	ldr	r3, [r7, #16]
 8013fba:	685a      	ldr	r2, [r3, #4]
 8013fbc:	4b0e      	ldr	r3, [pc, #56]	; (8013ff8 <vPortFree+0xb8>)
 8013fbe:	681b      	ldr	r3, [r3, #0]
 8013fc0:	43db      	mvns	r3, r3
 8013fc2:	401a      	ands	r2, r3
 8013fc4:	693b      	ldr	r3, [r7, #16]
 8013fc6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8013fc8:	f7fe fa90 	bl	80124ec <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8013fcc:	693b      	ldr	r3, [r7, #16]
 8013fce:	685a      	ldr	r2, [r3, #4]
 8013fd0:	4b0a      	ldr	r3, [pc, #40]	; (8013ffc <vPortFree+0xbc>)
 8013fd2:	681b      	ldr	r3, [r3, #0]
 8013fd4:	4413      	add	r3, r2
 8013fd6:	4a09      	ldr	r2, [pc, #36]	; (8013ffc <vPortFree+0xbc>)
 8013fd8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8013fda:	6938      	ldr	r0, [r7, #16]
 8013fdc:	f000 f874 	bl	80140c8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8013fe0:	4b07      	ldr	r3, [pc, #28]	; (8014000 <vPortFree+0xc0>)
 8013fe2:	681b      	ldr	r3, [r3, #0]
 8013fe4:	3301      	adds	r3, #1
 8013fe6:	4a06      	ldr	r2, [pc, #24]	; (8014000 <vPortFree+0xc0>)
 8013fe8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8013fea:	f7fe fa8d 	bl	8012508 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8013fee:	bf00      	nop
 8013ff0:	3718      	adds	r7, #24
 8013ff2:	46bd      	mov	sp, r7
 8013ff4:	bd80      	pop	{r7, pc}
 8013ff6:	bf00      	nop
 8013ff8:	20006048 	.word	0x20006048
 8013ffc:	20006038 	.word	0x20006038
 8014000:	20006044 	.word	0x20006044

08014004 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8014004:	b480      	push	{r7}
 8014006:	b085      	sub	sp, #20
 8014008:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801400a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 801400e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8014010:	4b27      	ldr	r3, [pc, #156]	; (80140b0 <prvHeapInit+0xac>)
 8014012:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8014014:	68fb      	ldr	r3, [r7, #12]
 8014016:	f003 0307 	and.w	r3, r3, #7
 801401a:	2b00      	cmp	r3, #0
 801401c:	d00c      	beq.n	8014038 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801401e:	68fb      	ldr	r3, [r7, #12]
 8014020:	3307      	adds	r3, #7
 8014022:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8014024:	68fb      	ldr	r3, [r7, #12]
 8014026:	f023 0307 	bic.w	r3, r3, #7
 801402a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 801402c:	68ba      	ldr	r2, [r7, #8]
 801402e:	68fb      	ldr	r3, [r7, #12]
 8014030:	1ad3      	subs	r3, r2, r3
 8014032:	4a1f      	ldr	r2, [pc, #124]	; (80140b0 <prvHeapInit+0xac>)
 8014034:	4413      	add	r3, r2
 8014036:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8014038:	68fb      	ldr	r3, [r7, #12]
 801403a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 801403c:	4a1d      	ldr	r2, [pc, #116]	; (80140b4 <prvHeapInit+0xb0>)
 801403e:	687b      	ldr	r3, [r7, #4]
 8014040:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8014042:	4b1c      	ldr	r3, [pc, #112]	; (80140b4 <prvHeapInit+0xb0>)
 8014044:	2200      	movs	r2, #0
 8014046:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8014048:	687b      	ldr	r3, [r7, #4]
 801404a:	68ba      	ldr	r2, [r7, #8]
 801404c:	4413      	add	r3, r2
 801404e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8014050:	2208      	movs	r2, #8
 8014052:	68fb      	ldr	r3, [r7, #12]
 8014054:	1a9b      	subs	r3, r3, r2
 8014056:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8014058:	68fb      	ldr	r3, [r7, #12]
 801405a:	f023 0307 	bic.w	r3, r3, #7
 801405e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8014060:	68fb      	ldr	r3, [r7, #12]
 8014062:	4a15      	ldr	r2, [pc, #84]	; (80140b8 <prvHeapInit+0xb4>)
 8014064:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8014066:	4b14      	ldr	r3, [pc, #80]	; (80140b8 <prvHeapInit+0xb4>)
 8014068:	681b      	ldr	r3, [r3, #0]
 801406a:	2200      	movs	r2, #0
 801406c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801406e:	4b12      	ldr	r3, [pc, #72]	; (80140b8 <prvHeapInit+0xb4>)
 8014070:	681b      	ldr	r3, [r3, #0]
 8014072:	2200      	movs	r2, #0
 8014074:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8014076:	687b      	ldr	r3, [r7, #4]
 8014078:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 801407a:	683b      	ldr	r3, [r7, #0]
 801407c:	68fa      	ldr	r2, [r7, #12]
 801407e:	1ad2      	subs	r2, r2, r3
 8014080:	683b      	ldr	r3, [r7, #0]
 8014082:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8014084:	4b0c      	ldr	r3, [pc, #48]	; (80140b8 <prvHeapInit+0xb4>)
 8014086:	681a      	ldr	r2, [r3, #0]
 8014088:	683b      	ldr	r3, [r7, #0]
 801408a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801408c:	683b      	ldr	r3, [r7, #0]
 801408e:	685b      	ldr	r3, [r3, #4]
 8014090:	4a0a      	ldr	r2, [pc, #40]	; (80140bc <prvHeapInit+0xb8>)
 8014092:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8014094:	683b      	ldr	r3, [r7, #0]
 8014096:	685b      	ldr	r3, [r3, #4]
 8014098:	4a09      	ldr	r2, [pc, #36]	; (80140c0 <prvHeapInit+0xbc>)
 801409a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 801409c:	4b09      	ldr	r3, [pc, #36]	; (80140c4 <prvHeapInit+0xc0>)
 801409e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80140a2:	601a      	str	r2, [r3, #0]
}
 80140a4:	bf00      	nop
 80140a6:	3714      	adds	r7, #20
 80140a8:	46bd      	mov	sp, r7
 80140aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80140ae:	4770      	bx	lr
 80140b0:	2000242c 	.word	0x2000242c
 80140b4:	2000602c 	.word	0x2000602c
 80140b8:	20006034 	.word	0x20006034
 80140bc:	2000603c 	.word	0x2000603c
 80140c0:	20006038 	.word	0x20006038
 80140c4:	20006048 	.word	0x20006048

080140c8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80140c8:	b480      	push	{r7}
 80140ca:	b085      	sub	sp, #20
 80140cc:	af00      	add	r7, sp, #0
 80140ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80140d0:	4b28      	ldr	r3, [pc, #160]	; (8014174 <prvInsertBlockIntoFreeList+0xac>)
 80140d2:	60fb      	str	r3, [r7, #12]
 80140d4:	e002      	b.n	80140dc <prvInsertBlockIntoFreeList+0x14>
 80140d6:	68fb      	ldr	r3, [r7, #12]
 80140d8:	681b      	ldr	r3, [r3, #0]
 80140da:	60fb      	str	r3, [r7, #12]
 80140dc:	68fb      	ldr	r3, [r7, #12]
 80140de:	681b      	ldr	r3, [r3, #0]
 80140e0:	687a      	ldr	r2, [r7, #4]
 80140e2:	429a      	cmp	r2, r3
 80140e4:	d8f7      	bhi.n	80140d6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80140e6:	68fb      	ldr	r3, [r7, #12]
 80140e8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80140ea:	68fb      	ldr	r3, [r7, #12]
 80140ec:	685b      	ldr	r3, [r3, #4]
 80140ee:	68ba      	ldr	r2, [r7, #8]
 80140f0:	4413      	add	r3, r2
 80140f2:	687a      	ldr	r2, [r7, #4]
 80140f4:	429a      	cmp	r2, r3
 80140f6:	d108      	bne.n	801410a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80140f8:	68fb      	ldr	r3, [r7, #12]
 80140fa:	685a      	ldr	r2, [r3, #4]
 80140fc:	687b      	ldr	r3, [r7, #4]
 80140fe:	685b      	ldr	r3, [r3, #4]
 8014100:	441a      	add	r2, r3
 8014102:	68fb      	ldr	r3, [r7, #12]
 8014104:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8014106:	68fb      	ldr	r3, [r7, #12]
 8014108:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801410a:	687b      	ldr	r3, [r7, #4]
 801410c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801410e:	687b      	ldr	r3, [r7, #4]
 8014110:	685b      	ldr	r3, [r3, #4]
 8014112:	68ba      	ldr	r2, [r7, #8]
 8014114:	441a      	add	r2, r3
 8014116:	68fb      	ldr	r3, [r7, #12]
 8014118:	681b      	ldr	r3, [r3, #0]
 801411a:	429a      	cmp	r2, r3
 801411c:	d118      	bne.n	8014150 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801411e:	68fb      	ldr	r3, [r7, #12]
 8014120:	681a      	ldr	r2, [r3, #0]
 8014122:	4b15      	ldr	r3, [pc, #84]	; (8014178 <prvInsertBlockIntoFreeList+0xb0>)
 8014124:	681b      	ldr	r3, [r3, #0]
 8014126:	429a      	cmp	r2, r3
 8014128:	d00d      	beq.n	8014146 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801412a:	687b      	ldr	r3, [r7, #4]
 801412c:	685a      	ldr	r2, [r3, #4]
 801412e:	68fb      	ldr	r3, [r7, #12]
 8014130:	681b      	ldr	r3, [r3, #0]
 8014132:	685b      	ldr	r3, [r3, #4]
 8014134:	441a      	add	r2, r3
 8014136:	687b      	ldr	r3, [r7, #4]
 8014138:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801413a:	68fb      	ldr	r3, [r7, #12]
 801413c:	681b      	ldr	r3, [r3, #0]
 801413e:	681a      	ldr	r2, [r3, #0]
 8014140:	687b      	ldr	r3, [r7, #4]
 8014142:	601a      	str	r2, [r3, #0]
 8014144:	e008      	b.n	8014158 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8014146:	4b0c      	ldr	r3, [pc, #48]	; (8014178 <prvInsertBlockIntoFreeList+0xb0>)
 8014148:	681a      	ldr	r2, [r3, #0]
 801414a:	687b      	ldr	r3, [r7, #4]
 801414c:	601a      	str	r2, [r3, #0]
 801414e:	e003      	b.n	8014158 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8014150:	68fb      	ldr	r3, [r7, #12]
 8014152:	681a      	ldr	r2, [r3, #0]
 8014154:	687b      	ldr	r3, [r7, #4]
 8014156:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8014158:	68fa      	ldr	r2, [r7, #12]
 801415a:	687b      	ldr	r3, [r7, #4]
 801415c:	429a      	cmp	r2, r3
 801415e:	d002      	beq.n	8014166 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8014160:	68fb      	ldr	r3, [r7, #12]
 8014162:	687a      	ldr	r2, [r7, #4]
 8014164:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8014166:	bf00      	nop
 8014168:	3714      	adds	r7, #20
 801416a:	46bd      	mov	sp, r7
 801416c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014170:	4770      	bx	lr
 8014172:	bf00      	nop
 8014174:	2000602c 	.word	0x2000602c
 8014178:	20006034 	.word	0x20006034

0801417c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 801417c:	b580      	push	{r7, lr}
 801417e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8014180:	2200      	movs	r2, #0
 8014182:	4912      	ldr	r1, [pc, #72]	; (80141cc <MX_USB_DEVICE_Init+0x50>)
 8014184:	4812      	ldr	r0, [pc, #72]	; (80141d0 <MX_USB_DEVICE_Init+0x54>)
 8014186:	f7fb fceb 	bl	800fb60 <USBD_Init>
 801418a:	4603      	mov	r3, r0
 801418c:	2b00      	cmp	r3, #0
 801418e:	d001      	beq.n	8014194 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8014190:	f7ee fa10 	bl	80025b4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8014194:	490f      	ldr	r1, [pc, #60]	; (80141d4 <MX_USB_DEVICE_Init+0x58>)
 8014196:	480e      	ldr	r0, [pc, #56]	; (80141d0 <MX_USB_DEVICE_Init+0x54>)
 8014198:	f7fb fd12 	bl	800fbc0 <USBD_RegisterClass>
 801419c:	4603      	mov	r3, r0
 801419e:	2b00      	cmp	r3, #0
 80141a0:	d001      	beq.n	80141a6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80141a2:	f7ee fa07 	bl	80025b4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80141a6:	490c      	ldr	r1, [pc, #48]	; (80141d8 <MX_USB_DEVICE_Init+0x5c>)
 80141a8:	4809      	ldr	r0, [pc, #36]	; (80141d0 <MX_USB_DEVICE_Init+0x54>)
 80141aa:	f7fb fc63 	bl	800fa74 <USBD_CDC_RegisterInterface>
 80141ae:	4603      	mov	r3, r0
 80141b0:	2b00      	cmp	r3, #0
 80141b2:	d001      	beq.n	80141b8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80141b4:	f7ee f9fe 	bl	80025b4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80141b8:	4805      	ldr	r0, [pc, #20]	; (80141d0 <MX_USB_DEVICE_Init+0x54>)
 80141ba:	f7fb fd28 	bl	800fc0e <USBD_Start>
 80141be:	4603      	mov	r3, r0
 80141c0:	2b00      	cmp	r3, #0
 80141c2:	d001      	beq.n	80141c8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80141c4:	f7ee f9f6 	bl	80025b4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80141c8:	bf00      	nop
 80141ca:	bd80      	pop	{r7, pc}
 80141cc:	20000164 	.word	0x20000164
 80141d0:	2000604c 	.word	0x2000604c
 80141d4:	20000048 	.word	0x20000048
 80141d8:	20000150 	.word	0x20000150

080141dc <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80141dc:	b580      	push	{r7, lr}
 80141de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80141e0:	2200      	movs	r2, #0
 80141e2:	4905      	ldr	r1, [pc, #20]	; (80141f8 <CDC_Init_FS+0x1c>)
 80141e4:	4805      	ldr	r0, [pc, #20]	; (80141fc <CDC_Init_FS+0x20>)
 80141e6:	f7fb fc5a 	bl	800fa9e <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80141ea:	4905      	ldr	r1, [pc, #20]	; (8014200 <CDC_Init_FS+0x24>)
 80141ec:	4803      	ldr	r0, [pc, #12]	; (80141fc <CDC_Init_FS+0x20>)
 80141ee:	f7fb fc74 	bl	800fada <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80141f2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80141f4:	4618      	mov	r0, r3
 80141f6:	bd80      	pop	{r7, pc}
 80141f8:	20006b1c 	.word	0x20006b1c
 80141fc:	2000604c 	.word	0x2000604c
 8014200:	2000631c 	.word	0x2000631c

08014204 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8014204:	b480      	push	{r7}
 8014206:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8014208:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 801420a:	4618      	mov	r0, r3
 801420c:	46bd      	mov	sp, r7
 801420e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014212:	4770      	bx	lr

08014214 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8014214:	b480      	push	{r7}
 8014216:	b083      	sub	sp, #12
 8014218:	af00      	add	r7, sp, #0
 801421a:	4603      	mov	r3, r0
 801421c:	6039      	str	r1, [r7, #0]
 801421e:	71fb      	strb	r3, [r7, #7]
 8014220:	4613      	mov	r3, r2
 8014222:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8014224:	79fb      	ldrb	r3, [r7, #7]
 8014226:	2b23      	cmp	r3, #35	; 0x23
 8014228:	d84a      	bhi.n	80142c0 <CDC_Control_FS+0xac>
 801422a:	a201      	add	r2, pc, #4	; (adr r2, 8014230 <CDC_Control_FS+0x1c>)
 801422c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014230:	080142c1 	.word	0x080142c1
 8014234:	080142c1 	.word	0x080142c1
 8014238:	080142c1 	.word	0x080142c1
 801423c:	080142c1 	.word	0x080142c1
 8014240:	080142c1 	.word	0x080142c1
 8014244:	080142c1 	.word	0x080142c1
 8014248:	080142c1 	.word	0x080142c1
 801424c:	080142c1 	.word	0x080142c1
 8014250:	080142c1 	.word	0x080142c1
 8014254:	080142c1 	.word	0x080142c1
 8014258:	080142c1 	.word	0x080142c1
 801425c:	080142c1 	.word	0x080142c1
 8014260:	080142c1 	.word	0x080142c1
 8014264:	080142c1 	.word	0x080142c1
 8014268:	080142c1 	.word	0x080142c1
 801426c:	080142c1 	.word	0x080142c1
 8014270:	080142c1 	.word	0x080142c1
 8014274:	080142c1 	.word	0x080142c1
 8014278:	080142c1 	.word	0x080142c1
 801427c:	080142c1 	.word	0x080142c1
 8014280:	080142c1 	.word	0x080142c1
 8014284:	080142c1 	.word	0x080142c1
 8014288:	080142c1 	.word	0x080142c1
 801428c:	080142c1 	.word	0x080142c1
 8014290:	080142c1 	.word	0x080142c1
 8014294:	080142c1 	.word	0x080142c1
 8014298:	080142c1 	.word	0x080142c1
 801429c:	080142c1 	.word	0x080142c1
 80142a0:	080142c1 	.word	0x080142c1
 80142a4:	080142c1 	.word	0x080142c1
 80142a8:	080142c1 	.word	0x080142c1
 80142ac:	080142c1 	.word	0x080142c1
 80142b0:	080142c1 	.word	0x080142c1
 80142b4:	080142c1 	.word	0x080142c1
 80142b8:	080142c1 	.word	0x080142c1
 80142bc:	080142c1 	.word	0x080142c1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80142c0:	bf00      	nop
  }

  return (USBD_OK);
 80142c2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80142c4:	4618      	mov	r0, r3
 80142c6:	370c      	adds	r7, #12
 80142c8:	46bd      	mov	sp, r7
 80142ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80142ce:	4770      	bx	lr

080142d0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80142d0:	b580      	push	{r7, lr}
 80142d2:	b082      	sub	sp, #8
 80142d4:	af00      	add	r7, sp, #0
 80142d6:	6078      	str	r0, [r7, #4]
 80142d8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80142da:	6879      	ldr	r1, [r7, #4]
 80142dc:	4805      	ldr	r0, [pc, #20]	; (80142f4 <CDC_Receive_FS+0x24>)
 80142de:	f7fb fbfc 	bl	800fada <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80142e2:	4804      	ldr	r0, [pc, #16]	; (80142f4 <CDC_Receive_FS+0x24>)
 80142e4:	f7fb fc12 	bl	800fb0c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80142e8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80142ea:	4618      	mov	r0, r3
 80142ec:	3708      	adds	r7, #8
 80142ee:	46bd      	mov	sp, r7
 80142f0:	bd80      	pop	{r7, pc}
 80142f2:	bf00      	nop
 80142f4:	2000604c 	.word	0x2000604c

080142f8 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80142f8:	b480      	push	{r7}
 80142fa:	b087      	sub	sp, #28
 80142fc:	af00      	add	r7, sp, #0
 80142fe:	60f8      	str	r0, [r7, #12]
 8014300:	60b9      	str	r1, [r7, #8]
 8014302:	4613      	mov	r3, r2
 8014304:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8014306:	2300      	movs	r3, #0
 8014308:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 801430a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801430e:	4618      	mov	r0, r3
 8014310:	371c      	adds	r7, #28
 8014312:	46bd      	mov	sp, r7
 8014314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014318:	4770      	bx	lr
	...

0801431c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801431c:	b480      	push	{r7}
 801431e:	b083      	sub	sp, #12
 8014320:	af00      	add	r7, sp, #0
 8014322:	4603      	mov	r3, r0
 8014324:	6039      	str	r1, [r7, #0]
 8014326:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8014328:	683b      	ldr	r3, [r7, #0]
 801432a:	2212      	movs	r2, #18
 801432c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 801432e:	4b03      	ldr	r3, [pc, #12]	; (801433c <USBD_FS_DeviceDescriptor+0x20>)
}
 8014330:	4618      	mov	r0, r3
 8014332:	370c      	adds	r7, #12
 8014334:	46bd      	mov	sp, r7
 8014336:	f85d 7b04 	ldr.w	r7, [sp], #4
 801433a:	4770      	bx	lr
 801433c:	20000180 	.word	0x20000180

08014340 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8014340:	b480      	push	{r7}
 8014342:	b083      	sub	sp, #12
 8014344:	af00      	add	r7, sp, #0
 8014346:	4603      	mov	r3, r0
 8014348:	6039      	str	r1, [r7, #0]
 801434a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 801434c:	683b      	ldr	r3, [r7, #0]
 801434e:	2204      	movs	r2, #4
 8014350:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8014352:	4b03      	ldr	r3, [pc, #12]	; (8014360 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8014354:	4618      	mov	r0, r3
 8014356:	370c      	adds	r7, #12
 8014358:	46bd      	mov	sp, r7
 801435a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801435e:	4770      	bx	lr
 8014360:	20000194 	.word	0x20000194

08014364 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8014364:	b580      	push	{r7, lr}
 8014366:	b082      	sub	sp, #8
 8014368:	af00      	add	r7, sp, #0
 801436a:	4603      	mov	r3, r0
 801436c:	6039      	str	r1, [r7, #0]
 801436e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8014370:	79fb      	ldrb	r3, [r7, #7]
 8014372:	2b00      	cmp	r3, #0
 8014374:	d105      	bne.n	8014382 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8014376:	683a      	ldr	r2, [r7, #0]
 8014378:	4907      	ldr	r1, [pc, #28]	; (8014398 <USBD_FS_ProductStrDescriptor+0x34>)
 801437a:	4808      	ldr	r0, [pc, #32]	; (801439c <USBD_FS_ProductStrDescriptor+0x38>)
 801437c:	f7fc fc79 	bl	8010c72 <USBD_GetString>
 8014380:	e004      	b.n	801438c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8014382:	683a      	ldr	r2, [r7, #0]
 8014384:	4904      	ldr	r1, [pc, #16]	; (8014398 <USBD_FS_ProductStrDescriptor+0x34>)
 8014386:	4805      	ldr	r0, [pc, #20]	; (801439c <USBD_FS_ProductStrDescriptor+0x38>)
 8014388:	f7fc fc73 	bl	8010c72 <USBD_GetString>
  }
  return USBD_StrDesc;
 801438c:	4b02      	ldr	r3, [pc, #8]	; (8014398 <USBD_FS_ProductStrDescriptor+0x34>)
}
 801438e:	4618      	mov	r0, r3
 8014390:	3708      	adds	r7, #8
 8014392:	46bd      	mov	sp, r7
 8014394:	bd80      	pop	{r7, pc}
 8014396:	bf00      	nop
 8014398:	2000731c 	.word	0x2000731c
 801439c:	08016a14 	.word	0x08016a14

080143a0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80143a0:	b580      	push	{r7, lr}
 80143a2:	b082      	sub	sp, #8
 80143a4:	af00      	add	r7, sp, #0
 80143a6:	4603      	mov	r3, r0
 80143a8:	6039      	str	r1, [r7, #0]
 80143aa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80143ac:	683a      	ldr	r2, [r7, #0]
 80143ae:	4904      	ldr	r1, [pc, #16]	; (80143c0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80143b0:	4804      	ldr	r0, [pc, #16]	; (80143c4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80143b2:	f7fc fc5e 	bl	8010c72 <USBD_GetString>
  return USBD_StrDesc;
 80143b6:	4b02      	ldr	r3, [pc, #8]	; (80143c0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80143b8:	4618      	mov	r0, r3
 80143ba:	3708      	adds	r7, #8
 80143bc:	46bd      	mov	sp, r7
 80143be:	bd80      	pop	{r7, pc}
 80143c0:	2000731c 	.word	0x2000731c
 80143c4:	08016a2c 	.word	0x08016a2c

080143c8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80143c8:	b580      	push	{r7, lr}
 80143ca:	b082      	sub	sp, #8
 80143cc:	af00      	add	r7, sp, #0
 80143ce:	4603      	mov	r3, r0
 80143d0:	6039      	str	r1, [r7, #0]
 80143d2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80143d4:	683b      	ldr	r3, [r7, #0]
 80143d6:	221a      	movs	r2, #26
 80143d8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80143da:	f000 f843 	bl	8014464 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80143de:	4b02      	ldr	r3, [pc, #8]	; (80143e8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80143e0:	4618      	mov	r0, r3
 80143e2:	3708      	adds	r7, #8
 80143e4:	46bd      	mov	sp, r7
 80143e6:	bd80      	pop	{r7, pc}
 80143e8:	20000198 	.word	0x20000198

080143ec <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80143ec:	b580      	push	{r7, lr}
 80143ee:	b082      	sub	sp, #8
 80143f0:	af00      	add	r7, sp, #0
 80143f2:	4603      	mov	r3, r0
 80143f4:	6039      	str	r1, [r7, #0]
 80143f6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80143f8:	79fb      	ldrb	r3, [r7, #7]
 80143fa:	2b00      	cmp	r3, #0
 80143fc:	d105      	bne.n	801440a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80143fe:	683a      	ldr	r2, [r7, #0]
 8014400:	4907      	ldr	r1, [pc, #28]	; (8014420 <USBD_FS_ConfigStrDescriptor+0x34>)
 8014402:	4808      	ldr	r0, [pc, #32]	; (8014424 <USBD_FS_ConfigStrDescriptor+0x38>)
 8014404:	f7fc fc35 	bl	8010c72 <USBD_GetString>
 8014408:	e004      	b.n	8014414 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801440a:	683a      	ldr	r2, [r7, #0]
 801440c:	4904      	ldr	r1, [pc, #16]	; (8014420 <USBD_FS_ConfigStrDescriptor+0x34>)
 801440e:	4805      	ldr	r0, [pc, #20]	; (8014424 <USBD_FS_ConfigStrDescriptor+0x38>)
 8014410:	f7fc fc2f 	bl	8010c72 <USBD_GetString>
  }
  return USBD_StrDesc;
 8014414:	4b02      	ldr	r3, [pc, #8]	; (8014420 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8014416:	4618      	mov	r0, r3
 8014418:	3708      	adds	r7, #8
 801441a:	46bd      	mov	sp, r7
 801441c:	bd80      	pop	{r7, pc}
 801441e:	bf00      	nop
 8014420:	2000731c 	.word	0x2000731c
 8014424:	08016a40 	.word	0x08016a40

08014428 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8014428:	b580      	push	{r7, lr}
 801442a:	b082      	sub	sp, #8
 801442c:	af00      	add	r7, sp, #0
 801442e:	4603      	mov	r3, r0
 8014430:	6039      	str	r1, [r7, #0]
 8014432:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8014434:	79fb      	ldrb	r3, [r7, #7]
 8014436:	2b00      	cmp	r3, #0
 8014438:	d105      	bne.n	8014446 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801443a:	683a      	ldr	r2, [r7, #0]
 801443c:	4907      	ldr	r1, [pc, #28]	; (801445c <USBD_FS_InterfaceStrDescriptor+0x34>)
 801443e:	4808      	ldr	r0, [pc, #32]	; (8014460 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8014440:	f7fc fc17 	bl	8010c72 <USBD_GetString>
 8014444:	e004      	b.n	8014450 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8014446:	683a      	ldr	r2, [r7, #0]
 8014448:	4904      	ldr	r1, [pc, #16]	; (801445c <USBD_FS_InterfaceStrDescriptor+0x34>)
 801444a:	4805      	ldr	r0, [pc, #20]	; (8014460 <USBD_FS_InterfaceStrDescriptor+0x38>)
 801444c:	f7fc fc11 	bl	8010c72 <USBD_GetString>
  }
  return USBD_StrDesc;
 8014450:	4b02      	ldr	r3, [pc, #8]	; (801445c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8014452:	4618      	mov	r0, r3
 8014454:	3708      	adds	r7, #8
 8014456:	46bd      	mov	sp, r7
 8014458:	bd80      	pop	{r7, pc}
 801445a:	bf00      	nop
 801445c:	2000731c 	.word	0x2000731c
 8014460:	08016a4c 	.word	0x08016a4c

08014464 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8014464:	b580      	push	{r7, lr}
 8014466:	b084      	sub	sp, #16
 8014468:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 801446a:	4b0f      	ldr	r3, [pc, #60]	; (80144a8 <Get_SerialNum+0x44>)
 801446c:	681b      	ldr	r3, [r3, #0]
 801446e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8014470:	4b0e      	ldr	r3, [pc, #56]	; (80144ac <Get_SerialNum+0x48>)
 8014472:	681b      	ldr	r3, [r3, #0]
 8014474:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8014476:	4b0e      	ldr	r3, [pc, #56]	; (80144b0 <Get_SerialNum+0x4c>)
 8014478:	681b      	ldr	r3, [r3, #0]
 801447a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 801447c:	68fa      	ldr	r2, [r7, #12]
 801447e:	687b      	ldr	r3, [r7, #4]
 8014480:	4413      	add	r3, r2
 8014482:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8014484:	68fb      	ldr	r3, [r7, #12]
 8014486:	2b00      	cmp	r3, #0
 8014488:	d009      	beq.n	801449e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 801448a:	2208      	movs	r2, #8
 801448c:	4909      	ldr	r1, [pc, #36]	; (80144b4 <Get_SerialNum+0x50>)
 801448e:	68f8      	ldr	r0, [r7, #12]
 8014490:	f000 f814 	bl	80144bc <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8014494:	2204      	movs	r2, #4
 8014496:	4908      	ldr	r1, [pc, #32]	; (80144b8 <Get_SerialNum+0x54>)
 8014498:	68b8      	ldr	r0, [r7, #8]
 801449a:	f000 f80f 	bl	80144bc <IntToUnicode>
  }
}
 801449e:	bf00      	nop
 80144a0:	3710      	adds	r7, #16
 80144a2:	46bd      	mov	sp, r7
 80144a4:	bd80      	pop	{r7, pc}
 80144a6:	bf00      	nop
 80144a8:	1fff7a10 	.word	0x1fff7a10
 80144ac:	1fff7a14 	.word	0x1fff7a14
 80144b0:	1fff7a18 	.word	0x1fff7a18
 80144b4:	2000019a 	.word	0x2000019a
 80144b8:	200001aa 	.word	0x200001aa

080144bc <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80144bc:	b480      	push	{r7}
 80144be:	b087      	sub	sp, #28
 80144c0:	af00      	add	r7, sp, #0
 80144c2:	60f8      	str	r0, [r7, #12]
 80144c4:	60b9      	str	r1, [r7, #8]
 80144c6:	4613      	mov	r3, r2
 80144c8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80144ca:	2300      	movs	r3, #0
 80144cc:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80144ce:	2300      	movs	r3, #0
 80144d0:	75fb      	strb	r3, [r7, #23]
 80144d2:	e027      	b.n	8014524 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80144d4:	68fb      	ldr	r3, [r7, #12]
 80144d6:	0f1b      	lsrs	r3, r3, #28
 80144d8:	2b09      	cmp	r3, #9
 80144da:	d80b      	bhi.n	80144f4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80144dc:	68fb      	ldr	r3, [r7, #12]
 80144de:	0f1b      	lsrs	r3, r3, #28
 80144e0:	b2da      	uxtb	r2, r3
 80144e2:	7dfb      	ldrb	r3, [r7, #23]
 80144e4:	005b      	lsls	r3, r3, #1
 80144e6:	4619      	mov	r1, r3
 80144e8:	68bb      	ldr	r3, [r7, #8]
 80144ea:	440b      	add	r3, r1
 80144ec:	3230      	adds	r2, #48	; 0x30
 80144ee:	b2d2      	uxtb	r2, r2
 80144f0:	701a      	strb	r2, [r3, #0]
 80144f2:	e00a      	b.n	801450a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80144f4:	68fb      	ldr	r3, [r7, #12]
 80144f6:	0f1b      	lsrs	r3, r3, #28
 80144f8:	b2da      	uxtb	r2, r3
 80144fa:	7dfb      	ldrb	r3, [r7, #23]
 80144fc:	005b      	lsls	r3, r3, #1
 80144fe:	4619      	mov	r1, r3
 8014500:	68bb      	ldr	r3, [r7, #8]
 8014502:	440b      	add	r3, r1
 8014504:	3237      	adds	r2, #55	; 0x37
 8014506:	b2d2      	uxtb	r2, r2
 8014508:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 801450a:	68fb      	ldr	r3, [r7, #12]
 801450c:	011b      	lsls	r3, r3, #4
 801450e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8014510:	7dfb      	ldrb	r3, [r7, #23]
 8014512:	005b      	lsls	r3, r3, #1
 8014514:	3301      	adds	r3, #1
 8014516:	68ba      	ldr	r2, [r7, #8]
 8014518:	4413      	add	r3, r2
 801451a:	2200      	movs	r2, #0
 801451c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 801451e:	7dfb      	ldrb	r3, [r7, #23]
 8014520:	3301      	adds	r3, #1
 8014522:	75fb      	strb	r3, [r7, #23]
 8014524:	7dfa      	ldrb	r2, [r7, #23]
 8014526:	79fb      	ldrb	r3, [r7, #7]
 8014528:	429a      	cmp	r2, r3
 801452a:	d3d3      	bcc.n	80144d4 <IntToUnicode+0x18>
  }
}
 801452c:	bf00      	nop
 801452e:	bf00      	nop
 8014530:	371c      	adds	r7, #28
 8014532:	46bd      	mov	sp, r7
 8014534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014538:	4770      	bx	lr
	...

0801453c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 801453c:	b580      	push	{r7, lr}
 801453e:	b08a      	sub	sp, #40	; 0x28
 8014540:	af00      	add	r7, sp, #0
 8014542:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8014544:	f107 0314 	add.w	r3, r7, #20
 8014548:	2200      	movs	r2, #0
 801454a:	601a      	str	r2, [r3, #0]
 801454c:	605a      	str	r2, [r3, #4]
 801454e:	609a      	str	r2, [r3, #8]
 8014550:	60da      	str	r2, [r3, #12]
 8014552:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8014554:	687b      	ldr	r3, [r7, #4]
 8014556:	681b      	ldr	r3, [r3, #0]
 8014558:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801455c:	d13a      	bne.n	80145d4 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 801455e:	2300      	movs	r3, #0
 8014560:	613b      	str	r3, [r7, #16]
 8014562:	4b1e      	ldr	r3, [pc, #120]	; (80145dc <HAL_PCD_MspInit+0xa0>)
 8014564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014566:	4a1d      	ldr	r2, [pc, #116]	; (80145dc <HAL_PCD_MspInit+0xa0>)
 8014568:	f043 0301 	orr.w	r3, r3, #1
 801456c:	6313      	str	r3, [r2, #48]	; 0x30
 801456e:	4b1b      	ldr	r3, [pc, #108]	; (80145dc <HAL_PCD_MspInit+0xa0>)
 8014570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014572:	f003 0301 	and.w	r3, r3, #1
 8014576:	613b      	str	r3, [r7, #16]
 8014578:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA12     ------> USB_OTG_FS_DP
    PA11     ------> USB_OTG_FS_DM
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11;
 801457a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 801457e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8014580:	2302      	movs	r3, #2
 8014582:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8014584:	2300      	movs	r3, #0
 8014586:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8014588:	2303      	movs	r3, #3
 801458a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 801458c:	230a      	movs	r3, #10
 801458e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8014590:	f107 0314 	add.w	r3, r7, #20
 8014594:	4619      	mov	r1, r3
 8014596:	4812      	ldr	r0, [pc, #72]	; (80145e0 <HAL_PCD_MspInit+0xa4>)
 8014598:	f7f4 fdf6 	bl	8009188 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 801459c:	4b0f      	ldr	r3, [pc, #60]	; (80145dc <HAL_PCD_MspInit+0xa0>)
 801459e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80145a0:	4a0e      	ldr	r2, [pc, #56]	; (80145dc <HAL_PCD_MspInit+0xa0>)
 80145a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80145a6:	6353      	str	r3, [r2, #52]	; 0x34
 80145a8:	2300      	movs	r3, #0
 80145aa:	60fb      	str	r3, [r7, #12]
 80145ac:	4b0b      	ldr	r3, [pc, #44]	; (80145dc <HAL_PCD_MspInit+0xa0>)
 80145ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80145b0:	4a0a      	ldr	r2, [pc, #40]	; (80145dc <HAL_PCD_MspInit+0xa0>)
 80145b2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80145b6:	6453      	str	r3, [r2, #68]	; 0x44
 80145b8:	4b08      	ldr	r3, [pc, #32]	; (80145dc <HAL_PCD_MspInit+0xa0>)
 80145ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80145bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80145c0:	60fb      	str	r3, [r7, #12]
 80145c2:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 80145c4:	2200      	movs	r2, #0
 80145c6:	2105      	movs	r1, #5
 80145c8:	2043      	movs	r0, #67	; 0x43
 80145ca:	f7f4 f9b1 	bl	8008930 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80145ce:	2043      	movs	r0, #67	; 0x43
 80145d0:	f7f4 f9ca 	bl	8008968 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80145d4:	bf00      	nop
 80145d6:	3728      	adds	r7, #40	; 0x28
 80145d8:	46bd      	mov	sp, r7
 80145da:	bd80      	pop	{r7, pc}
 80145dc:	40023800 	.word	0x40023800
 80145e0:	40020000 	.word	0x40020000

080145e4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80145e4:	b580      	push	{r7, lr}
 80145e6:	b082      	sub	sp, #8
 80145e8:	af00      	add	r7, sp, #0
 80145ea:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80145ec:	687b      	ldr	r3, [r7, #4]
 80145ee:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 80145f2:	687b      	ldr	r3, [r7, #4]
 80145f4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80145f8:	4619      	mov	r1, r3
 80145fa:	4610      	mov	r0, r2
 80145fc:	f7fb fb52 	bl	800fca4 <USBD_LL_SetupStage>
}
 8014600:	bf00      	nop
 8014602:	3708      	adds	r7, #8
 8014604:	46bd      	mov	sp, r7
 8014606:	bd80      	pop	{r7, pc}

08014608 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014608:	b580      	push	{r7, lr}
 801460a:	b082      	sub	sp, #8
 801460c:	af00      	add	r7, sp, #0
 801460e:	6078      	str	r0, [r7, #4]
 8014610:	460b      	mov	r3, r1
 8014612:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8014614:	687b      	ldr	r3, [r7, #4]
 8014616:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 801461a:	78fa      	ldrb	r2, [r7, #3]
 801461c:	6879      	ldr	r1, [r7, #4]
 801461e:	4613      	mov	r3, r2
 8014620:	00db      	lsls	r3, r3, #3
 8014622:	1a9b      	subs	r3, r3, r2
 8014624:	009b      	lsls	r3, r3, #2
 8014626:	440b      	add	r3, r1
 8014628:	f503 7302 	add.w	r3, r3, #520	; 0x208
 801462c:	681a      	ldr	r2, [r3, #0]
 801462e:	78fb      	ldrb	r3, [r7, #3]
 8014630:	4619      	mov	r1, r3
 8014632:	f7fb fb8c 	bl	800fd4e <USBD_LL_DataOutStage>
}
 8014636:	bf00      	nop
 8014638:	3708      	adds	r7, #8
 801463a:	46bd      	mov	sp, r7
 801463c:	bd80      	pop	{r7, pc}

0801463e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801463e:	b580      	push	{r7, lr}
 8014640:	b082      	sub	sp, #8
 8014642:	af00      	add	r7, sp, #0
 8014644:	6078      	str	r0, [r7, #4]
 8014646:	460b      	mov	r3, r1
 8014648:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 801464a:	687b      	ldr	r3, [r7, #4]
 801464c:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8014650:	78fa      	ldrb	r2, [r7, #3]
 8014652:	6879      	ldr	r1, [r7, #4]
 8014654:	4613      	mov	r3, r2
 8014656:	00db      	lsls	r3, r3, #3
 8014658:	1a9b      	subs	r3, r3, r2
 801465a:	009b      	lsls	r3, r3, #2
 801465c:	440b      	add	r3, r1
 801465e:	3348      	adds	r3, #72	; 0x48
 8014660:	681a      	ldr	r2, [r3, #0]
 8014662:	78fb      	ldrb	r3, [r7, #3]
 8014664:	4619      	mov	r1, r3
 8014666:	f7fb fbd5 	bl	800fe14 <USBD_LL_DataInStage>
}
 801466a:	bf00      	nop
 801466c:	3708      	adds	r7, #8
 801466e:	46bd      	mov	sp, r7
 8014670:	bd80      	pop	{r7, pc}

08014672 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014672:	b580      	push	{r7, lr}
 8014674:	b082      	sub	sp, #8
 8014676:	af00      	add	r7, sp, #0
 8014678:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 801467a:	687b      	ldr	r3, [r7, #4]
 801467c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8014680:	4618      	mov	r0, r3
 8014682:	f7fb fce9 	bl	8010058 <USBD_LL_SOF>
}
 8014686:	bf00      	nop
 8014688:	3708      	adds	r7, #8
 801468a:	46bd      	mov	sp, r7
 801468c:	bd80      	pop	{r7, pc}

0801468e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801468e:	b580      	push	{r7, lr}
 8014690:	b084      	sub	sp, #16
 8014692:	af00      	add	r7, sp, #0
 8014694:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8014696:	2301      	movs	r3, #1
 8014698:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 801469a:	687b      	ldr	r3, [r7, #4]
 801469c:	68db      	ldr	r3, [r3, #12]
 801469e:	2b00      	cmp	r3, #0
 80146a0:	d102      	bne.n	80146a8 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 80146a2:	2300      	movs	r3, #0
 80146a4:	73fb      	strb	r3, [r7, #15]
 80146a6:	e008      	b.n	80146ba <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 80146a8:	687b      	ldr	r3, [r7, #4]
 80146aa:	68db      	ldr	r3, [r3, #12]
 80146ac:	2b02      	cmp	r3, #2
 80146ae:	d102      	bne.n	80146b6 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 80146b0:	2301      	movs	r3, #1
 80146b2:	73fb      	strb	r3, [r7, #15]
 80146b4:	e001      	b.n	80146ba <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 80146b6:	f7ed ff7d 	bl	80025b4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80146ba:	687b      	ldr	r3, [r7, #4]
 80146bc:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80146c0:	7bfa      	ldrb	r2, [r7, #15]
 80146c2:	4611      	mov	r1, r2
 80146c4:	4618      	mov	r0, r3
 80146c6:	f7fb fc89 	bl	800ffdc <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80146ca:	687b      	ldr	r3, [r7, #4]
 80146cc:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80146d0:	4618      	mov	r0, r3
 80146d2:	f7fb fc35 	bl	800ff40 <USBD_LL_Reset>
}
 80146d6:	bf00      	nop
 80146d8:	3710      	adds	r7, #16
 80146da:	46bd      	mov	sp, r7
 80146dc:	bd80      	pop	{r7, pc}
	...

080146e0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80146e0:	b580      	push	{r7, lr}
 80146e2:	b082      	sub	sp, #8
 80146e4:	af00      	add	r7, sp, #0
 80146e6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80146e8:	687b      	ldr	r3, [r7, #4]
 80146ea:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80146ee:	4618      	mov	r0, r3
 80146f0:	f7fb fc84 	bl	800fffc <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80146f4:	687b      	ldr	r3, [r7, #4]
 80146f6:	681b      	ldr	r3, [r3, #0]
 80146f8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80146fc:	681b      	ldr	r3, [r3, #0]
 80146fe:	687a      	ldr	r2, [r7, #4]
 8014700:	6812      	ldr	r2, [r2, #0]
 8014702:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8014706:	f043 0301 	orr.w	r3, r3, #1
 801470a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 801470c:	687b      	ldr	r3, [r7, #4]
 801470e:	6a1b      	ldr	r3, [r3, #32]
 8014710:	2b00      	cmp	r3, #0
 8014712:	d005      	beq.n	8014720 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8014714:	4b04      	ldr	r3, [pc, #16]	; (8014728 <HAL_PCD_SuspendCallback+0x48>)
 8014716:	691b      	ldr	r3, [r3, #16]
 8014718:	4a03      	ldr	r2, [pc, #12]	; (8014728 <HAL_PCD_SuspendCallback+0x48>)
 801471a:	f043 0306 	orr.w	r3, r3, #6
 801471e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8014720:	bf00      	nop
 8014722:	3708      	adds	r7, #8
 8014724:	46bd      	mov	sp, r7
 8014726:	bd80      	pop	{r7, pc}
 8014728:	e000ed00 	.word	0xe000ed00

0801472c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801472c:	b580      	push	{r7, lr}
 801472e:	b082      	sub	sp, #8
 8014730:	af00      	add	r7, sp, #0
 8014732:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8014734:	687b      	ldr	r3, [r7, #4]
 8014736:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801473a:	4618      	mov	r0, r3
 801473c:	f7fb fc74 	bl	8010028 <USBD_LL_Resume>
}
 8014740:	bf00      	nop
 8014742:	3708      	adds	r7, #8
 8014744:	46bd      	mov	sp, r7
 8014746:	bd80      	pop	{r7, pc}

08014748 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014748:	b580      	push	{r7, lr}
 801474a:	b082      	sub	sp, #8
 801474c:	af00      	add	r7, sp, #0
 801474e:	6078      	str	r0, [r7, #4]
 8014750:	460b      	mov	r3, r1
 8014752:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8014754:	687b      	ldr	r3, [r7, #4]
 8014756:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801475a:	78fa      	ldrb	r2, [r7, #3]
 801475c:	4611      	mov	r1, r2
 801475e:	4618      	mov	r0, r3
 8014760:	f7fb fcc2 	bl	80100e8 <USBD_LL_IsoOUTIncomplete>
}
 8014764:	bf00      	nop
 8014766:	3708      	adds	r7, #8
 8014768:	46bd      	mov	sp, r7
 801476a:	bd80      	pop	{r7, pc}

0801476c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801476c:	b580      	push	{r7, lr}
 801476e:	b082      	sub	sp, #8
 8014770:	af00      	add	r7, sp, #0
 8014772:	6078      	str	r0, [r7, #4]
 8014774:	460b      	mov	r3, r1
 8014776:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8014778:	687b      	ldr	r3, [r7, #4]
 801477a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801477e:	78fa      	ldrb	r2, [r7, #3]
 8014780:	4611      	mov	r1, r2
 8014782:	4618      	mov	r0, r3
 8014784:	f7fb fc8a 	bl	801009c <USBD_LL_IsoINIncomplete>
}
 8014788:	bf00      	nop
 801478a:	3708      	adds	r7, #8
 801478c:	46bd      	mov	sp, r7
 801478e:	bd80      	pop	{r7, pc}

08014790 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014790:	b580      	push	{r7, lr}
 8014792:	b082      	sub	sp, #8
 8014794:	af00      	add	r7, sp, #0
 8014796:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8014798:	687b      	ldr	r3, [r7, #4]
 801479a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801479e:	4618      	mov	r0, r3
 80147a0:	f7fb fcc8 	bl	8010134 <USBD_LL_DevConnected>
}
 80147a4:	bf00      	nop
 80147a6:	3708      	adds	r7, #8
 80147a8:	46bd      	mov	sp, r7
 80147aa:	bd80      	pop	{r7, pc}

080147ac <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80147ac:	b580      	push	{r7, lr}
 80147ae:	b082      	sub	sp, #8
 80147b0:	af00      	add	r7, sp, #0
 80147b2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80147b4:	687b      	ldr	r3, [r7, #4]
 80147b6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80147ba:	4618      	mov	r0, r3
 80147bc:	f7fb fcc5 	bl	801014a <USBD_LL_DevDisconnected>
}
 80147c0:	bf00      	nop
 80147c2:	3708      	adds	r7, #8
 80147c4:	46bd      	mov	sp, r7
 80147c6:	bd80      	pop	{r7, pc}

080147c8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80147c8:	b580      	push	{r7, lr}
 80147ca:	b082      	sub	sp, #8
 80147cc:	af00      	add	r7, sp, #0
 80147ce:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80147d0:	687b      	ldr	r3, [r7, #4]
 80147d2:	781b      	ldrb	r3, [r3, #0]
 80147d4:	2b00      	cmp	r3, #0
 80147d6:	d13c      	bne.n	8014852 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80147d8:	4a20      	ldr	r2, [pc, #128]	; (801485c <USBD_LL_Init+0x94>)
 80147da:	687b      	ldr	r3, [r7, #4]
 80147dc:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 80147e0:	687b      	ldr	r3, [r7, #4]
 80147e2:	4a1e      	ldr	r2, [pc, #120]	; (801485c <USBD_LL_Init+0x94>)
 80147e4:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80147e8:	4b1c      	ldr	r3, [pc, #112]	; (801485c <USBD_LL_Init+0x94>)
 80147ea:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80147ee:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80147f0:	4b1a      	ldr	r3, [pc, #104]	; (801485c <USBD_LL_Init+0x94>)
 80147f2:	2204      	movs	r2, #4
 80147f4:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80147f6:	4b19      	ldr	r3, [pc, #100]	; (801485c <USBD_LL_Init+0x94>)
 80147f8:	2202      	movs	r2, #2
 80147fa:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80147fc:	4b17      	ldr	r3, [pc, #92]	; (801485c <USBD_LL_Init+0x94>)
 80147fe:	2200      	movs	r2, #0
 8014800:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8014802:	4b16      	ldr	r3, [pc, #88]	; (801485c <USBD_LL_Init+0x94>)
 8014804:	2202      	movs	r2, #2
 8014806:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8014808:	4b14      	ldr	r3, [pc, #80]	; (801485c <USBD_LL_Init+0x94>)
 801480a:	2200      	movs	r2, #0
 801480c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 801480e:	4b13      	ldr	r3, [pc, #76]	; (801485c <USBD_LL_Init+0x94>)
 8014810:	2200      	movs	r2, #0
 8014812:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8014814:	4b11      	ldr	r3, [pc, #68]	; (801485c <USBD_LL_Init+0x94>)
 8014816:	2200      	movs	r2, #0
 8014818:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 801481a:	4b10      	ldr	r3, [pc, #64]	; (801485c <USBD_LL_Init+0x94>)
 801481c:	2200      	movs	r2, #0
 801481e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8014820:	4b0e      	ldr	r3, [pc, #56]	; (801485c <USBD_LL_Init+0x94>)
 8014822:	2200      	movs	r2, #0
 8014824:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8014826:	480d      	ldr	r0, [pc, #52]	; (801485c <USBD_LL_Init+0x94>)
 8014828:	f7f4 fe8c 	bl	8009544 <HAL_PCD_Init>
 801482c:	4603      	mov	r3, r0
 801482e:	2b00      	cmp	r3, #0
 8014830:	d001      	beq.n	8014836 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8014832:	f7ed febf 	bl	80025b4 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8014836:	2180      	movs	r1, #128	; 0x80
 8014838:	4808      	ldr	r0, [pc, #32]	; (801485c <USBD_LL_Init+0x94>)
 801483a:	f7f5 ffea 	bl	800a812 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 801483e:	2240      	movs	r2, #64	; 0x40
 8014840:	2100      	movs	r1, #0
 8014842:	4806      	ldr	r0, [pc, #24]	; (801485c <USBD_LL_Init+0x94>)
 8014844:	f7f5 ff9e 	bl	800a784 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8014848:	2280      	movs	r2, #128	; 0x80
 801484a:	2101      	movs	r1, #1
 801484c:	4803      	ldr	r0, [pc, #12]	; (801485c <USBD_LL_Init+0x94>)
 801484e:	f7f5 ff99 	bl	800a784 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8014852:	2300      	movs	r3, #0
}
 8014854:	4618      	mov	r0, r3
 8014856:	3708      	adds	r7, #8
 8014858:	46bd      	mov	sp, r7
 801485a:	bd80      	pop	{r7, pc}
 801485c:	2000751c 	.word	0x2000751c

08014860 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8014860:	b580      	push	{r7, lr}
 8014862:	b084      	sub	sp, #16
 8014864:	af00      	add	r7, sp, #0
 8014866:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014868:	2300      	movs	r3, #0
 801486a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801486c:	2300      	movs	r3, #0
 801486e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8014870:	687b      	ldr	r3, [r7, #4]
 8014872:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8014876:	4618      	mov	r0, r3
 8014878:	f7f4 ff81 	bl	800977e <HAL_PCD_Start>
 801487c:	4603      	mov	r3, r0
 801487e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8014880:	7bfb      	ldrb	r3, [r7, #15]
 8014882:	4618      	mov	r0, r3
 8014884:	f000 f942 	bl	8014b0c <USBD_Get_USB_Status>
 8014888:	4603      	mov	r3, r0
 801488a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801488c:	7bbb      	ldrb	r3, [r7, #14]
}
 801488e:	4618      	mov	r0, r3
 8014890:	3710      	adds	r7, #16
 8014892:	46bd      	mov	sp, r7
 8014894:	bd80      	pop	{r7, pc}

08014896 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8014896:	b580      	push	{r7, lr}
 8014898:	b084      	sub	sp, #16
 801489a:	af00      	add	r7, sp, #0
 801489c:	6078      	str	r0, [r7, #4]
 801489e:	4608      	mov	r0, r1
 80148a0:	4611      	mov	r1, r2
 80148a2:	461a      	mov	r2, r3
 80148a4:	4603      	mov	r3, r0
 80148a6:	70fb      	strb	r3, [r7, #3]
 80148a8:	460b      	mov	r3, r1
 80148aa:	70bb      	strb	r3, [r7, #2]
 80148ac:	4613      	mov	r3, r2
 80148ae:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80148b0:	2300      	movs	r3, #0
 80148b2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80148b4:	2300      	movs	r3, #0
 80148b6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80148b8:	687b      	ldr	r3, [r7, #4]
 80148ba:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80148be:	78bb      	ldrb	r3, [r7, #2]
 80148c0:	883a      	ldrh	r2, [r7, #0]
 80148c2:	78f9      	ldrb	r1, [r7, #3]
 80148c4:	f7f5 fb65 	bl	8009f92 <HAL_PCD_EP_Open>
 80148c8:	4603      	mov	r3, r0
 80148ca:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80148cc:	7bfb      	ldrb	r3, [r7, #15]
 80148ce:	4618      	mov	r0, r3
 80148d0:	f000 f91c 	bl	8014b0c <USBD_Get_USB_Status>
 80148d4:	4603      	mov	r3, r0
 80148d6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80148d8:	7bbb      	ldrb	r3, [r7, #14]
}
 80148da:	4618      	mov	r0, r3
 80148dc:	3710      	adds	r7, #16
 80148de:	46bd      	mov	sp, r7
 80148e0:	bd80      	pop	{r7, pc}

080148e2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80148e2:	b580      	push	{r7, lr}
 80148e4:	b084      	sub	sp, #16
 80148e6:	af00      	add	r7, sp, #0
 80148e8:	6078      	str	r0, [r7, #4]
 80148ea:	460b      	mov	r3, r1
 80148ec:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80148ee:	2300      	movs	r3, #0
 80148f0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80148f2:	2300      	movs	r3, #0
 80148f4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80148f6:	687b      	ldr	r3, [r7, #4]
 80148f8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80148fc:	78fa      	ldrb	r2, [r7, #3]
 80148fe:	4611      	mov	r1, r2
 8014900:	4618      	mov	r0, r3
 8014902:	f7f5 fbae 	bl	800a062 <HAL_PCD_EP_Close>
 8014906:	4603      	mov	r3, r0
 8014908:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801490a:	7bfb      	ldrb	r3, [r7, #15]
 801490c:	4618      	mov	r0, r3
 801490e:	f000 f8fd 	bl	8014b0c <USBD_Get_USB_Status>
 8014912:	4603      	mov	r3, r0
 8014914:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8014916:	7bbb      	ldrb	r3, [r7, #14]
}
 8014918:	4618      	mov	r0, r3
 801491a:	3710      	adds	r7, #16
 801491c:	46bd      	mov	sp, r7
 801491e:	bd80      	pop	{r7, pc}

08014920 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8014920:	b580      	push	{r7, lr}
 8014922:	b084      	sub	sp, #16
 8014924:	af00      	add	r7, sp, #0
 8014926:	6078      	str	r0, [r7, #4]
 8014928:	460b      	mov	r3, r1
 801492a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801492c:	2300      	movs	r3, #0
 801492e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014930:	2300      	movs	r3, #0
 8014932:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8014934:	687b      	ldr	r3, [r7, #4]
 8014936:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801493a:	78fa      	ldrb	r2, [r7, #3]
 801493c:	4611      	mov	r1, r2
 801493e:	4618      	mov	r0, r3
 8014940:	f7f5 fc86 	bl	800a250 <HAL_PCD_EP_SetStall>
 8014944:	4603      	mov	r3, r0
 8014946:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8014948:	7bfb      	ldrb	r3, [r7, #15]
 801494a:	4618      	mov	r0, r3
 801494c:	f000 f8de 	bl	8014b0c <USBD_Get_USB_Status>
 8014950:	4603      	mov	r3, r0
 8014952:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8014954:	7bbb      	ldrb	r3, [r7, #14]
}
 8014956:	4618      	mov	r0, r3
 8014958:	3710      	adds	r7, #16
 801495a:	46bd      	mov	sp, r7
 801495c:	bd80      	pop	{r7, pc}

0801495e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801495e:	b580      	push	{r7, lr}
 8014960:	b084      	sub	sp, #16
 8014962:	af00      	add	r7, sp, #0
 8014964:	6078      	str	r0, [r7, #4]
 8014966:	460b      	mov	r3, r1
 8014968:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801496a:	2300      	movs	r3, #0
 801496c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801496e:	2300      	movs	r3, #0
 8014970:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8014972:	687b      	ldr	r3, [r7, #4]
 8014974:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8014978:	78fa      	ldrb	r2, [r7, #3]
 801497a:	4611      	mov	r1, r2
 801497c:	4618      	mov	r0, r3
 801497e:	f7f5 fccb 	bl	800a318 <HAL_PCD_EP_ClrStall>
 8014982:	4603      	mov	r3, r0
 8014984:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8014986:	7bfb      	ldrb	r3, [r7, #15]
 8014988:	4618      	mov	r0, r3
 801498a:	f000 f8bf 	bl	8014b0c <USBD_Get_USB_Status>
 801498e:	4603      	mov	r3, r0
 8014990:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8014992:	7bbb      	ldrb	r3, [r7, #14]
}
 8014994:	4618      	mov	r0, r3
 8014996:	3710      	adds	r7, #16
 8014998:	46bd      	mov	sp, r7
 801499a:	bd80      	pop	{r7, pc}

0801499c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801499c:	b480      	push	{r7}
 801499e:	b085      	sub	sp, #20
 80149a0:	af00      	add	r7, sp, #0
 80149a2:	6078      	str	r0, [r7, #4]
 80149a4:	460b      	mov	r3, r1
 80149a6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80149a8:	687b      	ldr	r3, [r7, #4]
 80149aa:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80149ae:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80149b0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80149b4:	2b00      	cmp	r3, #0
 80149b6:	da0b      	bge.n	80149d0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80149b8:	78fb      	ldrb	r3, [r7, #3]
 80149ba:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80149be:	68f9      	ldr	r1, [r7, #12]
 80149c0:	4613      	mov	r3, r2
 80149c2:	00db      	lsls	r3, r3, #3
 80149c4:	1a9b      	subs	r3, r3, r2
 80149c6:	009b      	lsls	r3, r3, #2
 80149c8:	440b      	add	r3, r1
 80149ca:	333e      	adds	r3, #62	; 0x3e
 80149cc:	781b      	ldrb	r3, [r3, #0]
 80149ce:	e00b      	b.n	80149e8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80149d0:	78fb      	ldrb	r3, [r7, #3]
 80149d2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80149d6:	68f9      	ldr	r1, [r7, #12]
 80149d8:	4613      	mov	r3, r2
 80149da:	00db      	lsls	r3, r3, #3
 80149dc:	1a9b      	subs	r3, r3, r2
 80149de:	009b      	lsls	r3, r3, #2
 80149e0:	440b      	add	r3, r1
 80149e2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80149e6:	781b      	ldrb	r3, [r3, #0]
  }
}
 80149e8:	4618      	mov	r0, r3
 80149ea:	3714      	adds	r7, #20
 80149ec:	46bd      	mov	sp, r7
 80149ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80149f2:	4770      	bx	lr

080149f4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80149f4:	b580      	push	{r7, lr}
 80149f6:	b084      	sub	sp, #16
 80149f8:	af00      	add	r7, sp, #0
 80149fa:	6078      	str	r0, [r7, #4]
 80149fc:	460b      	mov	r3, r1
 80149fe:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014a00:	2300      	movs	r3, #0
 8014a02:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014a04:	2300      	movs	r3, #0
 8014a06:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8014a08:	687b      	ldr	r3, [r7, #4]
 8014a0a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8014a0e:	78fa      	ldrb	r2, [r7, #3]
 8014a10:	4611      	mov	r1, r2
 8014a12:	4618      	mov	r0, r3
 8014a14:	f7f5 fa98 	bl	8009f48 <HAL_PCD_SetAddress>
 8014a18:	4603      	mov	r3, r0
 8014a1a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8014a1c:	7bfb      	ldrb	r3, [r7, #15]
 8014a1e:	4618      	mov	r0, r3
 8014a20:	f000 f874 	bl	8014b0c <USBD_Get_USB_Status>
 8014a24:	4603      	mov	r3, r0
 8014a26:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8014a28:	7bbb      	ldrb	r3, [r7, #14]
}
 8014a2a:	4618      	mov	r0, r3
 8014a2c:	3710      	adds	r7, #16
 8014a2e:	46bd      	mov	sp, r7
 8014a30:	bd80      	pop	{r7, pc}

08014a32 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8014a32:	b580      	push	{r7, lr}
 8014a34:	b086      	sub	sp, #24
 8014a36:	af00      	add	r7, sp, #0
 8014a38:	60f8      	str	r0, [r7, #12]
 8014a3a:	607a      	str	r2, [r7, #4]
 8014a3c:	603b      	str	r3, [r7, #0]
 8014a3e:	460b      	mov	r3, r1
 8014a40:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014a42:	2300      	movs	r3, #0
 8014a44:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014a46:	2300      	movs	r3, #0
 8014a48:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8014a4a:	68fb      	ldr	r3, [r7, #12]
 8014a4c:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8014a50:	7af9      	ldrb	r1, [r7, #11]
 8014a52:	683b      	ldr	r3, [r7, #0]
 8014a54:	687a      	ldr	r2, [r7, #4]
 8014a56:	f7f5 fbb1 	bl	800a1bc <HAL_PCD_EP_Transmit>
 8014a5a:	4603      	mov	r3, r0
 8014a5c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8014a5e:	7dfb      	ldrb	r3, [r7, #23]
 8014a60:	4618      	mov	r0, r3
 8014a62:	f000 f853 	bl	8014b0c <USBD_Get_USB_Status>
 8014a66:	4603      	mov	r3, r0
 8014a68:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8014a6a:	7dbb      	ldrb	r3, [r7, #22]
}
 8014a6c:	4618      	mov	r0, r3
 8014a6e:	3718      	adds	r7, #24
 8014a70:	46bd      	mov	sp, r7
 8014a72:	bd80      	pop	{r7, pc}

08014a74 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8014a74:	b580      	push	{r7, lr}
 8014a76:	b086      	sub	sp, #24
 8014a78:	af00      	add	r7, sp, #0
 8014a7a:	60f8      	str	r0, [r7, #12]
 8014a7c:	607a      	str	r2, [r7, #4]
 8014a7e:	603b      	str	r3, [r7, #0]
 8014a80:	460b      	mov	r3, r1
 8014a82:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014a84:	2300      	movs	r3, #0
 8014a86:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014a88:	2300      	movs	r3, #0
 8014a8a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8014a8c:	68fb      	ldr	r3, [r7, #12]
 8014a8e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8014a92:	7af9      	ldrb	r1, [r7, #11]
 8014a94:	683b      	ldr	r3, [r7, #0]
 8014a96:	687a      	ldr	r2, [r7, #4]
 8014a98:	f7f5 fb2d 	bl	800a0f6 <HAL_PCD_EP_Receive>
 8014a9c:	4603      	mov	r3, r0
 8014a9e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8014aa0:	7dfb      	ldrb	r3, [r7, #23]
 8014aa2:	4618      	mov	r0, r3
 8014aa4:	f000 f832 	bl	8014b0c <USBD_Get_USB_Status>
 8014aa8:	4603      	mov	r3, r0
 8014aaa:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8014aac:	7dbb      	ldrb	r3, [r7, #22]
}
 8014aae:	4618      	mov	r0, r3
 8014ab0:	3718      	adds	r7, #24
 8014ab2:	46bd      	mov	sp, r7
 8014ab4:	bd80      	pop	{r7, pc}

08014ab6 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8014ab6:	b580      	push	{r7, lr}
 8014ab8:	b082      	sub	sp, #8
 8014aba:	af00      	add	r7, sp, #0
 8014abc:	6078      	str	r0, [r7, #4]
 8014abe:	460b      	mov	r3, r1
 8014ac0:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8014ac2:	687b      	ldr	r3, [r7, #4]
 8014ac4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8014ac8:	78fa      	ldrb	r2, [r7, #3]
 8014aca:	4611      	mov	r1, r2
 8014acc:	4618      	mov	r0, r3
 8014ace:	f7f5 fb5d 	bl	800a18c <HAL_PCD_EP_GetRxCount>
 8014ad2:	4603      	mov	r3, r0
}
 8014ad4:	4618      	mov	r0, r3
 8014ad6:	3708      	adds	r7, #8
 8014ad8:	46bd      	mov	sp, r7
 8014ada:	bd80      	pop	{r7, pc}

08014adc <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8014adc:	b480      	push	{r7}
 8014ade:	b083      	sub	sp, #12
 8014ae0:	af00      	add	r7, sp, #0
 8014ae2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8014ae4:	4b03      	ldr	r3, [pc, #12]	; (8014af4 <USBD_static_malloc+0x18>)
}
 8014ae6:	4618      	mov	r0, r3
 8014ae8:	370c      	adds	r7, #12
 8014aea:	46bd      	mov	sp, r7
 8014aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014af0:	4770      	bx	lr
 8014af2:	bf00      	nop
 8014af4:	20007924 	.word	0x20007924

08014af8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8014af8:	b480      	push	{r7}
 8014afa:	b083      	sub	sp, #12
 8014afc:	af00      	add	r7, sp, #0
 8014afe:	6078      	str	r0, [r7, #4]

}
 8014b00:	bf00      	nop
 8014b02:	370c      	adds	r7, #12
 8014b04:	46bd      	mov	sp, r7
 8014b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b0a:	4770      	bx	lr

08014b0c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8014b0c:	b480      	push	{r7}
 8014b0e:	b085      	sub	sp, #20
 8014b10:	af00      	add	r7, sp, #0
 8014b12:	4603      	mov	r3, r0
 8014b14:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014b16:	2300      	movs	r3, #0
 8014b18:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8014b1a:	79fb      	ldrb	r3, [r7, #7]
 8014b1c:	2b03      	cmp	r3, #3
 8014b1e:	d817      	bhi.n	8014b50 <USBD_Get_USB_Status+0x44>
 8014b20:	a201      	add	r2, pc, #4	; (adr r2, 8014b28 <USBD_Get_USB_Status+0x1c>)
 8014b22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014b26:	bf00      	nop
 8014b28:	08014b39 	.word	0x08014b39
 8014b2c:	08014b3f 	.word	0x08014b3f
 8014b30:	08014b45 	.word	0x08014b45
 8014b34:	08014b4b 	.word	0x08014b4b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8014b38:	2300      	movs	r3, #0
 8014b3a:	73fb      	strb	r3, [r7, #15]
    break;
 8014b3c:	e00b      	b.n	8014b56 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8014b3e:	2303      	movs	r3, #3
 8014b40:	73fb      	strb	r3, [r7, #15]
    break;
 8014b42:	e008      	b.n	8014b56 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8014b44:	2301      	movs	r3, #1
 8014b46:	73fb      	strb	r3, [r7, #15]
    break;
 8014b48:	e005      	b.n	8014b56 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8014b4a:	2303      	movs	r3, #3
 8014b4c:	73fb      	strb	r3, [r7, #15]
    break;
 8014b4e:	e002      	b.n	8014b56 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8014b50:	2303      	movs	r3, #3
 8014b52:	73fb      	strb	r3, [r7, #15]
    break;
 8014b54:	bf00      	nop
  }
  return usb_status;
 8014b56:	7bfb      	ldrb	r3, [r7, #15]
}
 8014b58:	4618      	mov	r0, r3
 8014b5a:	3714      	adds	r7, #20
 8014b5c:	46bd      	mov	sp, r7
 8014b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b62:	4770      	bx	lr

08014b64 <memset>:
 8014b64:	4402      	add	r2, r0
 8014b66:	4603      	mov	r3, r0
 8014b68:	4293      	cmp	r3, r2
 8014b6a:	d100      	bne.n	8014b6e <memset+0xa>
 8014b6c:	4770      	bx	lr
 8014b6e:	f803 1b01 	strb.w	r1, [r3], #1
 8014b72:	e7f9      	b.n	8014b68 <memset+0x4>

08014b74 <_reclaim_reent>:
 8014b74:	4b29      	ldr	r3, [pc, #164]	; (8014c1c <_reclaim_reent+0xa8>)
 8014b76:	681b      	ldr	r3, [r3, #0]
 8014b78:	4283      	cmp	r3, r0
 8014b7a:	b570      	push	{r4, r5, r6, lr}
 8014b7c:	4604      	mov	r4, r0
 8014b7e:	d04b      	beq.n	8014c18 <_reclaim_reent+0xa4>
 8014b80:	69c3      	ldr	r3, [r0, #28]
 8014b82:	b143      	cbz	r3, 8014b96 <_reclaim_reent+0x22>
 8014b84:	68db      	ldr	r3, [r3, #12]
 8014b86:	2b00      	cmp	r3, #0
 8014b88:	d144      	bne.n	8014c14 <_reclaim_reent+0xa0>
 8014b8a:	69e3      	ldr	r3, [r4, #28]
 8014b8c:	6819      	ldr	r1, [r3, #0]
 8014b8e:	b111      	cbz	r1, 8014b96 <_reclaim_reent+0x22>
 8014b90:	4620      	mov	r0, r4
 8014b92:	f000 f879 	bl	8014c88 <_free_r>
 8014b96:	6961      	ldr	r1, [r4, #20]
 8014b98:	b111      	cbz	r1, 8014ba0 <_reclaim_reent+0x2c>
 8014b9a:	4620      	mov	r0, r4
 8014b9c:	f000 f874 	bl	8014c88 <_free_r>
 8014ba0:	69e1      	ldr	r1, [r4, #28]
 8014ba2:	b111      	cbz	r1, 8014baa <_reclaim_reent+0x36>
 8014ba4:	4620      	mov	r0, r4
 8014ba6:	f000 f86f 	bl	8014c88 <_free_r>
 8014baa:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8014bac:	b111      	cbz	r1, 8014bb4 <_reclaim_reent+0x40>
 8014bae:	4620      	mov	r0, r4
 8014bb0:	f000 f86a 	bl	8014c88 <_free_r>
 8014bb4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8014bb6:	b111      	cbz	r1, 8014bbe <_reclaim_reent+0x4a>
 8014bb8:	4620      	mov	r0, r4
 8014bba:	f000 f865 	bl	8014c88 <_free_r>
 8014bbe:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8014bc0:	b111      	cbz	r1, 8014bc8 <_reclaim_reent+0x54>
 8014bc2:	4620      	mov	r0, r4
 8014bc4:	f000 f860 	bl	8014c88 <_free_r>
 8014bc8:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8014bca:	b111      	cbz	r1, 8014bd2 <_reclaim_reent+0x5e>
 8014bcc:	4620      	mov	r0, r4
 8014bce:	f000 f85b 	bl	8014c88 <_free_r>
 8014bd2:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8014bd4:	b111      	cbz	r1, 8014bdc <_reclaim_reent+0x68>
 8014bd6:	4620      	mov	r0, r4
 8014bd8:	f000 f856 	bl	8014c88 <_free_r>
 8014bdc:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8014bde:	b111      	cbz	r1, 8014be6 <_reclaim_reent+0x72>
 8014be0:	4620      	mov	r0, r4
 8014be2:	f000 f851 	bl	8014c88 <_free_r>
 8014be6:	6a23      	ldr	r3, [r4, #32]
 8014be8:	b1b3      	cbz	r3, 8014c18 <_reclaim_reent+0xa4>
 8014bea:	4620      	mov	r0, r4
 8014bec:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014bf0:	4718      	bx	r3
 8014bf2:	5949      	ldr	r1, [r1, r5]
 8014bf4:	b941      	cbnz	r1, 8014c08 <_reclaim_reent+0x94>
 8014bf6:	3504      	adds	r5, #4
 8014bf8:	69e3      	ldr	r3, [r4, #28]
 8014bfa:	2d80      	cmp	r5, #128	; 0x80
 8014bfc:	68d9      	ldr	r1, [r3, #12]
 8014bfe:	d1f8      	bne.n	8014bf2 <_reclaim_reent+0x7e>
 8014c00:	4620      	mov	r0, r4
 8014c02:	f000 f841 	bl	8014c88 <_free_r>
 8014c06:	e7c0      	b.n	8014b8a <_reclaim_reent+0x16>
 8014c08:	680e      	ldr	r6, [r1, #0]
 8014c0a:	4620      	mov	r0, r4
 8014c0c:	f000 f83c 	bl	8014c88 <_free_r>
 8014c10:	4631      	mov	r1, r6
 8014c12:	e7ef      	b.n	8014bf4 <_reclaim_reent+0x80>
 8014c14:	2500      	movs	r5, #0
 8014c16:	e7ef      	b.n	8014bf8 <_reclaim_reent+0x84>
 8014c18:	bd70      	pop	{r4, r5, r6, pc}
 8014c1a:	bf00      	nop
 8014c1c:	20000200 	.word	0x20000200

08014c20 <__libc_init_array>:
 8014c20:	b570      	push	{r4, r5, r6, lr}
 8014c22:	4d0d      	ldr	r5, [pc, #52]	; (8014c58 <__libc_init_array+0x38>)
 8014c24:	4c0d      	ldr	r4, [pc, #52]	; (8014c5c <__libc_init_array+0x3c>)
 8014c26:	1b64      	subs	r4, r4, r5
 8014c28:	10a4      	asrs	r4, r4, #2
 8014c2a:	2600      	movs	r6, #0
 8014c2c:	42a6      	cmp	r6, r4
 8014c2e:	d109      	bne.n	8014c44 <__libc_init_array+0x24>
 8014c30:	4d0b      	ldr	r5, [pc, #44]	; (8014c60 <__libc_init_array+0x40>)
 8014c32:	4c0c      	ldr	r4, [pc, #48]	; (8014c64 <__libc_init_array+0x44>)
 8014c34:	f001 fe8a 	bl	801694c <_init>
 8014c38:	1b64      	subs	r4, r4, r5
 8014c3a:	10a4      	asrs	r4, r4, #2
 8014c3c:	2600      	movs	r6, #0
 8014c3e:	42a6      	cmp	r6, r4
 8014c40:	d105      	bne.n	8014c4e <__libc_init_array+0x2e>
 8014c42:	bd70      	pop	{r4, r5, r6, pc}
 8014c44:	f855 3b04 	ldr.w	r3, [r5], #4
 8014c48:	4798      	blx	r3
 8014c4a:	3601      	adds	r6, #1
 8014c4c:	e7ee      	b.n	8014c2c <__libc_init_array+0xc>
 8014c4e:	f855 3b04 	ldr.w	r3, [r5], #4
 8014c52:	4798      	blx	r3
 8014c54:	3601      	adds	r6, #1
 8014c56:	e7f2      	b.n	8014c3e <__libc_init_array+0x1e>
 8014c58:	08016fc0 	.word	0x08016fc0
 8014c5c:	08016fc0 	.word	0x08016fc0
 8014c60:	08016fc0 	.word	0x08016fc0
 8014c64:	08016fc4 	.word	0x08016fc4

08014c68 <__retarget_lock_acquire_recursive>:
 8014c68:	4770      	bx	lr

08014c6a <__retarget_lock_release_recursive>:
 8014c6a:	4770      	bx	lr

08014c6c <memcpy>:
 8014c6c:	440a      	add	r2, r1
 8014c6e:	4291      	cmp	r1, r2
 8014c70:	f100 33ff 	add.w	r3, r0, #4294967295
 8014c74:	d100      	bne.n	8014c78 <memcpy+0xc>
 8014c76:	4770      	bx	lr
 8014c78:	b510      	push	{r4, lr}
 8014c7a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8014c7e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8014c82:	4291      	cmp	r1, r2
 8014c84:	d1f9      	bne.n	8014c7a <memcpy+0xe>
 8014c86:	bd10      	pop	{r4, pc}

08014c88 <_free_r>:
 8014c88:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8014c8a:	2900      	cmp	r1, #0
 8014c8c:	d044      	beq.n	8014d18 <_free_r+0x90>
 8014c8e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014c92:	9001      	str	r0, [sp, #4]
 8014c94:	2b00      	cmp	r3, #0
 8014c96:	f1a1 0404 	sub.w	r4, r1, #4
 8014c9a:	bfb8      	it	lt
 8014c9c:	18e4      	addlt	r4, r4, r3
 8014c9e:	f000 f83f 	bl	8014d20 <__malloc_lock>
 8014ca2:	4a1e      	ldr	r2, [pc, #120]	; (8014d1c <_free_r+0x94>)
 8014ca4:	9801      	ldr	r0, [sp, #4]
 8014ca6:	6813      	ldr	r3, [r2, #0]
 8014ca8:	b933      	cbnz	r3, 8014cb8 <_free_r+0x30>
 8014caa:	6063      	str	r3, [r4, #4]
 8014cac:	6014      	str	r4, [r2, #0]
 8014cae:	b003      	add	sp, #12
 8014cb0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8014cb4:	f000 b83a 	b.w	8014d2c <__malloc_unlock>
 8014cb8:	42a3      	cmp	r3, r4
 8014cba:	d908      	bls.n	8014cce <_free_r+0x46>
 8014cbc:	6825      	ldr	r5, [r4, #0]
 8014cbe:	1961      	adds	r1, r4, r5
 8014cc0:	428b      	cmp	r3, r1
 8014cc2:	bf01      	itttt	eq
 8014cc4:	6819      	ldreq	r1, [r3, #0]
 8014cc6:	685b      	ldreq	r3, [r3, #4]
 8014cc8:	1949      	addeq	r1, r1, r5
 8014cca:	6021      	streq	r1, [r4, #0]
 8014ccc:	e7ed      	b.n	8014caa <_free_r+0x22>
 8014cce:	461a      	mov	r2, r3
 8014cd0:	685b      	ldr	r3, [r3, #4]
 8014cd2:	b10b      	cbz	r3, 8014cd8 <_free_r+0x50>
 8014cd4:	42a3      	cmp	r3, r4
 8014cd6:	d9fa      	bls.n	8014cce <_free_r+0x46>
 8014cd8:	6811      	ldr	r1, [r2, #0]
 8014cda:	1855      	adds	r5, r2, r1
 8014cdc:	42a5      	cmp	r5, r4
 8014cde:	d10b      	bne.n	8014cf8 <_free_r+0x70>
 8014ce0:	6824      	ldr	r4, [r4, #0]
 8014ce2:	4421      	add	r1, r4
 8014ce4:	1854      	adds	r4, r2, r1
 8014ce6:	42a3      	cmp	r3, r4
 8014ce8:	6011      	str	r1, [r2, #0]
 8014cea:	d1e0      	bne.n	8014cae <_free_r+0x26>
 8014cec:	681c      	ldr	r4, [r3, #0]
 8014cee:	685b      	ldr	r3, [r3, #4]
 8014cf0:	6053      	str	r3, [r2, #4]
 8014cf2:	440c      	add	r4, r1
 8014cf4:	6014      	str	r4, [r2, #0]
 8014cf6:	e7da      	b.n	8014cae <_free_r+0x26>
 8014cf8:	d902      	bls.n	8014d00 <_free_r+0x78>
 8014cfa:	230c      	movs	r3, #12
 8014cfc:	6003      	str	r3, [r0, #0]
 8014cfe:	e7d6      	b.n	8014cae <_free_r+0x26>
 8014d00:	6825      	ldr	r5, [r4, #0]
 8014d02:	1961      	adds	r1, r4, r5
 8014d04:	428b      	cmp	r3, r1
 8014d06:	bf04      	itt	eq
 8014d08:	6819      	ldreq	r1, [r3, #0]
 8014d0a:	685b      	ldreq	r3, [r3, #4]
 8014d0c:	6063      	str	r3, [r4, #4]
 8014d0e:	bf04      	itt	eq
 8014d10:	1949      	addeq	r1, r1, r5
 8014d12:	6021      	streq	r1, [r4, #0]
 8014d14:	6054      	str	r4, [r2, #4]
 8014d16:	e7ca      	b.n	8014cae <_free_r+0x26>
 8014d18:	b003      	add	sp, #12
 8014d1a:	bd30      	pop	{r4, r5, pc}
 8014d1c:	20007c80 	.word	0x20007c80

08014d20 <__malloc_lock>:
 8014d20:	4801      	ldr	r0, [pc, #4]	; (8014d28 <__malloc_lock+0x8>)
 8014d22:	f7ff bfa1 	b.w	8014c68 <__retarget_lock_acquire_recursive>
 8014d26:	bf00      	nop
 8014d28:	20007c7c 	.word	0x20007c7c

08014d2c <__malloc_unlock>:
 8014d2c:	4801      	ldr	r0, [pc, #4]	; (8014d34 <__malloc_unlock+0x8>)
 8014d2e:	f7ff bf9c 	b.w	8014c6a <__retarget_lock_release_recursive>
 8014d32:	bf00      	nop
 8014d34:	20007c7c 	.word	0x20007c7c

08014d38 <asin>:
 8014d38:	b538      	push	{r3, r4, r5, lr}
 8014d3a:	ed2d 8b02 	vpush	{d8}
 8014d3e:	ec55 4b10 	vmov	r4, r5, d0
 8014d42:	f000 fb29 	bl	8015398 <__ieee754_asin>
 8014d46:	4622      	mov	r2, r4
 8014d48:	462b      	mov	r3, r5
 8014d4a:	4620      	mov	r0, r4
 8014d4c:	4629      	mov	r1, r5
 8014d4e:	eeb0 8a40 	vmov.f32	s16, s0
 8014d52:	eef0 8a60 	vmov.f32	s17, s1
 8014d56:	f7eb fea1 	bl	8000a9c <__aeabi_dcmpun>
 8014d5a:	b9a8      	cbnz	r0, 8014d88 <asin+0x50>
 8014d5c:	ec45 4b10 	vmov	d0, r4, r5
 8014d60:	f000 f8a2 	bl	8014ea8 <fabs>
 8014d64:	4b0c      	ldr	r3, [pc, #48]	; (8014d98 <asin+0x60>)
 8014d66:	ec51 0b10 	vmov	r0, r1, d0
 8014d6a:	2200      	movs	r2, #0
 8014d6c:	f7eb fe8c 	bl	8000a88 <__aeabi_dcmpgt>
 8014d70:	b150      	cbz	r0, 8014d88 <asin+0x50>
 8014d72:	f001 fde5 	bl	8016940 <__errno>
 8014d76:	ecbd 8b02 	vpop	{d8}
 8014d7a:	2321      	movs	r3, #33	; 0x21
 8014d7c:	6003      	str	r3, [r0, #0]
 8014d7e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014d82:	4806      	ldr	r0, [pc, #24]	; (8014d9c <asin+0x64>)
 8014d84:	f000 b89c 	b.w	8014ec0 <nan>
 8014d88:	eeb0 0a48 	vmov.f32	s0, s16
 8014d8c:	eef0 0a68 	vmov.f32	s1, s17
 8014d90:	ecbd 8b02 	vpop	{d8}
 8014d94:	bd38      	pop	{r3, r4, r5, pc}
 8014d96:	bf00      	nop
 8014d98:	3ff00000 	.word	0x3ff00000
 8014d9c:	08016d6c 	.word	0x08016d6c

08014da0 <atan2>:
 8014da0:	f000 bd0e 	b.w	80157c0 <__ieee754_atan2>

08014da4 <sqrt>:
 8014da4:	b538      	push	{r3, r4, r5, lr}
 8014da6:	ed2d 8b02 	vpush	{d8}
 8014daa:	ec55 4b10 	vmov	r4, r5, d0
 8014dae:	f000 f88f 	bl	8014ed0 <__ieee754_sqrt>
 8014db2:	4622      	mov	r2, r4
 8014db4:	462b      	mov	r3, r5
 8014db6:	4620      	mov	r0, r4
 8014db8:	4629      	mov	r1, r5
 8014dba:	eeb0 8a40 	vmov.f32	s16, s0
 8014dbe:	eef0 8a60 	vmov.f32	s17, s1
 8014dc2:	f7eb fe6b 	bl	8000a9c <__aeabi_dcmpun>
 8014dc6:	b990      	cbnz	r0, 8014dee <sqrt+0x4a>
 8014dc8:	2200      	movs	r2, #0
 8014dca:	2300      	movs	r3, #0
 8014dcc:	4620      	mov	r0, r4
 8014dce:	4629      	mov	r1, r5
 8014dd0:	f7eb fe3c 	bl	8000a4c <__aeabi_dcmplt>
 8014dd4:	b158      	cbz	r0, 8014dee <sqrt+0x4a>
 8014dd6:	f001 fdb3 	bl	8016940 <__errno>
 8014dda:	2321      	movs	r3, #33	; 0x21
 8014ddc:	6003      	str	r3, [r0, #0]
 8014dde:	2200      	movs	r2, #0
 8014de0:	2300      	movs	r3, #0
 8014de2:	4610      	mov	r0, r2
 8014de4:	4619      	mov	r1, r3
 8014de6:	f7eb fce9 	bl	80007bc <__aeabi_ddiv>
 8014dea:	ec41 0b18 	vmov	d8, r0, r1
 8014dee:	eeb0 0a48 	vmov.f32	s0, s16
 8014df2:	eef0 0a68 	vmov.f32	s1, s17
 8014df6:	ecbd 8b02 	vpop	{d8}
 8014dfa:	bd38      	pop	{r3, r4, r5, pc}
 8014dfc:	0000      	movs	r0, r0
	...

08014e00 <cos>:
 8014e00:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8014e02:	ec53 2b10 	vmov	r2, r3, d0
 8014e06:	4826      	ldr	r0, [pc, #152]	; (8014ea0 <cos+0xa0>)
 8014e08:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8014e0c:	4281      	cmp	r1, r0
 8014e0e:	dc06      	bgt.n	8014e1e <cos+0x1e>
 8014e10:	ed9f 1b21 	vldr	d1, [pc, #132]	; 8014e98 <cos+0x98>
 8014e14:	b005      	add	sp, #20
 8014e16:	f85d eb04 	ldr.w	lr, [sp], #4
 8014e1a:	f000 b935 	b.w	8015088 <__kernel_cos>
 8014e1e:	4821      	ldr	r0, [pc, #132]	; (8014ea4 <cos+0xa4>)
 8014e20:	4281      	cmp	r1, r0
 8014e22:	dd09      	ble.n	8014e38 <cos+0x38>
 8014e24:	ee10 0a10 	vmov	r0, s0
 8014e28:	4619      	mov	r1, r3
 8014e2a:	f7eb f9e5 	bl	80001f8 <__aeabi_dsub>
 8014e2e:	ec41 0b10 	vmov	d0, r0, r1
 8014e32:	b005      	add	sp, #20
 8014e34:	f85d fb04 	ldr.w	pc, [sp], #4
 8014e38:	4668      	mov	r0, sp
 8014e3a:	f000 fd89 	bl	8015950 <__ieee754_rem_pio2>
 8014e3e:	f000 0003 	and.w	r0, r0, #3
 8014e42:	2801      	cmp	r0, #1
 8014e44:	d00b      	beq.n	8014e5e <cos+0x5e>
 8014e46:	2802      	cmp	r0, #2
 8014e48:	d016      	beq.n	8014e78 <cos+0x78>
 8014e4a:	b9e0      	cbnz	r0, 8014e86 <cos+0x86>
 8014e4c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8014e50:	ed9d 0b00 	vldr	d0, [sp]
 8014e54:	f000 f918 	bl	8015088 <__kernel_cos>
 8014e58:	ec51 0b10 	vmov	r0, r1, d0
 8014e5c:	e7e7      	b.n	8014e2e <cos+0x2e>
 8014e5e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8014e62:	ed9d 0b00 	vldr	d0, [sp]
 8014e66:	f000 f9d7 	bl	8015218 <__kernel_sin>
 8014e6a:	ec53 2b10 	vmov	r2, r3, d0
 8014e6e:	ee10 0a10 	vmov	r0, s0
 8014e72:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8014e76:	e7da      	b.n	8014e2e <cos+0x2e>
 8014e78:	ed9d 1b02 	vldr	d1, [sp, #8]
 8014e7c:	ed9d 0b00 	vldr	d0, [sp]
 8014e80:	f000 f902 	bl	8015088 <__kernel_cos>
 8014e84:	e7f1      	b.n	8014e6a <cos+0x6a>
 8014e86:	ed9d 1b02 	vldr	d1, [sp, #8]
 8014e8a:	ed9d 0b00 	vldr	d0, [sp]
 8014e8e:	2001      	movs	r0, #1
 8014e90:	f000 f9c2 	bl	8015218 <__kernel_sin>
 8014e94:	e7e0      	b.n	8014e58 <cos+0x58>
 8014e96:	bf00      	nop
	...
 8014ea0:	3fe921fb 	.word	0x3fe921fb
 8014ea4:	7fefffff 	.word	0x7fefffff

08014ea8 <fabs>:
 8014ea8:	ec51 0b10 	vmov	r0, r1, d0
 8014eac:	ee10 2a10 	vmov	r2, s0
 8014eb0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8014eb4:	ec43 2b10 	vmov	d0, r2, r3
 8014eb8:	4770      	bx	lr
 8014eba:	0000      	movs	r0, r0
 8014ebc:	0000      	movs	r0, r0
	...

08014ec0 <nan>:
 8014ec0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8014ec8 <nan+0x8>
 8014ec4:	4770      	bx	lr
 8014ec6:	bf00      	nop
 8014ec8:	00000000 	.word	0x00000000
 8014ecc:	7ff80000 	.word	0x7ff80000

08014ed0 <__ieee754_sqrt>:
 8014ed0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014ed4:	ec55 4b10 	vmov	r4, r5, d0
 8014ed8:	4e67      	ldr	r6, [pc, #412]	; (8015078 <__ieee754_sqrt+0x1a8>)
 8014eda:	43ae      	bics	r6, r5
 8014edc:	ee10 0a10 	vmov	r0, s0
 8014ee0:	ee10 2a10 	vmov	r2, s0
 8014ee4:	4629      	mov	r1, r5
 8014ee6:	462b      	mov	r3, r5
 8014ee8:	d10d      	bne.n	8014f06 <__ieee754_sqrt+0x36>
 8014eea:	f7eb fb3d 	bl	8000568 <__aeabi_dmul>
 8014eee:	4602      	mov	r2, r0
 8014ef0:	460b      	mov	r3, r1
 8014ef2:	4620      	mov	r0, r4
 8014ef4:	4629      	mov	r1, r5
 8014ef6:	f7eb f981 	bl	80001fc <__adddf3>
 8014efa:	4604      	mov	r4, r0
 8014efc:	460d      	mov	r5, r1
 8014efe:	ec45 4b10 	vmov	d0, r4, r5
 8014f02:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014f06:	2d00      	cmp	r5, #0
 8014f08:	dc0b      	bgt.n	8014f22 <__ieee754_sqrt+0x52>
 8014f0a:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8014f0e:	4326      	orrs	r6, r4
 8014f10:	d0f5      	beq.n	8014efe <__ieee754_sqrt+0x2e>
 8014f12:	b135      	cbz	r5, 8014f22 <__ieee754_sqrt+0x52>
 8014f14:	f7eb f970 	bl	80001f8 <__aeabi_dsub>
 8014f18:	4602      	mov	r2, r0
 8014f1a:	460b      	mov	r3, r1
 8014f1c:	f7eb fc4e 	bl	80007bc <__aeabi_ddiv>
 8014f20:	e7eb      	b.n	8014efa <__ieee754_sqrt+0x2a>
 8014f22:	1509      	asrs	r1, r1, #20
 8014f24:	f000 808d 	beq.w	8015042 <__ieee754_sqrt+0x172>
 8014f28:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8014f2c:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 8014f30:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8014f34:	07c9      	lsls	r1, r1, #31
 8014f36:	bf5c      	itt	pl
 8014f38:	005b      	lslpl	r3, r3, #1
 8014f3a:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 8014f3e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8014f42:	bf58      	it	pl
 8014f44:	0052      	lslpl	r2, r2, #1
 8014f46:	2500      	movs	r5, #0
 8014f48:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8014f4c:	1076      	asrs	r6, r6, #1
 8014f4e:	0052      	lsls	r2, r2, #1
 8014f50:	f04f 0e16 	mov.w	lr, #22
 8014f54:	46ac      	mov	ip, r5
 8014f56:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8014f5a:	eb0c 0001 	add.w	r0, ip, r1
 8014f5e:	4298      	cmp	r0, r3
 8014f60:	bfde      	ittt	le
 8014f62:	1a1b      	suble	r3, r3, r0
 8014f64:	eb00 0c01 	addle.w	ip, r0, r1
 8014f68:	186d      	addle	r5, r5, r1
 8014f6a:	005b      	lsls	r3, r3, #1
 8014f6c:	f1be 0e01 	subs.w	lr, lr, #1
 8014f70:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8014f74:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8014f78:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8014f7c:	d1ed      	bne.n	8014f5a <__ieee754_sqrt+0x8a>
 8014f7e:	4674      	mov	r4, lr
 8014f80:	2720      	movs	r7, #32
 8014f82:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8014f86:	4563      	cmp	r3, ip
 8014f88:	eb01 000e 	add.w	r0, r1, lr
 8014f8c:	dc02      	bgt.n	8014f94 <__ieee754_sqrt+0xc4>
 8014f8e:	d113      	bne.n	8014fb8 <__ieee754_sqrt+0xe8>
 8014f90:	4290      	cmp	r0, r2
 8014f92:	d811      	bhi.n	8014fb8 <__ieee754_sqrt+0xe8>
 8014f94:	2800      	cmp	r0, #0
 8014f96:	eb00 0e01 	add.w	lr, r0, r1
 8014f9a:	da57      	bge.n	801504c <__ieee754_sqrt+0x17c>
 8014f9c:	f1be 0f00 	cmp.w	lr, #0
 8014fa0:	db54      	blt.n	801504c <__ieee754_sqrt+0x17c>
 8014fa2:	f10c 0801 	add.w	r8, ip, #1
 8014fa6:	eba3 030c 	sub.w	r3, r3, ip
 8014faa:	4290      	cmp	r0, r2
 8014fac:	bf88      	it	hi
 8014fae:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8014fb2:	1a12      	subs	r2, r2, r0
 8014fb4:	440c      	add	r4, r1
 8014fb6:	46c4      	mov	ip, r8
 8014fb8:	005b      	lsls	r3, r3, #1
 8014fba:	3f01      	subs	r7, #1
 8014fbc:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8014fc0:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8014fc4:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8014fc8:	d1dd      	bne.n	8014f86 <__ieee754_sqrt+0xb6>
 8014fca:	4313      	orrs	r3, r2
 8014fcc:	d01b      	beq.n	8015006 <__ieee754_sqrt+0x136>
 8014fce:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 801507c <__ieee754_sqrt+0x1ac>
 8014fd2:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 8015080 <__ieee754_sqrt+0x1b0>
 8014fd6:	e9da 0100 	ldrd	r0, r1, [sl]
 8014fda:	e9db 2300 	ldrd	r2, r3, [fp]
 8014fde:	f7eb f90b 	bl	80001f8 <__aeabi_dsub>
 8014fe2:	e9da 8900 	ldrd	r8, r9, [sl]
 8014fe6:	4602      	mov	r2, r0
 8014fe8:	460b      	mov	r3, r1
 8014fea:	4640      	mov	r0, r8
 8014fec:	4649      	mov	r1, r9
 8014fee:	f7eb fd37 	bl	8000a60 <__aeabi_dcmple>
 8014ff2:	b140      	cbz	r0, 8015006 <__ieee754_sqrt+0x136>
 8014ff4:	f1b4 3fff 	cmp.w	r4, #4294967295
 8014ff8:	e9da 0100 	ldrd	r0, r1, [sl]
 8014ffc:	e9db 2300 	ldrd	r2, r3, [fp]
 8015000:	d126      	bne.n	8015050 <__ieee754_sqrt+0x180>
 8015002:	3501      	adds	r5, #1
 8015004:	463c      	mov	r4, r7
 8015006:	106a      	asrs	r2, r5, #1
 8015008:	0863      	lsrs	r3, r4, #1
 801500a:	07e9      	lsls	r1, r5, #31
 801500c:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8015010:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8015014:	bf48      	it	mi
 8015016:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 801501a:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 801501e:	461c      	mov	r4, r3
 8015020:	e76d      	b.n	8014efe <__ieee754_sqrt+0x2e>
 8015022:	0ad3      	lsrs	r3, r2, #11
 8015024:	3815      	subs	r0, #21
 8015026:	0552      	lsls	r2, r2, #21
 8015028:	2b00      	cmp	r3, #0
 801502a:	d0fa      	beq.n	8015022 <__ieee754_sqrt+0x152>
 801502c:	02dc      	lsls	r4, r3, #11
 801502e:	d50a      	bpl.n	8015046 <__ieee754_sqrt+0x176>
 8015030:	f1c1 0420 	rsb	r4, r1, #32
 8015034:	fa22 f404 	lsr.w	r4, r2, r4
 8015038:	1e4d      	subs	r5, r1, #1
 801503a:	408a      	lsls	r2, r1
 801503c:	4323      	orrs	r3, r4
 801503e:	1b41      	subs	r1, r0, r5
 8015040:	e772      	b.n	8014f28 <__ieee754_sqrt+0x58>
 8015042:	4608      	mov	r0, r1
 8015044:	e7f0      	b.n	8015028 <__ieee754_sqrt+0x158>
 8015046:	005b      	lsls	r3, r3, #1
 8015048:	3101      	adds	r1, #1
 801504a:	e7ef      	b.n	801502c <__ieee754_sqrt+0x15c>
 801504c:	46e0      	mov	r8, ip
 801504e:	e7aa      	b.n	8014fa6 <__ieee754_sqrt+0xd6>
 8015050:	f7eb f8d4 	bl	80001fc <__adddf3>
 8015054:	e9da 8900 	ldrd	r8, r9, [sl]
 8015058:	4602      	mov	r2, r0
 801505a:	460b      	mov	r3, r1
 801505c:	4640      	mov	r0, r8
 801505e:	4649      	mov	r1, r9
 8015060:	f7eb fcf4 	bl	8000a4c <__aeabi_dcmplt>
 8015064:	b120      	cbz	r0, 8015070 <__ieee754_sqrt+0x1a0>
 8015066:	1ca0      	adds	r0, r4, #2
 8015068:	bf08      	it	eq
 801506a:	3501      	addeq	r5, #1
 801506c:	3402      	adds	r4, #2
 801506e:	e7ca      	b.n	8015006 <__ieee754_sqrt+0x136>
 8015070:	3401      	adds	r4, #1
 8015072:	f024 0401 	bic.w	r4, r4, #1
 8015076:	e7c6      	b.n	8015006 <__ieee754_sqrt+0x136>
 8015078:	7ff00000 	.word	0x7ff00000
 801507c:	20000208 	.word	0x20000208
 8015080:	20000210 	.word	0x20000210
 8015084:	00000000 	.word	0x00000000

08015088 <__kernel_cos>:
 8015088:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801508c:	ec57 6b10 	vmov	r6, r7, d0
 8015090:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8015094:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8015098:	ed8d 1b00 	vstr	d1, [sp]
 801509c:	da07      	bge.n	80150ae <__kernel_cos+0x26>
 801509e:	ee10 0a10 	vmov	r0, s0
 80150a2:	4639      	mov	r1, r7
 80150a4:	f7eb fd10 	bl	8000ac8 <__aeabi_d2iz>
 80150a8:	2800      	cmp	r0, #0
 80150aa:	f000 8088 	beq.w	80151be <__kernel_cos+0x136>
 80150ae:	4632      	mov	r2, r6
 80150b0:	463b      	mov	r3, r7
 80150b2:	4630      	mov	r0, r6
 80150b4:	4639      	mov	r1, r7
 80150b6:	f7eb fa57 	bl	8000568 <__aeabi_dmul>
 80150ba:	4b51      	ldr	r3, [pc, #324]	; (8015200 <__kernel_cos+0x178>)
 80150bc:	2200      	movs	r2, #0
 80150be:	4604      	mov	r4, r0
 80150c0:	460d      	mov	r5, r1
 80150c2:	f7eb fa51 	bl	8000568 <__aeabi_dmul>
 80150c6:	a340      	add	r3, pc, #256	; (adr r3, 80151c8 <__kernel_cos+0x140>)
 80150c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80150cc:	4682      	mov	sl, r0
 80150ce:	468b      	mov	fp, r1
 80150d0:	4620      	mov	r0, r4
 80150d2:	4629      	mov	r1, r5
 80150d4:	f7eb fa48 	bl	8000568 <__aeabi_dmul>
 80150d8:	a33d      	add	r3, pc, #244	; (adr r3, 80151d0 <__kernel_cos+0x148>)
 80150da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80150de:	f7eb f88d 	bl	80001fc <__adddf3>
 80150e2:	4622      	mov	r2, r4
 80150e4:	462b      	mov	r3, r5
 80150e6:	f7eb fa3f 	bl	8000568 <__aeabi_dmul>
 80150ea:	a33b      	add	r3, pc, #236	; (adr r3, 80151d8 <__kernel_cos+0x150>)
 80150ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80150f0:	f7eb f882 	bl	80001f8 <__aeabi_dsub>
 80150f4:	4622      	mov	r2, r4
 80150f6:	462b      	mov	r3, r5
 80150f8:	f7eb fa36 	bl	8000568 <__aeabi_dmul>
 80150fc:	a338      	add	r3, pc, #224	; (adr r3, 80151e0 <__kernel_cos+0x158>)
 80150fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015102:	f7eb f87b 	bl	80001fc <__adddf3>
 8015106:	4622      	mov	r2, r4
 8015108:	462b      	mov	r3, r5
 801510a:	f7eb fa2d 	bl	8000568 <__aeabi_dmul>
 801510e:	a336      	add	r3, pc, #216	; (adr r3, 80151e8 <__kernel_cos+0x160>)
 8015110:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015114:	f7eb f870 	bl	80001f8 <__aeabi_dsub>
 8015118:	4622      	mov	r2, r4
 801511a:	462b      	mov	r3, r5
 801511c:	f7eb fa24 	bl	8000568 <__aeabi_dmul>
 8015120:	a333      	add	r3, pc, #204	; (adr r3, 80151f0 <__kernel_cos+0x168>)
 8015122:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015126:	f7eb f869 	bl	80001fc <__adddf3>
 801512a:	4622      	mov	r2, r4
 801512c:	462b      	mov	r3, r5
 801512e:	f7eb fa1b 	bl	8000568 <__aeabi_dmul>
 8015132:	4622      	mov	r2, r4
 8015134:	462b      	mov	r3, r5
 8015136:	f7eb fa17 	bl	8000568 <__aeabi_dmul>
 801513a:	e9dd 2300 	ldrd	r2, r3, [sp]
 801513e:	4604      	mov	r4, r0
 8015140:	460d      	mov	r5, r1
 8015142:	4630      	mov	r0, r6
 8015144:	4639      	mov	r1, r7
 8015146:	f7eb fa0f 	bl	8000568 <__aeabi_dmul>
 801514a:	460b      	mov	r3, r1
 801514c:	4602      	mov	r2, r0
 801514e:	4629      	mov	r1, r5
 8015150:	4620      	mov	r0, r4
 8015152:	f7eb f851 	bl	80001f8 <__aeabi_dsub>
 8015156:	4b2b      	ldr	r3, [pc, #172]	; (8015204 <__kernel_cos+0x17c>)
 8015158:	4598      	cmp	r8, r3
 801515a:	4606      	mov	r6, r0
 801515c:	460f      	mov	r7, r1
 801515e:	dc10      	bgt.n	8015182 <__kernel_cos+0xfa>
 8015160:	4602      	mov	r2, r0
 8015162:	460b      	mov	r3, r1
 8015164:	4650      	mov	r0, sl
 8015166:	4659      	mov	r1, fp
 8015168:	f7eb f846 	bl	80001f8 <__aeabi_dsub>
 801516c:	460b      	mov	r3, r1
 801516e:	4926      	ldr	r1, [pc, #152]	; (8015208 <__kernel_cos+0x180>)
 8015170:	4602      	mov	r2, r0
 8015172:	2000      	movs	r0, #0
 8015174:	f7eb f840 	bl	80001f8 <__aeabi_dsub>
 8015178:	ec41 0b10 	vmov	d0, r0, r1
 801517c:	b003      	add	sp, #12
 801517e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015182:	4b22      	ldr	r3, [pc, #136]	; (801520c <__kernel_cos+0x184>)
 8015184:	4920      	ldr	r1, [pc, #128]	; (8015208 <__kernel_cos+0x180>)
 8015186:	4598      	cmp	r8, r3
 8015188:	bfcc      	ite	gt
 801518a:	4d21      	ldrgt	r5, [pc, #132]	; (8015210 <__kernel_cos+0x188>)
 801518c:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8015190:	2400      	movs	r4, #0
 8015192:	4622      	mov	r2, r4
 8015194:	462b      	mov	r3, r5
 8015196:	2000      	movs	r0, #0
 8015198:	f7eb f82e 	bl	80001f8 <__aeabi_dsub>
 801519c:	4622      	mov	r2, r4
 801519e:	4680      	mov	r8, r0
 80151a0:	4689      	mov	r9, r1
 80151a2:	462b      	mov	r3, r5
 80151a4:	4650      	mov	r0, sl
 80151a6:	4659      	mov	r1, fp
 80151a8:	f7eb f826 	bl	80001f8 <__aeabi_dsub>
 80151ac:	4632      	mov	r2, r6
 80151ae:	463b      	mov	r3, r7
 80151b0:	f7eb f822 	bl	80001f8 <__aeabi_dsub>
 80151b4:	4602      	mov	r2, r0
 80151b6:	460b      	mov	r3, r1
 80151b8:	4640      	mov	r0, r8
 80151ba:	4649      	mov	r1, r9
 80151bc:	e7da      	b.n	8015174 <__kernel_cos+0xec>
 80151be:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 80151f8 <__kernel_cos+0x170>
 80151c2:	e7db      	b.n	801517c <__kernel_cos+0xf4>
 80151c4:	f3af 8000 	nop.w
 80151c8:	be8838d4 	.word	0xbe8838d4
 80151cc:	bda8fae9 	.word	0xbda8fae9
 80151d0:	bdb4b1c4 	.word	0xbdb4b1c4
 80151d4:	3e21ee9e 	.word	0x3e21ee9e
 80151d8:	809c52ad 	.word	0x809c52ad
 80151dc:	3e927e4f 	.word	0x3e927e4f
 80151e0:	19cb1590 	.word	0x19cb1590
 80151e4:	3efa01a0 	.word	0x3efa01a0
 80151e8:	16c15177 	.word	0x16c15177
 80151ec:	3f56c16c 	.word	0x3f56c16c
 80151f0:	5555554c 	.word	0x5555554c
 80151f4:	3fa55555 	.word	0x3fa55555
 80151f8:	00000000 	.word	0x00000000
 80151fc:	3ff00000 	.word	0x3ff00000
 8015200:	3fe00000 	.word	0x3fe00000
 8015204:	3fd33332 	.word	0x3fd33332
 8015208:	3ff00000 	.word	0x3ff00000
 801520c:	3fe90000 	.word	0x3fe90000
 8015210:	3fd20000 	.word	0x3fd20000
 8015214:	00000000 	.word	0x00000000

08015218 <__kernel_sin>:
 8015218:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801521c:	ed2d 8b04 	vpush	{d8-d9}
 8015220:	eeb0 8a41 	vmov.f32	s16, s2
 8015224:	eef0 8a61 	vmov.f32	s17, s3
 8015228:	ec55 4b10 	vmov	r4, r5, d0
 801522c:	b083      	sub	sp, #12
 801522e:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8015232:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8015236:	9001      	str	r0, [sp, #4]
 8015238:	da06      	bge.n	8015248 <__kernel_sin+0x30>
 801523a:	ee10 0a10 	vmov	r0, s0
 801523e:	4629      	mov	r1, r5
 8015240:	f7eb fc42 	bl	8000ac8 <__aeabi_d2iz>
 8015244:	2800      	cmp	r0, #0
 8015246:	d051      	beq.n	80152ec <__kernel_sin+0xd4>
 8015248:	4622      	mov	r2, r4
 801524a:	462b      	mov	r3, r5
 801524c:	4620      	mov	r0, r4
 801524e:	4629      	mov	r1, r5
 8015250:	f7eb f98a 	bl	8000568 <__aeabi_dmul>
 8015254:	4682      	mov	sl, r0
 8015256:	468b      	mov	fp, r1
 8015258:	4602      	mov	r2, r0
 801525a:	460b      	mov	r3, r1
 801525c:	4620      	mov	r0, r4
 801525e:	4629      	mov	r1, r5
 8015260:	f7eb f982 	bl	8000568 <__aeabi_dmul>
 8015264:	a341      	add	r3, pc, #260	; (adr r3, 801536c <__kernel_sin+0x154>)
 8015266:	e9d3 2300 	ldrd	r2, r3, [r3]
 801526a:	4680      	mov	r8, r0
 801526c:	4689      	mov	r9, r1
 801526e:	4650      	mov	r0, sl
 8015270:	4659      	mov	r1, fp
 8015272:	f7eb f979 	bl	8000568 <__aeabi_dmul>
 8015276:	a33f      	add	r3, pc, #252	; (adr r3, 8015374 <__kernel_sin+0x15c>)
 8015278:	e9d3 2300 	ldrd	r2, r3, [r3]
 801527c:	f7ea ffbc 	bl	80001f8 <__aeabi_dsub>
 8015280:	4652      	mov	r2, sl
 8015282:	465b      	mov	r3, fp
 8015284:	f7eb f970 	bl	8000568 <__aeabi_dmul>
 8015288:	a33c      	add	r3, pc, #240	; (adr r3, 801537c <__kernel_sin+0x164>)
 801528a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801528e:	f7ea ffb5 	bl	80001fc <__adddf3>
 8015292:	4652      	mov	r2, sl
 8015294:	465b      	mov	r3, fp
 8015296:	f7eb f967 	bl	8000568 <__aeabi_dmul>
 801529a:	a33a      	add	r3, pc, #232	; (adr r3, 8015384 <__kernel_sin+0x16c>)
 801529c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80152a0:	f7ea ffaa 	bl	80001f8 <__aeabi_dsub>
 80152a4:	4652      	mov	r2, sl
 80152a6:	465b      	mov	r3, fp
 80152a8:	f7eb f95e 	bl	8000568 <__aeabi_dmul>
 80152ac:	a337      	add	r3, pc, #220	; (adr r3, 801538c <__kernel_sin+0x174>)
 80152ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80152b2:	f7ea ffa3 	bl	80001fc <__adddf3>
 80152b6:	9b01      	ldr	r3, [sp, #4]
 80152b8:	4606      	mov	r6, r0
 80152ba:	460f      	mov	r7, r1
 80152bc:	b9eb      	cbnz	r3, 80152fa <__kernel_sin+0xe2>
 80152be:	4602      	mov	r2, r0
 80152c0:	460b      	mov	r3, r1
 80152c2:	4650      	mov	r0, sl
 80152c4:	4659      	mov	r1, fp
 80152c6:	f7eb f94f 	bl	8000568 <__aeabi_dmul>
 80152ca:	a325      	add	r3, pc, #148	; (adr r3, 8015360 <__kernel_sin+0x148>)
 80152cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80152d0:	f7ea ff92 	bl	80001f8 <__aeabi_dsub>
 80152d4:	4642      	mov	r2, r8
 80152d6:	464b      	mov	r3, r9
 80152d8:	f7eb f946 	bl	8000568 <__aeabi_dmul>
 80152dc:	4602      	mov	r2, r0
 80152de:	460b      	mov	r3, r1
 80152e0:	4620      	mov	r0, r4
 80152e2:	4629      	mov	r1, r5
 80152e4:	f7ea ff8a 	bl	80001fc <__adddf3>
 80152e8:	4604      	mov	r4, r0
 80152ea:	460d      	mov	r5, r1
 80152ec:	ec45 4b10 	vmov	d0, r4, r5
 80152f0:	b003      	add	sp, #12
 80152f2:	ecbd 8b04 	vpop	{d8-d9}
 80152f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80152fa:	4b1b      	ldr	r3, [pc, #108]	; (8015368 <__kernel_sin+0x150>)
 80152fc:	ec51 0b18 	vmov	r0, r1, d8
 8015300:	2200      	movs	r2, #0
 8015302:	f7eb f931 	bl	8000568 <__aeabi_dmul>
 8015306:	4632      	mov	r2, r6
 8015308:	ec41 0b19 	vmov	d9, r0, r1
 801530c:	463b      	mov	r3, r7
 801530e:	4640      	mov	r0, r8
 8015310:	4649      	mov	r1, r9
 8015312:	f7eb f929 	bl	8000568 <__aeabi_dmul>
 8015316:	4602      	mov	r2, r0
 8015318:	460b      	mov	r3, r1
 801531a:	ec51 0b19 	vmov	r0, r1, d9
 801531e:	f7ea ff6b 	bl	80001f8 <__aeabi_dsub>
 8015322:	4652      	mov	r2, sl
 8015324:	465b      	mov	r3, fp
 8015326:	f7eb f91f 	bl	8000568 <__aeabi_dmul>
 801532a:	ec53 2b18 	vmov	r2, r3, d8
 801532e:	f7ea ff63 	bl	80001f8 <__aeabi_dsub>
 8015332:	a30b      	add	r3, pc, #44	; (adr r3, 8015360 <__kernel_sin+0x148>)
 8015334:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015338:	4606      	mov	r6, r0
 801533a:	460f      	mov	r7, r1
 801533c:	4640      	mov	r0, r8
 801533e:	4649      	mov	r1, r9
 8015340:	f7eb f912 	bl	8000568 <__aeabi_dmul>
 8015344:	4602      	mov	r2, r0
 8015346:	460b      	mov	r3, r1
 8015348:	4630      	mov	r0, r6
 801534a:	4639      	mov	r1, r7
 801534c:	f7ea ff56 	bl	80001fc <__adddf3>
 8015350:	4602      	mov	r2, r0
 8015352:	460b      	mov	r3, r1
 8015354:	4620      	mov	r0, r4
 8015356:	4629      	mov	r1, r5
 8015358:	f7ea ff4e 	bl	80001f8 <__aeabi_dsub>
 801535c:	e7c4      	b.n	80152e8 <__kernel_sin+0xd0>
 801535e:	bf00      	nop
 8015360:	55555549 	.word	0x55555549
 8015364:	3fc55555 	.word	0x3fc55555
 8015368:	3fe00000 	.word	0x3fe00000
 801536c:	5acfd57c 	.word	0x5acfd57c
 8015370:	3de5d93a 	.word	0x3de5d93a
 8015374:	8a2b9ceb 	.word	0x8a2b9ceb
 8015378:	3e5ae5e6 	.word	0x3e5ae5e6
 801537c:	57b1fe7d 	.word	0x57b1fe7d
 8015380:	3ec71de3 	.word	0x3ec71de3
 8015384:	19c161d5 	.word	0x19c161d5
 8015388:	3f2a01a0 	.word	0x3f2a01a0
 801538c:	1110f8a6 	.word	0x1110f8a6
 8015390:	3f811111 	.word	0x3f811111
 8015394:	00000000 	.word	0x00000000

08015398 <__ieee754_asin>:
 8015398:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801539c:	ed2d 8b04 	vpush	{d8-d9}
 80153a0:	ec55 4b10 	vmov	r4, r5, d0
 80153a4:	4bcc      	ldr	r3, [pc, #816]	; (80156d8 <__ieee754_asin+0x340>)
 80153a6:	b083      	sub	sp, #12
 80153a8:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 80153ac:	4598      	cmp	r8, r3
 80153ae:	9501      	str	r5, [sp, #4]
 80153b0:	dd33      	ble.n	801541a <__ieee754_asin+0x82>
 80153b2:	f108 4840 	add.w	r8, r8, #3221225472	; 0xc0000000
 80153b6:	f508 1880 	add.w	r8, r8, #1048576	; 0x100000
 80153ba:	ea58 0804 	orrs.w	r8, r8, r4
 80153be:	d117      	bne.n	80153f0 <__ieee754_asin+0x58>
 80153c0:	a3ab      	add	r3, pc, #684	; (adr r3, 8015670 <__ieee754_asin+0x2d8>)
 80153c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80153c6:	ee10 0a10 	vmov	r0, s0
 80153ca:	4629      	mov	r1, r5
 80153cc:	f7eb f8cc 	bl	8000568 <__aeabi_dmul>
 80153d0:	a3a9      	add	r3, pc, #676	; (adr r3, 8015678 <__ieee754_asin+0x2e0>)
 80153d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80153d6:	4606      	mov	r6, r0
 80153d8:	460f      	mov	r7, r1
 80153da:	4620      	mov	r0, r4
 80153dc:	4629      	mov	r1, r5
 80153de:	f7eb f8c3 	bl	8000568 <__aeabi_dmul>
 80153e2:	4602      	mov	r2, r0
 80153e4:	460b      	mov	r3, r1
 80153e6:	4630      	mov	r0, r6
 80153e8:	4639      	mov	r1, r7
 80153ea:	f7ea ff07 	bl	80001fc <__adddf3>
 80153ee:	e00b      	b.n	8015408 <__ieee754_asin+0x70>
 80153f0:	ee10 2a10 	vmov	r2, s0
 80153f4:	462b      	mov	r3, r5
 80153f6:	ee10 0a10 	vmov	r0, s0
 80153fa:	4629      	mov	r1, r5
 80153fc:	f7ea fefc 	bl	80001f8 <__aeabi_dsub>
 8015400:	4602      	mov	r2, r0
 8015402:	460b      	mov	r3, r1
 8015404:	f7eb f9da 	bl	80007bc <__aeabi_ddiv>
 8015408:	4604      	mov	r4, r0
 801540a:	460d      	mov	r5, r1
 801540c:	ec45 4b10 	vmov	d0, r4, r5
 8015410:	b003      	add	sp, #12
 8015412:	ecbd 8b04 	vpop	{d8-d9}
 8015416:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801541a:	4bb0      	ldr	r3, [pc, #704]	; (80156dc <__ieee754_asin+0x344>)
 801541c:	4598      	cmp	r8, r3
 801541e:	dc11      	bgt.n	8015444 <__ieee754_asin+0xac>
 8015420:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8015424:	f280 80ae 	bge.w	8015584 <__ieee754_asin+0x1ec>
 8015428:	a395      	add	r3, pc, #596	; (adr r3, 8015680 <__ieee754_asin+0x2e8>)
 801542a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801542e:	ee10 0a10 	vmov	r0, s0
 8015432:	4629      	mov	r1, r5
 8015434:	f7ea fee2 	bl	80001fc <__adddf3>
 8015438:	4ba9      	ldr	r3, [pc, #676]	; (80156e0 <__ieee754_asin+0x348>)
 801543a:	2200      	movs	r2, #0
 801543c:	f7eb fb24 	bl	8000a88 <__aeabi_dcmpgt>
 8015440:	2800      	cmp	r0, #0
 8015442:	d1e3      	bne.n	801540c <__ieee754_asin+0x74>
 8015444:	ec45 4b10 	vmov	d0, r4, r5
 8015448:	f7ff fd2e 	bl	8014ea8 <fabs>
 801544c:	49a4      	ldr	r1, [pc, #656]	; (80156e0 <__ieee754_asin+0x348>)
 801544e:	ec53 2b10 	vmov	r2, r3, d0
 8015452:	2000      	movs	r0, #0
 8015454:	f7ea fed0 	bl	80001f8 <__aeabi_dsub>
 8015458:	4ba2      	ldr	r3, [pc, #648]	; (80156e4 <__ieee754_asin+0x34c>)
 801545a:	2200      	movs	r2, #0
 801545c:	f7eb f884 	bl	8000568 <__aeabi_dmul>
 8015460:	a389      	add	r3, pc, #548	; (adr r3, 8015688 <__ieee754_asin+0x2f0>)
 8015462:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015466:	4604      	mov	r4, r0
 8015468:	460d      	mov	r5, r1
 801546a:	f7eb f87d 	bl	8000568 <__aeabi_dmul>
 801546e:	a388      	add	r3, pc, #544	; (adr r3, 8015690 <__ieee754_asin+0x2f8>)
 8015470:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015474:	f7ea fec2 	bl	80001fc <__adddf3>
 8015478:	4622      	mov	r2, r4
 801547a:	462b      	mov	r3, r5
 801547c:	f7eb f874 	bl	8000568 <__aeabi_dmul>
 8015480:	a385      	add	r3, pc, #532	; (adr r3, 8015698 <__ieee754_asin+0x300>)
 8015482:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015486:	f7ea feb7 	bl	80001f8 <__aeabi_dsub>
 801548a:	4622      	mov	r2, r4
 801548c:	462b      	mov	r3, r5
 801548e:	f7eb f86b 	bl	8000568 <__aeabi_dmul>
 8015492:	a383      	add	r3, pc, #524	; (adr r3, 80156a0 <__ieee754_asin+0x308>)
 8015494:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015498:	f7ea feb0 	bl	80001fc <__adddf3>
 801549c:	4622      	mov	r2, r4
 801549e:	462b      	mov	r3, r5
 80154a0:	f7eb f862 	bl	8000568 <__aeabi_dmul>
 80154a4:	a380      	add	r3, pc, #512	; (adr r3, 80156a8 <__ieee754_asin+0x310>)
 80154a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80154aa:	f7ea fea5 	bl	80001f8 <__aeabi_dsub>
 80154ae:	4622      	mov	r2, r4
 80154b0:	462b      	mov	r3, r5
 80154b2:	f7eb f859 	bl	8000568 <__aeabi_dmul>
 80154b6:	a37e      	add	r3, pc, #504	; (adr r3, 80156b0 <__ieee754_asin+0x318>)
 80154b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80154bc:	f7ea fe9e 	bl	80001fc <__adddf3>
 80154c0:	4622      	mov	r2, r4
 80154c2:	462b      	mov	r3, r5
 80154c4:	f7eb f850 	bl	8000568 <__aeabi_dmul>
 80154c8:	a37b      	add	r3, pc, #492	; (adr r3, 80156b8 <__ieee754_asin+0x320>)
 80154ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80154ce:	ec41 0b18 	vmov	d8, r0, r1
 80154d2:	4620      	mov	r0, r4
 80154d4:	4629      	mov	r1, r5
 80154d6:	f7eb f847 	bl	8000568 <__aeabi_dmul>
 80154da:	a379      	add	r3, pc, #484	; (adr r3, 80156c0 <__ieee754_asin+0x328>)
 80154dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80154e0:	f7ea fe8a 	bl	80001f8 <__aeabi_dsub>
 80154e4:	4622      	mov	r2, r4
 80154e6:	462b      	mov	r3, r5
 80154e8:	f7eb f83e 	bl	8000568 <__aeabi_dmul>
 80154ec:	a376      	add	r3, pc, #472	; (adr r3, 80156c8 <__ieee754_asin+0x330>)
 80154ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80154f2:	f7ea fe83 	bl	80001fc <__adddf3>
 80154f6:	4622      	mov	r2, r4
 80154f8:	462b      	mov	r3, r5
 80154fa:	f7eb f835 	bl	8000568 <__aeabi_dmul>
 80154fe:	a374      	add	r3, pc, #464	; (adr r3, 80156d0 <__ieee754_asin+0x338>)
 8015500:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015504:	f7ea fe78 	bl	80001f8 <__aeabi_dsub>
 8015508:	4622      	mov	r2, r4
 801550a:	462b      	mov	r3, r5
 801550c:	f7eb f82c 	bl	8000568 <__aeabi_dmul>
 8015510:	4b73      	ldr	r3, [pc, #460]	; (80156e0 <__ieee754_asin+0x348>)
 8015512:	2200      	movs	r2, #0
 8015514:	f7ea fe72 	bl	80001fc <__adddf3>
 8015518:	ec45 4b10 	vmov	d0, r4, r5
 801551c:	4606      	mov	r6, r0
 801551e:	460f      	mov	r7, r1
 8015520:	f7ff fcd6 	bl	8014ed0 <__ieee754_sqrt>
 8015524:	4b70      	ldr	r3, [pc, #448]	; (80156e8 <__ieee754_asin+0x350>)
 8015526:	4598      	cmp	r8, r3
 8015528:	ec5b ab10 	vmov	sl, fp, d0
 801552c:	f340 80de 	ble.w	80156ec <__ieee754_asin+0x354>
 8015530:	4632      	mov	r2, r6
 8015532:	463b      	mov	r3, r7
 8015534:	ec51 0b18 	vmov	r0, r1, d8
 8015538:	f7eb f940 	bl	80007bc <__aeabi_ddiv>
 801553c:	4652      	mov	r2, sl
 801553e:	465b      	mov	r3, fp
 8015540:	f7eb f812 	bl	8000568 <__aeabi_dmul>
 8015544:	4652      	mov	r2, sl
 8015546:	465b      	mov	r3, fp
 8015548:	f7ea fe58 	bl	80001fc <__adddf3>
 801554c:	4602      	mov	r2, r0
 801554e:	460b      	mov	r3, r1
 8015550:	f7ea fe54 	bl	80001fc <__adddf3>
 8015554:	a348      	add	r3, pc, #288	; (adr r3, 8015678 <__ieee754_asin+0x2e0>)
 8015556:	e9d3 2300 	ldrd	r2, r3, [r3]
 801555a:	f7ea fe4d 	bl	80001f8 <__aeabi_dsub>
 801555e:	4602      	mov	r2, r0
 8015560:	460b      	mov	r3, r1
 8015562:	a143      	add	r1, pc, #268	; (adr r1, 8015670 <__ieee754_asin+0x2d8>)
 8015564:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015568:	f7ea fe46 	bl	80001f8 <__aeabi_dsub>
 801556c:	9b01      	ldr	r3, [sp, #4]
 801556e:	2b00      	cmp	r3, #0
 8015570:	bfdc      	itt	le
 8015572:	4602      	movle	r2, r0
 8015574:	f101 4300 	addle.w	r3, r1, #2147483648	; 0x80000000
 8015578:	4604      	mov	r4, r0
 801557a:	460d      	mov	r5, r1
 801557c:	bfdc      	itt	le
 801557e:	4614      	movle	r4, r2
 8015580:	461d      	movle	r5, r3
 8015582:	e743      	b.n	801540c <__ieee754_asin+0x74>
 8015584:	ee10 2a10 	vmov	r2, s0
 8015588:	ee10 0a10 	vmov	r0, s0
 801558c:	462b      	mov	r3, r5
 801558e:	4629      	mov	r1, r5
 8015590:	f7ea ffea 	bl	8000568 <__aeabi_dmul>
 8015594:	a33c      	add	r3, pc, #240	; (adr r3, 8015688 <__ieee754_asin+0x2f0>)
 8015596:	e9d3 2300 	ldrd	r2, r3, [r3]
 801559a:	4606      	mov	r6, r0
 801559c:	460f      	mov	r7, r1
 801559e:	f7ea ffe3 	bl	8000568 <__aeabi_dmul>
 80155a2:	a33b      	add	r3, pc, #236	; (adr r3, 8015690 <__ieee754_asin+0x2f8>)
 80155a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80155a8:	f7ea fe28 	bl	80001fc <__adddf3>
 80155ac:	4632      	mov	r2, r6
 80155ae:	463b      	mov	r3, r7
 80155b0:	f7ea ffda 	bl	8000568 <__aeabi_dmul>
 80155b4:	a338      	add	r3, pc, #224	; (adr r3, 8015698 <__ieee754_asin+0x300>)
 80155b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80155ba:	f7ea fe1d 	bl	80001f8 <__aeabi_dsub>
 80155be:	4632      	mov	r2, r6
 80155c0:	463b      	mov	r3, r7
 80155c2:	f7ea ffd1 	bl	8000568 <__aeabi_dmul>
 80155c6:	a336      	add	r3, pc, #216	; (adr r3, 80156a0 <__ieee754_asin+0x308>)
 80155c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80155cc:	f7ea fe16 	bl	80001fc <__adddf3>
 80155d0:	4632      	mov	r2, r6
 80155d2:	463b      	mov	r3, r7
 80155d4:	f7ea ffc8 	bl	8000568 <__aeabi_dmul>
 80155d8:	a333      	add	r3, pc, #204	; (adr r3, 80156a8 <__ieee754_asin+0x310>)
 80155da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80155de:	f7ea fe0b 	bl	80001f8 <__aeabi_dsub>
 80155e2:	4632      	mov	r2, r6
 80155e4:	463b      	mov	r3, r7
 80155e6:	f7ea ffbf 	bl	8000568 <__aeabi_dmul>
 80155ea:	a331      	add	r3, pc, #196	; (adr r3, 80156b0 <__ieee754_asin+0x318>)
 80155ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80155f0:	f7ea fe04 	bl	80001fc <__adddf3>
 80155f4:	4632      	mov	r2, r6
 80155f6:	463b      	mov	r3, r7
 80155f8:	f7ea ffb6 	bl	8000568 <__aeabi_dmul>
 80155fc:	a32e      	add	r3, pc, #184	; (adr r3, 80156b8 <__ieee754_asin+0x320>)
 80155fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015602:	4680      	mov	r8, r0
 8015604:	4689      	mov	r9, r1
 8015606:	4630      	mov	r0, r6
 8015608:	4639      	mov	r1, r7
 801560a:	f7ea ffad 	bl	8000568 <__aeabi_dmul>
 801560e:	a32c      	add	r3, pc, #176	; (adr r3, 80156c0 <__ieee754_asin+0x328>)
 8015610:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015614:	f7ea fdf0 	bl	80001f8 <__aeabi_dsub>
 8015618:	4632      	mov	r2, r6
 801561a:	463b      	mov	r3, r7
 801561c:	f7ea ffa4 	bl	8000568 <__aeabi_dmul>
 8015620:	a329      	add	r3, pc, #164	; (adr r3, 80156c8 <__ieee754_asin+0x330>)
 8015622:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015626:	f7ea fde9 	bl	80001fc <__adddf3>
 801562a:	4632      	mov	r2, r6
 801562c:	463b      	mov	r3, r7
 801562e:	f7ea ff9b 	bl	8000568 <__aeabi_dmul>
 8015632:	a327      	add	r3, pc, #156	; (adr r3, 80156d0 <__ieee754_asin+0x338>)
 8015634:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015638:	f7ea fdde 	bl	80001f8 <__aeabi_dsub>
 801563c:	4632      	mov	r2, r6
 801563e:	463b      	mov	r3, r7
 8015640:	f7ea ff92 	bl	8000568 <__aeabi_dmul>
 8015644:	4b26      	ldr	r3, [pc, #152]	; (80156e0 <__ieee754_asin+0x348>)
 8015646:	2200      	movs	r2, #0
 8015648:	f7ea fdd8 	bl	80001fc <__adddf3>
 801564c:	4602      	mov	r2, r0
 801564e:	460b      	mov	r3, r1
 8015650:	4640      	mov	r0, r8
 8015652:	4649      	mov	r1, r9
 8015654:	f7eb f8b2 	bl	80007bc <__aeabi_ddiv>
 8015658:	4622      	mov	r2, r4
 801565a:	462b      	mov	r3, r5
 801565c:	f7ea ff84 	bl	8000568 <__aeabi_dmul>
 8015660:	4602      	mov	r2, r0
 8015662:	460b      	mov	r3, r1
 8015664:	4620      	mov	r0, r4
 8015666:	4629      	mov	r1, r5
 8015668:	e6bf      	b.n	80153ea <__ieee754_asin+0x52>
 801566a:	bf00      	nop
 801566c:	f3af 8000 	nop.w
 8015670:	54442d18 	.word	0x54442d18
 8015674:	3ff921fb 	.word	0x3ff921fb
 8015678:	33145c07 	.word	0x33145c07
 801567c:	3c91a626 	.word	0x3c91a626
 8015680:	8800759c 	.word	0x8800759c
 8015684:	7e37e43c 	.word	0x7e37e43c
 8015688:	0dfdf709 	.word	0x0dfdf709
 801568c:	3f023de1 	.word	0x3f023de1
 8015690:	7501b288 	.word	0x7501b288
 8015694:	3f49efe0 	.word	0x3f49efe0
 8015698:	b5688f3b 	.word	0xb5688f3b
 801569c:	3fa48228 	.word	0x3fa48228
 80156a0:	0e884455 	.word	0x0e884455
 80156a4:	3fc9c155 	.word	0x3fc9c155
 80156a8:	03eb6f7d 	.word	0x03eb6f7d
 80156ac:	3fd4d612 	.word	0x3fd4d612
 80156b0:	55555555 	.word	0x55555555
 80156b4:	3fc55555 	.word	0x3fc55555
 80156b8:	b12e9282 	.word	0xb12e9282
 80156bc:	3fb3b8c5 	.word	0x3fb3b8c5
 80156c0:	1b8d0159 	.word	0x1b8d0159
 80156c4:	3fe6066c 	.word	0x3fe6066c
 80156c8:	9c598ac8 	.word	0x9c598ac8
 80156cc:	40002ae5 	.word	0x40002ae5
 80156d0:	1c8a2d4b 	.word	0x1c8a2d4b
 80156d4:	40033a27 	.word	0x40033a27
 80156d8:	3fefffff 	.word	0x3fefffff
 80156dc:	3fdfffff 	.word	0x3fdfffff
 80156e0:	3ff00000 	.word	0x3ff00000
 80156e4:	3fe00000 	.word	0x3fe00000
 80156e8:	3fef3332 	.word	0x3fef3332
 80156ec:	ee10 2a10 	vmov	r2, s0
 80156f0:	ee10 0a10 	vmov	r0, s0
 80156f4:	465b      	mov	r3, fp
 80156f6:	4659      	mov	r1, fp
 80156f8:	f7ea fd80 	bl	80001fc <__adddf3>
 80156fc:	4632      	mov	r2, r6
 80156fe:	463b      	mov	r3, r7
 8015700:	ec41 0b19 	vmov	d9, r0, r1
 8015704:	ec51 0b18 	vmov	r0, r1, d8
 8015708:	f7eb f858 	bl	80007bc <__aeabi_ddiv>
 801570c:	4602      	mov	r2, r0
 801570e:	460b      	mov	r3, r1
 8015710:	ec51 0b19 	vmov	r0, r1, d9
 8015714:	f7ea ff28 	bl	8000568 <__aeabi_dmul>
 8015718:	f04f 0800 	mov.w	r8, #0
 801571c:	4606      	mov	r6, r0
 801571e:	460f      	mov	r7, r1
 8015720:	4642      	mov	r2, r8
 8015722:	465b      	mov	r3, fp
 8015724:	4640      	mov	r0, r8
 8015726:	4659      	mov	r1, fp
 8015728:	f7ea ff1e 	bl	8000568 <__aeabi_dmul>
 801572c:	4602      	mov	r2, r0
 801572e:	460b      	mov	r3, r1
 8015730:	4620      	mov	r0, r4
 8015732:	4629      	mov	r1, r5
 8015734:	f7ea fd60 	bl	80001f8 <__aeabi_dsub>
 8015738:	4642      	mov	r2, r8
 801573a:	4604      	mov	r4, r0
 801573c:	460d      	mov	r5, r1
 801573e:	465b      	mov	r3, fp
 8015740:	4650      	mov	r0, sl
 8015742:	4659      	mov	r1, fp
 8015744:	f7ea fd5a 	bl	80001fc <__adddf3>
 8015748:	4602      	mov	r2, r0
 801574a:	460b      	mov	r3, r1
 801574c:	4620      	mov	r0, r4
 801574e:	4629      	mov	r1, r5
 8015750:	f7eb f834 	bl	80007bc <__aeabi_ddiv>
 8015754:	4602      	mov	r2, r0
 8015756:	460b      	mov	r3, r1
 8015758:	f7ea fd50 	bl	80001fc <__adddf3>
 801575c:	4602      	mov	r2, r0
 801575e:	460b      	mov	r3, r1
 8015760:	a113      	add	r1, pc, #76	; (adr r1, 80157b0 <__ieee754_asin+0x418>)
 8015762:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015766:	f7ea fd47 	bl	80001f8 <__aeabi_dsub>
 801576a:	4602      	mov	r2, r0
 801576c:	460b      	mov	r3, r1
 801576e:	4630      	mov	r0, r6
 8015770:	4639      	mov	r1, r7
 8015772:	f7ea fd41 	bl	80001f8 <__aeabi_dsub>
 8015776:	4642      	mov	r2, r8
 8015778:	4604      	mov	r4, r0
 801577a:	460d      	mov	r5, r1
 801577c:	465b      	mov	r3, fp
 801577e:	4640      	mov	r0, r8
 8015780:	4659      	mov	r1, fp
 8015782:	f7ea fd3b 	bl	80001fc <__adddf3>
 8015786:	4602      	mov	r2, r0
 8015788:	460b      	mov	r3, r1
 801578a:	a10b      	add	r1, pc, #44	; (adr r1, 80157b8 <__ieee754_asin+0x420>)
 801578c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015790:	f7ea fd32 	bl	80001f8 <__aeabi_dsub>
 8015794:	4602      	mov	r2, r0
 8015796:	460b      	mov	r3, r1
 8015798:	4620      	mov	r0, r4
 801579a:	4629      	mov	r1, r5
 801579c:	f7ea fd2c 	bl	80001f8 <__aeabi_dsub>
 80157a0:	4602      	mov	r2, r0
 80157a2:	460b      	mov	r3, r1
 80157a4:	a104      	add	r1, pc, #16	; (adr r1, 80157b8 <__ieee754_asin+0x420>)
 80157a6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80157aa:	e6dd      	b.n	8015568 <__ieee754_asin+0x1d0>
 80157ac:	f3af 8000 	nop.w
 80157b0:	33145c07 	.word	0x33145c07
 80157b4:	3c91a626 	.word	0x3c91a626
 80157b8:	54442d18 	.word	0x54442d18
 80157bc:	3fe921fb 	.word	0x3fe921fb

080157c0 <__ieee754_atan2>:
 80157c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80157c4:	ec57 6b11 	vmov	r6, r7, d1
 80157c8:	4273      	negs	r3, r6
 80157ca:	f8df 817c 	ldr.w	r8, [pc, #380]	; 8015948 <__ieee754_atan2+0x188>
 80157ce:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 80157d2:	4333      	orrs	r3, r6
 80157d4:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 80157d8:	4543      	cmp	r3, r8
 80157da:	ec51 0b10 	vmov	r0, r1, d0
 80157de:	ee11 5a10 	vmov	r5, s2
 80157e2:	d80a      	bhi.n	80157fa <__ieee754_atan2+0x3a>
 80157e4:	4244      	negs	r4, r0
 80157e6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80157ea:	4304      	orrs	r4, r0
 80157ec:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 80157f0:	4544      	cmp	r4, r8
 80157f2:	ee10 9a10 	vmov	r9, s0
 80157f6:	468e      	mov	lr, r1
 80157f8:	d907      	bls.n	801580a <__ieee754_atan2+0x4a>
 80157fa:	4632      	mov	r2, r6
 80157fc:	463b      	mov	r3, r7
 80157fe:	f7ea fcfd 	bl	80001fc <__adddf3>
 8015802:	ec41 0b10 	vmov	d0, r0, r1
 8015806:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801580a:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 801580e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8015812:	4334      	orrs	r4, r6
 8015814:	d103      	bne.n	801581e <__ieee754_atan2+0x5e>
 8015816:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801581a:	f000 baa1 	b.w	8015d60 <atan>
 801581e:	17bc      	asrs	r4, r7, #30
 8015820:	f004 0402 	and.w	r4, r4, #2
 8015824:	ea53 0909 	orrs.w	r9, r3, r9
 8015828:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 801582c:	d107      	bne.n	801583e <__ieee754_atan2+0x7e>
 801582e:	2c02      	cmp	r4, #2
 8015830:	d05f      	beq.n	80158f2 <__ieee754_atan2+0x132>
 8015832:	2c03      	cmp	r4, #3
 8015834:	d1e5      	bne.n	8015802 <__ieee754_atan2+0x42>
 8015836:	a140      	add	r1, pc, #256	; (adr r1, 8015938 <__ieee754_atan2+0x178>)
 8015838:	e9d1 0100 	ldrd	r0, r1, [r1]
 801583c:	e7e1      	b.n	8015802 <__ieee754_atan2+0x42>
 801583e:	4315      	orrs	r5, r2
 8015840:	d106      	bne.n	8015850 <__ieee754_atan2+0x90>
 8015842:	f1be 0f00 	cmp.w	lr, #0
 8015846:	da5f      	bge.n	8015908 <__ieee754_atan2+0x148>
 8015848:	a13d      	add	r1, pc, #244	; (adr r1, 8015940 <__ieee754_atan2+0x180>)
 801584a:	e9d1 0100 	ldrd	r0, r1, [r1]
 801584e:	e7d8      	b.n	8015802 <__ieee754_atan2+0x42>
 8015850:	4542      	cmp	r2, r8
 8015852:	d10f      	bne.n	8015874 <__ieee754_atan2+0xb4>
 8015854:	4293      	cmp	r3, r2
 8015856:	f104 34ff 	add.w	r4, r4, #4294967295
 801585a:	d107      	bne.n	801586c <__ieee754_atan2+0xac>
 801585c:	2c02      	cmp	r4, #2
 801585e:	d84c      	bhi.n	80158fa <__ieee754_atan2+0x13a>
 8015860:	4b33      	ldr	r3, [pc, #204]	; (8015930 <__ieee754_atan2+0x170>)
 8015862:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8015866:	e9d3 0100 	ldrd	r0, r1, [r3]
 801586a:	e7ca      	b.n	8015802 <__ieee754_atan2+0x42>
 801586c:	2c02      	cmp	r4, #2
 801586e:	d848      	bhi.n	8015902 <__ieee754_atan2+0x142>
 8015870:	4b30      	ldr	r3, [pc, #192]	; (8015934 <__ieee754_atan2+0x174>)
 8015872:	e7f6      	b.n	8015862 <__ieee754_atan2+0xa2>
 8015874:	4543      	cmp	r3, r8
 8015876:	d0e4      	beq.n	8015842 <__ieee754_atan2+0x82>
 8015878:	1a9b      	subs	r3, r3, r2
 801587a:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 801587e:	ea4f 5223 	mov.w	r2, r3, asr #20
 8015882:	da1e      	bge.n	80158c2 <__ieee754_atan2+0x102>
 8015884:	2f00      	cmp	r7, #0
 8015886:	da01      	bge.n	801588c <__ieee754_atan2+0xcc>
 8015888:	323c      	adds	r2, #60	; 0x3c
 801588a:	db1e      	blt.n	80158ca <__ieee754_atan2+0x10a>
 801588c:	4632      	mov	r2, r6
 801588e:	463b      	mov	r3, r7
 8015890:	f7ea ff94 	bl	80007bc <__aeabi_ddiv>
 8015894:	ec41 0b10 	vmov	d0, r0, r1
 8015898:	f7ff fb06 	bl	8014ea8 <fabs>
 801589c:	f000 fa60 	bl	8015d60 <atan>
 80158a0:	ec51 0b10 	vmov	r0, r1, d0
 80158a4:	2c01      	cmp	r4, #1
 80158a6:	d013      	beq.n	80158d0 <__ieee754_atan2+0x110>
 80158a8:	2c02      	cmp	r4, #2
 80158aa:	d015      	beq.n	80158d8 <__ieee754_atan2+0x118>
 80158ac:	2c00      	cmp	r4, #0
 80158ae:	d0a8      	beq.n	8015802 <__ieee754_atan2+0x42>
 80158b0:	a317      	add	r3, pc, #92	; (adr r3, 8015910 <__ieee754_atan2+0x150>)
 80158b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80158b6:	f7ea fc9f 	bl	80001f8 <__aeabi_dsub>
 80158ba:	a317      	add	r3, pc, #92	; (adr r3, 8015918 <__ieee754_atan2+0x158>)
 80158bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80158c0:	e014      	b.n	80158ec <__ieee754_atan2+0x12c>
 80158c2:	a117      	add	r1, pc, #92	; (adr r1, 8015920 <__ieee754_atan2+0x160>)
 80158c4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80158c8:	e7ec      	b.n	80158a4 <__ieee754_atan2+0xe4>
 80158ca:	2000      	movs	r0, #0
 80158cc:	2100      	movs	r1, #0
 80158ce:	e7e9      	b.n	80158a4 <__ieee754_atan2+0xe4>
 80158d0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80158d4:	4619      	mov	r1, r3
 80158d6:	e794      	b.n	8015802 <__ieee754_atan2+0x42>
 80158d8:	a30d      	add	r3, pc, #52	; (adr r3, 8015910 <__ieee754_atan2+0x150>)
 80158da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80158de:	f7ea fc8b 	bl	80001f8 <__aeabi_dsub>
 80158e2:	4602      	mov	r2, r0
 80158e4:	460b      	mov	r3, r1
 80158e6:	a10c      	add	r1, pc, #48	; (adr r1, 8015918 <__ieee754_atan2+0x158>)
 80158e8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80158ec:	f7ea fc84 	bl	80001f8 <__aeabi_dsub>
 80158f0:	e787      	b.n	8015802 <__ieee754_atan2+0x42>
 80158f2:	a109      	add	r1, pc, #36	; (adr r1, 8015918 <__ieee754_atan2+0x158>)
 80158f4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80158f8:	e783      	b.n	8015802 <__ieee754_atan2+0x42>
 80158fa:	a10b      	add	r1, pc, #44	; (adr r1, 8015928 <__ieee754_atan2+0x168>)
 80158fc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015900:	e77f      	b.n	8015802 <__ieee754_atan2+0x42>
 8015902:	2000      	movs	r0, #0
 8015904:	2100      	movs	r1, #0
 8015906:	e77c      	b.n	8015802 <__ieee754_atan2+0x42>
 8015908:	a105      	add	r1, pc, #20	; (adr r1, 8015920 <__ieee754_atan2+0x160>)
 801590a:	e9d1 0100 	ldrd	r0, r1, [r1]
 801590e:	e778      	b.n	8015802 <__ieee754_atan2+0x42>
 8015910:	33145c07 	.word	0x33145c07
 8015914:	3ca1a626 	.word	0x3ca1a626
 8015918:	54442d18 	.word	0x54442d18
 801591c:	400921fb 	.word	0x400921fb
 8015920:	54442d18 	.word	0x54442d18
 8015924:	3ff921fb 	.word	0x3ff921fb
 8015928:	54442d18 	.word	0x54442d18
 801592c:	3fe921fb 	.word	0x3fe921fb
 8015930:	08016d70 	.word	0x08016d70
 8015934:	08016d88 	.word	0x08016d88
 8015938:	54442d18 	.word	0x54442d18
 801593c:	c00921fb 	.word	0xc00921fb
 8015940:	54442d18 	.word	0x54442d18
 8015944:	bff921fb 	.word	0xbff921fb
 8015948:	7ff00000 	.word	0x7ff00000
 801594c:	00000000 	.word	0x00000000

08015950 <__ieee754_rem_pio2>:
 8015950:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015954:	ed2d 8b02 	vpush	{d8}
 8015958:	ec55 4b10 	vmov	r4, r5, d0
 801595c:	4bca      	ldr	r3, [pc, #808]	; (8015c88 <__ieee754_rem_pio2+0x338>)
 801595e:	b08b      	sub	sp, #44	; 0x2c
 8015960:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8015964:	4598      	cmp	r8, r3
 8015966:	4682      	mov	sl, r0
 8015968:	9502      	str	r5, [sp, #8]
 801596a:	dc08      	bgt.n	801597e <__ieee754_rem_pio2+0x2e>
 801596c:	2200      	movs	r2, #0
 801596e:	2300      	movs	r3, #0
 8015970:	ed80 0b00 	vstr	d0, [r0]
 8015974:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8015978:	f04f 0b00 	mov.w	fp, #0
 801597c:	e028      	b.n	80159d0 <__ieee754_rem_pio2+0x80>
 801597e:	4bc3      	ldr	r3, [pc, #780]	; (8015c8c <__ieee754_rem_pio2+0x33c>)
 8015980:	4598      	cmp	r8, r3
 8015982:	dc78      	bgt.n	8015a76 <__ieee754_rem_pio2+0x126>
 8015984:	9b02      	ldr	r3, [sp, #8]
 8015986:	4ec2      	ldr	r6, [pc, #776]	; (8015c90 <__ieee754_rem_pio2+0x340>)
 8015988:	2b00      	cmp	r3, #0
 801598a:	ee10 0a10 	vmov	r0, s0
 801598e:	a3b0      	add	r3, pc, #704	; (adr r3, 8015c50 <__ieee754_rem_pio2+0x300>)
 8015990:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015994:	4629      	mov	r1, r5
 8015996:	dd39      	ble.n	8015a0c <__ieee754_rem_pio2+0xbc>
 8015998:	f7ea fc2e 	bl	80001f8 <__aeabi_dsub>
 801599c:	45b0      	cmp	r8, r6
 801599e:	4604      	mov	r4, r0
 80159a0:	460d      	mov	r5, r1
 80159a2:	d01b      	beq.n	80159dc <__ieee754_rem_pio2+0x8c>
 80159a4:	a3ac      	add	r3, pc, #688	; (adr r3, 8015c58 <__ieee754_rem_pio2+0x308>)
 80159a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80159aa:	f7ea fc25 	bl	80001f8 <__aeabi_dsub>
 80159ae:	4602      	mov	r2, r0
 80159b0:	460b      	mov	r3, r1
 80159b2:	e9ca 2300 	strd	r2, r3, [sl]
 80159b6:	4620      	mov	r0, r4
 80159b8:	4629      	mov	r1, r5
 80159ba:	f7ea fc1d 	bl	80001f8 <__aeabi_dsub>
 80159be:	a3a6      	add	r3, pc, #664	; (adr r3, 8015c58 <__ieee754_rem_pio2+0x308>)
 80159c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80159c4:	f7ea fc18 	bl	80001f8 <__aeabi_dsub>
 80159c8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80159cc:	f04f 0b01 	mov.w	fp, #1
 80159d0:	4658      	mov	r0, fp
 80159d2:	b00b      	add	sp, #44	; 0x2c
 80159d4:	ecbd 8b02 	vpop	{d8}
 80159d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80159dc:	a3a0      	add	r3, pc, #640	; (adr r3, 8015c60 <__ieee754_rem_pio2+0x310>)
 80159de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80159e2:	f7ea fc09 	bl	80001f8 <__aeabi_dsub>
 80159e6:	a3a0      	add	r3, pc, #640	; (adr r3, 8015c68 <__ieee754_rem_pio2+0x318>)
 80159e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80159ec:	4604      	mov	r4, r0
 80159ee:	460d      	mov	r5, r1
 80159f0:	f7ea fc02 	bl	80001f8 <__aeabi_dsub>
 80159f4:	4602      	mov	r2, r0
 80159f6:	460b      	mov	r3, r1
 80159f8:	e9ca 2300 	strd	r2, r3, [sl]
 80159fc:	4620      	mov	r0, r4
 80159fe:	4629      	mov	r1, r5
 8015a00:	f7ea fbfa 	bl	80001f8 <__aeabi_dsub>
 8015a04:	a398      	add	r3, pc, #608	; (adr r3, 8015c68 <__ieee754_rem_pio2+0x318>)
 8015a06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015a0a:	e7db      	b.n	80159c4 <__ieee754_rem_pio2+0x74>
 8015a0c:	f7ea fbf6 	bl	80001fc <__adddf3>
 8015a10:	45b0      	cmp	r8, r6
 8015a12:	4604      	mov	r4, r0
 8015a14:	460d      	mov	r5, r1
 8015a16:	d016      	beq.n	8015a46 <__ieee754_rem_pio2+0xf6>
 8015a18:	a38f      	add	r3, pc, #572	; (adr r3, 8015c58 <__ieee754_rem_pio2+0x308>)
 8015a1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015a1e:	f7ea fbed 	bl	80001fc <__adddf3>
 8015a22:	4602      	mov	r2, r0
 8015a24:	460b      	mov	r3, r1
 8015a26:	e9ca 2300 	strd	r2, r3, [sl]
 8015a2a:	4620      	mov	r0, r4
 8015a2c:	4629      	mov	r1, r5
 8015a2e:	f7ea fbe3 	bl	80001f8 <__aeabi_dsub>
 8015a32:	a389      	add	r3, pc, #548	; (adr r3, 8015c58 <__ieee754_rem_pio2+0x308>)
 8015a34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015a38:	f7ea fbe0 	bl	80001fc <__adddf3>
 8015a3c:	f04f 3bff 	mov.w	fp, #4294967295
 8015a40:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8015a44:	e7c4      	b.n	80159d0 <__ieee754_rem_pio2+0x80>
 8015a46:	a386      	add	r3, pc, #536	; (adr r3, 8015c60 <__ieee754_rem_pio2+0x310>)
 8015a48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015a4c:	f7ea fbd6 	bl	80001fc <__adddf3>
 8015a50:	a385      	add	r3, pc, #532	; (adr r3, 8015c68 <__ieee754_rem_pio2+0x318>)
 8015a52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015a56:	4604      	mov	r4, r0
 8015a58:	460d      	mov	r5, r1
 8015a5a:	f7ea fbcf 	bl	80001fc <__adddf3>
 8015a5e:	4602      	mov	r2, r0
 8015a60:	460b      	mov	r3, r1
 8015a62:	e9ca 2300 	strd	r2, r3, [sl]
 8015a66:	4620      	mov	r0, r4
 8015a68:	4629      	mov	r1, r5
 8015a6a:	f7ea fbc5 	bl	80001f8 <__aeabi_dsub>
 8015a6e:	a37e      	add	r3, pc, #504	; (adr r3, 8015c68 <__ieee754_rem_pio2+0x318>)
 8015a70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015a74:	e7e0      	b.n	8015a38 <__ieee754_rem_pio2+0xe8>
 8015a76:	4b87      	ldr	r3, [pc, #540]	; (8015c94 <__ieee754_rem_pio2+0x344>)
 8015a78:	4598      	cmp	r8, r3
 8015a7a:	f300 80d8 	bgt.w	8015c2e <__ieee754_rem_pio2+0x2de>
 8015a7e:	f7ff fa13 	bl	8014ea8 <fabs>
 8015a82:	ec55 4b10 	vmov	r4, r5, d0
 8015a86:	ee10 0a10 	vmov	r0, s0
 8015a8a:	a379      	add	r3, pc, #484	; (adr r3, 8015c70 <__ieee754_rem_pio2+0x320>)
 8015a8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015a90:	4629      	mov	r1, r5
 8015a92:	f7ea fd69 	bl	8000568 <__aeabi_dmul>
 8015a96:	4b80      	ldr	r3, [pc, #512]	; (8015c98 <__ieee754_rem_pio2+0x348>)
 8015a98:	2200      	movs	r2, #0
 8015a9a:	f7ea fbaf 	bl	80001fc <__adddf3>
 8015a9e:	f7eb f813 	bl	8000ac8 <__aeabi_d2iz>
 8015aa2:	4683      	mov	fp, r0
 8015aa4:	f7ea fcf6 	bl	8000494 <__aeabi_i2d>
 8015aa8:	4602      	mov	r2, r0
 8015aaa:	460b      	mov	r3, r1
 8015aac:	ec43 2b18 	vmov	d8, r2, r3
 8015ab0:	a367      	add	r3, pc, #412	; (adr r3, 8015c50 <__ieee754_rem_pio2+0x300>)
 8015ab2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015ab6:	f7ea fd57 	bl	8000568 <__aeabi_dmul>
 8015aba:	4602      	mov	r2, r0
 8015abc:	460b      	mov	r3, r1
 8015abe:	4620      	mov	r0, r4
 8015ac0:	4629      	mov	r1, r5
 8015ac2:	f7ea fb99 	bl	80001f8 <__aeabi_dsub>
 8015ac6:	a364      	add	r3, pc, #400	; (adr r3, 8015c58 <__ieee754_rem_pio2+0x308>)
 8015ac8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015acc:	4606      	mov	r6, r0
 8015ace:	460f      	mov	r7, r1
 8015ad0:	ec51 0b18 	vmov	r0, r1, d8
 8015ad4:	f7ea fd48 	bl	8000568 <__aeabi_dmul>
 8015ad8:	f1bb 0f1f 	cmp.w	fp, #31
 8015adc:	4604      	mov	r4, r0
 8015ade:	460d      	mov	r5, r1
 8015ae0:	dc0d      	bgt.n	8015afe <__ieee754_rem_pio2+0x1ae>
 8015ae2:	4b6e      	ldr	r3, [pc, #440]	; (8015c9c <__ieee754_rem_pio2+0x34c>)
 8015ae4:	f10b 32ff 	add.w	r2, fp, #4294967295
 8015ae8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015aec:	4543      	cmp	r3, r8
 8015aee:	d006      	beq.n	8015afe <__ieee754_rem_pio2+0x1ae>
 8015af0:	4622      	mov	r2, r4
 8015af2:	462b      	mov	r3, r5
 8015af4:	4630      	mov	r0, r6
 8015af6:	4639      	mov	r1, r7
 8015af8:	f7ea fb7e 	bl	80001f8 <__aeabi_dsub>
 8015afc:	e00e      	b.n	8015b1c <__ieee754_rem_pio2+0x1cc>
 8015afe:	462b      	mov	r3, r5
 8015b00:	4622      	mov	r2, r4
 8015b02:	4630      	mov	r0, r6
 8015b04:	4639      	mov	r1, r7
 8015b06:	f7ea fb77 	bl	80001f8 <__aeabi_dsub>
 8015b0a:	ea4f 5328 	mov.w	r3, r8, asr #20
 8015b0e:	9303      	str	r3, [sp, #12]
 8015b10:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8015b14:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 8015b18:	2b10      	cmp	r3, #16
 8015b1a:	dc02      	bgt.n	8015b22 <__ieee754_rem_pio2+0x1d2>
 8015b1c:	e9ca 0100 	strd	r0, r1, [sl]
 8015b20:	e039      	b.n	8015b96 <__ieee754_rem_pio2+0x246>
 8015b22:	a34f      	add	r3, pc, #316	; (adr r3, 8015c60 <__ieee754_rem_pio2+0x310>)
 8015b24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015b28:	ec51 0b18 	vmov	r0, r1, d8
 8015b2c:	f7ea fd1c 	bl	8000568 <__aeabi_dmul>
 8015b30:	4604      	mov	r4, r0
 8015b32:	460d      	mov	r5, r1
 8015b34:	4602      	mov	r2, r0
 8015b36:	460b      	mov	r3, r1
 8015b38:	4630      	mov	r0, r6
 8015b3a:	4639      	mov	r1, r7
 8015b3c:	f7ea fb5c 	bl	80001f8 <__aeabi_dsub>
 8015b40:	4602      	mov	r2, r0
 8015b42:	460b      	mov	r3, r1
 8015b44:	4680      	mov	r8, r0
 8015b46:	4689      	mov	r9, r1
 8015b48:	4630      	mov	r0, r6
 8015b4a:	4639      	mov	r1, r7
 8015b4c:	f7ea fb54 	bl	80001f8 <__aeabi_dsub>
 8015b50:	4622      	mov	r2, r4
 8015b52:	462b      	mov	r3, r5
 8015b54:	f7ea fb50 	bl	80001f8 <__aeabi_dsub>
 8015b58:	a343      	add	r3, pc, #268	; (adr r3, 8015c68 <__ieee754_rem_pio2+0x318>)
 8015b5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015b5e:	4604      	mov	r4, r0
 8015b60:	460d      	mov	r5, r1
 8015b62:	ec51 0b18 	vmov	r0, r1, d8
 8015b66:	f7ea fcff 	bl	8000568 <__aeabi_dmul>
 8015b6a:	4622      	mov	r2, r4
 8015b6c:	462b      	mov	r3, r5
 8015b6e:	f7ea fb43 	bl	80001f8 <__aeabi_dsub>
 8015b72:	4602      	mov	r2, r0
 8015b74:	460b      	mov	r3, r1
 8015b76:	4604      	mov	r4, r0
 8015b78:	460d      	mov	r5, r1
 8015b7a:	4640      	mov	r0, r8
 8015b7c:	4649      	mov	r1, r9
 8015b7e:	f7ea fb3b 	bl	80001f8 <__aeabi_dsub>
 8015b82:	9a03      	ldr	r2, [sp, #12]
 8015b84:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8015b88:	1ad3      	subs	r3, r2, r3
 8015b8a:	2b31      	cmp	r3, #49	; 0x31
 8015b8c:	dc24      	bgt.n	8015bd8 <__ieee754_rem_pio2+0x288>
 8015b8e:	e9ca 0100 	strd	r0, r1, [sl]
 8015b92:	4646      	mov	r6, r8
 8015b94:	464f      	mov	r7, r9
 8015b96:	e9da 8900 	ldrd	r8, r9, [sl]
 8015b9a:	4630      	mov	r0, r6
 8015b9c:	4642      	mov	r2, r8
 8015b9e:	464b      	mov	r3, r9
 8015ba0:	4639      	mov	r1, r7
 8015ba2:	f7ea fb29 	bl	80001f8 <__aeabi_dsub>
 8015ba6:	462b      	mov	r3, r5
 8015ba8:	4622      	mov	r2, r4
 8015baa:	f7ea fb25 	bl	80001f8 <__aeabi_dsub>
 8015bae:	9b02      	ldr	r3, [sp, #8]
 8015bb0:	2b00      	cmp	r3, #0
 8015bb2:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8015bb6:	f6bf af0b 	bge.w	80159d0 <__ieee754_rem_pio2+0x80>
 8015bba:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8015bbe:	f8ca 3004 	str.w	r3, [sl, #4]
 8015bc2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8015bc6:	f8ca 8000 	str.w	r8, [sl]
 8015bca:	f8ca 0008 	str.w	r0, [sl, #8]
 8015bce:	f8ca 300c 	str.w	r3, [sl, #12]
 8015bd2:	f1cb 0b00 	rsb	fp, fp, #0
 8015bd6:	e6fb      	b.n	80159d0 <__ieee754_rem_pio2+0x80>
 8015bd8:	a327      	add	r3, pc, #156	; (adr r3, 8015c78 <__ieee754_rem_pio2+0x328>)
 8015bda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015bde:	ec51 0b18 	vmov	r0, r1, d8
 8015be2:	f7ea fcc1 	bl	8000568 <__aeabi_dmul>
 8015be6:	4604      	mov	r4, r0
 8015be8:	460d      	mov	r5, r1
 8015bea:	4602      	mov	r2, r0
 8015bec:	460b      	mov	r3, r1
 8015bee:	4640      	mov	r0, r8
 8015bf0:	4649      	mov	r1, r9
 8015bf2:	f7ea fb01 	bl	80001f8 <__aeabi_dsub>
 8015bf6:	4602      	mov	r2, r0
 8015bf8:	460b      	mov	r3, r1
 8015bfa:	4606      	mov	r6, r0
 8015bfc:	460f      	mov	r7, r1
 8015bfe:	4640      	mov	r0, r8
 8015c00:	4649      	mov	r1, r9
 8015c02:	f7ea faf9 	bl	80001f8 <__aeabi_dsub>
 8015c06:	4622      	mov	r2, r4
 8015c08:	462b      	mov	r3, r5
 8015c0a:	f7ea faf5 	bl	80001f8 <__aeabi_dsub>
 8015c0e:	a31c      	add	r3, pc, #112	; (adr r3, 8015c80 <__ieee754_rem_pio2+0x330>)
 8015c10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015c14:	4604      	mov	r4, r0
 8015c16:	460d      	mov	r5, r1
 8015c18:	ec51 0b18 	vmov	r0, r1, d8
 8015c1c:	f7ea fca4 	bl	8000568 <__aeabi_dmul>
 8015c20:	4622      	mov	r2, r4
 8015c22:	462b      	mov	r3, r5
 8015c24:	f7ea fae8 	bl	80001f8 <__aeabi_dsub>
 8015c28:	4604      	mov	r4, r0
 8015c2a:	460d      	mov	r5, r1
 8015c2c:	e760      	b.n	8015af0 <__ieee754_rem_pio2+0x1a0>
 8015c2e:	4b1c      	ldr	r3, [pc, #112]	; (8015ca0 <__ieee754_rem_pio2+0x350>)
 8015c30:	4598      	cmp	r8, r3
 8015c32:	dd37      	ble.n	8015ca4 <__ieee754_rem_pio2+0x354>
 8015c34:	ee10 2a10 	vmov	r2, s0
 8015c38:	462b      	mov	r3, r5
 8015c3a:	4620      	mov	r0, r4
 8015c3c:	4629      	mov	r1, r5
 8015c3e:	f7ea fadb 	bl	80001f8 <__aeabi_dsub>
 8015c42:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8015c46:	e9ca 0100 	strd	r0, r1, [sl]
 8015c4a:	e695      	b.n	8015978 <__ieee754_rem_pio2+0x28>
 8015c4c:	f3af 8000 	nop.w
 8015c50:	54400000 	.word	0x54400000
 8015c54:	3ff921fb 	.word	0x3ff921fb
 8015c58:	1a626331 	.word	0x1a626331
 8015c5c:	3dd0b461 	.word	0x3dd0b461
 8015c60:	1a600000 	.word	0x1a600000
 8015c64:	3dd0b461 	.word	0x3dd0b461
 8015c68:	2e037073 	.word	0x2e037073
 8015c6c:	3ba3198a 	.word	0x3ba3198a
 8015c70:	6dc9c883 	.word	0x6dc9c883
 8015c74:	3fe45f30 	.word	0x3fe45f30
 8015c78:	2e000000 	.word	0x2e000000
 8015c7c:	3ba3198a 	.word	0x3ba3198a
 8015c80:	252049c1 	.word	0x252049c1
 8015c84:	397b839a 	.word	0x397b839a
 8015c88:	3fe921fb 	.word	0x3fe921fb
 8015c8c:	4002d97b 	.word	0x4002d97b
 8015c90:	3ff921fb 	.word	0x3ff921fb
 8015c94:	413921fb 	.word	0x413921fb
 8015c98:	3fe00000 	.word	0x3fe00000
 8015c9c:	08016da0 	.word	0x08016da0
 8015ca0:	7fefffff 	.word	0x7fefffff
 8015ca4:	ea4f 5628 	mov.w	r6, r8, asr #20
 8015ca8:	f2a6 4616 	subw	r6, r6, #1046	; 0x416
 8015cac:	eba8 5106 	sub.w	r1, r8, r6, lsl #20
 8015cb0:	4620      	mov	r0, r4
 8015cb2:	460d      	mov	r5, r1
 8015cb4:	f7ea ff08 	bl	8000ac8 <__aeabi_d2iz>
 8015cb8:	f7ea fbec 	bl	8000494 <__aeabi_i2d>
 8015cbc:	4602      	mov	r2, r0
 8015cbe:	460b      	mov	r3, r1
 8015cc0:	4620      	mov	r0, r4
 8015cc2:	4629      	mov	r1, r5
 8015cc4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8015cc8:	f7ea fa96 	bl	80001f8 <__aeabi_dsub>
 8015ccc:	4b21      	ldr	r3, [pc, #132]	; (8015d54 <__ieee754_rem_pio2+0x404>)
 8015cce:	2200      	movs	r2, #0
 8015cd0:	f7ea fc4a 	bl	8000568 <__aeabi_dmul>
 8015cd4:	460d      	mov	r5, r1
 8015cd6:	4604      	mov	r4, r0
 8015cd8:	f7ea fef6 	bl	8000ac8 <__aeabi_d2iz>
 8015cdc:	f7ea fbda 	bl	8000494 <__aeabi_i2d>
 8015ce0:	4602      	mov	r2, r0
 8015ce2:	460b      	mov	r3, r1
 8015ce4:	4620      	mov	r0, r4
 8015ce6:	4629      	mov	r1, r5
 8015ce8:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8015cec:	f7ea fa84 	bl	80001f8 <__aeabi_dsub>
 8015cf0:	4b18      	ldr	r3, [pc, #96]	; (8015d54 <__ieee754_rem_pio2+0x404>)
 8015cf2:	2200      	movs	r2, #0
 8015cf4:	f7ea fc38 	bl	8000568 <__aeabi_dmul>
 8015cf8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8015cfc:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 8015d00:	2703      	movs	r7, #3
 8015d02:	2400      	movs	r4, #0
 8015d04:	2500      	movs	r5, #0
 8015d06:	e978 0102 	ldrd	r0, r1, [r8, #-8]!
 8015d0a:	4622      	mov	r2, r4
 8015d0c:	462b      	mov	r3, r5
 8015d0e:	46b9      	mov	r9, r7
 8015d10:	3f01      	subs	r7, #1
 8015d12:	f7ea fe91 	bl	8000a38 <__aeabi_dcmpeq>
 8015d16:	2800      	cmp	r0, #0
 8015d18:	d1f5      	bne.n	8015d06 <__ieee754_rem_pio2+0x3b6>
 8015d1a:	4b0f      	ldr	r3, [pc, #60]	; (8015d58 <__ieee754_rem_pio2+0x408>)
 8015d1c:	9301      	str	r3, [sp, #4]
 8015d1e:	2302      	movs	r3, #2
 8015d20:	9300      	str	r3, [sp, #0]
 8015d22:	4632      	mov	r2, r6
 8015d24:	464b      	mov	r3, r9
 8015d26:	4651      	mov	r1, sl
 8015d28:	a804      	add	r0, sp, #16
 8015d2a:	f000 f9b9 	bl	80160a0 <__kernel_rem_pio2>
 8015d2e:	9b02      	ldr	r3, [sp, #8]
 8015d30:	2b00      	cmp	r3, #0
 8015d32:	4683      	mov	fp, r0
 8015d34:	f6bf ae4c 	bge.w	80159d0 <__ieee754_rem_pio2+0x80>
 8015d38:	e9da 2100 	ldrd	r2, r1, [sl]
 8015d3c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8015d40:	e9ca 2300 	strd	r2, r3, [sl]
 8015d44:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 8015d48:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8015d4c:	e9ca 2302 	strd	r2, r3, [sl, #8]
 8015d50:	e73f      	b.n	8015bd2 <__ieee754_rem_pio2+0x282>
 8015d52:	bf00      	nop
 8015d54:	41700000 	.word	0x41700000
 8015d58:	08016e20 	.word	0x08016e20
 8015d5c:	00000000 	.word	0x00000000

08015d60 <atan>:
 8015d60:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015d64:	ec55 4b10 	vmov	r4, r5, d0
 8015d68:	4bc3      	ldr	r3, [pc, #780]	; (8016078 <atan+0x318>)
 8015d6a:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8015d6e:	429e      	cmp	r6, r3
 8015d70:	46ab      	mov	fp, r5
 8015d72:	dd18      	ble.n	8015da6 <atan+0x46>
 8015d74:	4bc1      	ldr	r3, [pc, #772]	; (801607c <atan+0x31c>)
 8015d76:	429e      	cmp	r6, r3
 8015d78:	dc01      	bgt.n	8015d7e <atan+0x1e>
 8015d7a:	d109      	bne.n	8015d90 <atan+0x30>
 8015d7c:	b144      	cbz	r4, 8015d90 <atan+0x30>
 8015d7e:	4622      	mov	r2, r4
 8015d80:	462b      	mov	r3, r5
 8015d82:	4620      	mov	r0, r4
 8015d84:	4629      	mov	r1, r5
 8015d86:	f7ea fa39 	bl	80001fc <__adddf3>
 8015d8a:	4604      	mov	r4, r0
 8015d8c:	460d      	mov	r5, r1
 8015d8e:	e006      	b.n	8015d9e <atan+0x3e>
 8015d90:	f1bb 0f00 	cmp.w	fp, #0
 8015d94:	f300 8131 	bgt.w	8015ffa <atan+0x29a>
 8015d98:	a59b      	add	r5, pc, #620	; (adr r5, 8016008 <atan+0x2a8>)
 8015d9a:	e9d5 4500 	ldrd	r4, r5, [r5]
 8015d9e:	ec45 4b10 	vmov	d0, r4, r5
 8015da2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015da6:	4bb6      	ldr	r3, [pc, #728]	; (8016080 <atan+0x320>)
 8015da8:	429e      	cmp	r6, r3
 8015daa:	dc14      	bgt.n	8015dd6 <atan+0x76>
 8015dac:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8015db0:	429e      	cmp	r6, r3
 8015db2:	dc0d      	bgt.n	8015dd0 <atan+0x70>
 8015db4:	a396      	add	r3, pc, #600	; (adr r3, 8016010 <atan+0x2b0>)
 8015db6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015dba:	ee10 0a10 	vmov	r0, s0
 8015dbe:	4629      	mov	r1, r5
 8015dc0:	f7ea fa1c 	bl	80001fc <__adddf3>
 8015dc4:	4baf      	ldr	r3, [pc, #700]	; (8016084 <atan+0x324>)
 8015dc6:	2200      	movs	r2, #0
 8015dc8:	f7ea fe5e 	bl	8000a88 <__aeabi_dcmpgt>
 8015dcc:	2800      	cmp	r0, #0
 8015dce:	d1e6      	bne.n	8015d9e <atan+0x3e>
 8015dd0:	f04f 3aff 	mov.w	sl, #4294967295
 8015dd4:	e02b      	b.n	8015e2e <atan+0xce>
 8015dd6:	f7ff f867 	bl	8014ea8 <fabs>
 8015dda:	4bab      	ldr	r3, [pc, #684]	; (8016088 <atan+0x328>)
 8015ddc:	429e      	cmp	r6, r3
 8015dde:	ec55 4b10 	vmov	r4, r5, d0
 8015de2:	f300 80bf 	bgt.w	8015f64 <atan+0x204>
 8015de6:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8015dea:	429e      	cmp	r6, r3
 8015dec:	f300 80a0 	bgt.w	8015f30 <atan+0x1d0>
 8015df0:	ee10 2a10 	vmov	r2, s0
 8015df4:	ee10 0a10 	vmov	r0, s0
 8015df8:	462b      	mov	r3, r5
 8015dfa:	4629      	mov	r1, r5
 8015dfc:	f7ea f9fe 	bl	80001fc <__adddf3>
 8015e00:	4ba0      	ldr	r3, [pc, #640]	; (8016084 <atan+0x324>)
 8015e02:	2200      	movs	r2, #0
 8015e04:	f7ea f9f8 	bl	80001f8 <__aeabi_dsub>
 8015e08:	2200      	movs	r2, #0
 8015e0a:	4606      	mov	r6, r0
 8015e0c:	460f      	mov	r7, r1
 8015e0e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8015e12:	4620      	mov	r0, r4
 8015e14:	4629      	mov	r1, r5
 8015e16:	f7ea f9f1 	bl	80001fc <__adddf3>
 8015e1a:	4602      	mov	r2, r0
 8015e1c:	460b      	mov	r3, r1
 8015e1e:	4630      	mov	r0, r6
 8015e20:	4639      	mov	r1, r7
 8015e22:	f7ea fccb 	bl	80007bc <__aeabi_ddiv>
 8015e26:	f04f 0a00 	mov.w	sl, #0
 8015e2a:	4604      	mov	r4, r0
 8015e2c:	460d      	mov	r5, r1
 8015e2e:	4622      	mov	r2, r4
 8015e30:	462b      	mov	r3, r5
 8015e32:	4620      	mov	r0, r4
 8015e34:	4629      	mov	r1, r5
 8015e36:	f7ea fb97 	bl	8000568 <__aeabi_dmul>
 8015e3a:	4602      	mov	r2, r0
 8015e3c:	460b      	mov	r3, r1
 8015e3e:	4680      	mov	r8, r0
 8015e40:	4689      	mov	r9, r1
 8015e42:	f7ea fb91 	bl	8000568 <__aeabi_dmul>
 8015e46:	a374      	add	r3, pc, #464	; (adr r3, 8016018 <atan+0x2b8>)
 8015e48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015e4c:	4606      	mov	r6, r0
 8015e4e:	460f      	mov	r7, r1
 8015e50:	f7ea fb8a 	bl	8000568 <__aeabi_dmul>
 8015e54:	a372      	add	r3, pc, #456	; (adr r3, 8016020 <atan+0x2c0>)
 8015e56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015e5a:	f7ea f9cf 	bl	80001fc <__adddf3>
 8015e5e:	4632      	mov	r2, r6
 8015e60:	463b      	mov	r3, r7
 8015e62:	f7ea fb81 	bl	8000568 <__aeabi_dmul>
 8015e66:	a370      	add	r3, pc, #448	; (adr r3, 8016028 <atan+0x2c8>)
 8015e68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015e6c:	f7ea f9c6 	bl	80001fc <__adddf3>
 8015e70:	4632      	mov	r2, r6
 8015e72:	463b      	mov	r3, r7
 8015e74:	f7ea fb78 	bl	8000568 <__aeabi_dmul>
 8015e78:	a36d      	add	r3, pc, #436	; (adr r3, 8016030 <atan+0x2d0>)
 8015e7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015e7e:	f7ea f9bd 	bl	80001fc <__adddf3>
 8015e82:	4632      	mov	r2, r6
 8015e84:	463b      	mov	r3, r7
 8015e86:	f7ea fb6f 	bl	8000568 <__aeabi_dmul>
 8015e8a:	a36b      	add	r3, pc, #428	; (adr r3, 8016038 <atan+0x2d8>)
 8015e8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015e90:	f7ea f9b4 	bl	80001fc <__adddf3>
 8015e94:	4632      	mov	r2, r6
 8015e96:	463b      	mov	r3, r7
 8015e98:	f7ea fb66 	bl	8000568 <__aeabi_dmul>
 8015e9c:	a368      	add	r3, pc, #416	; (adr r3, 8016040 <atan+0x2e0>)
 8015e9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015ea2:	f7ea f9ab 	bl	80001fc <__adddf3>
 8015ea6:	4642      	mov	r2, r8
 8015ea8:	464b      	mov	r3, r9
 8015eaa:	f7ea fb5d 	bl	8000568 <__aeabi_dmul>
 8015eae:	a366      	add	r3, pc, #408	; (adr r3, 8016048 <atan+0x2e8>)
 8015eb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015eb4:	4680      	mov	r8, r0
 8015eb6:	4689      	mov	r9, r1
 8015eb8:	4630      	mov	r0, r6
 8015eba:	4639      	mov	r1, r7
 8015ebc:	f7ea fb54 	bl	8000568 <__aeabi_dmul>
 8015ec0:	a363      	add	r3, pc, #396	; (adr r3, 8016050 <atan+0x2f0>)
 8015ec2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015ec6:	f7ea f997 	bl	80001f8 <__aeabi_dsub>
 8015eca:	4632      	mov	r2, r6
 8015ecc:	463b      	mov	r3, r7
 8015ece:	f7ea fb4b 	bl	8000568 <__aeabi_dmul>
 8015ed2:	a361      	add	r3, pc, #388	; (adr r3, 8016058 <atan+0x2f8>)
 8015ed4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015ed8:	f7ea f98e 	bl	80001f8 <__aeabi_dsub>
 8015edc:	4632      	mov	r2, r6
 8015ede:	463b      	mov	r3, r7
 8015ee0:	f7ea fb42 	bl	8000568 <__aeabi_dmul>
 8015ee4:	a35e      	add	r3, pc, #376	; (adr r3, 8016060 <atan+0x300>)
 8015ee6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015eea:	f7ea f985 	bl	80001f8 <__aeabi_dsub>
 8015eee:	4632      	mov	r2, r6
 8015ef0:	463b      	mov	r3, r7
 8015ef2:	f7ea fb39 	bl	8000568 <__aeabi_dmul>
 8015ef6:	a35c      	add	r3, pc, #368	; (adr r3, 8016068 <atan+0x308>)
 8015ef8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015efc:	f7ea f97c 	bl	80001f8 <__aeabi_dsub>
 8015f00:	4632      	mov	r2, r6
 8015f02:	463b      	mov	r3, r7
 8015f04:	f7ea fb30 	bl	8000568 <__aeabi_dmul>
 8015f08:	4602      	mov	r2, r0
 8015f0a:	460b      	mov	r3, r1
 8015f0c:	4640      	mov	r0, r8
 8015f0e:	4649      	mov	r1, r9
 8015f10:	f7ea f974 	bl	80001fc <__adddf3>
 8015f14:	4622      	mov	r2, r4
 8015f16:	462b      	mov	r3, r5
 8015f18:	f7ea fb26 	bl	8000568 <__aeabi_dmul>
 8015f1c:	f1ba 3fff 	cmp.w	sl, #4294967295
 8015f20:	4602      	mov	r2, r0
 8015f22:	460b      	mov	r3, r1
 8015f24:	d14b      	bne.n	8015fbe <atan+0x25e>
 8015f26:	4620      	mov	r0, r4
 8015f28:	4629      	mov	r1, r5
 8015f2a:	f7ea f965 	bl	80001f8 <__aeabi_dsub>
 8015f2e:	e72c      	b.n	8015d8a <atan+0x2a>
 8015f30:	ee10 0a10 	vmov	r0, s0
 8015f34:	4b53      	ldr	r3, [pc, #332]	; (8016084 <atan+0x324>)
 8015f36:	2200      	movs	r2, #0
 8015f38:	4629      	mov	r1, r5
 8015f3a:	f7ea f95d 	bl	80001f8 <__aeabi_dsub>
 8015f3e:	4b51      	ldr	r3, [pc, #324]	; (8016084 <atan+0x324>)
 8015f40:	4606      	mov	r6, r0
 8015f42:	460f      	mov	r7, r1
 8015f44:	2200      	movs	r2, #0
 8015f46:	4620      	mov	r0, r4
 8015f48:	4629      	mov	r1, r5
 8015f4a:	f7ea f957 	bl	80001fc <__adddf3>
 8015f4e:	4602      	mov	r2, r0
 8015f50:	460b      	mov	r3, r1
 8015f52:	4630      	mov	r0, r6
 8015f54:	4639      	mov	r1, r7
 8015f56:	f7ea fc31 	bl	80007bc <__aeabi_ddiv>
 8015f5a:	f04f 0a01 	mov.w	sl, #1
 8015f5e:	4604      	mov	r4, r0
 8015f60:	460d      	mov	r5, r1
 8015f62:	e764      	b.n	8015e2e <atan+0xce>
 8015f64:	4b49      	ldr	r3, [pc, #292]	; (801608c <atan+0x32c>)
 8015f66:	429e      	cmp	r6, r3
 8015f68:	da1d      	bge.n	8015fa6 <atan+0x246>
 8015f6a:	ee10 0a10 	vmov	r0, s0
 8015f6e:	4b48      	ldr	r3, [pc, #288]	; (8016090 <atan+0x330>)
 8015f70:	2200      	movs	r2, #0
 8015f72:	4629      	mov	r1, r5
 8015f74:	f7ea f940 	bl	80001f8 <__aeabi_dsub>
 8015f78:	4b45      	ldr	r3, [pc, #276]	; (8016090 <atan+0x330>)
 8015f7a:	4606      	mov	r6, r0
 8015f7c:	460f      	mov	r7, r1
 8015f7e:	2200      	movs	r2, #0
 8015f80:	4620      	mov	r0, r4
 8015f82:	4629      	mov	r1, r5
 8015f84:	f7ea faf0 	bl	8000568 <__aeabi_dmul>
 8015f88:	4b3e      	ldr	r3, [pc, #248]	; (8016084 <atan+0x324>)
 8015f8a:	2200      	movs	r2, #0
 8015f8c:	f7ea f936 	bl	80001fc <__adddf3>
 8015f90:	4602      	mov	r2, r0
 8015f92:	460b      	mov	r3, r1
 8015f94:	4630      	mov	r0, r6
 8015f96:	4639      	mov	r1, r7
 8015f98:	f7ea fc10 	bl	80007bc <__aeabi_ddiv>
 8015f9c:	f04f 0a02 	mov.w	sl, #2
 8015fa0:	4604      	mov	r4, r0
 8015fa2:	460d      	mov	r5, r1
 8015fa4:	e743      	b.n	8015e2e <atan+0xce>
 8015fa6:	462b      	mov	r3, r5
 8015fa8:	ee10 2a10 	vmov	r2, s0
 8015fac:	4939      	ldr	r1, [pc, #228]	; (8016094 <atan+0x334>)
 8015fae:	2000      	movs	r0, #0
 8015fb0:	f7ea fc04 	bl	80007bc <__aeabi_ddiv>
 8015fb4:	f04f 0a03 	mov.w	sl, #3
 8015fb8:	4604      	mov	r4, r0
 8015fba:	460d      	mov	r5, r1
 8015fbc:	e737      	b.n	8015e2e <atan+0xce>
 8015fbe:	4b36      	ldr	r3, [pc, #216]	; (8016098 <atan+0x338>)
 8015fc0:	4e36      	ldr	r6, [pc, #216]	; (801609c <atan+0x33c>)
 8015fc2:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8015fc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015fca:	f7ea f915 	bl	80001f8 <__aeabi_dsub>
 8015fce:	4622      	mov	r2, r4
 8015fd0:	462b      	mov	r3, r5
 8015fd2:	f7ea f911 	bl	80001f8 <__aeabi_dsub>
 8015fd6:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8015fda:	4602      	mov	r2, r0
 8015fdc:	460b      	mov	r3, r1
 8015fde:	e9d6 0100 	ldrd	r0, r1, [r6]
 8015fe2:	f7ea f909 	bl	80001f8 <__aeabi_dsub>
 8015fe6:	f1bb 0f00 	cmp.w	fp, #0
 8015fea:	4604      	mov	r4, r0
 8015fec:	460d      	mov	r5, r1
 8015fee:	f6bf aed6 	bge.w	8015d9e <atan+0x3e>
 8015ff2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8015ff6:	461d      	mov	r5, r3
 8015ff8:	e6d1      	b.n	8015d9e <atan+0x3e>
 8015ffa:	a51d      	add	r5, pc, #116	; (adr r5, 8016070 <atan+0x310>)
 8015ffc:	e9d5 4500 	ldrd	r4, r5, [r5]
 8016000:	e6cd      	b.n	8015d9e <atan+0x3e>
 8016002:	bf00      	nop
 8016004:	f3af 8000 	nop.w
 8016008:	54442d18 	.word	0x54442d18
 801600c:	bff921fb 	.word	0xbff921fb
 8016010:	8800759c 	.word	0x8800759c
 8016014:	7e37e43c 	.word	0x7e37e43c
 8016018:	e322da11 	.word	0xe322da11
 801601c:	3f90ad3a 	.word	0x3f90ad3a
 8016020:	24760deb 	.word	0x24760deb
 8016024:	3fa97b4b 	.word	0x3fa97b4b
 8016028:	a0d03d51 	.word	0xa0d03d51
 801602c:	3fb10d66 	.word	0x3fb10d66
 8016030:	c54c206e 	.word	0xc54c206e
 8016034:	3fb745cd 	.word	0x3fb745cd
 8016038:	920083ff 	.word	0x920083ff
 801603c:	3fc24924 	.word	0x3fc24924
 8016040:	5555550d 	.word	0x5555550d
 8016044:	3fd55555 	.word	0x3fd55555
 8016048:	2c6a6c2f 	.word	0x2c6a6c2f
 801604c:	bfa2b444 	.word	0xbfa2b444
 8016050:	52defd9a 	.word	0x52defd9a
 8016054:	3fadde2d 	.word	0x3fadde2d
 8016058:	af749a6d 	.word	0xaf749a6d
 801605c:	3fb3b0f2 	.word	0x3fb3b0f2
 8016060:	fe231671 	.word	0xfe231671
 8016064:	3fbc71c6 	.word	0x3fbc71c6
 8016068:	9998ebc4 	.word	0x9998ebc4
 801606c:	3fc99999 	.word	0x3fc99999
 8016070:	54442d18 	.word	0x54442d18
 8016074:	3ff921fb 	.word	0x3ff921fb
 8016078:	440fffff 	.word	0x440fffff
 801607c:	7ff00000 	.word	0x7ff00000
 8016080:	3fdbffff 	.word	0x3fdbffff
 8016084:	3ff00000 	.word	0x3ff00000
 8016088:	3ff2ffff 	.word	0x3ff2ffff
 801608c:	40038000 	.word	0x40038000
 8016090:	3ff80000 	.word	0x3ff80000
 8016094:	bff00000 	.word	0xbff00000
 8016098:	08016f48 	.word	0x08016f48
 801609c:	08016f28 	.word	0x08016f28

080160a0 <__kernel_rem_pio2>:
 80160a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80160a4:	ed2d 8b02 	vpush	{d8}
 80160a8:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 80160ac:	f112 0f14 	cmn.w	r2, #20
 80160b0:	9306      	str	r3, [sp, #24]
 80160b2:	9104      	str	r1, [sp, #16]
 80160b4:	4bc2      	ldr	r3, [pc, #776]	; (80163c0 <__kernel_rem_pio2+0x320>)
 80160b6:	99a4      	ldr	r1, [sp, #656]	; 0x290
 80160b8:	9009      	str	r0, [sp, #36]	; 0x24
 80160ba:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80160be:	9300      	str	r3, [sp, #0]
 80160c0:	9b06      	ldr	r3, [sp, #24]
 80160c2:	f103 33ff 	add.w	r3, r3, #4294967295
 80160c6:	bfa8      	it	ge
 80160c8:	1ed4      	subge	r4, r2, #3
 80160ca:	9305      	str	r3, [sp, #20]
 80160cc:	bfb2      	itee	lt
 80160ce:	2400      	movlt	r4, #0
 80160d0:	2318      	movge	r3, #24
 80160d2:	fb94 f4f3 	sdivge	r4, r4, r3
 80160d6:	f06f 0317 	mvn.w	r3, #23
 80160da:	fb04 3303 	mla	r3, r4, r3, r3
 80160de:	eb03 0a02 	add.w	sl, r3, r2
 80160e2:	9b00      	ldr	r3, [sp, #0]
 80160e4:	9a05      	ldr	r2, [sp, #20]
 80160e6:	ed9f 8bb2 	vldr	d8, [pc, #712]	; 80163b0 <__kernel_rem_pio2+0x310>
 80160ea:	eb03 0802 	add.w	r8, r3, r2
 80160ee:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 80160f0:	1aa7      	subs	r7, r4, r2
 80160f2:	ae20      	add	r6, sp, #128	; 0x80
 80160f4:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 80160f8:	2500      	movs	r5, #0
 80160fa:	4545      	cmp	r5, r8
 80160fc:	dd13      	ble.n	8016126 <__kernel_rem_pio2+0x86>
 80160fe:	9b06      	ldr	r3, [sp, #24]
 8016100:	aa20      	add	r2, sp, #128	; 0x80
 8016102:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8016106:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 801610a:	f04f 0800 	mov.w	r8, #0
 801610e:	9b00      	ldr	r3, [sp, #0]
 8016110:	4598      	cmp	r8, r3
 8016112:	dc31      	bgt.n	8016178 <__kernel_rem_pio2+0xd8>
 8016114:	ed9f 7ba6 	vldr	d7, [pc, #664]	; 80163b0 <__kernel_rem_pio2+0x310>
 8016118:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 801611c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8016120:	462f      	mov	r7, r5
 8016122:	2600      	movs	r6, #0
 8016124:	e01b      	b.n	801615e <__kernel_rem_pio2+0xbe>
 8016126:	42ef      	cmn	r7, r5
 8016128:	d407      	bmi.n	801613a <__kernel_rem_pio2+0x9a>
 801612a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 801612e:	f7ea f9b1 	bl	8000494 <__aeabi_i2d>
 8016132:	e8e6 0102 	strd	r0, r1, [r6], #8
 8016136:	3501      	adds	r5, #1
 8016138:	e7df      	b.n	80160fa <__kernel_rem_pio2+0x5a>
 801613a:	ec51 0b18 	vmov	r0, r1, d8
 801613e:	e7f8      	b.n	8016132 <__kernel_rem_pio2+0x92>
 8016140:	e9d7 2300 	ldrd	r2, r3, [r7]
 8016144:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8016148:	f7ea fa0e 	bl	8000568 <__aeabi_dmul>
 801614c:	4602      	mov	r2, r0
 801614e:	460b      	mov	r3, r1
 8016150:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8016154:	f7ea f852 	bl	80001fc <__adddf3>
 8016158:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801615c:	3601      	adds	r6, #1
 801615e:	9b05      	ldr	r3, [sp, #20]
 8016160:	429e      	cmp	r6, r3
 8016162:	f1a7 0708 	sub.w	r7, r7, #8
 8016166:	ddeb      	ble.n	8016140 <__kernel_rem_pio2+0xa0>
 8016168:	ed9d 7b02 	vldr	d7, [sp, #8]
 801616c:	f108 0801 	add.w	r8, r8, #1
 8016170:	ecab 7b02 	vstmia	fp!, {d7}
 8016174:	3508      	adds	r5, #8
 8016176:	e7ca      	b.n	801610e <__kernel_rem_pio2+0x6e>
 8016178:	9b00      	ldr	r3, [sp, #0]
 801617a:	aa0c      	add	r2, sp, #48	; 0x30
 801617c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8016180:	930b      	str	r3, [sp, #44]	; 0x2c
 8016182:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8016184:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8016188:	9c00      	ldr	r4, [sp, #0]
 801618a:	930a      	str	r3, [sp, #40]	; 0x28
 801618c:	00e3      	lsls	r3, r4, #3
 801618e:	9308      	str	r3, [sp, #32]
 8016190:	ab98      	add	r3, sp, #608	; 0x260
 8016192:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8016196:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 801619a:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 801619e:	ab70      	add	r3, sp, #448	; 0x1c0
 80161a0:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 80161a4:	46c3      	mov	fp, r8
 80161a6:	46a1      	mov	r9, r4
 80161a8:	f1b9 0f00 	cmp.w	r9, #0
 80161ac:	f1a5 0508 	sub.w	r5, r5, #8
 80161b0:	dc77      	bgt.n	80162a2 <__kernel_rem_pio2+0x202>
 80161b2:	ec47 6b10 	vmov	d0, r6, r7
 80161b6:	4650      	mov	r0, sl
 80161b8:	f000 fac2 	bl	8016740 <scalbn>
 80161bc:	ec57 6b10 	vmov	r6, r7, d0
 80161c0:	2200      	movs	r2, #0
 80161c2:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 80161c6:	ee10 0a10 	vmov	r0, s0
 80161ca:	4639      	mov	r1, r7
 80161cc:	f7ea f9cc 	bl	8000568 <__aeabi_dmul>
 80161d0:	ec41 0b10 	vmov	d0, r0, r1
 80161d4:	f000 fb34 	bl	8016840 <floor>
 80161d8:	4b7a      	ldr	r3, [pc, #488]	; (80163c4 <__kernel_rem_pio2+0x324>)
 80161da:	ec51 0b10 	vmov	r0, r1, d0
 80161de:	2200      	movs	r2, #0
 80161e0:	f7ea f9c2 	bl	8000568 <__aeabi_dmul>
 80161e4:	4602      	mov	r2, r0
 80161e6:	460b      	mov	r3, r1
 80161e8:	4630      	mov	r0, r6
 80161ea:	4639      	mov	r1, r7
 80161ec:	f7ea f804 	bl	80001f8 <__aeabi_dsub>
 80161f0:	460f      	mov	r7, r1
 80161f2:	4606      	mov	r6, r0
 80161f4:	f7ea fc68 	bl	8000ac8 <__aeabi_d2iz>
 80161f8:	9002      	str	r0, [sp, #8]
 80161fa:	f7ea f94b 	bl	8000494 <__aeabi_i2d>
 80161fe:	4602      	mov	r2, r0
 8016200:	460b      	mov	r3, r1
 8016202:	4630      	mov	r0, r6
 8016204:	4639      	mov	r1, r7
 8016206:	f7e9 fff7 	bl	80001f8 <__aeabi_dsub>
 801620a:	f1ba 0f00 	cmp.w	sl, #0
 801620e:	4606      	mov	r6, r0
 8016210:	460f      	mov	r7, r1
 8016212:	dd6d      	ble.n	80162f0 <__kernel_rem_pio2+0x250>
 8016214:	1e61      	subs	r1, r4, #1
 8016216:	ab0c      	add	r3, sp, #48	; 0x30
 8016218:	9d02      	ldr	r5, [sp, #8]
 801621a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801621e:	f1ca 0018 	rsb	r0, sl, #24
 8016222:	fa43 f200 	asr.w	r2, r3, r0
 8016226:	4415      	add	r5, r2
 8016228:	4082      	lsls	r2, r0
 801622a:	1a9b      	subs	r3, r3, r2
 801622c:	aa0c      	add	r2, sp, #48	; 0x30
 801622e:	9502      	str	r5, [sp, #8]
 8016230:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8016234:	f1ca 0217 	rsb	r2, sl, #23
 8016238:	fa43 fb02 	asr.w	fp, r3, r2
 801623c:	f1bb 0f00 	cmp.w	fp, #0
 8016240:	dd65      	ble.n	801630e <__kernel_rem_pio2+0x26e>
 8016242:	9b02      	ldr	r3, [sp, #8]
 8016244:	2200      	movs	r2, #0
 8016246:	3301      	adds	r3, #1
 8016248:	9302      	str	r3, [sp, #8]
 801624a:	4615      	mov	r5, r2
 801624c:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8016250:	4294      	cmp	r4, r2
 8016252:	f300 809f 	bgt.w	8016394 <__kernel_rem_pio2+0x2f4>
 8016256:	f1ba 0f00 	cmp.w	sl, #0
 801625a:	dd07      	ble.n	801626c <__kernel_rem_pio2+0x1cc>
 801625c:	f1ba 0f01 	cmp.w	sl, #1
 8016260:	f000 80c1 	beq.w	80163e6 <__kernel_rem_pio2+0x346>
 8016264:	f1ba 0f02 	cmp.w	sl, #2
 8016268:	f000 80c7 	beq.w	80163fa <__kernel_rem_pio2+0x35a>
 801626c:	f1bb 0f02 	cmp.w	fp, #2
 8016270:	d14d      	bne.n	801630e <__kernel_rem_pio2+0x26e>
 8016272:	4632      	mov	r2, r6
 8016274:	463b      	mov	r3, r7
 8016276:	4954      	ldr	r1, [pc, #336]	; (80163c8 <__kernel_rem_pio2+0x328>)
 8016278:	2000      	movs	r0, #0
 801627a:	f7e9 ffbd 	bl	80001f8 <__aeabi_dsub>
 801627e:	4606      	mov	r6, r0
 8016280:	460f      	mov	r7, r1
 8016282:	2d00      	cmp	r5, #0
 8016284:	d043      	beq.n	801630e <__kernel_rem_pio2+0x26e>
 8016286:	4650      	mov	r0, sl
 8016288:	ed9f 0b4b 	vldr	d0, [pc, #300]	; 80163b8 <__kernel_rem_pio2+0x318>
 801628c:	f000 fa58 	bl	8016740 <scalbn>
 8016290:	4630      	mov	r0, r6
 8016292:	4639      	mov	r1, r7
 8016294:	ec53 2b10 	vmov	r2, r3, d0
 8016298:	f7e9 ffae 	bl	80001f8 <__aeabi_dsub>
 801629c:	4606      	mov	r6, r0
 801629e:	460f      	mov	r7, r1
 80162a0:	e035      	b.n	801630e <__kernel_rem_pio2+0x26e>
 80162a2:	4b4a      	ldr	r3, [pc, #296]	; (80163cc <__kernel_rem_pio2+0x32c>)
 80162a4:	2200      	movs	r2, #0
 80162a6:	4630      	mov	r0, r6
 80162a8:	4639      	mov	r1, r7
 80162aa:	f7ea f95d 	bl	8000568 <__aeabi_dmul>
 80162ae:	f7ea fc0b 	bl	8000ac8 <__aeabi_d2iz>
 80162b2:	f7ea f8ef 	bl	8000494 <__aeabi_i2d>
 80162b6:	4602      	mov	r2, r0
 80162b8:	460b      	mov	r3, r1
 80162ba:	ec43 2b18 	vmov	d8, r2, r3
 80162be:	4b44      	ldr	r3, [pc, #272]	; (80163d0 <__kernel_rem_pio2+0x330>)
 80162c0:	2200      	movs	r2, #0
 80162c2:	f7ea f951 	bl	8000568 <__aeabi_dmul>
 80162c6:	4602      	mov	r2, r0
 80162c8:	460b      	mov	r3, r1
 80162ca:	4630      	mov	r0, r6
 80162cc:	4639      	mov	r1, r7
 80162ce:	f7e9 ff93 	bl	80001f8 <__aeabi_dsub>
 80162d2:	f7ea fbf9 	bl	8000ac8 <__aeabi_d2iz>
 80162d6:	e9d5 2300 	ldrd	r2, r3, [r5]
 80162da:	f84b 0b04 	str.w	r0, [fp], #4
 80162de:	ec51 0b18 	vmov	r0, r1, d8
 80162e2:	f7e9 ff8b 	bl	80001fc <__adddf3>
 80162e6:	f109 39ff 	add.w	r9, r9, #4294967295
 80162ea:	4606      	mov	r6, r0
 80162ec:	460f      	mov	r7, r1
 80162ee:	e75b      	b.n	80161a8 <__kernel_rem_pio2+0x108>
 80162f0:	d106      	bne.n	8016300 <__kernel_rem_pio2+0x260>
 80162f2:	1e63      	subs	r3, r4, #1
 80162f4:	aa0c      	add	r2, sp, #48	; 0x30
 80162f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80162fa:	ea4f 5be3 	mov.w	fp, r3, asr #23
 80162fe:	e79d      	b.n	801623c <__kernel_rem_pio2+0x19c>
 8016300:	4b34      	ldr	r3, [pc, #208]	; (80163d4 <__kernel_rem_pio2+0x334>)
 8016302:	2200      	movs	r2, #0
 8016304:	f7ea fbb6 	bl	8000a74 <__aeabi_dcmpge>
 8016308:	2800      	cmp	r0, #0
 801630a:	d140      	bne.n	801638e <__kernel_rem_pio2+0x2ee>
 801630c:	4683      	mov	fp, r0
 801630e:	2200      	movs	r2, #0
 8016310:	2300      	movs	r3, #0
 8016312:	4630      	mov	r0, r6
 8016314:	4639      	mov	r1, r7
 8016316:	f7ea fb8f 	bl	8000a38 <__aeabi_dcmpeq>
 801631a:	2800      	cmp	r0, #0
 801631c:	f000 80c1 	beq.w	80164a2 <__kernel_rem_pio2+0x402>
 8016320:	1e65      	subs	r5, r4, #1
 8016322:	462b      	mov	r3, r5
 8016324:	2200      	movs	r2, #0
 8016326:	9900      	ldr	r1, [sp, #0]
 8016328:	428b      	cmp	r3, r1
 801632a:	da6d      	bge.n	8016408 <__kernel_rem_pio2+0x368>
 801632c:	2a00      	cmp	r2, #0
 801632e:	f000 808a 	beq.w	8016446 <__kernel_rem_pio2+0x3a6>
 8016332:	ab0c      	add	r3, sp, #48	; 0x30
 8016334:	f1aa 0a18 	sub.w	sl, sl, #24
 8016338:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 801633c:	2b00      	cmp	r3, #0
 801633e:	f000 80ae 	beq.w	801649e <__kernel_rem_pio2+0x3fe>
 8016342:	4650      	mov	r0, sl
 8016344:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 80163b8 <__kernel_rem_pio2+0x318>
 8016348:	f000 f9fa 	bl	8016740 <scalbn>
 801634c:	1c6b      	adds	r3, r5, #1
 801634e:	00da      	lsls	r2, r3, #3
 8016350:	9205      	str	r2, [sp, #20]
 8016352:	ec57 6b10 	vmov	r6, r7, d0
 8016356:	aa70      	add	r2, sp, #448	; 0x1c0
 8016358:	f8df 9070 	ldr.w	r9, [pc, #112]	; 80163cc <__kernel_rem_pio2+0x32c>
 801635c:	eb02 0ac3 	add.w	sl, r2, r3, lsl #3
 8016360:	462c      	mov	r4, r5
 8016362:	f04f 0800 	mov.w	r8, #0
 8016366:	2c00      	cmp	r4, #0
 8016368:	f280 80d4 	bge.w	8016514 <__kernel_rem_pio2+0x474>
 801636c:	462c      	mov	r4, r5
 801636e:	2c00      	cmp	r4, #0
 8016370:	f2c0 8102 	blt.w	8016578 <__kernel_rem_pio2+0x4d8>
 8016374:	4b18      	ldr	r3, [pc, #96]	; (80163d8 <__kernel_rem_pio2+0x338>)
 8016376:	461e      	mov	r6, r3
 8016378:	ab70      	add	r3, sp, #448	; 0x1c0
 801637a:	eb03 08c4 	add.w	r8, r3, r4, lsl #3
 801637e:	1b2b      	subs	r3, r5, r4
 8016380:	f04f 0900 	mov.w	r9, #0
 8016384:	f04f 0a00 	mov.w	sl, #0
 8016388:	2700      	movs	r7, #0
 801638a:	9306      	str	r3, [sp, #24]
 801638c:	e0e6      	b.n	801655c <__kernel_rem_pio2+0x4bc>
 801638e:	f04f 0b02 	mov.w	fp, #2
 8016392:	e756      	b.n	8016242 <__kernel_rem_pio2+0x1a2>
 8016394:	f8d8 3000 	ldr.w	r3, [r8]
 8016398:	bb05      	cbnz	r5, 80163dc <__kernel_rem_pio2+0x33c>
 801639a:	b123      	cbz	r3, 80163a6 <__kernel_rem_pio2+0x306>
 801639c:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 80163a0:	f8c8 3000 	str.w	r3, [r8]
 80163a4:	2301      	movs	r3, #1
 80163a6:	3201      	adds	r2, #1
 80163a8:	f108 0804 	add.w	r8, r8, #4
 80163ac:	461d      	mov	r5, r3
 80163ae:	e74f      	b.n	8016250 <__kernel_rem_pio2+0x1b0>
	...
 80163bc:	3ff00000 	.word	0x3ff00000
 80163c0:	08016fa8 	.word	0x08016fa8
 80163c4:	40200000 	.word	0x40200000
 80163c8:	3ff00000 	.word	0x3ff00000
 80163cc:	3e700000 	.word	0x3e700000
 80163d0:	41700000 	.word	0x41700000
 80163d4:	3fe00000 	.word	0x3fe00000
 80163d8:	08016f68 	.word	0x08016f68
 80163dc:	1acb      	subs	r3, r1, r3
 80163de:	f8c8 3000 	str.w	r3, [r8]
 80163e2:	462b      	mov	r3, r5
 80163e4:	e7df      	b.n	80163a6 <__kernel_rem_pio2+0x306>
 80163e6:	1e62      	subs	r2, r4, #1
 80163e8:	ab0c      	add	r3, sp, #48	; 0x30
 80163ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80163ee:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80163f2:	a90c      	add	r1, sp, #48	; 0x30
 80163f4:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 80163f8:	e738      	b.n	801626c <__kernel_rem_pio2+0x1cc>
 80163fa:	1e62      	subs	r2, r4, #1
 80163fc:	ab0c      	add	r3, sp, #48	; 0x30
 80163fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016402:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8016406:	e7f4      	b.n	80163f2 <__kernel_rem_pio2+0x352>
 8016408:	a90c      	add	r1, sp, #48	; 0x30
 801640a:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 801640e:	3b01      	subs	r3, #1
 8016410:	430a      	orrs	r2, r1
 8016412:	e788      	b.n	8016326 <__kernel_rem_pio2+0x286>
 8016414:	3301      	adds	r3, #1
 8016416:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 801641a:	2900      	cmp	r1, #0
 801641c:	d0fa      	beq.n	8016414 <__kernel_rem_pio2+0x374>
 801641e:	9a08      	ldr	r2, [sp, #32]
 8016420:	f502 7218 	add.w	r2, r2, #608	; 0x260
 8016424:	446a      	add	r2, sp
 8016426:	3a98      	subs	r2, #152	; 0x98
 8016428:	9208      	str	r2, [sp, #32]
 801642a:	9a06      	ldr	r2, [sp, #24]
 801642c:	a920      	add	r1, sp, #128	; 0x80
 801642e:	18a2      	adds	r2, r4, r2
 8016430:	18e3      	adds	r3, r4, r3
 8016432:	f104 0801 	add.w	r8, r4, #1
 8016436:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 801643a:	9302      	str	r3, [sp, #8]
 801643c:	9b02      	ldr	r3, [sp, #8]
 801643e:	4543      	cmp	r3, r8
 8016440:	da04      	bge.n	801644c <__kernel_rem_pio2+0x3ac>
 8016442:	461c      	mov	r4, r3
 8016444:	e6a2      	b.n	801618c <__kernel_rem_pio2+0xec>
 8016446:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8016448:	2301      	movs	r3, #1
 801644a:	e7e4      	b.n	8016416 <__kernel_rem_pio2+0x376>
 801644c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801644e:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8016452:	f7ea f81f 	bl	8000494 <__aeabi_i2d>
 8016456:	e8e5 0102 	strd	r0, r1, [r5], #8
 801645a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801645c:	46ab      	mov	fp, r5
 801645e:	461c      	mov	r4, r3
 8016460:	f04f 0900 	mov.w	r9, #0
 8016464:	2600      	movs	r6, #0
 8016466:	2700      	movs	r7, #0
 8016468:	9b05      	ldr	r3, [sp, #20]
 801646a:	4599      	cmp	r9, r3
 801646c:	dd06      	ble.n	801647c <__kernel_rem_pio2+0x3dc>
 801646e:	9b08      	ldr	r3, [sp, #32]
 8016470:	e8e3 6702 	strd	r6, r7, [r3], #8
 8016474:	f108 0801 	add.w	r8, r8, #1
 8016478:	9308      	str	r3, [sp, #32]
 801647a:	e7df      	b.n	801643c <__kernel_rem_pio2+0x39c>
 801647c:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8016480:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8016484:	f7ea f870 	bl	8000568 <__aeabi_dmul>
 8016488:	4602      	mov	r2, r0
 801648a:	460b      	mov	r3, r1
 801648c:	4630      	mov	r0, r6
 801648e:	4639      	mov	r1, r7
 8016490:	f7e9 feb4 	bl	80001fc <__adddf3>
 8016494:	f109 0901 	add.w	r9, r9, #1
 8016498:	4606      	mov	r6, r0
 801649a:	460f      	mov	r7, r1
 801649c:	e7e4      	b.n	8016468 <__kernel_rem_pio2+0x3c8>
 801649e:	3d01      	subs	r5, #1
 80164a0:	e747      	b.n	8016332 <__kernel_rem_pio2+0x292>
 80164a2:	ec47 6b10 	vmov	d0, r6, r7
 80164a6:	f1ca 0000 	rsb	r0, sl, #0
 80164aa:	f000 f949 	bl	8016740 <scalbn>
 80164ae:	ec57 6b10 	vmov	r6, r7, d0
 80164b2:	4ba0      	ldr	r3, [pc, #640]	; (8016734 <__kernel_rem_pio2+0x694>)
 80164b4:	ee10 0a10 	vmov	r0, s0
 80164b8:	2200      	movs	r2, #0
 80164ba:	4639      	mov	r1, r7
 80164bc:	f7ea fada 	bl	8000a74 <__aeabi_dcmpge>
 80164c0:	b1f8      	cbz	r0, 8016502 <__kernel_rem_pio2+0x462>
 80164c2:	4b9d      	ldr	r3, [pc, #628]	; (8016738 <__kernel_rem_pio2+0x698>)
 80164c4:	2200      	movs	r2, #0
 80164c6:	4630      	mov	r0, r6
 80164c8:	4639      	mov	r1, r7
 80164ca:	f7ea f84d 	bl	8000568 <__aeabi_dmul>
 80164ce:	f7ea fafb 	bl	8000ac8 <__aeabi_d2iz>
 80164d2:	4680      	mov	r8, r0
 80164d4:	f7e9 ffde 	bl	8000494 <__aeabi_i2d>
 80164d8:	4b96      	ldr	r3, [pc, #600]	; (8016734 <__kernel_rem_pio2+0x694>)
 80164da:	2200      	movs	r2, #0
 80164dc:	f7ea f844 	bl	8000568 <__aeabi_dmul>
 80164e0:	460b      	mov	r3, r1
 80164e2:	4602      	mov	r2, r0
 80164e4:	4639      	mov	r1, r7
 80164e6:	4630      	mov	r0, r6
 80164e8:	f7e9 fe86 	bl	80001f8 <__aeabi_dsub>
 80164ec:	f7ea faec 	bl	8000ac8 <__aeabi_d2iz>
 80164f0:	1c65      	adds	r5, r4, #1
 80164f2:	ab0c      	add	r3, sp, #48	; 0x30
 80164f4:	f10a 0a18 	add.w	sl, sl, #24
 80164f8:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80164fc:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8016500:	e71f      	b.n	8016342 <__kernel_rem_pio2+0x2a2>
 8016502:	4630      	mov	r0, r6
 8016504:	4639      	mov	r1, r7
 8016506:	f7ea fadf 	bl	8000ac8 <__aeabi_d2iz>
 801650a:	ab0c      	add	r3, sp, #48	; 0x30
 801650c:	4625      	mov	r5, r4
 801650e:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8016512:	e716      	b.n	8016342 <__kernel_rem_pio2+0x2a2>
 8016514:	ab0c      	add	r3, sp, #48	; 0x30
 8016516:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801651a:	f7e9 ffbb 	bl	8000494 <__aeabi_i2d>
 801651e:	4632      	mov	r2, r6
 8016520:	463b      	mov	r3, r7
 8016522:	f7ea f821 	bl	8000568 <__aeabi_dmul>
 8016526:	4642      	mov	r2, r8
 8016528:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 801652c:	464b      	mov	r3, r9
 801652e:	4630      	mov	r0, r6
 8016530:	4639      	mov	r1, r7
 8016532:	f7ea f819 	bl	8000568 <__aeabi_dmul>
 8016536:	3c01      	subs	r4, #1
 8016538:	4606      	mov	r6, r0
 801653a:	460f      	mov	r7, r1
 801653c:	e713      	b.n	8016366 <__kernel_rem_pio2+0x2c6>
 801653e:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 8016542:	e8f6 0102 	ldrd	r0, r1, [r6], #8
 8016546:	f7ea f80f 	bl	8000568 <__aeabi_dmul>
 801654a:	4602      	mov	r2, r0
 801654c:	460b      	mov	r3, r1
 801654e:	4648      	mov	r0, r9
 8016550:	4651      	mov	r1, sl
 8016552:	f7e9 fe53 	bl	80001fc <__adddf3>
 8016556:	3701      	adds	r7, #1
 8016558:	4681      	mov	r9, r0
 801655a:	468a      	mov	sl, r1
 801655c:	9b00      	ldr	r3, [sp, #0]
 801655e:	429f      	cmp	r7, r3
 8016560:	dc02      	bgt.n	8016568 <__kernel_rem_pio2+0x4c8>
 8016562:	9b06      	ldr	r3, [sp, #24]
 8016564:	429f      	cmp	r7, r3
 8016566:	ddea      	ble.n	801653e <__kernel_rem_pio2+0x49e>
 8016568:	9a06      	ldr	r2, [sp, #24]
 801656a:	ab48      	add	r3, sp, #288	; 0x120
 801656c:	eb03 06c2 	add.w	r6, r3, r2, lsl #3
 8016570:	e9c6 9a00 	strd	r9, sl, [r6]
 8016574:	3c01      	subs	r4, #1
 8016576:	e6fa      	b.n	801636e <__kernel_rem_pio2+0x2ce>
 8016578:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 801657a:	2b02      	cmp	r3, #2
 801657c:	dc0b      	bgt.n	8016596 <__kernel_rem_pio2+0x4f6>
 801657e:	2b00      	cmp	r3, #0
 8016580:	dc39      	bgt.n	80165f6 <__kernel_rem_pio2+0x556>
 8016582:	d05d      	beq.n	8016640 <__kernel_rem_pio2+0x5a0>
 8016584:	9b02      	ldr	r3, [sp, #8]
 8016586:	f003 0007 	and.w	r0, r3, #7
 801658a:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 801658e:	ecbd 8b02 	vpop	{d8}
 8016592:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016596:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8016598:	2b03      	cmp	r3, #3
 801659a:	d1f3      	bne.n	8016584 <__kernel_rem_pio2+0x4e4>
 801659c:	9b05      	ldr	r3, [sp, #20]
 801659e:	9500      	str	r5, [sp, #0]
 80165a0:	f503 7318 	add.w	r3, r3, #608	; 0x260
 80165a4:	eb0d 0403 	add.w	r4, sp, r3
 80165a8:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
 80165ac:	46a2      	mov	sl, r4
 80165ae:	9b00      	ldr	r3, [sp, #0]
 80165b0:	2b00      	cmp	r3, #0
 80165b2:	f1aa 0a08 	sub.w	sl, sl, #8
 80165b6:	dc69      	bgt.n	801668c <__kernel_rem_pio2+0x5ec>
 80165b8:	46aa      	mov	sl, r5
 80165ba:	f1ba 0f01 	cmp.w	sl, #1
 80165be:	f1a4 0408 	sub.w	r4, r4, #8
 80165c2:	f300 8083 	bgt.w	80166cc <__kernel_rem_pio2+0x62c>
 80165c6:	9c05      	ldr	r4, [sp, #20]
 80165c8:	ab48      	add	r3, sp, #288	; 0x120
 80165ca:	441c      	add	r4, r3
 80165cc:	2000      	movs	r0, #0
 80165ce:	2100      	movs	r1, #0
 80165d0:	2d01      	cmp	r5, #1
 80165d2:	f300 809a 	bgt.w	801670a <__kernel_rem_pio2+0x66a>
 80165d6:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	; 0x120
 80165da:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 80165de:	f1bb 0f00 	cmp.w	fp, #0
 80165e2:	f040 8098 	bne.w	8016716 <__kernel_rem_pio2+0x676>
 80165e6:	9b04      	ldr	r3, [sp, #16]
 80165e8:	e9c3 7800 	strd	r7, r8, [r3]
 80165ec:	e9c3 5602 	strd	r5, r6, [r3, #8]
 80165f0:	e9c3 0104 	strd	r0, r1, [r3, #16]
 80165f4:	e7c6      	b.n	8016584 <__kernel_rem_pio2+0x4e4>
 80165f6:	9e05      	ldr	r6, [sp, #20]
 80165f8:	ab48      	add	r3, sp, #288	; 0x120
 80165fa:	441e      	add	r6, r3
 80165fc:	462c      	mov	r4, r5
 80165fe:	2000      	movs	r0, #0
 8016600:	2100      	movs	r1, #0
 8016602:	2c00      	cmp	r4, #0
 8016604:	da33      	bge.n	801666e <__kernel_rem_pio2+0x5ce>
 8016606:	f1bb 0f00 	cmp.w	fp, #0
 801660a:	d036      	beq.n	801667a <__kernel_rem_pio2+0x5da>
 801660c:	4602      	mov	r2, r0
 801660e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8016612:	9c04      	ldr	r4, [sp, #16]
 8016614:	e9c4 2300 	strd	r2, r3, [r4]
 8016618:	4602      	mov	r2, r0
 801661a:	460b      	mov	r3, r1
 801661c:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 8016620:	f7e9 fdea 	bl	80001f8 <__aeabi_dsub>
 8016624:	ae4a      	add	r6, sp, #296	; 0x128
 8016626:	2401      	movs	r4, #1
 8016628:	42a5      	cmp	r5, r4
 801662a:	da29      	bge.n	8016680 <__kernel_rem_pio2+0x5e0>
 801662c:	f1bb 0f00 	cmp.w	fp, #0
 8016630:	d002      	beq.n	8016638 <__kernel_rem_pio2+0x598>
 8016632:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8016636:	4619      	mov	r1, r3
 8016638:	9b04      	ldr	r3, [sp, #16]
 801663a:	e9c3 0102 	strd	r0, r1, [r3, #8]
 801663e:	e7a1      	b.n	8016584 <__kernel_rem_pio2+0x4e4>
 8016640:	9c05      	ldr	r4, [sp, #20]
 8016642:	ab48      	add	r3, sp, #288	; 0x120
 8016644:	441c      	add	r4, r3
 8016646:	2000      	movs	r0, #0
 8016648:	2100      	movs	r1, #0
 801664a:	2d00      	cmp	r5, #0
 801664c:	da09      	bge.n	8016662 <__kernel_rem_pio2+0x5c2>
 801664e:	f1bb 0f00 	cmp.w	fp, #0
 8016652:	d002      	beq.n	801665a <__kernel_rem_pio2+0x5ba>
 8016654:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8016658:	4619      	mov	r1, r3
 801665a:	9b04      	ldr	r3, [sp, #16]
 801665c:	e9c3 0100 	strd	r0, r1, [r3]
 8016660:	e790      	b.n	8016584 <__kernel_rem_pio2+0x4e4>
 8016662:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8016666:	f7e9 fdc9 	bl	80001fc <__adddf3>
 801666a:	3d01      	subs	r5, #1
 801666c:	e7ed      	b.n	801664a <__kernel_rem_pio2+0x5aa>
 801666e:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 8016672:	f7e9 fdc3 	bl	80001fc <__adddf3>
 8016676:	3c01      	subs	r4, #1
 8016678:	e7c3      	b.n	8016602 <__kernel_rem_pio2+0x562>
 801667a:	4602      	mov	r2, r0
 801667c:	460b      	mov	r3, r1
 801667e:	e7c8      	b.n	8016612 <__kernel_rem_pio2+0x572>
 8016680:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8016684:	f7e9 fdba 	bl	80001fc <__adddf3>
 8016688:	3401      	adds	r4, #1
 801668a:	e7cd      	b.n	8016628 <__kernel_rem_pio2+0x588>
 801668c:	e9da 8900 	ldrd	r8, r9, [sl]
 8016690:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 8016694:	9b00      	ldr	r3, [sp, #0]
 8016696:	3b01      	subs	r3, #1
 8016698:	9300      	str	r3, [sp, #0]
 801669a:	4632      	mov	r2, r6
 801669c:	463b      	mov	r3, r7
 801669e:	4640      	mov	r0, r8
 80166a0:	4649      	mov	r1, r9
 80166a2:	f7e9 fdab 	bl	80001fc <__adddf3>
 80166a6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80166aa:	4602      	mov	r2, r0
 80166ac:	460b      	mov	r3, r1
 80166ae:	4640      	mov	r0, r8
 80166b0:	4649      	mov	r1, r9
 80166b2:	f7e9 fda1 	bl	80001f8 <__aeabi_dsub>
 80166b6:	4632      	mov	r2, r6
 80166b8:	463b      	mov	r3, r7
 80166ba:	f7e9 fd9f 	bl	80001fc <__adddf3>
 80166be:	ed9d 7b06 	vldr	d7, [sp, #24]
 80166c2:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80166c6:	ed8a 7b00 	vstr	d7, [sl]
 80166ca:	e770      	b.n	80165ae <__kernel_rem_pio2+0x50e>
 80166cc:	e9d4 8900 	ldrd	r8, r9, [r4]
 80166d0:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 80166d4:	4640      	mov	r0, r8
 80166d6:	4632      	mov	r2, r6
 80166d8:	463b      	mov	r3, r7
 80166da:	4649      	mov	r1, r9
 80166dc:	f7e9 fd8e 	bl	80001fc <__adddf3>
 80166e0:	e9cd 0100 	strd	r0, r1, [sp]
 80166e4:	4602      	mov	r2, r0
 80166e6:	460b      	mov	r3, r1
 80166e8:	4640      	mov	r0, r8
 80166ea:	4649      	mov	r1, r9
 80166ec:	f7e9 fd84 	bl	80001f8 <__aeabi_dsub>
 80166f0:	4632      	mov	r2, r6
 80166f2:	463b      	mov	r3, r7
 80166f4:	f7e9 fd82 	bl	80001fc <__adddf3>
 80166f8:	ed9d 7b00 	vldr	d7, [sp]
 80166fc:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8016700:	ed84 7b00 	vstr	d7, [r4]
 8016704:	f10a 3aff 	add.w	sl, sl, #4294967295
 8016708:	e757      	b.n	80165ba <__kernel_rem_pio2+0x51a>
 801670a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 801670e:	f7e9 fd75 	bl	80001fc <__adddf3>
 8016712:	3d01      	subs	r5, #1
 8016714:	e75c      	b.n	80165d0 <__kernel_rem_pio2+0x530>
 8016716:	9b04      	ldr	r3, [sp, #16]
 8016718:	9a04      	ldr	r2, [sp, #16]
 801671a:	601f      	str	r7, [r3, #0]
 801671c:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 8016720:	605c      	str	r4, [r3, #4]
 8016722:	609d      	str	r5, [r3, #8]
 8016724:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8016728:	60d3      	str	r3, [r2, #12]
 801672a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801672e:	6110      	str	r0, [r2, #16]
 8016730:	6153      	str	r3, [r2, #20]
 8016732:	e727      	b.n	8016584 <__kernel_rem_pio2+0x4e4>
 8016734:	41700000 	.word	0x41700000
 8016738:	3e700000 	.word	0x3e700000
 801673c:	00000000 	.word	0x00000000

08016740 <scalbn>:
 8016740:	b570      	push	{r4, r5, r6, lr}
 8016742:	ec55 4b10 	vmov	r4, r5, d0
 8016746:	f3c5 510a 	ubfx	r1, r5, #20, #11
 801674a:	4606      	mov	r6, r0
 801674c:	462b      	mov	r3, r5
 801674e:	b999      	cbnz	r1, 8016778 <scalbn+0x38>
 8016750:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8016754:	4323      	orrs	r3, r4
 8016756:	d03f      	beq.n	80167d8 <scalbn+0x98>
 8016758:	4b35      	ldr	r3, [pc, #212]	; (8016830 <scalbn+0xf0>)
 801675a:	4629      	mov	r1, r5
 801675c:	ee10 0a10 	vmov	r0, s0
 8016760:	2200      	movs	r2, #0
 8016762:	f7e9 ff01 	bl	8000568 <__aeabi_dmul>
 8016766:	4b33      	ldr	r3, [pc, #204]	; (8016834 <scalbn+0xf4>)
 8016768:	429e      	cmp	r6, r3
 801676a:	4604      	mov	r4, r0
 801676c:	460d      	mov	r5, r1
 801676e:	da10      	bge.n	8016792 <scalbn+0x52>
 8016770:	a327      	add	r3, pc, #156	; (adr r3, 8016810 <scalbn+0xd0>)
 8016772:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016776:	e01f      	b.n	80167b8 <scalbn+0x78>
 8016778:	f240 72ff 	movw	r2, #2047	; 0x7ff
 801677c:	4291      	cmp	r1, r2
 801677e:	d10c      	bne.n	801679a <scalbn+0x5a>
 8016780:	ee10 2a10 	vmov	r2, s0
 8016784:	4620      	mov	r0, r4
 8016786:	4629      	mov	r1, r5
 8016788:	f7e9 fd38 	bl	80001fc <__adddf3>
 801678c:	4604      	mov	r4, r0
 801678e:	460d      	mov	r5, r1
 8016790:	e022      	b.n	80167d8 <scalbn+0x98>
 8016792:	460b      	mov	r3, r1
 8016794:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8016798:	3936      	subs	r1, #54	; 0x36
 801679a:	f24c 3250 	movw	r2, #50000	; 0xc350
 801679e:	4296      	cmp	r6, r2
 80167a0:	dd0d      	ble.n	80167be <scalbn+0x7e>
 80167a2:	2d00      	cmp	r5, #0
 80167a4:	a11c      	add	r1, pc, #112	; (adr r1, 8016818 <scalbn+0xd8>)
 80167a6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80167aa:	da02      	bge.n	80167b2 <scalbn+0x72>
 80167ac:	a11c      	add	r1, pc, #112	; (adr r1, 8016820 <scalbn+0xe0>)
 80167ae:	e9d1 0100 	ldrd	r0, r1, [r1]
 80167b2:	a319      	add	r3, pc, #100	; (adr r3, 8016818 <scalbn+0xd8>)
 80167b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80167b8:	f7e9 fed6 	bl	8000568 <__aeabi_dmul>
 80167bc:	e7e6      	b.n	801678c <scalbn+0x4c>
 80167be:	1872      	adds	r2, r6, r1
 80167c0:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80167c4:	428a      	cmp	r2, r1
 80167c6:	dcec      	bgt.n	80167a2 <scalbn+0x62>
 80167c8:	2a00      	cmp	r2, #0
 80167ca:	dd08      	ble.n	80167de <scalbn+0x9e>
 80167cc:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80167d0:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80167d4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80167d8:	ec45 4b10 	vmov	d0, r4, r5
 80167dc:	bd70      	pop	{r4, r5, r6, pc}
 80167de:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80167e2:	da08      	bge.n	80167f6 <scalbn+0xb6>
 80167e4:	2d00      	cmp	r5, #0
 80167e6:	a10a      	add	r1, pc, #40	; (adr r1, 8016810 <scalbn+0xd0>)
 80167e8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80167ec:	dac0      	bge.n	8016770 <scalbn+0x30>
 80167ee:	a10e      	add	r1, pc, #56	; (adr r1, 8016828 <scalbn+0xe8>)
 80167f0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80167f4:	e7bc      	b.n	8016770 <scalbn+0x30>
 80167f6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80167fa:	3236      	adds	r2, #54	; 0x36
 80167fc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8016800:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8016804:	4620      	mov	r0, r4
 8016806:	4b0c      	ldr	r3, [pc, #48]	; (8016838 <scalbn+0xf8>)
 8016808:	2200      	movs	r2, #0
 801680a:	e7d5      	b.n	80167b8 <scalbn+0x78>
 801680c:	f3af 8000 	nop.w
 8016810:	c2f8f359 	.word	0xc2f8f359
 8016814:	01a56e1f 	.word	0x01a56e1f
 8016818:	8800759c 	.word	0x8800759c
 801681c:	7e37e43c 	.word	0x7e37e43c
 8016820:	8800759c 	.word	0x8800759c
 8016824:	fe37e43c 	.word	0xfe37e43c
 8016828:	c2f8f359 	.word	0xc2f8f359
 801682c:	81a56e1f 	.word	0x81a56e1f
 8016830:	43500000 	.word	0x43500000
 8016834:	ffff3cb0 	.word	0xffff3cb0
 8016838:	3c900000 	.word	0x3c900000
 801683c:	00000000 	.word	0x00000000

08016840 <floor>:
 8016840:	ec51 0b10 	vmov	r0, r1, d0
 8016844:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8016848:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801684c:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
 8016850:	2e13      	cmp	r6, #19
 8016852:	ee10 5a10 	vmov	r5, s0
 8016856:	ee10 8a10 	vmov	r8, s0
 801685a:	460c      	mov	r4, r1
 801685c:	dc31      	bgt.n	80168c2 <floor+0x82>
 801685e:	2e00      	cmp	r6, #0
 8016860:	da14      	bge.n	801688c <floor+0x4c>
 8016862:	a333      	add	r3, pc, #204	; (adr r3, 8016930 <floor+0xf0>)
 8016864:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016868:	f7e9 fcc8 	bl	80001fc <__adddf3>
 801686c:	2200      	movs	r2, #0
 801686e:	2300      	movs	r3, #0
 8016870:	f7ea f90a 	bl	8000a88 <__aeabi_dcmpgt>
 8016874:	b138      	cbz	r0, 8016886 <floor+0x46>
 8016876:	2c00      	cmp	r4, #0
 8016878:	da53      	bge.n	8016922 <floor+0xe2>
 801687a:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 801687e:	4325      	orrs	r5, r4
 8016880:	d052      	beq.n	8016928 <floor+0xe8>
 8016882:	4c2d      	ldr	r4, [pc, #180]	; (8016938 <floor+0xf8>)
 8016884:	2500      	movs	r5, #0
 8016886:	4621      	mov	r1, r4
 8016888:	4628      	mov	r0, r5
 801688a:	e024      	b.n	80168d6 <floor+0x96>
 801688c:	4f2b      	ldr	r7, [pc, #172]	; (801693c <floor+0xfc>)
 801688e:	4137      	asrs	r7, r6
 8016890:	ea01 0307 	and.w	r3, r1, r7
 8016894:	4303      	orrs	r3, r0
 8016896:	d01e      	beq.n	80168d6 <floor+0x96>
 8016898:	a325      	add	r3, pc, #148	; (adr r3, 8016930 <floor+0xf0>)
 801689a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801689e:	f7e9 fcad 	bl	80001fc <__adddf3>
 80168a2:	2200      	movs	r2, #0
 80168a4:	2300      	movs	r3, #0
 80168a6:	f7ea f8ef 	bl	8000a88 <__aeabi_dcmpgt>
 80168aa:	2800      	cmp	r0, #0
 80168ac:	d0eb      	beq.n	8016886 <floor+0x46>
 80168ae:	2c00      	cmp	r4, #0
 80168b0:	bfbe      	ittt	lt
 80168b2:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 80168b6:	4133      	asrlt	r3, r6
 80168b8:	18e4      	addlt	r4, r4, r3
 80168ba:	ea24 0407 	bic.w	r4, r4, r7
 80168be:	2500      	movs	r5, #0
 80168c0:	e7e1      	b.n	8016886 <floor+0x46>
 80168c2:	2e33      	cmp	r6, #51	; 0x33
 80168c4:	dd0b      	ble.n	80168de <floor+0x9e>
 80168c6:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80168ca:	d104      	bne.n	80168d6 <floor+0x96>
 80168cc:	ee10 2a10 	vmov	r2, s0
 80168d0:	460b      	mov	r3, r1
 80168d2:	f7e9 fc93 	bl	80001fc <__adddf3>
 80168d6:	ec41 0b10 	vmov	d0, r0, r1
 80168da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80168de:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
 80168e2:	f04f 37ff 	mov.w	r7, #4294967295
 80168e6:	40df      	lsrs	r7, r3
 80168e8:	4238      	tst	r0, r7
 80168ea:	d0f4      	beq.n	80168d6 <floor+0x96>
 80168ec:	a310      	add	r3, pc, #64	; (adr r3, 8016930 <floor+0xf0>)
 80168ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80168f2:	f7e9 fc83 	bl	80001fc <__adddf3>
 80168f6:	2200      	movs	r2, #0
 80168f8:	2300      	movs	r3, #0
 80168fa:	f7ea f8c5 	bl	8000a88 <__aeabi_dcmpgt>
 80168fe:	2800      	cmp	r0, #0
 8016900:	d0c1      	beq.n	8016886 <floor+0x46>
 8016902:	2c00      	cmp	r4, #0
 8016904:	da0a      	bge.n	801691c <floor+0xdc>
 8016906:	2e14      	cmp	r6, #20
 8016908:	d101      	bne.n	801690e <floor+0xce>
 801690a:	3401      	adds	r4, #1
 801690c:	e006      	b.n	801691c <floor+0xdc>
 801690e:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8016912:	2301      	movs	r3, #1
 8016914:	40b3      	lsls	r3, r6
 8016916:	441d      	add	r5, r3
 8016918:	45a8      	cmp	r8, r5
 801691a:	d8f6      	bhi.n	801690a <floor+0xca>
 801691c:	ea25 0507 	bic.w	r5, r5, r7
 8016920:	e7b1      	b.n	8016886 <floor+0x46>
 8016922:	2500      	movs	r5, #0
 8016924:	462c      	mov	r4, r5
 8016926:	e7ae      	b.n	8016886 <floor+0x46>
 8016928:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 801692c:	e7ab      	b.n	8016886 <floor+0x46>
 801692e:	bf00      	nop
 8016930:	8800759c 	.word	0x8800759c
 8016934:	7e37e43c 	.word	0x7e37e43c
 8016938:	bff00000 	.word	0xbff00000
 801693c:	000fffff 	.word	0x000fffff

08016940 <__errno>:
 8016940:	4b01      	ldr	r3, [pc, #4]	; (8016948 <__errno+0x8>)
 8016942:	6818      	ldr	r0, [r3, #0]
 8016944:	4770      	bx	lr
 8016946:	bf00      	nop
 8016948:	20000200 	.word	0x20000200

0801694c <_init>:
 801694c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801694e:	bf00      	nop
 8016950:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016952:	bc08      	pop	{r3}
 8016954:	469e      	mov	lr, r3
 8016956:	4770      	bx	lr

08016958 <_fini>:
 8016958:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801695a:	bf00      	nop
 801695c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801695e:	bc08      	pop	{r3}
 8016960:	469e      	mov	lr, r3
 8016962:	4770      	bx	lr
